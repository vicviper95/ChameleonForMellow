using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace Chameleon.Models
{
    public partial class KOALAContext : DbContext
    {
        public KOALAContext()
        {
        }

        public KOALAContext(DbContextOptions<KOALAContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AccInvInOutD> AccInvInOutDs { get; set; }
        public virtual DbSet<AccInvInOutT> AccInvInOutTs { get; set; }
        public virtual DbSet<AccInvOutCoG> AccInvOutCoGs { get; set; }
        public virtual DbSet<AcctHqCogsRpt> AcctHqCogsRpts { get; set; }
        public virtual DbSet<AcctHqSaleRpt> AcctHqSaleRpts { get; set; }
        public virtual DbSet<ActualWmtPrice> ActualWmtPrices { get; set; }
        public virtual DbSet<Ad20222h> Ad20222hs { get; set; }
        public virtual DbSet<AdAfcid> AdAfcids { get; set; }
        public virtual DbSet<AdAmzCase> AdAmzCases { get; set; }
        public virtual DbSet<AdArn> AdArns { get; set; }
        public virtual DbSet<AdArnChange> AdArnChanges { get; set; }
        public virtual DbSet<AdBol> AdBols { get; set; }
        public virtual DbSet<AdBolBatch> AdBolBatches { get; set; }
        public virtual DbSet<AdBolChange> AdBolChanges { get; set; }
        public virtual DbSet<AdBolPickWh> AdBolPickWhs { get; set; }
        public virtual DbSet<AdBolRule> AdBolRules { get; set; }
        public virtual DbSet<AdInvValuation> AdInvValuations { get; set; }
        public virtual DbSet<AdInvValuationGl> AdInvValuationGls { get; set; }
        public virtual DbSet<AdOrder> AdOrders { get; set; }
        public virtual DbSet<AdOrderDetail> AdOrderDetails { get; set; }
        public virtual DbSet<AdPallet> AdPallets { get; set; }
        public virtual DbSet<AdPalletOnBol> AdPalletOnBols { get; set; }
        public virtual DbSet<AdScac> AdScacs { get; set; }
        public virtual DbSet<AdSscc> AdSsccs { get; set; }
        public virtual DbSet<AdVendorCode> AdVendorCodes { get; set; }
        public virtual DbSet<AdtemOnPallet> AdtemOnPallets { get; set; }
        public virtual DbSet<AmazonAdRepDetail> AmazonAdRepDetails { get; set; }
        public virtual DbSet<AmazonAdRepDetailHistory> AmazonAdRepDetailHistories { get; set; }
        public virtual DbSet<AmazonAdReport> AmazonAdReports { get; set; }
        public virtual DbSet<AmazonAsin> AmazonAsins { get; set; }
        public virtual DbSet<AmazonBsr> AmazonBsrs { get; set; }
        public virtual DbSet<AmazonCollection> AmazonCollections { get; set; }
        public virtual DbSet<AmzAdsPortfolioState> AmzAdsPortfolioStates { get; set; }
        public virtual DbSet<AmzAdsProductType> AmzAdsProductTypes { get; set; }
        public virtual DbSet<AmzAdsRefreshToken> AmzAdsRefreshTokens { get; set; }
        public virtual DbSet<AmzAdsReportType> AmzAdsReportTypes { get; set; }
        public virtual DbSet<AmzAdsRptCreateHistory> AmzAdsRptCreateHistories { get; set; }
        public virtual DbSet<AmzAdsSponsoredType> AmzAdsSponsoredTypes { get; set; }
        public virtual DbSet<AmzAdsTimeFrameType> AmzAdsTimeFrameTypes { get; set; }
        public virtual DbSet<AmzBolStatus> AmzBolStatuses { get; set; }
        public virtual DbSet<AmzCbStatus> AmzCbStatuses { get; set; }
        public virtual DbSet<AmzCbSubType> AmzCbSubTypes { get; set; }
        public virtual DbSet<AmzCbType> AmzCbTypes { get; set; }
        public virtual DbSet<AmzChargeBack> AmzChargeBacks { get; set; }
        public virtual DbSet<AmzDistributor> AmzDistributors { get; set; }
        public virtual DbSet<AmzMfgCode> AmzMfgCodes { get; set; }
        public virtual DbSet<AmzObFcstD> AmzObFcstDs { get; set; }
        public virtual DbSet<AmzObForecasting> AmzObForecastings { get; set; }
        public virtual DbSet<AmzObInv> AmzObInvs { get; set; }
        public virtual DbSet<AmzObInvManufacturing> AmzObInvManufacturings { get; set; }
        public virtual DbSet<AmzObNetPpm> AmzObNetPpms { get; set; }
        public virtual DbSet<AmzObRealTime> AmzObRealTimes { get; set; }
        public virtual DbSet<AmzObRealTimeHourly> AmzObRealTimeHourlies { get; set; }
        public virtual DbSet<AmzObRptT> AmzObRptTs { get; set; }
        public virtual DbSet<AmzObSale> AmzObSales { get; set; }
        public virtual DbSet<AmzObSalesManuFacturing> AmzObSalesManuFacturings { get; set; }
        public virtual DbSet<AmzObTracffic> AmzObTracffics { get; set; }
        public virtual DbSet<AmzObTraffic> AmzObTraffics { get; set; }
        public virtual DbSet<AmzObmthlyRptManufInvD> AmzObmthlyRptManufInvDs { get; set; }
        public virtual DbSet<AmzObmthlyRptManufSalesD> AmzObmthlyRptManufSalesDs { get; set; }
        public virtual DbSet<AmzObmthlyRptNetppmD> AmzObmthlyRptNetppmDs { get; set; }
        public virtual DbSet<AmzObrptManufT> AmzObrptManufTs { get; set; }
        public virtual DbSet<AmzOrderType> AmzOrderTypes { get; set; }
        public virtual DbSet<AmzPortfolio> AmzPortfolios { get; set; }
        public virtual DbSet<AmzPortfolioDetail> AmzPortfolioDetails { get; set; }
        public virtual DbSet<AmzProductCampHist> AmzProductCampHists { get; set; }
        public virtual DbSet<AmzProductCampaign> AmzProductCampaigns { get; set; }
        public virtual DbSet<AmzProductEligibility> AmzProductEligibilities { get; set; }
        public virtual DbSet<AmzProductEligibilityDetail> AmzProductEligibilityDetails { get; set; }
        public virtual DbSet<AmzProgram> AmzPrograms { get; set; }
        public virtual DbSet<AmzdirectPo> AmzdirectPos { get; set; }
        public virtual DbSet<AmzdroutstandPo> AmzdroutstandPos { get; set; }
        public virtual DbSet<Announcement> Announcements { get; set; }
        public virtual DbSet<ApiauthorityLevel> ApiauthorityLevels { get; set; }
        public virtual DbSet<ApisSoprocess> ApisSoprocesses { get; set; }
        public virtual DbSet<ApisoStatus> ApisoStatuses { get; set; }
        public virtual DbSet<AvcWkRptD> AvcWkRptDs { get; set; }
        public virtual DbSet<AvcWkRptP> AvcWkRptPs { get; set; }
        public virtual DbSet<AvcWkRptT> AvcWkRptTs { get; set; }
        public virtual DbSet<BeginningInventory> BeginningInventories { get; set; }
        public virtual DbSet<BillActivity> BillActivities { get; set; }
        public virtual DbSet<BillAllocationByVendor> BillAllocationByVendors { get; set; }
        public virtual DbSet<BillCategory> BillCategories { get; set; }
        public virtual DbSet<BillCreditD> BillCreditDs { get; set; }
        public virtual DbSet<BillCreditT> BillCreditTs { get; set; }
        public virtual DbSet<BillOfMaterial> BillOfMaterials { get; set; }
        public virtual DbSet<BillToCustomer> BillToCustomers { get; set; }
        public virtual DbSet<BinCntList> BinCntLists { get; set; }
        public virtual DbSet<BinInvtAdj> BinInvtAdjs { get; set; }
        public virtual DbSet<BinInvtCur> BinInvtCurs { get; set; }
        public virtual DbSet<BinItemScan> BinItemScans { get; set; }
        public virtual DbSet<BolEntry> BolEntries { get; set; }
        public virtual DbSet<BolFeeD> BolFeeDs { get; set; }
        public virtual DbSet<BolFoot> BolFeeTs { get; set; }
        public virtual DbSet<BolPickTask> BolPickTasks { get; set; }
        public virtual DbSet<BolSailDay> BolSailDays { get; set; }
        public virtual DbSet<Bom> Boms { get; set; }
        public virtual DbSet<Bookmark> Bookmarks { get; set; }
        public virtual DbSet<BpmBegInventory> BpmBegInventories { get; set; }
        public virtual DbSet<BpmBizRule> BpmBizRules { get; set; }
        public virtual DbSet<BpmBol> BpmBols { get; set; }
        public virtual DbSet<BpmEdiInterchange> BpmEdiInterchanges { get; set; }
        public virtual DbSet<BpmItem> BpmItems { get; set; }
        public virtual DbSet<BpmLocation> BpmLocations { get; set; }
        public virtual DbSet<BpmSkuStatus> BpmSkuStatuses { get; set; }
        public virtual DbSet<BrandCampaign> BrandCampaigns { get; set; }
        public virtual DbSet<BudgetByLoc> BudgetByLocs { get; set; }
        public virtual DbSet<BudgetCust> BudgetCusts { get; set; }
        public virtual DbSet<BudgetDetail> BudgetDetails { get; set; }
        public virtual DbSet<BudgetLoc> BudgetLocs { get; set; }
        public virtual DbSet<BudgetMk> BudgetMks { get; set; }
        public virtual DbSet<BudgetSum> BudgetSums { get; set; }
        public virtual DbSet<BudgetType> BudgetTypes { get; set; }
        public virtual DbSet<CampStateType> CampStateTypes { get; set; }
        public virtual DbSet<Cancel> Cancels { get; set; }
        public virtual DbSet<CancelDetail> CancelDetails { get; set; }
        public virtual DbSet<CarrierAccount> CarrierAccounts { get; set; }
        public virtual DbSet<CarrierCharge> CarrierCharges { get; set; }
        public virtual DbSet<CarrierMethodCode> CarrierMethodCodes { get; set; }
        public virtual DbSet<CastleCancel> CastleCancels { get; set; }
        public virtual DbSet<CastleGateInventory> CastleGateInventories { get; set; }
        public virtual DbSet<CastlegateInvoice> CastlegateInvoices { get; set; }
        public virtual DbSet<CatBudget> CatBudgets { get; set; }
        public virtual DbSet<CatBudgetWk> CatBudgetWks { get; set; }
        public virtual DbSet<CatGlobalZ> CatGlobalZs { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Category1> Category1s { get; set; }
        public virtual DbSet<Category2> Category2s { get; set; }
        public virtual DbSet<Category3> Category3s { get; set; }
        public virtual DbSet<Category4> Category4s { get; set; }
        public virtual DbSet<Category5> Category5s { get; set; }
        public virtual DbSet<Category6> Category6s { get; set; }
        public virtual DbSet<CategoryZinu> CategoryZinus { get; set; }
        public virtual DbSet<ChanExclusive> ChanExclusives { get; set; }
        public virtual DbSet<ChangeLog> ChangeLogs { get; set; }
        public virtual DbSet<CmD> CmDs { get; set; }
        public virtual DbSet<CmOrigin> CmOrigins { get; set; }
        public virtual DbSet<CmRemit> CmRemits { get; set; }
        public virtual DbSet<CmStatus> CmStatuses { get; set; }
        public virtual DbSet<CmT> CmTs { get; set; }
        public virtual DbSet<CommittedSo> CommittedSos { get; set; }
        public virtual DbSet<CompetingItem> CompetingItems { get; set; }
        public virtual DbSet<ConsolidationInventoryD> ConsolidationInventoryDs { get; set; }
        public virtual DbSet<ConsolidationInventoryT> ConsolidationInventoryTs { get; set; }
        public virtual DbSet<ContFeeD> ContFeeDs { get; set; }
        public virtual DbSet<ContFoot> ContFeeTs { get; set; }
        public virtual DbSet<ContStatus> ContStatuses { get; set; }
        public virtual DbSet<Container> Containers { get; set; }
        public virtual DbSet<CostAllocationMethod> CostAllocationMethods { get; set; }
        public virtual DbSet<CountType> CountTypes { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<CrdD> CrdDs { get; set; }
        public virtual DbSet<CrdPay> CrdPays { get; set; }
        public virtual DbSet<CrdT> CrdTs { get; set; }
        public virtual DbSet<CryptKey> CryptKeys { get; set; }
        public virtual DbSet<CsClaimPayD> CsClaimPayDs { get; set; }
        public virtual DbSet<CsClaimPayT> CsClaimPayTs { get; set; }
        public virtual DbSet<CsFeeClaimD> CsFeeClaimDs { get; set; }
        public virtual DbSet<CsFeeClaimT> CsFeeClaimTs { get; set; }
        public virtual DbSet<CsFeeInvD> CsFeeInvDs { get; set; }
        public virtual DbSet<CsFeeInvT> CsFeeInvTs { get; set; }
        public virtual DbSet<CsFeeType> CsFeeTypes { get; set; }
        public virtual DbSet<CsInvtFeedD> CsInvtFeedDs { get; set; }
        public virtual DbSet<CsInvtFeedT> CsInvtFeedTs { get; set; }
        public virtual DbSet<CustAddr> CustAddrs { get; set; }
        public virtual DbSet<CustBillAddr> CustBillAddrs { get; set; }
        public virtual DbSet<CustLocCode> CustLocCodes { get; set; }
        public virtual DbSet<CustRetuAddr> CustRetuAddrs { get; set; }
        public virtual DbSet<Custom> Customs { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerInventoryAllocation> CustomerInventoryAllocations { get; set; }
        public virtual DbSet<CustomerPo> CustomerPos { get; set; }
        public virtual DbSet<CustomerPodetail> CustomerPodetails { get; set; }
        public virtual DbSet<CycleCountMsl> CycleCountMsls { get; set; }
        public virtual DbSet<CycleCountZhw> CycleCountZhws { get; set; }
        public virtual DbSet<DemandForecast> DemandForecasts { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<DeptManager> DeptManagers { get; set; }
        public virtual DbSet<DimDate> DimDates { get; set; }
        public virtual DbSet<DrayageFeeD> DrayageFeeDs { get; set; }
        public virtual DbSet<DrayageFoot> DrayageFeeTs { get; set; }
        public virtual DbSet<EBayNotification> EBayNotifications { get; set; }
        public virtual DbSet<EbayRefreshToken> EbayRefreshTokens { get; set; }
        public virtual DbSet<EdiAutoMk> EdiAutoMks { get; set; }
        public virtual DbSet<EdiAutoTpl> EdiAutoTpls { get; set; }
        public virtual DbSet<EdiCarrier> EdiCarriers { get; set; }
        public virtual DbSet<EdiEmailLog> EdiEmailLogs { get; set; }
        public virtual DbSet<EdiFgc> EdiFgcs { get; set; }
        public virtual DbSet<EdiIcM2p> EdiIcM2ps { get; set; }
        public virtual DbSet<EdiIcP2m> EdiIcP2ms { get; set; }
        public virtual DbSet<EdiT> EdiTs { get; set; }
        public virtual DbSet<EdiWalmartCarrierInfo> EdiWalmartCarrierInfos { get; set; }
        public virtual DbSet<Edicertificate> Edicertificates { get; set; }
        public virtual DbSet<EdimyInfo> EdimyInfos { get; set; }
        public virtual DbSet<Edipartner> Edipartners { get; set; }
        public virtual DbSet<EmpChameleonConfig> EmpChameleonConfigs { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeStatus> EmployeeStatuses { get; set; }
        public virtual DbSet<EmployeeType> EmployeeTypes { get; set; }
        public virtual DbSet<EndCustomer> EndCustomers { get; set; }
        public virtual DbSet<ErrorCategory> ErrorCategories { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<EventLogPo> EventLogPos { get; set; }
        public virtual DbSet<ExwCost> ExwCosts { get; set; }
        public virtual DbSet<FcIbLocation> FcIbLocations { get; set; }
        public virtual DbSet<FcObChannel> FcObChannels { get; set; }
        public virtual DbSet<FcsWkHdatum> FcsWkHdata { get; set; }
        public virtual DbSet<FcstAccount> FcstAccounts { get; set; }
        public virtual DbSet<FcstAvgSo> FcstAvgSos { get; set; }
        public virtual DbSet<FcstAvgSqa> FcstAvgSqas { get; set; }
        public virtual DbSet<FcstBpmSo> FcstBpmSos { get; set; }
        public virtual DbSet<FcstChannel> FcstChannels { get; set; }
        public virtual DbSet<FcstFactor> FcstFactors { get; set; }
        public virtual DbSet<FcstFtApplied> FcstFtApplieds { get; set; }
        public virtual DbSet<FcstHistory> FcstHistories { get; set; }
        public virtual DbSet<FcstLocation> FcstLocations { get; set; }
        public virtual DbSet<FcstMarket> FcstMarkets { get; set; }
        public virtual DbSet<FcstNetwork> FcstNetworks { get; set; }
        public virtual DbSet<FcstWkD> FcstWkDs { get; set; }
        public virtual DbSet<FcstWkDatum> FcstWkData { get; set; }
        public virtual DbSet<FcstWkHt> FcstWkHts { get; set; }
        public virtual DbSet<FcstWkInvt> FcstWkInvts { get; set; }
        public virtual DbSet<FcstWkPo> FcstWkPos { get; set; }
        public virtual DbSet<FcstWkSo> FcstWkSos { get; set; }
        public virtual DbSet<FcstWkT> FcstWkTs { get; set; }
        public virtual DbSet<FedexInvoice> FedexInvoices { get; set; }
        public virtual DbSet<FedexInvoiceDetail> FedexInvoiceDetails { get; set; }
        public virtual DbSet<FobCostTrack> FobCostTracks { get; set; }
        public virtual DbSet<FobCountry> FobCountries { get; set; }
        public virtual DbSet<FobIncoTerm> FobIncoTerms { get; set; }
        public virtual DbSet<ForecastItemPo> ForecastItemPos { get; set; }
        public virtual DbSet<ForecastRepItem> ForecastRepItems { get; set; }
        public virtual DbSet<ForecastReport> ForecastReports { get; set; }
        public virtual DbSet<Forwarder> Forwarders { get; set; }
        public virtual DbSet<FreightCategory> FreightCategories { get; set; }
        public virtual DbSet<FreightInvoiceD> FreightInvoiceDs { get; set; }
        public virtual DbSet<FreightInvoiceLine> FreightInvoiceLines { get; set; }
        public virtual DbSet<FreightInvoiceRef> FreightInvoiceRefs { get; set; }
        public virtual DbSet<FreightInvoiceT> FreightInvoiceTs { get; set; }
        public virtual DbSet<GlAccount> GlAccounts { get; set; }
        public virtual DbSet<GlimpactD> GlimpactDs { get; set; }
        public virtual DbSet<GlimpactT> GlimpactTs { get; set; }
        public virtual DbSet<Hansol20col> Hansol20cols { get; set; }
        public virtual DbSet<InLandTrDay> InLandTrDays { get; set; }
        public virtual DbSet<Incoterm> Incoterms { get; set; }
        public virtual DbSet<InvAdjD> InvAdjDs { get; set; }
        public virtual DbSet<InvAdjT> InvAdjTs { get; set; }
        public virtual DbSet<InvCountEntry> InvCountEntries { get; set; }
        public virtual DbSet<InvD> InvDs { get; set; }
        public virtual DbSet<InvFeedsAllStopFeedFrom> InvFeedsAllStopFeedFroms { get; set; }
        public virtual DbSet<InvFeedsAppliedRule> InvFeedsAppliedRules { get; set; }
        public virtual DbSet<InvFeedsCheckBackOrderLeadTime> InvFeedsCheckBackOrderLeadTimes { get; set; }
        public virtual DbSet<InvFeedsConflictType> InvFeedsConflictTypes { get; set; }
        public virtual DbSet<InvFeedsCurrentStatus> InvFeedsCurrentStatuses { get; set; }
        public virtual DbSet<InvFeedsDailyZeroOutSku> InvFeedsDailyZeroOutSkus { get; set; }
        public virtual DbSet<InvFeedsFstMvRepDetail> InvFeedsFstMvRepDetails { get; set; }
        public virtual DbSet<InvFeedsFstMvSkusReport> InvFeedsFstMvSkusReports { get; set; }
        public virtual DbSet<InvFeedsItem> InvFeedsItems { get; set; }
        public virtual DbSet<InvFeedsItemLocQty> InvFeedsItemLocQties { get; set; }
        public virtual DbSet<InvFeedsMrktSpecificSku> InvFeedsMrktSpecificSkus { get; set; }
        public virtual DbSet<InvFeedsRemark> InvFeedsRemarks { get; set; }
        public virtual DbSet<InvFeedsRepItemDetail> InvFeedsRepItemDetails { get; set; }
        public virtual DbSet<InvFeedsRepItemLoc> InvFeedsRepItemLocs { get; set; }
        public virtual DbSet<InvFeedsRepTableDetail> InvFeedsRepTableDetails { get; set; }
        public virtual DbSet<InvFeedsReport> InvFeedsReports { get; set; }
        public virtual DbSet<InvFeedsReportItem> InvFeedsReportItems { get; set; }
        public virtual DbSet<InvFeedsRmrkCtgry> InvFeedsRmrkCtgries { get; set; }
        public virtual DbSet<InvFeedsRule> InvFeedsRules { get; set; }
        public virtual DbSet<InvFeedsRuleSku> InvFeedsRuleSkus { get; set; }
        public virtual DbSet<InvFeedsRuleSkumkt> InvFeedsRuleSkumkts { get; set; }
        public virtual DbSet<InvFeedsShopify> InvFeedsShopifies { get; set; }
        public virtual DbSet<InvFeedsShopifyOption> InvFeedsShopifyOptions { get; set; }
        public virtual DbSet<InvFeedsSkucnflctRepItem> InvFeedsSkucnflctRepItems { get; set; }
        public virtual DbSet<InvFeedsSkuconflictReport> InvFeedsSkuconflictReports { get; set; }
        public virtual DbSet<InvFeedsWhSwitchingType> InvFeedsWhSwitchingTypes { get; set; }
        public virtual DbSet<InvMeTotalAmt> InvMeTotalAmts { get; set; }
        public virtual DbSet<InvNsMend> InvNsMends { get; set; }
        public virtual DbSet<InvPay> InvPays { get; set; }
        public virtual DbSet<InvPayDetail> InvPayDetails { get; set; }
        public virtual DbSet<InvRealTime> InvRealTimes { get; set; }
        public virtual DbSet<InvRemit> InvRemits { get; set; }
        public virtual DbSet<InvStatus> InvStatuses { get; set; }
        public virtual DbSet<InvT> InvTs { get; set; }
        public virtual DbSet<InvTrD> InvTrDs { get; set; }
        public virtual DbSet<InvTrT> InvTrTs { get; set; }
        public virtual DbSet<InvTxDaily> InvTxDailies { get; set; }
        public virtual DbSet<InvTxType> InvTxTypes { get; set; }
        public virtual DbSet<InvWorksheetD> InvWorksheetDs { get; set; }
        public virtual DbSet<InvWorksheetT> InvWorksheetTs { get; set; }
        public virtual DbSet<InventoryAgingD> InventoryAgingDs { get; set; }
        public virtual DbSet<InventoryAgingT> InventoryAgingTs { get; set; }
        public virtual DbSet<InventoryAllocation> InventoryAllocations { get; set; }
        public virtual DbSet<InventoryConfig> InventoryConfigs { get; set; }
        public virtual DbSet<InventoryForecast> InventoryForecasts { get; set; }
        public virtual DbSet<InvtCntT> InvtCntTs { get; set; }
        public virtual DbSet<InvtCoO> InvtCoOs { get; set; }
        public virtual DbSet<InvtDailyTrxD> InvtDailyTrxDs { get; set; }
        public virtual DbSet<InvtDailyTrxT> InvtDailyTrxTs { get; set; }
        public virtual DbSet<InvtTrxRecordType> InvtTrxRecordTypes { get; set; }
        public virtual DbSet<InvtTrxType> InvtTrxTypes { get; set; }
        public virtual DbSet<ItFeedRatioD> ItFeedRatioDs { get; set; }
        public virtual DbSet<ItFeedRatioT> ItFeedRatioTs { get; set; }
        public virtual DbSet<ItemAbcAm> ItemAbcAms { get; set; }
        public virtual DbSet<ItemAbcCm> ItemAbcCms { get; set; }
        public virtual DbSet<ItemAbcPc> ItemAbcPcs { get; set; }
        public virtual DbSet<ItemAbcPm> ItemAbcPms { get; set; }
        public virtual DbSet<ItemAcctFob> ItemAcctFobs { get; set; }
        public virtual DbSet<ItemAvgCost> ItemAvgCosts { get; set; }
        public virtual DbSet<ItemAvgCostByLoc> ItemAvgCostByLocs { get; set; }
        public virtual DbSet<ItemBoxDim> ItemBoxDims { get; set; }
        public virtual DbSet<ItemColl> ItemColls { get; set; }
        public virtual DbSet<ItemCurrFob> ItemCurrFobs { get; set; }
        public virtual DbSet<ItemDimMfg> ItemDimMfgs { get; set; }
        public virtual DbSet<ItemDutyTarif> ItemDutyTarifs { get; set; }
        public virtual DbSet<ItemFfd> ItemFfds { get; set; }
        public virtual DbSet<ItemFft> ItemFfts { get; set; }
        public virtual DbSet<ItemFobCc> ItemFobCcs { get; set; }
        public virtual DbSet<ItemFobHist> ItemFobHists { get; set; }
        public virtual DbSet<ItemFobPc> ItemFobPcs { get; set; }
        public virtual DbSet<ItemFobVc> ItemFobVcs { get; set; }
        public virtual DbSet<ItemFvcp> ItemFvcps { get; set; }
        public virtual DbSet<ItemListingItemno> ItemListingItemnos { get; set; }
        public virtual DbSet<ItemMdFob> ItemMdFobs { get; set; }
        public virtual DbSet<ItemPrice> ItemPrices { get; set; }
        public virtual DbSet<ItemPriceLevel> ItemPriceLevels { get; set; }
        public virtual DbSet<ItemProductType> ItemProductTypes { get; set; }
        public virtual DbSet<ItemRegPrice> ItemRegPrices { get; set; }
        public virtual DbSet<ItemSoldByComponent> ItemSoldByComponents { get; set; }
        public virtual DbSet<ItemStatLog> ItemStatLogs { get; set; }
        public virtual DbSet<ItemStatus> ItemStatuses { get; set; }
        public virtual DbSet<ItemStatusHistory> ItemStatusHistories { get; set; }
        public virtual DbSet<ItemStdPrice> ItemStdPrices { get; set; }
        public virtual DbSet<ItemTrkCoO> ItemTrkCoOs { get; set; }
        public virtual DbSet<ItemType> ItemTypes { get; set; }
        public virtual DbSet<JournalD> JournalDs { get; set; }
        public virtual DbSet<JournalT> JournalTs { get; set; }
        public virtual DbSet<KoAmzcategory> KoAmzcategories { get; set; }
        public virtual DbSet<KoAmzproduct> KoAmzproducts { get; set; }
        public virtual DbSet<KoAmzsellerRankHistory> KoAmzsellerRankHistories { get; set; }
        public virtual DbSet<KoAmzvendorRpt> KoAmzvendorRpts { get; set; }
        public virtual DbSet<KoAmzvendorRptChargeBack> KoAmzvendorRptChargeBacks { get; set; }
        public virtual DbSet<KoAmzvendorRptInvt> KoAmzvendorRptInvts { get; set; }
        public virtual DbSet<KoAmzvendorRptNetPpm> KoAmzvendorRptNetPpms { get; set; }
        public virtual DbSet<KoAmzvendorRptSale> KoAmzvendorRptSales { get; set; }
        public virtual DbSet<KoAmzvendorRptSummary> KoAmzvendorRptSummaries { get; set; }
        public virtual DbSet<KoCoD> KoCoDs { get; set; }
        public virtual DbSet<KoCoT> KoCoTs { get; set; }
        public virtual DbSet<KoCompetingItem> KoCompetingItems { get; set; }
        public virtual DbSet<KoInventoryHistory> KoInventoryHistories { get; set; }
        public virtual DbSet<KoItemno> KoItemnos { get; set; }
        public virtual DbSet<KoKitTrkNo> KoKitTrkNos { get; set; }
        public virtual DbSet<KoLocation> KoLocations { get; set; }
        public virtual DbSet<KoMarketPlace> KoMarketPlaces { get; set; }
        public virtual DbSet<KoPossiblePo> KoPossiblePos { get; set; }
        public virtual DbSet<KoPossibleSalesOrder> KoPossibleSalesOrders { get; set; }
        public virtual DbSet<KoPredSale> KoPredSales { get; set; }
        public virtual DbSet<KoProdReview> KoProdReviews { get; set; }
        public virtual DbSet<KoRetailPrcHistory> KoRetailPrcHistories { get; set; }
        public virtual DbSet<KoRetailPriceHistory> KoRetailPriceHistories { get; set; }
        public virtual DbSet<KoSalesTarget> KoSalesTargets { get; set; }
        public virtual DbSet<KoSeller> KoSellers { get; set; }
        public virtual DbSet<KoShipFromAddr> KoShipFromAddrs { get; set; }
        public virtual DbSet<KoShippingMethod> KoShippingMethods { get; set; }
        public virtual DbSet<KoSoD> KoSoDs { get; set; }
        public virtual DbSet<KoSoT> KoSoTs { get; set; }
        public virtual DbSet<KoWklySalesAvg> KoWklySalesAvgs { get; set; }
        public virtual DbSet<KoWmtproduct> KoWmtproducts { get; set; }
        public virtual DbSet<KoalaMasterInventory> KoalaMasterInventories { get; set; }
        public virtual DbSet<KoalaRole> KoalaRoles { get; set; }
        public virtual DbSet<LandedCost> LandedCosts { get; set; }
        public virtual DbSet<LocationType> LocationTypes { get; set; }
        public virtual DbSet<Market> Markets { get; set; }
        public virtual DbSet<MarketFulfilledInventory> MarketFulfilledInventories { get; set; }
        public virtual DbSet<MarketMasterItem> MarketMasterItems { get; set; }
        public virtual DbSet<MarketMasterSku> MarketMasterSkus { get; set; }
        public virtual DbSet<MarketMasterSkuIcr> MarketMasterSkuIcrs { get; set; }
        public virtual DbSet<MasterSku> MasterSkus { get; set; }
        public virtual DbSet<MatInfu> MatInfus { get; set; }
        public virtual DbSet<MatType> MatTypes { get; set; }
        public virtual DbSet<MatreialType> MatreialTypes { get; set; }
        public virtual DbSet<MelPriceDataExport> MelPriceDataExports { get; set; }
        public virtual DbSet<MkIcr> MkIcrs { get; set; }
        public virtual DbSet<MkInvFeedD> MkInvFeedDs { get; set; }
        public virtual DbSet<MkInvFeedT> MkInvFeedTs { get; set; }
        public virtual DbSet<MkPayment> MkPayments { get; set; }
        public virtual DbSet<MsBinScan> MsBinScans { get; set; }
        public virtual DbSet<MsInvAdjEntry> MsInvAdjEntries { get; set; }
        public virtual DbSet<MsInvAtBin> MsInvAtBins { get; set; }
        public virtual DbSet<MslBinNo> MslBinNos { get; set; }
        public virtual DbSet<NotesAndRule> NotesAndRules { get; set; }
        public virtual DbSet<NotesRulesRmrkCat> NotesRulesRmrkCats { get; set; }
        public virtual DbSet<NsApplied> NsApplieds { get; set; }
        public virtual DbSet<NsCreditMemoD> NsCreditMemoDs { get; set; }
        public virtual DbSet<NsCreditMemoT> NsCreditMemoTs { get; set; }
        public virtual DbSet<NsCredited> NsCrediteds { get; set; }
        public virtual DbSet<NsCurrency> NsCurrencies { get; set; }
        public virtual DbSet<NsCurrencyRate> NsCurrencyRates { get; set; }
        public virtual DbSet<NsCustPn> NsCustPns { get; set; }
        public virtual DbSet<NsDeductType> NsDeductTypes { get; set; }
        public virtual DbSet<NsExpenseCategory> NsExpenseCategories { get; set; }
        public virtual DbSet<NsIcr> NsIcrs { get; set; }
        public virtual DbSet<NsInvDetail> NsInvDetails { get; set; }
        public virtual DbSet<NsInvRemit> NsInvRemits { get; set; }
        public virtual DbSet<NsInvoice> NsInvoices { get; set; }
        public virtual DbSet<NsInvoiceD> NsInvoiceDs { get; set; }
        public virtual DbSet<NsInvoiceT> NsInvoiceTs { get; set; }
        public virtual DbSet<NsOrder> NsOrders { get; set; }
        public virtual DbSet<NsOrderDetail> NsOrderDetails { get; set; }
        public virtual DbSet<NsPayment> NsPayments { get; set; }
        public virtual DbSet<NsRecordType> NsRecordTypes { get; set; }
        public virtual DbSet<NsRemit> NsRemits { get; set; }
        public virtual DbSet<NsRemitDeduct> NsRemitDeducts { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderBomPrice> OrderBomPrices { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<OrderError> OrderErrors { get; set; }
        public virtual DbSet<OsitemConversion> OsitemConversions { get; set; }
        public virtual DbSet<OverallStatusType> OverallStatusTypes { get; set; }
        public virtual DbSet<PalletType> PalletTypes { get; set; }
        public virtual DbSet<PalletType1> PalletTypes1 { get; set; }
        public virtual DbSet<PhysCountMsl> PhysCountMsls { get; set; }
        public virtual DbSet<PickPlan> PickPlans { get; set; }
        public virtual DbSet<PickTask> PickTasks { get; set; }
        public virtual DbSet<PoBillD> PoBillDs { get; set; }
        public virtual DbSet<PoBillStatus> PoBillStatuses { get; set; }
        public virtual DbSet<PoBillT> PoBillTs { get; set; }
        public virtual DbSet<PoBol> PoBols { get; set; }
        public virtual DbSet<PoChange> PoChanges { get; set; }
        public virtual DbSet<PoChanged> PoChangeds { get; set; }
        public virtual DbSet<PoCmD> PoCmDs { get; set; }
        public virtual DbSet<PoCmT> PoCmTs { get; set; }
        public virtual DbSet<PoD> PoDs { get; set; }
        public virtual DbSet<PoDCont> PoDConts { get; set; }
        public virtual DbSet<PoEtaEstimate> PoEtaEstimates { get; set; }
        public virtual DbSet<PoOwnershipD> PoOwnershipDs { get; set; }
        public virtual DbSet<PoOwnershipT> PoOwnershipTs { get; set; }
        public virtual DbSet<PoPackD> PoPackDs { get; set; }
        public virtual DbSet<PoPackT> PoPackTs { get; set; }
        public virtual DbSet<PoRcvD> PoRcvDs { get; set; }
        public virtual DbSet<PoRcvT> PoRcvTs { get; set; }
        public virtual DbSet<PoStatus> PoStatuses { get; set; }
        public virtual DbSet<PoT> PoTs { get; set; }
        public virtual DbSet<PoType> PoTypes { get; set; }
        public virtual DbSet<PocReason> PocReasons { get; set; }
        public virtual DbSet<PocStatus> PocStatuses { get; set; }
        public virtual DbSet<PocType> PocTypes { get; set; }
        public virtual DbSet<PortDest> PortDests { get; set; }
        public virtual DbSet<PortOrigin> PortOrigins { get; set; }
        public virtual DbSet<PrePo> PrePos { get; set; }
        public virtual DbSet<PrePohistory> PrePohistories { get; set; }
        public virtual DbSet<PrePostatusType> PrePostatusTypes { get; set; }
        public virtual DbSet<ProductColor> ProductColors { get; set; }
        public virtual DbSet<PromoEd> PromoEds { get; set; }
        public virtual DbSet<PromoEt> PromoEts { get; set; }
        public virtual DbSet<Promotion> Promotions { get; set; }
        public virtual DbSet<PurchaseConfig> PurchaseConfigs { get; set; }
        public virtual DbSet<QpPalByLoc> QpPalByLocs { get; set; }
        public virtual DbSet<RealTimeInvUpdDetail> RealTimeInvUpdDetails { get; set; }
        public virtual DbSet<RealTimeInvUpdate> RealTimeInvUpdates { get; set; }
        public virtual DbSet<ReasonNameType> ReasonNameTypes { get; set; }
        public virtual DbSet<RemitClaim> RemitClaims { get; set; }
        public virtual DbSet<RemitCm> RemitCms { get; set; }
        public virtual DbSet<RemitCmD> RemitCmDs { get; set; }
        public virtual DbSet<RemitCmT> RemitCmTs { get; set; }
        public virtual DbSet<RemitFee> RemitFees { get; set; }
        public virtual DbSet<RemitInv> RemitInvs { get; set; }
        public virtual DbSet<RemitInvD> RemitInvDs { get; set; }
        public virtual DbSet<RemitInvT> RemitInvTs { get; set; }
        public virtual DbSet<RemitMatchClaim> RemitMatchClaims { get; set; }
        public virtual DbSet<RemitService> RemitServices { get; set; }
        public virtual DbSet<RenameMarket> RenameMarkets { get; set; }
        public virtual DbSet<RenameVendor> RenameVendors { get; set; }
        public virtual DbSet<RetailPriceHistory> RetailPriceHistories { get; set; }
        public virtual DbSet<ReviewHistory> ReviewHistories { get; set; }
        public virtual DbSet<Rma> Rmas { get; set; }
        public virtual DbSet<RmaAction> RmaActions { get; set; }
        public virtual DbSet<RmaDetail> RmaDetails { get; set; }
        public virtual DbSet<RmaReason> RmaReasons { get; set; }
        public virtual DbSet<RmaReasonDetail> RmaReasonDetails { get; set; }
        public virtual DbSet<RmaStatus> RmaStatuses { get; set; }
        public virtual DbSet<SalesEvent> SalesEvents { get; set; }
        public virtual DbSet<SalesEventDetail> SalesEventDetails { get; set; }
        public virtual DbSet<SalesRemit> SalesRemits { get; set; }
        public virtual DbSet<SalesTax> SalesTaxes { get; set; }
        public virtual DbSet<ScanGun> ScanGuns { get; set; }
        public virtual DbSet<SchAppointment> SchAppointments { get; set; }
        public virtual DbSet<SchResource> SchResources { get; set; }
        public virtual DbSet<ServerityType> ServerityTypes { get; set; }
        public virtual DbSet<ServiceType> ServiceTypes { get; set; }
        public virtual DbSet<ServingStatusDetail> ServingStatusDetails { get; set; }
        public virtual DbSet<ServingStatusType> ServingStatusTypes { get; set; }
        public virtual DbSet<SgActionAllow> SgActionAllows { get; set; }
        public virtual DbSet<ShipAcct> ShipAccts { get; set; }
        public virtual DbSet<ShipCarrier> ShipCarriers { get; set; }
        public virtual DbSet<ShipLine> ShipLines { get; set; }
        public virtual DbSet<ShipVium> ShipVia { get; set; }
        public virtual DbSet<ShippingZone> ShippingZones { get; set; }
        public virtual DbSet<SkuSubstitudePlan> SkuSubstitudePlans { get; set; }
        public virtual DbSet<SoCancel> SoCancels { get; set; }
        public virtual DbSet<SoCoo> SoCoos { get; set; }
        public virtual DbSet<SoD> SoDs { get; set; }
        public virtual DbSet<SoDtempf9b5936b> SoDtempf9b5936bs { get; set; }
        public virtual DbSet<SoError> SoErrors { get; set; }
        public virtual DbSet<SoStatusKo> SoStatusKos { get; set; }
        public virtual DbSet<SoStatusN> SoStatusNs { get; set; }
        public virtual DbSet<SoT> SoTs { get; set; }
        public virtual DbSet<SodBol> SodBols { get; set; }
        public virtual DbSet<SodPt> SodPts { get; set; }
        public virtual DbSet<SpRecapChn> SpRecapChns { get; set; }
        public virtual DbSet<SpRecapDuty> SpRecapDuties { get; set; }
        public virtual DbSet<SpRecapOcf> SpRecapOcfs { get; set; }
        public virtual DbSet<SpRecapOpex> SpRecapOpices { get; set; }
        public virtual DbSet<SpRecapRo> SpRecapRos { get; set; }
        public virtual DbSet<SpcInvD> SpcInvDs { get; set; }
        public virtual DbSet<SpcInvT> SpcInvTs { get; set; }
        public virtual DbSet<SpcInvType> SpcInvTypes { get; set; }
        public virtual DbSet<SpcPayType> SpcPayTypes { get; set; }
        public virtual DbSet<SpcService> SpcServices { get; set; }
        public virtual DbSet<StateDivision> StateDivisions { get; set; }
        public virtual DbSet<StateZipCountry> StateZipCountries { get; set; }
        public virtual DbSet<StatusAddr> StatusAddrs { get; set; }
        public virtual DbSet<StatusIf> StatusIfs { get; set; }
        public virtual DbSet<StatusItemAcpt> StatusItemAcpts { get; set; }
        public virtual DbSet<StatusOrder> StatusOrders { get; set; }
        public virtual DbSet<StatusPt> StatusPts { get; set; }
        public virtual DbSet<StrategyType> StrategyTypes { get; set; }
        public virtual DbSet<TableauIncoming> TableauIncomings { get; set; }
        public virtual DbSet<TakeBack> TakeBacks { get; set; }
        public virtual DbSet<TakeBacker> TakeBackers { get; set; }
        public virtual DbSet<TargetingType> TargetingTypes { get; set; }
        public virtual DbSet<TbArea> TbAreas { get; set; }
        public virtual DbSet<TbCost> TbCosts { get; set; }
        public virtual DbSet<TbDetail> TbDetails { get; set; }
        public virtual DbSet<TbItem> TbItems { get; set; }
        public virtual DbSet<TbStatus> TbStatuses { get; set; }
        public virtual DbSet<Temp> Temps { get; set; }
        public virtual DbSet<Temp16col> Temp16cols { get; set; }
        public virtual DbSet<TempMark> TempMarks { get; set; }
        public virtual DbSet<TempMissingArDate> TempMissingArDates { get; set; }
        public virtual DbSet<TempMissingFedEx> TempMissingFedices { get; set; }
        public virtual DbSet<TempPoCust> TempPoCusts { get; set; }
        public virtual DbSet<Test> Tests { get; set; }
        public virtual DbSet<TestV> TestVs { get; set; }
        public virtual DbSet<TimeFrame> TimeFrames { get; set; }
        public virtual DbSet<ToBol> ToBols { get; set; }
        public virtual DbSet<ToContainer> ToContainers { get; set; }
        public virtual DbSet<ToD> ToDs { get; set; }
        public virtual DbSet<ToDoList> ToDoLists { get; set; }
        public virtual DbSet<ToFfd> ToFfds { get; set; }
        public virtual DbSet<ToFft> ToFfts { get; set; }
        public virtual DbSet<ToRcvD> ToRcvDs { get; set; }
        public virtual DbSet<ToRcvT> ToRcvTs { get; set; }
        public virtual DbSet<ToStatus> ToStatuses { get; set; }
        public virtual DbSet<ToT> ToTs { get; set; }
        public virtual DbSet<TplBegInventory> TplBegInventories { get; set; }
        public virtual DbSet<TplInvRptD> TplInvRptDs { get; set; }
        public virtual DbSet<TplInvRptT> TplInvRptTs { get; set; }
        public virtual DbSet<TplinvoiceD> TplinvoiceDs { get; set; }
        public virtual DbSet<TplinvoiceRate> TplinvoiceRates { get; set; }
        public virtual DbSet<TplinvoiceT> TplinvoiceTs { get; set; }
        public virtual DbSet<TplinvoiceType> TplinvoiceTypes { get; set; }
        public virtual DbSet<TrackingInfo> TrackingInfos { get; set; }
        public virtual DbSet<TransactionLocation> TransactionLocations { get; set; }
        public virtual DbSet<TransactionReasonCode> TransactionReasonCodes { get; set; }
        public virtual DbSet<TransactionType> TransactionTypes { get; set; }
        public virtual DbSet<TranscError> TranscErrors { get; set; }
        public virtual DbSet<TranspCharge> TranspCharges { get; set; }
        public virtual DbSet<Transporter> Transporters { get; set; }
        public virtual DbSet<TutorialBranch> TutorialBranches { get; set; }
        public virtual DbSet<TutorialClient> TutorialClients { get; set; }
        public virtual DbSet<TutorialEmployee> TutorialEmployees { get; set; }
        public virtual DbSet<TutorialWorksWith> TutorialWorksWiths { get; set; }
        public virtual DbSet<Upsinvoice> Upsinvoices { get; set; }
        public virtual DbSet<VAllInvoice> VAllInvoices { get; set; }
        public virtual DbSet<VAllSageOrder> VAllSageOrders { get; set; }
        public virtual DbSet<VAllSale> VAllSales { get; set; }
        public virtual DbSet<VAllSalesZinu> VAllSalesZinus { get; set; }
        public virtual DbSet<VAllSalesbyComponent> VAllSalesbyComponents { get; set; }
        public virtual DbSet<VAmzdrostd> VAmzdrostds { get; set; }
        public virtual DbSet<VAmzobByComponent> VAmzobByComponents { get; set; }
        public virtual DbSet<VAmzrankHistory> VAmzrankHistories { get; set; }
        public virtual DbSet<VAmzsellerOrderinfo> VAmzsellerOrderinfos { get; set; }
        public virtual DbSet<VAmzvendorOstdInTransit> VAmzvendorOstdInTransits { get; set; }
        public virtual DbSet<VAmzwklyByComponent> VAmzwklyByComponents { get; set; }
        public virtual DbSet<VAsinAmzskuItemno> VAsinAmzskuItemnos { get; set; }
        public virtual DbSet<VBom> VBoms { get; set; }
        public virtual DbSet<VBomTransposed> VBomTransposeds { get; set; }
        public virtual DbSet<VCarrierAccount> VCarrierAccounts { get; set; }
        public virtual DbSet<VCog> VCogs { get; set; }
        public virtual DbSet<VCreditDebitTable> VCreditDebitTables { get; set; }
        public virtual DbSet<VCustomerPo> VCustomerPos { get; set; }
        public virtual DbSet<VFedexInvoiceSumm> VFedexInvoiceSumms { get; set; }
        public virtual DbSet<VForecastAllSale> VForecastAllSales { get; set; }
        public virtual DbSet<VForecasting> VForecastings { get; set; }
        public virtual DbSet<VForecastinginvt> VForecastinginvts { get; set; }
        public virtual DbSet<VGetStoredProc> VGetStoredProcs { get; set; }
        public virtual DbSet<VInventoryHistory> VInventoryHistories { get; set; }
        public virtual DbSet<VKoalapo> VKoalapos { get; set; }
        public virtual DbSet<VKoalapoCont> VKoalapoConts { get; set; }
        public virtual DbSet<VMarketFulfilledInvt> VMarketFulfilledInvts { get; set; }
        public virtual DbSet<VOpenPo> VOpenPos { get; set; }
        public virtual DbSet<VOrder> VOrders { get; set; }
        public virtual DbSet<VPoEtdEtum> VPoEtdEta { get; set; }
        public virtual DbSet<VPostatus> VPostatuses { get; set; }
        public virtual DbSet<VReceivedPo> VReceivedPos { get; set; }
        public virtual DbSet<VRetailPriceHistory> VRetailPriceHistories { get; set; }
        public virtual DbSet<VSageCost12wk> VSageCost12wks { get; set; }
        public virtual DbSet<VSageInvtNow> VSageInvtNows { get; set; }
        public virtual DbSet<VSageSales12wk> VSageSales12wks { get; set; }
        public virtual DbSet<VSalesTax> VSalesTaxes { get; set; }
        public virtual DbSet<VStarship> VStarships { get; set; }
        public virtual DbSet<VStarshipAddr> VStarshipAddrs { get; set; }
        public virtual DbSet<VTblAllSalesbyComp> VTblAllSalesbyComps { get; set; }
        public virtual DbSet<VTracking> VTrackings { get; set; }
        public virtual DbSet<VTransfer> VTransfers { get; set; }
        public virtual DbSet<Vend2WhLt> Vend2WhLts { get; set; }
        public virtual DbSet<VendCategory> VendCategories { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<VendorAllocationMethod> VendorAllocationMethods { get; set; }
        public virtual DbSet<VendorBillD> VendorBillDs { get; set; }
        public virtual DbSet<VendorBillT> VendorBillTs { get; set; }
        public virtual DbSet<VendorReturnD> VendorReturnDs { get; set; }
        public virtual DbSet<VendorReturnT> VendorReturnTs { get; set; }
        public virtual DbSet<Vrstatus> Vrstatuses { get; set; }
        public virtual DbSet<WarehouseBin> WarehouseBins { get; set; }
        public virtual DbSet<WayPoTk> WayPoTks { get; set; }
        public virtual DbSet<WayPoTkD> WayPoTkDs { get; set; }
        public virtual DbSet<WayPoTkN> WayPoTkNs { get; set; }
        public virtual DbSet<WayPoTkT> WayPoTkTs { get; set; }
        public virtual DbSet<WayfPpid> WayfPpids { get; set; }
        public virtual DbSet<WayfairDeduction> WayfairDeductions { get; set; }
        public virtual DbSet<WayfairDeductionStatus> WayfairDeductionStatuses { get; set; }
        public virtual DbSet<WayfairDeductionType> WayfairDeductionTypes { get; set; }
        public virtual DbSet<WayfairProductReview> WayfairProductReviews { get; set; }
        public virtual DbSet<WfadsClassType> WfadsClassTypes { get; set; }
        public virtual DbSet<WfadsDatePeriodType> WfadsDatePeriodTypes { get; set; }
        public virtual DbSet<WfadsKeyMatchType> WfadsKeyMatchTypes { get; set; }
        public virtual DbSet<WfadsProgramType> WfadsProgramTypes { get; set; }
        public virtual DbSet<WfadsReportD> WfadsReportDs { get; set; }
        public virtual DbSet<WfadsReportDKeyword> WfadsReportDKeywords { get; set; }
        public virtual DbSet<WfadsReportDProduct> WfadsReportDProducts { get; set; }
        public virtual DbSet<WfadsReportDWt> WfadsReportDWts { get; set; }
        public virtual DbSet<WfadsReportT> WfadsReportTs { get; set; }
        public virtual DbSet<WfadsReportType> WfadsReportTypes { get; set; }
        public virtual DbSet<WfadsTargetingType> WfadsTargetingTypes { get; set; }
        public virtual DbSet<WfsChildShipmentId> WfsChildShipmentIds { get; set; }
        public virtual DbSet<WfsInventory> WfsInventories { get; set; }
        public virtual DbSet<WfsInvtHist> WfsInvtHists { get; set; }
        public virtual DbSet<WfsInvtLog> WfsInvtLogs { get; set; }
        public virtual DbSet<WfsParentShipmetId> WfsParentShipmetIds { get; set; }
        public virtual DbSet<WhTote> WhTotes { get; set; }
        public virtual DbSet<WhinvDescrCategory> WhinvDescrCategories { get; set; }
        public virtual DbSet<WhinvDetailCategory> WhinvDetailCategories { get; set; }
        public virtual DbSet<Whinvoice> Whinvoices { get; set; }
        public virtual DbSet<Whperformance> Whperformances { get; set; }
        public virtual DbSet<WithdrawalStatus> WithdrawalStatuses { get; set; }
        public virtual DbSet<WmsAdjust> WmsAdjusts { get; set; }
        public virtual DbSet<WmsAdjustDetail> WmsAdjustDetails { get; set; }
        public virtual DbSet<WmsCycleCount> WmsCycleCounts { get; set; }
        public virtual DbSet<WmsCycleCountPlan> WmsCycleCountPlans { get; set; }
        public virtual DbSet<WmsInventoryQoH> WmsInventoryQoHs { get; set; }
        public virtual DbSet<WmsMetric> WmsMetrics { get; set; }
        public virtual DbSet<WmsPoDetail> WmsPoDetails { get; set; }
        public virtual DbSet<WmsRmaDetail> WmsRmaDetails { get; set; }
        public virtual DbSet<WmsSoDetail> WmsSoDetails { get; set; }
        public virtual DbSet<WmsTransfer> WmsTransfers { get; set; }
        public virtual DbSet<WmsTransferDetail> WmsTransferDetails { get; set; }
        public virtual DbSet<WmtBulkCarrier> WmtBulkCarriers { get; set; }
        public virtual DbSet<WmtCarrier> WmtCarriers { get; set; }
        public virtual DbSet<WmtCarrierApi> WmtCarrierApis { get; set; }
        public virtual DbSet<Wmtlisting> Wmtlistings { get; set; }
        public virtual DbSet<WyfItemConversion> WyfItemConversions { get; set; }
        public virtual DbSet<WyfrPricCstStckRepDetail> WyfrPricCstStckRepDetails { get; set; }
        public virtual DbSet<WyfrPricCstStckReport> WyfrPricCstStckReports { get; set; }
        public virtual DbSet<ZinusCategory> ZinusCategories { get; set; }
        public virtual DbSet<ZinusCust> ZinusCusts { get; set; }
        public virtual DbSet<ZinusLoc> ZinusLocs { get; set; }
        public virtual DbSet<ZinusSku> ZinusSkus { get; set; }
        public virtual DbSet<ZipToLocation> ZipToLocations { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Server=localhost; Database=KOALA; Trusted_Connection=true;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<AccInvInOutD>(entity =>
            {
                entity.ToTable("AccInvInOutD");

                entity.Property(e => e.AccInvInOutDId).HasColumnName("AccInvInOutD_id");

                entity.Property(e => e.AccInvInOutTId).HasColumnName("AccInvInOutT_id");

                entity.Property(e => e.CmAdjAmt).HasColumnType("money");

                entity.Property(e => e.CmEndAmt).HasColumnType("money");

                entity.Property(e => e.CmIbamt)
                    .HasColumnType("money")
                    .HasColumnName("CmIBAmt");

                entity.Property(e => e.CmIbqty).HasColumnName("CmIBQty");

                entity.Property(e => e.CmObamt)
                    .HasColumnType("money")
                    .HasColumnName("CmOBAmt");

                entity.Property(e => e.CmObqty).HasColumnName("CmOBQty");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.PmEndAmt).HasColumnType("money");

                entity.HasOne(d => d.AccInvInOutT)
                    .WithMany(p => p.AccInvInOutDs)
                    .HasForeignKey(d => d.AccInvInOutTId)
                    .HasConstraintName("fk_AccInvInOutD_AccInvInOutT");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.AccInvInOutDs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AccInvInOutD_BpmItem");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.AccInvInOutDs)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AccInvInOutD_BpmLocation");
            });

            modelBuilder.Entity<AccInvInOutT>(entity =>
            {
                entity.ToTable("AccInvInOutT");

                entity.Property(e => e.AccInvInOutTId).HasColumnName("AccInvInOutT_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.EmployeeId).HasColumnName("Employee_id");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.AccInvInOutTs)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AccInvInOutT_Employee");
            });

            modelBuilder.Entity<AccInvOutCoG>(entity =>
            {
                entity.HasKey(e => e.AccInvOutId)
                    .HasName("pk_AccInvOut");

                entity.ToTable("AccInvOutCoGS");

                entity.Property(e => e.AccInvOutId).HasColumnName("AccInvOut_id");

                entity.Property(e => e.CoGs)
                    .HasColumnType("money")
                    .HasColumnName("CoGS");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.AccInvOutCoGs)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AccInvOutCoGS_Customer");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.AccInvOutCoGs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AccInvOutCoGS_BpmItem");
            });

            modelBuilder.Entity<AcctHqCogsRpt>(entity =>
            {
                entity.HasKey(e => e.HqCogsRptId)
                    .HasName("pk_AcctHqCogsRpt");

                entity.ToTable("AcctHqCogsRpt");

                entity.Property(e => e.HqCogsRptId).HasColumnName("HqCogsRpt_id");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.Channel)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.CoGs)
                    .HasColumnType("money")
                    .HasColumnName("CoGS");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.Sku)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("SKU");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.AcctHqCogsRpts)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AcctHqCogsRpt_BpmItem");
            });

            modelBuilder.Entity<AcctHqSaleRpt>(entity =>
            {
                entity.HasKey(e => e.HqSalesRptId)
                    .HasName("pk_AcctHqSaleRpt");

                entity.ToTable("AcctHqSaleRpt");

                entity.Property(e => e.HqSalesRptId).HasColumnName("HqSalesRpt_id");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.Channel)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.Sku)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("SKU");

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.AcctHqSaleRpts)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AcctHqSaleRpt_BpmItem");
            });

            modelBuilder.Entity<ActualWmtPrice>(entity =>
            {
                entity.HasKey(e => e.PriceId)
                    .HasName("PK__ActualWm__A4821BF2A987F791");

                entity.ToTable("ActualWmtPrice", "ord");

                entity.HasIndex(e => e.WmtItemNo, "UQ__ActualWm__1B5E9BC85C30EFB2")
                    .IsUnique();

                entity.Property(e => e.PriceId).HasColumnName("Price_ID");

                entity.Property(e => e.CeatedTime).HasColumnType("datetime");

                entity.Property(e => e.CustSku)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CustSKU");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.ItemNo).HasColumnName("Item_No");

                entity.Property(e => e.LastModDate).HasColumnType("datetime");

                entity.Property(e => e.LastUpdateDate).HasColumnType("date");

                entity.Property(e => e.Price).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.StartDate).HasColumnType("date");
            });

            modelBuilder.Entity<Ad20222h>(entity =>
            {
                entity.HasKey(e => e.AdItemId)
                    .HasName("Pk_Ad_2022_2H_AdItem_id");

                entity.ToTable("Ad_2022_2H");

                entity.HasComment("Anti Dumping 2022 2H\\nMade in Indonesia Item List");

                entity.Property(e => e.AdItemId).HasColumnName("AdItem_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.Ad20222hs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_Ad_2022_2H_BpmItem");
            });

            modelBuilder.Entity<AdAfcid>(entity =>
            {
                entity.HasKey(e => e.AmazonFcId)
                    .HasName("Pk_AmazonFCAID_AmazonFC_id");

                entity.ToTable("AdAFCID", "ord");

                entity.HasIndex(e => new { e.FcAid, e.CustomerId }, "Unq_AdAFCID")
                    .IsUnique();

                entity.Property(e => e.AmazonFcId).HasColumnName("AmazonFC_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.Address1).HasMaxLength(128);

                entity.Property(e => e.Address2).HasMaxLength(128);

                entity.Property(e => e.Address3).HasMaxLength(128);

                entity.Property(e => e.City).HasMaxLength(32);

                entity.Property(e => e.Country)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.FcAid)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("FcAID");

                entity.Property(e => e.FcName).HasMaxLength(64);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.NsSyncTime).HasColumnType("datetime");

                entity.Property(e => e.San)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("SAN");

                entity.Property(e => e.State).HasMaxLength(8);

                entity.Property(e => e.Zip)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ZIP");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.AdAfcids)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("Fk_AdAFCID_Customer");
            });

            modelBuilder.Entity<AdAmzCase>(entity =>
            {
                entity.HasKey(e => e.AmzCaseId)
                    .HasName("Pk_AdAmzCase_AmzCase_id");

                entity.ToTable("AdAmzCase", "ord");

                entity.Property(e => e.AmzCaseId).HasColumnName("AmzCase_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.ArnId).HasColumnName("ARN_id");

                entity.Property(e => e.CaseDesc)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.CaseResol)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.LastModTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<AdArn>(entity =>
            {
                entity.HasKey(e => e.ArnId)
                    .HasName("Pk_AdARNnew_ARN_id");

                entity.ToTable("AdARN", "ord");

                entity.HasIndex(e => new { e.BolNo, e.Arn }, "Unq_AdARN")
                    .IsUnique();

                entity.HasIndex(e => e.Arn, "idx_AdARN_ARN");

                entity.HasIndex(e => e.BolNo, "idx_AdARN_BolNo");

                entity.HasIndex(e => e.BolId, "idx_AdARN_Bol_id");

                entity.HasIndex(e => e.TimeToPick, "idx_AdARN_TimeToPick");

                entity.Property(e => e.ArnId).HasColumnName("ARN_id");

                entity.Property(e => e.AmzStatusId)
                    .HasColumnName("AmzStatus_id")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Arn).HasColumnName("ARN");

                entity.Property(e => e.Asn).HasColumnName("ASN");

                entity.Property(e => e.BolId).HasColumnName("Bol_id");

                entity.Property(e => e.BolNo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.CarrierContact)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CarrierEmail)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CarrierId).HasColumnName("Carrier_id");

                entity.Property(e => e.CarrierMode)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CarrierPhone)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CarrierRefNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateBolCreated).HasColumnType("date");

                entity.Property(e => e.DateDelivered).HasColumnType("date");

                entity.Property(e => e.DateEta)
                    .HasColumnType("date")
                    .HasColumnName("DateETA");

                entity.Property(e => e.InvoiceNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IsBolChecked).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsBolSentToWh).HasColumnName("IsBolSentToWH");

                entity.Property(e => e.IsStaged).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.Note)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NsSyncTime).HasColumnType("datetime");

                entity.Property(e => e.PoNo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ProNo)
                    .HasMaxLength(4096)
                    .IsUnicode(false);

                entity.Property(e => e.SealNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ShipFrWhId).HasColumnName("ShipFrWh_id");

                entity.Property(e => e.ShipLablePath)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToAfcId).HasColumnName("ShipToAFC_id");

                entity.Property(e => e.TargetDate)
                    .HasColumnType("date")
                    .HasComment("New target ship date maintaied by Ops team.");

                entity.Property(e => e.TimeAmzLabel).HasColumnType("datetime");

                entity.Property(e => e.TimeArnRcvd).HasColumnType("datetime");

                entity.Property(e => e.TimeArqCreated).HasColumnType("datetime");

                entity.Property(e => e.TimeAsnSent).HasColumnType("datetime");

                entity.Property(e => e.TimeBolDoc).HasColumnType("datetime");

                entity.Property(e => e.TimeInvoiced).HasColumnType("datetime");

                entity.Property(e => e.TimePicked)
                    .HasColumnType("datetime")
                    .HasComment("Amzon actual Picked Time");

                entity.Property(e => e.TimeShipReq).HasColumnType("datetime");

                entity.Property(e => e.TimeToPick)
                    .HasColumnType("datetime")
                    .HasComment("BPM ask to Amazon Schedule to Pick Date");

                entity.Property(e => e.TotalVolCf)
                    .HasColumnType("money")
                    .HasColumnName("TotalVolCF");

                entity.Property(e => e.TotalWeightLb)
                    .HasColumnType("money")
                    .HasColumnName("TotalWeightLB");

                entity.HasOne(d => d.AmzStatus)
                    .WithMany(p => p.AdArns)
                    .HasForeignKey(d => d.AmzStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_AdARN_AmzBolStatus");

                entity.HasOne(d => d.Bol)
                    .WithMany(p => p.AdArns)
                    .HasForeignKey(d => d.BolId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("Fk_AdARNnew_AdBol");

                entity.HasOne(d => d.Carrier)
                    .WithMany(p => p.AdArns)
                    .HasForeignKey(d => d.CarrierId)
                    .HasConstraintName("Fk_AdARNnew_AdSCAC");

                entity.HasOne(d => d.ShipFrWh)
                    .WithMany(p => p.AdArns)
                    .HasForeignKey(d => d.ShipFrWhId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AdARN_BpmLocation");

                entity.HasOne(d => d.ShipToAfc)
                    .WithMany(p => p.AdArns)
                    .HasForeignKey(d => d.ShipToAfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_AdARN_AdAFCID");
            });

            modelBuilder.Entity<AdArnChange>(entity =>
            {
                entity.HasKey(e => e.ChangeId)
                    .HasName("Pk_AdArnChange_Change_id");

                entity.ToTable("AdArnChange", "ord");

                entity.Property(e => e.ChangeId).HasColumnName("Change_id");

                entity.Property(e => e.ArnId).HasColumnName("ARN_id");

                entity.Property(e => e.ModTime).HasColumnType("datetime");

                entity.Property(e => e.ValChange)
                    .IsRequired()
                    .HasMaxLength(4096)
                    .IsUnicode(false);

                entity.HasOne(d => d.Arn)
                    .WithMany(p => p.AdArnChanges)
                    .HasForeignKey(d => d.ArnId)
                    .HasConstraintName("Fk_AdArnChange_AdARN");
            });

            modelBuilder.Entity<AdBol>(entity =>
            {
                entity.HasKey(e => e.BolId)
                    .HasName("Pk_AdBol_Bol_id");

                entity.ToTable("AdBol", "ord");

                entity.HasIndex(e => e.BolNo, "Unq_AdBol")
                    .IsUnique();

                entity.Property(e => e.BolId).HasColumnName("Bol_id");

                entity.Property(e => e.BolNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.DateBolCreated).HasColumnType("date");

                entity.Property(e => e.ExpShipDate).HasColumnType("date");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.NsBolId).HasColumnName("NsBol_id");

                entity.Property(e => e.PoNo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ShipFrWhId).HasColumnName("ShipFrWh_id");

                entity.Property(e => e.ShipToAfcId).HasColumnName("ShipToAFC_id");

                entity.Property(e => e.TargetDate).HasColumnType("date");

                entity.Property(e => e.TimeRouteReqd).HasColumnType("datetime");

                entity.Property(e => e.TimeStaged).HasColumnType("datetime");

                entity.Property(e => e.TotalActPallet).HasColumnType("money");

                entity.Property(e => e.TotalStdPallet).HasColumnType("money");

                entity.Property(e => e.TotalVolumeCf)
                    .HasColumnType("money")
                    .HasColumnName("TotalVolumeCF");

                entity.Property(e => e.TotalWeightLb)
                    .HasColumnType("money")
                    .HasColumnName("TotalWeightLB");

                entity.HasOne(d => d.ShipFrWh)
                    .WithMany(p => p.AdBols)
                    .HasForeignKey(d => d.ShipFrWhId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_AdBolN_BpmLocation");

                entity.HasOne(d => d.ShipToAfc)
                    .WithMany(p => p.AdBols)
                    .HasForeignKey(d => d.ShipToAfcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_AdBolN_AdAFCID");
            });

            modelBuilder.Entity<AdBolBatch>(entity =>
            {
                entity.HasKey(e => e.BolBatchId)
                    .HasName("Pk_AdBolBatch_BolBatch_id");

                entity.ToTable("AdBolBatch", "ord");

                entity.Property(e => e.BolBatchId).HasColumnName("BolBatch_id");

                entity.Property(e => e.BatchNo).HasComment("Current Max 1004 + 001 as 9/4/2021\\nAdd 20000 to make Batch #, Then seq 1 ~ 999\\nBOL = Seq * 1000 + serial");
            });

            modelBuilder.Entity<AdBolChange>(entity =>
            {
                entity.HasKey(e => e.ChangeId)
                    .HasName("Pk_AdBolChange_Change_id");

                entity.ToTable("AdBolChange", "ord");

                entity.Property(e => e.ChangeId).HasColumnName("Change_id");

                entity.Property(e => e.BolId).HasColumnName("Bol_id");

                entity.Property(e => e.ModTime).HasColumnType("datetime");

                entity.Property(e => e.ValChange)
                    .IsRequired()
                    .HasMaxLength(4096)
                    .IsUnicode(false);

                entity.HasOne(d => d.Bol)
                    .WithMany(p => p.AdBolChanges)
                    .HasForeignKey(d => d.BolId)
                    .HasConstraintName("Fk_AdBolChange_AdBol");
            });

            modelBuilder.Entity<AdBolPickWh>(entity =>
            {
                entity.HasKey(e => e.PickWhId)
                    .HasName("Pk_AdBolPickWH_PickWH_id");

                entity.ToTable("AdBolPickWH", "ord");

                entity.HasIndex(e => e.ItemNoId, "Unq_AdBolPickWH")
                    .IsUnique();

                entity.Property(e => e.PickWhId).HasColumnName("PickWH_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.P1Id).HasColumnName("P1_id");

                entity.Property(e => e.P2Id).HasColumnName("P2_id");

                entity.Property(e => e.P3Id).HasColumnName("P3_id");

                entity.Property(e => e.P4Id).HasColumnName("P4_id");

                entity.Property(e => e.P5Id).HasColumnName("P5_id");

                entity.HasOne(d => d.ItemNo)
                    .WithOne(p => p.AdBolPickWh)
                    .HasForeignKey<AdBolPickWh>(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_AdBolPickWH_BpmItem");

                entity.HasOne(d => d.P1)
                    .WithMany(p => p.AdBolPickWhP1s)
                    .HasForeignKey(d => d.P1Id)
                    .HasConstraintName("Fk_AdBolPickWH_BpmLocation");

                entity.HasOne(d => d.P2)
                    .WithMany(p => p.AdBolPickWhP2s)
                    .HasForeignKey(d => d.P2Id)
                    .HasConstraintName("Fk_AdBolPickWH_BpmLocation_0");

                entity.HasOne(d => d.P3)
                    .WithMany(p => p.AdBolPickWhP3s)
                    .HasForeignKey(d => d.P3Id)
                    .HasConstraintName("Fk_AdBolPickWH_BpmLocation_1");

                entity.HasOne(d => d.P4)
                    .WithMany(p => p.AdBolPickWhP4s)
                    .HasForeignKey(d => d.P4Id)
                    .HasConstraintName("Fk_AdBolPickWH_BpmLocation_2");

                entity.HasOne(d => d.P5)
                    .WithMany(p => p.AdBolPickWhP5s)
                    .HasForeignKey(d => d.P5Id)
                    .HasConstraintName("Fk_AdBolPickWH_BpmLocation_3");
            });

            modelBuilder.Entity<AdBolRule>(entity =>
            {
                entity.HasKey(e => e.BolRuleId)
                    .HasName("Pk_AdBolRule_Rule_id");

                entity.ToTable("AdBolRule", "ord");

                entity.Property(e => e.BolRuleId).HasColumnName("BolRule_id");

                entity.Property(e => e.BancMaxQty).HasComment("Weekly Max Ship Qty");

                entity.Property(e => e.MaxCf).HasColumnName("MaxCF");
            });

            modelBuilder.Entity<AdInvValuation>(entity =>
            {
                entity.ToTable("AdInvValuation");

                entity.Property(e => e.AdInvValuationId).HasColumnName("AdInvValuation_id");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.AdInvValuations)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AdInvValuation_BpmItem");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.AdInvValuations)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AdInvValuation_BpmLocation");
            });

            modelBuilder.Entity<AdInvValuationGl>(entity =>
            {
                entity.ToTable("AdInvValuationGL");

                entity.Property(e => e.AdInvValuationGlId).HasColumnName("AdInvValuationGL_id");

                entity.Property(e => e.AccountId).HasColumnName("Account_id");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AdInvValuationGls)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AdInvValuationGL_GlAccount");
            });

            modelBuilder.Entity<AdOrder>(entity =>
            {
                entity.HasKey(e => e.OrderId)
                    .HasName("Pk_AdOrder_Order_id");

                entity.ToTable("AdOrder", "ord");

                entity.Property(e => e.OrderId).HasColumnName("Order_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.AmzPoNo)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.ExpShipDate).HasColumnType("date");

                entity.Property(e => e.MarketPalceId).HasColumnName("MarketPalce_id");

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.ShipToAfcId).HasColumnName("ShipToAFC_id");

                entity.Property(e => e.ShipWindowEnd).HasColumnType("date");

                entity.Property(e => e.ShipWindowStart).HasColumnType("date");

                entity.Property(e => e.TimeAccepted).HasColumnType("datetime");

                entity.Property(e => e.TimeOrdered).HasColumnType("datetime");

                entity.Property(e => e.VendorCodeId).HasColumnName("VendorCode_id");

                entity.HasOne(d => d.MarketPalce)
                    .WithMany(p => p.AdOrders)
                    .HasForeignKey(d => d.MarketPalceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_AdOrder_KO_MarketPlace");

                entity.HasOne(d => d.ShipToAfc)
                    .WithMany(p => p.AdOrders)
                    .HasForeignKey(d => d.ShipToAfcId)
                    .HasConstraintName("Fk_AdOrder_AmazonFCAID");

                entity.HasOne(d => d.VendorCode)
                    .WithMany(p => p.AdOrders)
                    .HasForeignKey(d => d.VendorCodeId)
                    .HasConstraintName("Fk_AdOrder_AmzVendorCode");
            });

            modelBuilder.Entity<AdOrderDetail>(entity =>
            {
                entity.HasKey(e => e.OrderLineId)
                    .HasName("Pk_AdOrderDetail_OrderLine_id");

                entity.ToTable("AdOrderDetail", "ord");

                entity.Property(e => e.OrderLineId).HasColumnName("OrderLine_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Note)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.OrderId).HasColumnName("Order_id");

                entity.Property(e => e.OrderStatusId).HasColumnName("OrderStatus_id");

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.AdOrderDetails)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_AdOrderDetail_KO_Itemno");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.AdOrderDetails)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("Fk_AdOrderDetail_AdOrder");

                entity.HasOne(d => d.OrderStatus)
                    .WithMany(p => p.AdOrderDetails)
                    .HasForeignKey(d => d.OrderStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_AdOrderDetail_StatusOrder");
            });

            modelBuilder.Entity<AdPallet>(entity =>
            {
                entity.HasKey(e => e.PalletId)
                    .HasName("pk_AdPallet");

                entity.ToTable("AdPallet", "ord");

                entity.HasIndex(e => e.ArnId, "idx_AdPallet_Arn_id");

                entity.HasIndex(e => e.SsccId, "idx_AdPallet_Sscc_id");

                entity.Property(e => e.PalletId).HasColumnName("Pallet_id");

                entity.Property(e => e.ArnId).HasColumnName("Arn_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.SsccId).HasColumnName("Sscc_id");

                entity.HasOne(d => d.Arn)
                    .WithMany(p => p.AdPallets)
                    .HasForeignKey(d => d.ArnId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AdPallet_AdARN");

                entity.HasOne(d => d.Sscc)
                    .WithMany(p => p.AdPallets)
                    .HasForeignKey(d => d.SsccId)
                    .HasConstraintName("fk_AdPallet_AdSscc");
            });

            modelBuilder.Entity<AdPalletOnBol>(entity =>
            {
                entity.HasKey(e => e.PalletId)
                    .HasName("Pk_AdBolDetail_BolLine_id");

                entity.ToTable("AdPalletOnBol", "ord");

                entity.Property(e => e.PalletId).HasColumnName("Pallet_id");

                entity.Property(e => e.BolId).HasColumnName("Bol_id");

                entity.Property(e => e.PalletTypeId).HasColumnName("PalletType_id");

                entity.HasOne(d => d.PalletType)
                    .WithMany(p => p.AdPalletOnBols)
                    .HasForeignKey(d => d.PalletTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_AdPalletOnBol_PalletType");
            });

            modelBuilder.Entity<AdScac>(entity =>
            {
                entity.HasKey(e => e.CarrierId)
                    .HasName("Pk_AdCarrier_Carrier_id");

                entity.ToTable("AdSCAC", "ord");

                entity.HasIndex(e => e.Scac, "Unq_AdCarrier")
                    .IsUnique();

                entity.Property(e => e.CarrierId).HasColumnName("Carrier_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.CarrierName)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.Scac)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("SCAC");
            });

            modelBuilder.Entity<AdSscc>(entity =>
            {
                entity.HasKey(e => e.SsccId)
                    .HasName("Pk_AdSscc_Sscc_id");

                entity.ToTable("AdSscc", "ord");

                entity.HasIndex(e => e.SsccNo, "Unq_AdSscc")
                    .IsUnique();

                entity.HasIndex(e => e.SoDId, "idx_AdSscc");

                entity.HasIndex(e => e.PalletId, "idx_AdSscc_Pallet_id");

                entity.Property(e => e.SsccId).HasColumnName("Sscc_id");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.PalletId).HasColumnName("Pallet_id");

                entity.Property(e => e.SoDId).HasColumnName("SoD_id");

                entity.Property(e => e.SoDate).HasColumnType("date");

                entity.Property(e => e.SsccNo).HasComment("081,181,100,003,212,998 - MAINSL\\n000,811,811,021,490,200 - PRISM\\n000,811,811,020,054,205 - BANC");

                entity.HasOne(d => d.Pallet)
                    .WithMany(p => p.AdSsccs)
                    .HasForeignKey(d => d.PalletId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_AdSscc_AdPallet");

                entity.HasOne(d => d.SoD)
                    .WithMany(p => p.AdSsccs)
                    .HasForeignKey(d => d.SoDId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("Fk_AdSscc_SoD");
            });

            modelBuilder.Entity<AdVendorCode>(entity =>
            {
                entity.HasKey(e => e.VendorCodeId)
                    .HasName("Pk_AmzVendorCode_Vendor_id");

                entity.ToTable("AdVendorCode", "ord");

                entity.Property(e => e.VendorCodeId).HasColumnName("VendorCode_id");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AdtemOnPallet>(entity =>
            {
                entity.HasKey(e => e.ItemOnPalletId)
                    .HasName("Pk_AdPalletItem_PalletItem_id");

                entity.ToTable("AdtemOnPallet", "ord");

                entity.Property(e => e.ItemOnPalletId).HasColumnName("ItemOnPallet_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.PalletId).HasColumnName("Pallet_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.AdtemOnPallets)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_AdPalletItem_KO_Itemno");

                entity.HasOne(d => d.Pallet)
                    .WithMany(p => p.AdtemOnPallets)
                    .HasForeignKey(d => d.PalletId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_AdtemOnPallet_AdPalletOnBol");
            });

            modelBuilder.Entity<AmazonAdRepDetail>(entity =>
            {
                entity.HasKey(e => e.AdDetailId)
                    .HasName("PK__AmazonAd__4228F6B8398DCBCF");

                entity.ToTable("AmazonAdRepDetail");

                entity.HasIndex(e => new { e.AdId, e.AdvertisedAsin }, "Unique_AmazonAdRepDetail")
                    .IsUnique();

                entity.Property(e => e.AdDetailId).HasColumnName("AD_Detail_ID");

                entity.Property(e => e.AdId).HasColumnName("AD_ID");

                entity.Property(e => e.AdvertisedAsin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Advertised_ASIN");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.IcrId).HasColumnName("ICR_id");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.PortfolioName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Portfolio_name");

                entity.Property(e => e.StartDate)
                    .HasColumnType("date")
                    .HasColumnName("Start_Date");

                entity.HasOne(d => d.Ad)
                    .WithMany(p => p.AmazonAdRepDetails)
                    .HasForeignKey(d => d.AdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__AmazonAdR__AD_ID__4784FCF1");

                entity.HasOne(d => d.Icr)
                    .WithMany(p => p.AmazonAdRepDetails)
                    .HasForeignKey(d => d.IcrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__AmazonAdR__ICR_i__4879212A");
            });

            modelBuilder.Entity<AmazonAdRepDetailHistory>(entity =>
            {
                entity.HasKey(e => e.AdDetailHistoryId)
                    .HasName("PK__AmazonAd__199DAA348E1CAFCB");

                entity.ToTable("AmazonAdRepDetailHistory");

                entity.Property(e => e.AdDetailHistoryId).HasColumnName("AD_Detail_History_ID");

                entity.Property(e => e.AdDetailId).HasColumnName("AD_Detail_ID");

                entity.Property(e => e.ClickThruRateCtr)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("Click_Thru_Rate_CTR");

                entity.Property(e => e.CostPerClickCpc)
                    .HasColumnType("money")
                    .HasColumnName("Cost_Per_Click_CPC");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.FourteenDayConversionRate)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("fourteen_Day_Conversion_Rate");

                entity.Property(e => e.FourteenDayTotalOrders).HasColumnName("fourteen_Day_Total_Orders");

                entity.Property(e => e.FourteenDayTotalSales)
                    .HasColumnType("money")
                    .HasColumnName("fourteen_Day_Total_Sales");

                entity.Property(e => e.FourteenDayTotalUnits).HasColumnName("fourteen_Day_Total_Units");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.SevenDayOtherSkuSalse)
                    .HasColumnType("money")
                    .HasColumnName("seven_day_other_sku_salse");

                entity.Property(e => e.SevenDayOtherSkuUnit).HasColumnName("seven_day_other_sku_unit");

                entity.Property(e => e.Spend).HasColumnType("money");

                entity.Property(e => e.TotalAdvertisingCostOfSalesAcos)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("Total_Advertising_Cost_of_Sales_ACOS");

                entity.Property(e => e.TotalReturnOnAdvertisingSpendRoas)
                    .HasColumnType("decimal(10, 5)")
                    .HasColumnName("Total_Return_on_Advertising_Spend_ROAS");

                entity.HasOne(d => d.AdDetail)
                    .WithMany(p => p.AmazonAdRepDetailHistories)
                    .HasForeignKey(d => d.AdDetailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__AmazonAdR__AD_De__4B558DD5");
            });

            modelBuilder.Entity<AmazonAdReport>(entity =>
            {
                entity.HasKey(e => e.AdId)
                    .HasName("PK__AmazonAd__B5B611FBE94DCB50");

                entity.ToTable("AmazonAdReport");

                entity.HasIndex(e => new { e.EndDate, e.CampaignName, e.IsWeek }, "Unique_AmazonAdReport")
                    .IsUnique();

                entity.Property(e => e.AdId).HasColumnName("AD_ID");

                entity.Property(e => e.AdGroupName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Ad_Group_Name");

                entity.Property(e => e.CampaignName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Campaign_Name");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Created_Date");

                entity.Property(e => e.EndDate)
                    .HasColumnType("date")
                    .HasColumnName("End_Date");

                entity.Property(e => e.IsWeek)
                    .IsRequired()
                    .HasColumnName("isWeek")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.SponsoredTypeId).HasColumnName("SponsoredType_id");

                entity.HasOne(d => d.SponsoredType)
                    .WithMany(p => p.AmazonAdReports)
                    .HasForeignKey(d => d.SponsoredTypeId)
                    .HasConstraintName("fk_AmazonAdReport_AmzAdsSponsoredType");
            });

            modelBuilder.Entity<AmazonAsin>(entity =>
            {
                entity.HasKey(e => e.AsinId)
                    .HasName("Pk_AmzonASIN_ASIN_id");

                entity.ToTable("AmazonASIN");

                entity.Property(e => e.AsinId).HasColumnName("ASIN_id");

                entity.Property(e => e.AmzAsin)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("AmzASIN");

                entity.Property(e => e.CustSku)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("CustSKU");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.Title)
                    .HasMaxLength(128)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmazonBsr>(entity =>
            {
                entity.HasKey(e => e.BsrId)
                    .HasName("pk_AmazonBSR");

                entity.ToTable("AmazonBSR");

                entity.HasIndex(e => new { e.Asin, e.RankDate, e.Country }, "idx_AmazonBSR");

                entity.Property(e => e.BsrId).HasColumnName("BSR_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Asin)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.CatNodeId).HasColumnName("CatNode_id");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IcrId).HasColumnName("ICR_id");

                entity.Property(e => e.RankDate).HasColumnType("date");

                entity.HasOne(d => d.CatNode)
                    .WithMany(p => p.AmazonBsrs)
                    .HasForeignKey(d => d.CatNodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AmazonBSR_KO_AMZCategory");

                entity.HasOne(d => d.Icr)
                    .WithMany(p => p.AmazonBsrs)
                    .HasForeignKey(d => d.IcrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AmazonBSR_MkICR");
            });

            modelBuilder.Entity<AmazonCollection>(entity =>
            {
                entity.ToTable("AmazonCollection");

                entity.HasIndex(e => e.CollectionName, "unq_AmazonCollection")
                    .IsUnique();

                entity.Property(e => e.CollectionName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmzAdsPortfolioState>(entity =>
            {
                entity.HasKey(e => e.StateId)
                    .HasName("pk_AmzAdsPortfolioState");

                entity.ToTable("AmzAdsPortfolioState");

                entity.Property(e => e.StateId).HasColumnName("State_id");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<AmzAdsProductType>(entity =>
            {
                entity.HasKey(e => e.ProductTypeId)
                    .HasName("pk_AmzAdsProductType");

                entity.ToTable("AmzAdsProductType");

                entity.Property(e => e.ProductTypeId).HasColumnName("ProductType_id");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmzAdsRefreshToken>(entity =>
            {
                entity.ToTable("Amz_Ads_RefreshToken");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ModfiedTime)
                    .HasColumnType("datetime")
                    .HasColumnName("modfiedTime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.RefreshToken).IsUnicode(false);

                entity.Property(e => e.Scope)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmzAdsReportType>(entity =>
            {
                entity.HasKey(e => e.RptTypeId)
                    .HasName("pk_AmzReportType");

                entity.ToTable("AmzAdsReportType");

                entity.Property(e => e.RptTypeId).HasColumnName("RptType_id");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmzAdsRptCreateHistory>(entity =>
            {
                entity.HasKey(e => e.RptId)
                    .HasName("pk_AmzAdsRptCreateHistory");

                entity.ToTable("AmzAdsRptCreateHistory");

                entity.Property(e => e.RptId).HasColumnName("Rpt_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.AdsProductId).HasColumnName("AdsProduct_id");

                entity.Property(e => e.CountInsert).HasDefaultValueSql("((1))");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.ReportTypeId).HasColumnName("ReportType_id");

                entity.Property(e => e.TimeFrameId).HasColumnName("TimeFrame_id");

                entity.HasOne(d => d.AdsProduct)
                    .WithMany(p => p.AmzAdsRptCreateHistories)
                    .HasForeignKey(d => d.AdsProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AmzAdsRptCreateHistory_AmzAdsProductType");

                entity.HasOne(d => d.ReportType)
                    .WithMany(p => p.AmzAdsRptCreateHistories)
                    .HasForeignKey(d => d.ReportTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AmzAdsRptCreateHistory_AmzReportType");

                entity.HasOne(d => d.TimeFrame)
                    .WithMany(p => p.AmzAdsRptCreateHistories)
                    .HasForeignKey(d => d.TimeFrameId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AmzAdsRptCreateHistory_AmzAdsTimeFrameId");
            });

            modelBuilder.Entity<AmzAdsSponsoredType>(entity =>
            {
                entity.HasKey(e => e.TypeId)
                    .HasName("pk_AmzAdsSponsoredType");

                entity.ToTable("AmzAdsSponsoredType");

                entity.Property(e => e.TypeId).HasColumnName("Type_id");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmzAdsTimeFrameType>(entity =>
            {
                entity.HasKey(e => e.TimeFrameId)
                    .HasName("pk_Amz");

                entity.ToTable("AmzAdsTimeFrameType");

                entity.Property(e => e.TimeFrameId).HasColumnName("TimeFrame_id");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmzBolStatus>(entity =>
            {
                entity.HasKey(e => e.BolStatusId)
                    .HasName("Pk_AdBolStatus_BolStatus_id");

                entity.ToTable("AmzBolStatus", "ord");

                entity.Property(e => e.BolStatusId).HasColumnName("BolStatus_id");

                entity.Property(e => e.BolStatus)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasComment("New, RouteReq,ArnRcvd,Shipped,AsnSent,Cancelled");
            });

            modelBuilder.Entity<AmzCbStatus>(entity =>
            {
                entity.HasKey(e => e.CbStatusId)
                    .HasName("Pk_AmzCbStatus_CbStatus_id");

                entity.ToTable("AmzCbStatus");

                entity.Property(e => e.CbStatusId).HasColumnName("CbStatus_id");

                entity.Property(e => e.CbStatus)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.CbStautsNote)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("CbStauts_Note");
            });

            modelBuilder.Entity<AmzCbSubType>(entity =>
            {
                entity.HasKey(e => e.CbSubTypeId)
                    .HasName("Pk_AmzCbSubType_CbSubType_id");

                entity.ToTable("AmzCbSubType");

                entity.Property(e => e.CbSubTypeId).HasColumnName("CbSubType_id");

                entity.Property(e => e.CbSubType)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.CbSubTypeNote)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("CbSubType_Note");
            });

            modelBuilder.Entity<AmzCbType>(entity =>
            {
                entity.HasKey(e => e.CbTypeId)
                    .HasName("Pk_AmzCbType_CbType_id_0");

                entity.ToTable("AmzCbType");

                entity.Property(e => e.CbTypeId).HasColumnName("CbType_id");

                entity.Property(e => e.CbType)
                    .HasMaxLength(128)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmzChargeBack>(entity =>
            {
                entity.HasKey(e => e.ChargeBackId)
                    .HasName("Pk_AmzChargeBack_ChargeBack_id");

                entity.ToTable("AmzChargeBack");

                entity.Property(e => e.ChargeBackId).HasColumnName("ChargeBack_id");

                entity.Property(e => e.AmzNotes)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ArnCreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Asin)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.CbAmount).HasColumnType("decimal(8, 2)");

                entity.Property(e => e.CbAmzNo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.CbCreatedDate).HasColumnType("date");

                entity.Property(e => e.CbDisputeByDate).HasColumnType("date");

                entity.Property(e => e.CbStatusId).HasColumnName("CbStatus_id");

                entity.Property(e => e.CbSubTypeId).HasColumnName("CbSubType_id");

                entity.Property(e => e.CbTypeId).HasColumnName("CbType_id");

                entity.Property(e => e.OrderTypeId).HasColumnName("OrderType_id");

                entity.Property(e => e.PoNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ProNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ShipWinowEnd).HasColumnType("datetime");

                entity.Property(e => e.ShipWinowStart).HasColumnType("datetime");

                entity.HasOne(d => d.CbStatus)
                    .WithMany(p => p.AmzChargeBacks)
                    .HasForeignKey(d => d.CbStatusId)
                    .HasConstraintName("Fk_AmzChargeBack_AmzCbStatus");

                entity.HasOne(d => d.CbSubType)
                    .WithMany(p => p.AmzChargeBacks)
                    .HasForeignKey(d => d.CbSubTypeId)
                    .HasConstraintName("Fk_AmzChargeBack_AmzCbSubType");

                entity.HasOne(d => d.CbType)
                    .WithMany(p => p.AmzChargeBacks)
                    .HasForeignKey(d => d.CbTypeId)
                    .HasConstraintName("fk_amzchargeback_amzcbtype");

                entity.HasOne(d => d.OrderType)
                    .WithMany(p => p.AmzChargeBacks)
                    .HasForeignKey(d => d.OrderTypeId)
                    .HasConstraintName("Fk_AmzChargeBack_AmzOrderType");
            });

            modelBuilder.Entity<AmzDistributor>(entity =>
            {
                entity.ToTable("Amz_Distributor");

                entity.HasIndex(e => e.Distributor, "idx_Amz_Distributor");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Distributor)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmzMfgCode>(entity =>
            {
                entity.HasKey(e => e.MfgCodeId)
                    .HasName("Pk_AmzMfgCode_MfgCode_id");

                entity.ToTable("AmzMfgCode", "ord");

                entity.Property(e => e.MfgCodeId).HasColumnName("MfgCode_id");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.MfgCode)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.AmzMfgCodes)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("Fk_AmzMfgCode_Customer");
            });

            modelBuilder.Entity<AmzObFcstD>(entity =>
            {
                entity.HasKey(e => e.FcstDId)
                    .HasName("pk_AmzOB_Fcst_D");

                entity.ToTable("AmzOB_Fcst_D");

                entity.HasIndex(e => new { e.FcstId, e.WkNo }, "unq_AmzOB_Fcst_D")
                    .IsUnique();

                entity.Property(e => e.FcstDId).HasColumnName("FcstD_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.FcstDate).HasColumnType("date");

                entity.Property(e => e.FcstId).HasColumnName("Fcst_id");

                entity.Property(e => e.LastModTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.HasOne(d => d.Fcst)
                    .WithMany(p => p.AmzObFcstDs)
                    .HasForeignKey(d => d.FcstId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AmzOB_Fcst_D_AmzOB_Forecasting");
            });

            modelBuilder.Entity<AmzObForecasting>(entity =>
            {
                entity.HasKey(e => e.FcstId)
                    .HasName("pk_AmzOB_Forecasting");

                entity.ToTable("AmzOB_Forecasting");

                entity.HasIndex(e => new { e.RptId, e.IcrId, e.ProbLevel }, "unq_AmzOB_Forecasting")
                    .IsUnique();

                entity.Property(e => e.FcstId).HasColumnName("Fcst_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Asin)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IcrId).HasColumnName("ICR_id");

                entity.Property(e => e.LastModTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.RptId).HasColumnName("Rpt_id");

                entity.Property(e => e.StartWkNo).HasColumnName("Start_WkNo");

                entity.HasOne(d => d.Icr)
                    .WithMany(p => p.AmzObForecastings)
                    .HasForeignKey(d => d.IcrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AmzOB_Forecasting_MkICR");

                entity.HasOne(d => d.Rpt)
                    .WithMany(p => p.AmzObForecastings)
                    .HasForeignKey(d => d.RptId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AmzOB_Forecasting_AmzOB_Rpt_T");
            });

            modelBuilder.Entity<AmzObInv>(entity =>
            {
                entity.HasKey(e => e.InvRptId)
                    .HasName("pk_AmzOB_Inv");

                entity.ToTable("AmzOB_Inv");

                entity.HasIndex(e => new { e.RptId, e.IcrId }, "unq_AmzOB_Inv")
                    .IsUnique();

                entity.Property(e => e.InvRptId).HasColumnName("InvRpt_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Aged90PlusDaysSellableInventoryCost).HasColumnType("money");

                entity.Property(e => e.Asin)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AverageVendorLeadTimeDays).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.IcrId).HasColumnName("ICR_id");

                entity.Property(e => e.LastModTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.NetReceivedInventoryCost).HasColumnType("money");

                entity.Property(e => e.ProcurableProductOutOfStockRate).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.ReceiveFillRate).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.RptId).HasColumnName("Rpt_id");

                entity.Property(e => e.SellThroughRate).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.SellableOnHandInventoryCost).HasColumnType("money");

                entity.Property(e => e.UnhealthyInventoryCost).HasColumnType("money");

                entity.Property(e => e.UnsellableOnHandInventoryCost).HasColumnType("money");

                entity.Property(e => e.VendorConfirmationRate).HasColumnType("decimal(6, 2)");

                entity.HasOne(d => d.Icr)
                    .WithMany(p => p.AmzObInvs)
                    .HasForeignKey(d => d.IcrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AmzOB_Inv_MkICR");

                entity.HasOne(d => d.Rpt)
                    .WithMany(p => p.AmzObInvs)
                    .HasForeignKey(d => d.RptId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AmzOB_Inv_AmzOB_Rpt_T");
            });

            modelBuilder.Entity<AmzObInvManufacturing>(entity =>
            {
                entity.HasKey(e => e.InventoryId)
                    .HasName("Pk_AmzOB_Inv_Manufacturing_Inventory_id");

                entity.ToTable("AmzOB_Inv_Manufacturing");

                entity.HasIndex(e => new { e.Asin, e.DateStart }, "Unq_AmzOB_Inv_Manufacturing")
                    .IsUnique();

                entity.Property(e => e.InventoryId).HasColumnName("Inventory_id");

                entity.Property(e => e.Aged90DaysSellableInventory).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Asin)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.NetReceived)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Net_Received");

                entity.Property(e => e.NetReceivedUnits).HasColumnName("Net_Received_Units");

                entity.Property(e => e.OverallVendorLeadDays).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ProcurableProductOos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProcurableProductOOS");

                entity.Property(e => e.ReceiveFillRate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SellThroughRate)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Sell_Through_Rate");

                entity.Property(e => e.SellableOnHandInventory).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UnhealthyInventory).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UnsellableOnHandInventory).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.VendorConfirmationRate).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.AmzObInvManufacturings)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_AmzOB_Inv_Manufacturing_BpmItem");
            });

            modelBuilder.Entity<AmzObNetPpm>(entity =>
            {
                entity.HasKey(e => e.NetPpmId)
                    .HasName("pk_AmzOB_NetPPM");

                entity.ToTable("AmzOB_NetPPM");

                entity.HasIndex(e => new { e.RptId, e.IcrId }, "unq_AmzOB_NetPPM")
                    .IsUnique();

                entity.Property(e => e.NetPpmId).HasColumnName("NetPPM_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Asin)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IcrId).HasColumnName("ICR_id");

                entity.Property(e => e.LastModTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.NetPureProductMargin).HasColumnType("decimal(10, 7)");

                entity.Property(e => e.RptId).HasColumnName("Rpt_id");

                entity.HasOne(d => d.Icr)
                    .WithMany(p => p.AmzObNetPpms)
                    .HasForeignKey(d => d.IcrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AmzOB_NetPPM_MkICR");

                entity.HasOne(d => d.Rpt)
                    .WithMany(p => p.AmzObNetPpms)
                    .HasForeignKey(d => d.RptId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AmzOB_NetPPM_AmzOB_Rpt_T");
            });

            modelBuilder.Entity<AmzObRealTime>(entity =>
            {
                entity.HasKey(e => e.RealTId)
                    .HasName("pk_AmzOB_RealTime");

                entity.ToTable("AmzOB_RealTime");

                entity.Property(e => e.RealTId).HasColumnName("RealT_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Asin)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.IcrId).HasColumnName("ICR_id");

                entity.Property(e => e.OrdRev).HasColumnType("decimal(8, 2)");
            });

            modelBuilder.Entity<AmzObRealTimeHourly>(entity =>
            {
                entity.HasKey(e => e.RealTimeId)
                    .HasName("pk_AmzOB_RealTimeHourly");

                entity.ToTable("AmzOB_RealTimeHourly");

                entity.HasIndex(e => e.DateStart, "idx_AmzOB_RealTimeHourly_DateStart");

                entity.Property(e => e.RealTimeId).HasColumnName("RealTime_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Asin)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ASIN");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.IcrId).HasColumnName("ICR_id");

                entity.Property(e => e.OrdRevenue).HasColumnType("money");

                entity.HasOne(d => d.Icr)
                    .WithMany(p => p.AmzObRealTimeHourlies)
                    .HasForeignKey(d => d.IcrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AmzOB_RealTimeHourly_MkICR");
            });

            modelBuilder.Entity<AmzObRptT>(entity =>
            {
                entity.HasKey(e => e.RptId)
                    .HasName("pk_AmzOB_Rpt_T");

                entity.ToTable("AmzOB_Rpt_T");

                entity.HasIndex(e => new { e.DateStart, e.DateEnd, e.TimeFameId, e.DistributorId, e.ProgramId }, "idx_AmzOB_Rpt_T");

                entity.Property(e => e.RptId).HasColumnName("Rpt_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.AddedUserId).HasColumnName("AddedUser_id");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.DistributorId).HasColumnName("Distributor_id");

                entity.Property(e => e.LasetModTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.ProgramId).HasColumnName("Program_id");

                entity.Property(e => e.TimeFameId).HasColumnName("TimeFame_id");

                entity.HasOne(d => d.Distributor)
                    .WithMany(p => p.AmzObRptTs)
                    .HasForeignKey(d => d.DistributorId)
                    .HasConstraintName("fk_AmzOB_Rpt_T_Amz_Distributor");

                entity.HasOne(d => d.Program)
                    .WithMany(p => p.AmzObRptTs)
                    .HasForeignKey(d => d.ProgramId)
                    .HasConstraintName("fk_AmzOB_Rpt_T_AmzProgram");

                entity.HasOne(d => d.TimeFame)
                    .WithMany(p => p.AmzObRptTs)
                    .HasForeignKey(d => d.TimeFameId)
                    .HasConstraintName("fk_AmzOB_Rpt_T_TimeFrame");
            });

            modelBuilder.Entity<AmzObSale>(entity =>
            {
                entity.HasKey(e => e.SalesRptId)
                    .HasName("pk_AmzOB_Sales");

                entity.ToTable("AmzOB_Sales");

                entity.HasIndex(e => new { e.RptId, e.IcrId }, "unq_AmzOB_Sales")
                    .IsUnique();

                entity.Property(e => e.SalesRptId).HasColumnName("SalesRpt_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Asin)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IcrId).HasColumnName("ICR_id");

                entity.Property(e => e.LastModTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.OrderedRevenue).HasColumnType("money");

                entity.Property(e => e.RptId).HasColumnName("Rpt_id");

                entity.Property(e => e.ShippedCogs).HasColumnType("money");

                entity.Property(e => e.ShippedRevenue).HasColumnType("money");

                entity.HasOne(d => d.Icr)
                    .WithMany(p => p.AmzObSales)
                    .HasForeignKey(d => d.IcrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AmzOB_Sales_MkICR");

                entity.HasOne(d => d.Rpt)
                    .WithMany(p => p.AmzObSales)
                    .HasForeignKey(d => d.RptId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AmzOB_Sales_AmzOB_Rpt_T");
            });

            modelBuilder.Entity<AmzObSalesManuFacturing>(entity =>
            {
                entity.HasKey(e => e.SalesId)
                    .HasName("Pk_AmzOB_Sales_ManuFacturing_Sales_id");

                entity.ToTable("AmzOB_Sales_ManuFacturing");

                entity.HasIndex(e => new { e.DateStart, e.Asin }, "Idx_AmzOB_Sales_ManuFacturing");

                entity.Property(e => e.SalesId).HasColumnName("Sales_id");

                entity.Property(e => e.Asin)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.CustomerReturns).HasColumnName("Customer_Returns");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.OrdRevenue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Ord_Revenue");

                entity.Property(e => e.OrdUnits).HasColumnName("Ord_Units");

                entity.Property(e => e.RepOos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Rep_OOS");

                entity.Property(e => e.ShipedRevenue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Shiped_Revenue");

                entity.Property(e => e.ShippedCogs)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Shipped_COGS");

                entity.Property(e => e.ShippedUnits).HasColumnName("Shipped_Units");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.AmzObSalesManuFacturings)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_AmzOB_Sales_ManuFacturing_BpmItem");
            });

            modelBuilder.Entity<AmzObTracffic>(entity =>
            {
                entity.HasKey(e => e.TrafficId)
                    .HasName("Pk_AmzOB_Tracffic_Traffic_id");

                entity.ToTable("AmzOB_Tracffic");

                entity.HasIndex(e => new { e.DateStart, e.Asin }, "Unq_AmzOB_Tracffic")
                    .IsUnique();

                entity.Property(e => e.TrafficId).HasColumnName("Traffic_id");

                entity.Property(e => e.Asin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.ProductTitle)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.AmzObTracffics)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_AmzOB_Tracffic_BpmItem");
            });

            modelBuilder.Entity<AmzObTraffic>(entity =>
            {
                entity.HasKey(e => e.TrafficId)
                    .HasName("pk_AmzOB_Traffic");

                entity.ToTable("AmzOB_Traffic");

                entity.HasIndex(e => new { e.RptId, e.IcrId }, "unq_AmzOB_Traffic")
                    .IsUnique();

                entity.Property(e => e.TrafficId).HasColumnName("Traffic_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Asin)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IcrId).HasColumnName("ICR_id");

                entity.Property(e => e.LastModTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.RptId).HasColumnName("Rpt_id");

                entity.HasOne(d => d.Icr)
                    .WithMany(p => p.AmzObTraffics)
                    .HasForeignKey(d => d.IcrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AmzOB_Traffic_MkICR");

                entity.HasOne(d => d.Rpt)
                    .WithMany(p => p.AmzObTraffics)
                    .HasForeignKey(d => d.RptId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AmzOB_Traffic_AmzOB_Rpt_T");
            });

            modelBuilder.Entity<AmzObmthlyRptManufInvD>(entity =>
            {
                entity.HasKey(e => e.RptManufDInvId)
                    .HasName("pk_AmzOBMthlyRpt_Manuf_Inv_D");

                entity.ToTable("AmzOBMthlyRpt_Manuf_Inv_D");

                entity.HasIndex(e => new { e.RptManufTId, e.Asin }, "unq_AmzOBMthlyRpt_Manuf_Inv_D")
                    .IsUnique();

                entity.Property(e => e.RptManufDInvId).HasColumnName("rptManufD_Inv_id");

                entity.Property(e => e.Aged90DaysSellableInventory)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Aged_90_Days_Sellable_Inventory");

                entity.Property(e => e.Aged90DaysSellableUnits).HasColumnName("Aged_90_Days_Sellable_Units");

                entity.Property(e => e.Asin)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ASIN")
                    .IsFixedLength(true);

                entity.Property(e => e.IcrId).HasColumnName("ICR_id");

                entity.Property(e => e.NetReceived)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Net_Received");

                entity.Property(e => e.NetReceivedUnits).HasColumnName("Net_Received_Units");

                entity.Property(e => e.OpenPurchaseOrderQuantity).HasColumnName("Open_Purchase_Order_Quantity");

                entity.Property(e => e.OverallVendorLeadDays)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("Overall_Vendor_Lead_Days");

                entity.Property(e => e.ProcurableProductOos)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("Procurable_Product_OOS");

                entity.Property(e => e.ReceiveFillRate)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("Receive_Fill_Rate");

                entity.Property(e => e.RptManufTId).HasColumnName("rptManufT_id");

                entity.Property(e => e.SellThroughRate)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("Sell_Through_Rate");

                entity.Property(e => e.SellableOnHandInventory)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Sellable_On_Hand_Inventory");

                entity.Property(e => e.SellableOnHandUnits).HasColumnName("Sellable_On_Hand_Units");

                entity.Property(e => e.UnfilledCustomerOrderedUnits).HasColumnName("Unfilled_Customer_Ordered_Units");

                entity.Property(e => e.UnhealthyInventory)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("Unhealthy_Inventory");

                entity.Property(e => e.UnhealthyUnits).HasColumnName("Unhealthy Units");

                entity.Property(e => e.UnsellableOnHandInventory)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Unsellable_On_Hand_Inventory");

                entity.Property(e => e.UnsellableOnHandUnits).HasColumnName("Unsellable_On_Hand_Units");

                entity.Property(e => e.VendorConfirmationRate)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("Vendor_Confirmation_Rate");

                entity.HasOne(d => d.Icr)
                    .WithMany(p => p.AmzObmthlyRptManufInvDs)
                    .HasForeignKey(d => d.IcrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AmzOBMthlyRpt_Manuf_Inv_D_MkICR");

                entity.HasOne(d => d.RptManufT)
                    .WithMany(p => p.AmzObmthlyRptManufInvDs)
                    .HasForeignKey(d => d.RptManufTId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AmzOBMthlyRpt_Manuf_Inv_D_AmzOBMthlyRpt_Manuf_T");
            });

            modelBuilder.Entity<AmzObmthlyRptManufSalesD>(entity =>
            {
                entity.HasKey(e => e.RptManufDSalesId)
                    .HasName("pk_AmzOBMthlyRpt_Manuf_Sales_D");

                entity.ToTable("AmzOBMthlyRpt_Manuf_Sales_D");

                entity.HasIndex(e => new { e.RptManufTId, e.Asin }, "unq_AmzOBMthlyRpt_Manuf_Sales_D")
                    .IsUnique();

                entity.Property(e => e.RptManufDSalesId).HasColumnName("rptManufD_Sales_id");

                entity.Property(e => e.Asin)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.CustomerReturns).HasColumnName("Customer_Returns");

                entity.Property(e => e.IcrId).HasColumnName("ICR_id");

                entity.Property(e => e.OrderedRevenue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Ordered_Revenue");

                entity.Property(e => e.OrderedUnits).HasColumnName("Ordered_Units");

                entity.Property(e => e.RptManufTId).HasColumnName("rptManufT_id");

                entity.Property(e => e.ShippedCogs)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Shipped_COGS");

                entity.Property(e => e.ShippedRevenue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Shipped_Revenue");

                entity.Property(e => e.ShippedUnits).HasColumnName("Shipped_Units");

                entity.HasOne(d => d.Icr)
                    .WithMany(p => p.AmzObmthlyRptManufSalesDs)
                    .HasForeignKey(d => d.IcrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AmzOBMthlyRpt_Manuf_Sales_D_MkICR");

                entity.HasOne(d => d.RptManufT)
                    .WithMany(p => p.AmzObmthlyRptManufSalesDs)
                    .HasForeignKey(d => d.RptManufTId)
                    .HasConstraintName("fk_AmzOBMthlyRpt_Manuf_Sales_D_AmzOBMthlyRpt_Manuf_T");
            });

            modelBuilder.Entity<AmzObmthlyRptNetppmD>(entity =>
            {
                entity.HasKey(e => e.RptDNetPpmId)
                    .HasName("pk_AmzOBMthlyRpt_Netppm_D");

                entity.ToTable("AmzOBMthlyRpt_Netppm_D");

                entity.Property(e => e.RptDNetPpmId).HasColumnName("rptD_NetPPM_id");

                entity.Property(e => e.Asin)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.IcrId).HasColumnName("ICR_id");

                entity.Property(e => e.NetPpm)
                    .HasColumnType("decimal(7, 2)")
                    .HasColumnName("NetPPM");

                entity.Property(e => e.PriorNetPpm)
                    .HasColumnType("decimal(7, 2)")
                    .HasColumnName("Prior_NetPPM");

                entity.Property(e => e.RptManufTId).HasColumnName("rptManufT_id");

                entity.Property(e => e.YoYNetPpm)
                    .HasColumnType("decimal(7, 2)")
                    .HasColumnName("YoY_NetPPM");

                entity.HasOne(d => d.Icr)
                    .WithMany(p => p.AmzObmthlyRptNetppmDs)
                    .HasForeignKey(d => d.IcrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AmzOBMthlyRpt_Netppm_D_MkICR");

                entity.HasOne(d => d.RptManufT)
                    .WithMany(p => p.AmzObmthlyRptNetppmDs)
                    .HasForeignKey(d => d.RptManufTId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AmzOBMthlyRpt_Netppm_D_AmzOBRpt_Manuf_T");
            });

            modelBuilder.Entity<AmzObrptManufT>(entity =>
            {
                entity.HasKey(e => e.RptManufTId)
                    .HasName("pk_AmzOBMthlyRpt_Manuf_T");

                entity.ToTable("AmzOBRpt_Manuf_T");

                entity.Property(e => e.RptManufTId).HasColumnName("rptManufT_id");

                entity.Property(e => e.AddedUserId).HasColumnName("AddedUser_id");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.IsWeely).HasColumnName("isWeely");

                entity.Property(e => e.IsYearly).HasColumnName("isYearly");
            });

            modelBuilder.Entity<AmzOrderType>(entity =>
            {
                entity.HasKey(e => e.OrderTypeId)
                    .HasName("Pk_AmzOrderType_OrderType_id");

                entity.ToTable("AmzOrderType");

                entity.Property(e => e.OrderTypeId).HasColumnName("OrderType_id");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmzPortfolio>(entity =>
            {
                entity.HasKey(e => e.PortfolioId)
                    .HasName("pk_Amz_Portfolio");

                entity.ToTable("Amz_Portfolio");

                entity.Property(e => e.PortfolioId)
                    .ValueGeneratedNever()
                    .HasColumnName("Portfolio_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.PortfolioName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmzPortfolioDetail>(entity =>
            {
                entity.HasKey(e => e.PortfolioDId)
                    .HasName("pk_Amz_Portfolio_Detail");

                entity.ToTable("Amz_Portfolio_Detail");

                entity.Property(e => e.PortfolioDId).HasColumnName("PortfolioD_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.PortfolioTId).HasColumnName("PortfolioT_id");

                entity.HasOne(d => d.PortfolioT)
                    .WithMany(p => p.AmzPortfolioDetails)
                    .HasForeignKey(d => d.PortfolioTId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_Amz_Portfolio_Detail_Amz_Portfolio");

                entity.HasOne(d => d.StateNavigation)
                    .WithMany(p => p.AmzPortfolioDetails)
                    .HasForeignKey(d => d.State)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_Amz_Portfolio_Detail_AmzAdsPortfolioState");
            });

            modelBuilder.Entity<AmzProductCampHist>(entity =>
            {
                entity.HasKey(e => e.ProdCampHistId)
                    .HasName("pk_ProductCampHist");

                entity.ToTable("Amz_ProductCampHist");

                entity.Property(e => e.ProdCampHistId).HasColumnName("ProdCampHist_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Budget)
                    .HasColumnType("money")
                    .HasColumnName("budget");

                entity.Property(e => e.BudgetTypeId).HasColumnName("budgetType_id");

                entity.Property(e => e.CampStateId).HasColumnName("CampState_id");

                entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");

                entity.Property(e => e.ProdCampId).HasColumnName("ProdCamp_id");

                entity.Property(e => e.ServingStatusId).HasColumnName("ServingStatus_id");

                entity.Property(e => e.StrategyId).HasColumnName("Strategy_id");

                entity.Property(e => e.TargetingTypeId).HasColumnName("TargetingType_id");

                entity.HasOne(d => d.BudgetType)
                    .WithMany(p => p.AmzProductCampHists)
                    .HasForeignKey(d => d.BudgetTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ProductCampHist_BudgetType");

                entity.HasOne(d => d.CampState)
                    .WithMany(p => p.AmzProductCampHists)
                    .HasForeignKey(d => d.CampStateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ProductCampHist_CampStateType");

                entity.HasOne(d => d.ProdCamp)
                    .WithMany(p => p.AmzProductCampHists)
                    .HasForeignKey(d => d.ProdCampId)
                    .HasConstraintName("fk_ProductCampHist_ProductCampaign");

                entity.HasOne(d => d.ServingStatus)
                    .WithMany(p => p.AmzProductCampHists)
                    .HasForeignKey(d => d.ServingStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ProductCampHist_ServingStatusType");

                entity.HasOne(d => d.Strategy)
                    .WithMany(p => p.AmzProductCampHists)
                    .HasForeignKey(d => d.StrategyId)
                    .HasConstraintName("fk_ProductCampHist_StrategyType");

                entity.HasOne(d => d.TargetingType)
                    .WithMany(p => p.AmzProductCampHists)
                    .HasForeignKey(d => d.TargetingTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ProductCampHist_TargetingType");
            });

            modelBuilder.Entity<AmzProductCampaign>(entity =>
            {
                entity.HasKey(e => e.ProdCampId)
                    .HasName("pk_ProductCampaign");

                entity.ToTable("Amz_ProductCampaign");

                entity.Property(e => e.ProdCampId)
                    .ValueGeneratedNever()
                    .HasColumnName("ProdCamp_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.CampName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedCampaignTime).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.PortfolioId).HasColumnName("Portfolio_id");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.HasOne(d => d.Portfolio)
                    .WithMany(p => p.AmzProductCampaigns)
                    .HasForeignKey(d => d.PortfolioId)
                    .HasConstraintName("fk_ProductCampaign_Amz_Portfolio");
            });

            modelBuilder.Entity<AmzProductEligibility>(entity =>
            {
                entity.HasKey(e => e.ProductEligibilityId)
                    .HasName("pk_ProductEligibility");

                entity.ToTable("Amz_ProductEligibility");

                entity.Property(e => e.ProductEligibilityId).HasColumnName("ProductEligibility_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Asin)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.IcrId).HasColumnName("ICR_id");
            });

            modelBuilder.Entity<AmzProductEligibilityDetail>(entity =>
            {
                entity.HasKey(e => e.EligiblityId)
                    .HasName("pk_Amz_ProductEligibilityDetail");

                entity.ToTable("Amz_ProductEligibilityDetail");

                entity.Property(e => e.EligiblityId).HasColumnName("Eligiblity_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.HelpUrl).IsUnicode(false);

                entity.Property(e => e.Message).IsUnicode(false);

                entity.Property(e => e.OverallStatusId).HasColumnName("OverallStatus_id");

                entity.Property(e => e.ProductEligibilityId).HasColumnName("ProductEligibility_id");

                entity.Property(e => e.ReasonNameId).HasColumnName("ReasonName_id");

                entity.Property(e => e.ServerityId).HasColumnName("Serverity_id");

                entity.HasOne(d => d.OverallStatus)
                    .WithMany(p => p.AmzProductEligibilityDetails)
                    .HasForeignKey(d => d.OverallStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_Amz_ProductEligibilityDetail_OverallStatusType");

                entity.HasOne(d => d.ProductEligibility)
                    .WithMany(p => p.AmzProductEligibilityDetails)
                    .HasForeignKey(d => d.ProductEligibilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_Amz_ProductEligibilityDetail_Amz_ProductEligibility");

                entity.HasOne(d => d.ReasonName)
                    .WithMany(p => p.AmzProductEligibilityDetails)
                    .HasForeignKey(d => d.ReasonNameId)
                    .HasConstraintName("fk_Amz_ProductEligibilityDetail_ReasonNameType");

                entity.HasOne(d => d.Serverity)
                    .WithMany(p => p.AmzProductEligibilityDetails)
                    .HasForeignKey(d => d.ServerityId)
                    .HasConstraintName("fk_Amz_ProductEligibilityDetail_ServerityType");
            });

            modelBuilder.Entity<AmzProgram>(entity =>
            {
                entity.ToTable("AmzProgram");

                entity.HasIndex(e => e.Program, "idx_AmzProgram");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Program)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmzdirectPo>(entity =>
            {
                entity.ToTable("AMZDirectPO");

                entity.HasIndex(e => new { e.Vendor, e.Asin, e.Ponumber, e.Item }, "Uni_AMZDirectPO")
                    .IsUnique();

                entity.Property(e => e.AmzdirectPoId).HasColumnName("AMZDirectPO_id");

                entity.Property(e => e.AddedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Asin)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.AsinId).HasColumnName("ASIN_id");

                entity.Property(e => e.Availability)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Backordered)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ExpectedDate)
                    .HasColumnType("date")
                    .HasColumnName("Expected_Date");

                entity.Property(e => e.ExternalName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.ItemId).HasColumnName("Item_id");

                entity.Property(e => e.LastModified)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Modified");

                entity.Property(e => e.Ponumber)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("POnumber");

                entity.Property(e => e.QuantityAccepted).HasColumnName("Quantity_Accepted");

                entity.Property(e => e.QuantityOutstanding).HasColumnName("Quantity_Outstanding");

                entity.Property(e => e.QuantityReceived).HasColumnName("Quantity_Received");

                entity.Property(e => e.QuantityRequested).HasColumnName("Quantity_Requested");

                entity.Property(e => e.ShipToLocation)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("Ship_to_location");

                entity.Property(e => e.Title)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.TotalCost).HasColumnName("Total_Cost");

                entity.Property(e => e.UnitCost).HasColumnName("Unit_Cost");

                entity.Property(e => e.Vendor)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.WindowEnd)
                    .HasColumnType("date")
                    .HasColumnName("Window_End");

                entity.Property(e => e.WindowStart)
                    .HasColumnType("date")
                    .HasColumnName("Window_Start");

                entity.Property(e => e.WindowType)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("Window_Type");
            });

            modelBuilder.Entity<AmzdroutstandPo>(entity =>
            {
                entity.HasKey(e => e.AmzdrOstdId);

                entity.ToTable("AMZDROutstandPO");

                entity.Property(e => e.AmzdrOstdId).HasColumnName("AMZDR_ostd_id");

                entity.Property(e => e.Amzponumber)
                    .HasMaxLength(50)
                    .HasColumnName("AMZPONumber");

                entity.Property(e => e.ExpectedDate).HasColumnType("date");

                entity.Property(e => e.ItemnoId).HasColumnName("Itemno_id");
            });

            modelBuilder.Entity<Announcement>(entity =>
            {
                entity.HasKey(e => e.AncmntId);

                entity.ToTable("Announcement");

                entity.Property(e => e.ArticleContent)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastModifiedTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Title)
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.AnnouncementCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Announcement_Employee");

                entity.HasOne(d => d.Dept)
                    .WithMany(p => p.Announcements)
                    .HasForeignKey(d => d.DeptId)
                    .HasConstraintName("FK_Announcement_Department");

                entity.HasOne(d => d.LastModifiedByNavigation)
                    .WithMany(p => p.AnnouncementLastModifiedByNavigations)
                    .HasForeignKey(d => d.LastModifiedBy)
                    .HasConstraintName("FK_Announcement_Employee1");
            });

            modelBuilder.Entity<ApiauthorityLevel>(entity =>
            {
                entity.ToTable("APIAuthorityLevel");

                entity.Property(e => e.ApiauthorityLevelId)
                    .ValueGeneratedNever()
                    .HasColumnName("APIAuthorityLevelId");

                entity.Property(e => e.AuthorityLevel)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ApisSoprocess>(entity =>
            {
                entity.HasKey(e => e.ProcessId)
                    .HasName("PK__APIsSOPr__1B39A97673EEC1BB");

                entity.ToTable("APIsSOProcess");

                entity.Property(e => e.ProcessId).HasColumnName("ProcessID");

                entity.Property(e => e.ProcessType)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ApisoStatus>(entity =>
            {
                entity.HasKey(e => e.PoStatusId)
                    .HasName("PK__APISoSta__0EAA9A60B8A092BD");

                entity.ToTable("APISoStatus");

                entity.HasIndex(e => e.SoTId, "UQ__APISoSta__12C8B93F9B1B94E3")
                    .IsUnique();

                entity.HasIndex(e => e.PoNo, "UQ__APISoSta__A4C0162CA235F0DD")
                    .IsUnique();

                entity.Property(e => e.PoStatusId).HasColumnName("poStatusID");

                entity.Property(e => e.Ackedtime)
                    .HasColumnType("datetime")
                    .HasColumnName("ackedtime");

                entity.Property(e => e.CustId).HasColumnName("custID");

                entity.Property(e => e.IsAcked).HasColumnName("isAcked");

                entity.Property(e => e.PoNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SentAsn).HasColumnName("sentASN");

                entity.Property(e => e.SentAsnTime)
                    .HasColumnType("datetime")
                    .HasColumnName("sentAsnTime");

                entity.Property(e => e.SoTId).HasColumnName("SoT_Id");

                entity.HasOne(d => d.Cust)
                    .WithMany(p => p.ApisoStatuses)
                    .HasForeignKey(d => d.CustId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_APISoStatusCustomer");

                entity.HasOne(d => d.SoT)
                    .WithOne(p => p.ApisoStatus)
                    .HasForeignKey<ApisoStatus>(d => d.SoTId)
                    .HasConstraintName("fk_APISoStatus_SoT");
            });

            modelBuilder.Entity<AvcWkRptD>(entity =>
            {
                entity.ToTable("AvcWkRptD");

                entity.HasComment("Amazon VC Weekly Report");

                entity.HasIndex(e => new { e.AvcWkRptTId, e.CustAsin }, "unq_AvcWkRptD")
                    .IsUnique();

                entity.Property(e => e.AvcWkRptDId).HasColumnName("AvcWkRptD_id");

                entity.Property(e => e.AvcWkRptTId).HasColumnName("AvcWkRptT_id");

                entity.Property(e => e.CustAsin)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("CustASIN");

                entity.Property(e => e.IcrId).HasColumnName("ICR_id");

                entity.Property(e => e.NetPpm)
                    .HasColumnType("money")
                    .HasColumnName("NetPPM");

                entity.Property(e => e.OrderRev).HasColumnType("money");

                entity.Property(e => e.QoHsableAmt)
                    .HasColumnType("money")
                    .HasColumnName("QoHSableAmt");

                entity.Property(e => e.QoHsableQty).HasColumnName("QoHSableQty");

                entity.HasOne(d => d.AvcWkRptT)
                    .WithMany(p => p.AvcWkRptDs)
                    .HasForeignKey(d => d.AvcWkRptTId)
                    .HasConstraintName("fk_AvcWkRptD_AvcWkRptT");

                entity.HasOne(d => d.Icr)
                    .WithMany(p => p.AvcWkRptDs)
                    .HasForeignKey(d => d.IcrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_AvcWkRptD_MkICR");
            });

            modelBuilder.Entity<AvcWkRptP>(entity =>
            {
                entity.ToTable("AvcWkRptP");

                entity.HasComment("Amazon VC Weekly Report - P50, P70, P80 & P90");

                entity.HasIndex(e => new { e.AvcWkRptTId, e.ProbLevel, e.CustAsin }, "unq_AvcWkRptP")
                    .IsUnique();

                entity.Property(e => e.AvcWkRptPId).HasColumnName("AvcWkRptP_id");

                entity.Property(e => e.AvcWkRptTId).HasColumnName("AvcWkRptT_id");

                entity.Property(e => e.CustAsin)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("CustASIN");

                entity.Property(e => e.IcrId).HasColumnName("ICR_id");

                entity.HasOne(d => d.AvcWkRptT)
                    .WithMany(p => p.AvcWkRptPs)
                    .HasForeignKey(d => d.AvcWkRptTId)
                    .HasConstraintName("fk_AvcWkRptP_AvcWkRptT");

                entity.HasOne(d => d.Icr)
                    .WithMany(p => p.AvcWkRptPs)
                    .HasForeignKey(d => d.IcrId)
                    .HasConstraintName("fk_AvcWkRptP_MkICR");
            });

            modelBuilder.Entity<AvcWkRptT>(entity =>
            {
                entity.ToTable("AvcWkRptT");

                entity.HasIndex(e => e.SundayOfWk, "unq_AvcWkRptT")
                    .IsUnique();

                entity.Property(e => e.AvcWkRptTId).HasColumnName("AvcWkRptT_id");

                entity.Property(e => e.AddedUserId).HasColumnName("AddedUser_id");

                entity.Property(e => e.SundayOfWk).HasColumnType("date");
            });

            modelBuilder.Entity<BeginningInventory>(entity =>
            {
                entity.HasKey(e => e.UnqId);

                entity.ToTable("BeginningInventory", "Rpt");

                entity.Property(e => e.UnqId).HasColumnName("UNQ_id");

                entity.Property(e => e.ItemnoId).HasColumnName("Itemno_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.HasOne(d => d.DateKeyNavigation)
                    .WithMany(p => p.BeginningInventories)
                    .HasForeignKey(d => d.DateKey)
                    .HasConstraintName("FK_BeginningInventory_DimDate");

                entity.HasOne(d => d.Itemno)
                    .WithMany(p => p.BeginningInventories)
                    .HasForeignKey(d => d.ItemnoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BeginningInventory_KO_Itemno");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.BeginningInventories)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BeginningInventory_KO_Location");
            });

            modelBuilder.Entity<BillActivity>(entity =>
            {
                entity.ToTable("BillActivity");

                entity.HasIndex(e => e.Activity, "unq_BillActivity_Activity")
                    .IsUnique();

                entity.Property(e => e.BillActivityId).HasColumnName("BillActivity_id");

                entity.Property(e => e.AccountId).HasColumnName("Account_id");

                entity.Property(e => e.Activity)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BillCategoryId).HasColumnName("BillCategory_id");

                entity.Property(e => e.CostAllocationMethodId).HasColumnName("CostAllocationMethod_id");

                entity.Property(e => e.ExpenseCategoryId).HasColumnName("ExpenseCategory_id");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.BillActivities)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_BillActivity_GlAccount");

                entity.HasOne(d => d.BillCategory)
                    .WithMany(p => p.BillActivities)
                    .HasForeignKey(d => d.BillCategoryId)
                    .HasConstraintName("fk_BillActivity_BillCategory");

                entity.HasOne(d => d.CostAllocationMethod)
                    .WithMany(p => p.BillActivities)
                    .HasForeignKey(d => d.CostAllocationMethodId)
                    .HasConstraintName("fk_BillActivity_CostAllocationMethod");

                entity.HasOne(d => d.ExpenseCategory)
                    .WithMany(p => p.BillActivities)
                    .HasForeignKey(d => d.ExpenseCategoryId)
                    .HasConstraintName("fk_BillActivity_NsExpenseCategory");
            });

            modelBuilder.Entity<BillAllocationByVendor>(entity =>
            {
                entity.ToTable("BillAllocationByVendor");

                entity.Property(e => e.BillAllocationByVendorId).HasColumnName("BillAllocationByVendor_id");

                entity.Property(e => e.VendorAllocationMethodId).HasColumnName("VendorAllocationMethod_id");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_id");

                entity.HasOne(d => d.VendorAllocationMethod)
                    .WithMany(p => p.BillAllocationByVendors)
                    .HasForeignKey(d => d.VendorAllocationMethodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_BillAllocationByVendor_VendorAllocationMethod");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.BillAllocationByVendors)
                    .HasForeignKey(d => d.VendorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_BillAllocationByVendor_Vendor");
            });

            modelBuilder.Entity<BillCategory>(entity =>
            {
                entity.ToTable("BillCategory");

                entity.HasIndex(e => e.Category, "unq_BillCategory_Category")
                    .IsUnique();

                entity.Property(e => e.BillCategoryId).HasColumnName("BillCategory_id");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BillCreditD>(entity =>
            {
                entity.ToTable("BillCreditD");

                entity.Property(e => e.BillCreditDId).HasColumnName("BillCreditD_id");

                entity.Property(e => e.AccountId).HasColumnName("Account_id");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BillCreditTId).HasColumnName("BillCreditT_id");

                entity.Property(e => e.Memo).HasMaxLength(255);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.BillCreditDs)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_BillCreditD_GlAccount");

                entity.HasOne(d => d.BillCreditT)
                    .WithMany(p => p.BillCreditDs)
                    .HasForeignKey(d => d.BillCreditTId)
                    .HasConstraintName("fk_BillCreditD_BillCreditT");
            });

            modelBuilder.Entity<BillCreditT>(entity =>
            {
                entity.ToTable("BillCreditT");

                entity.HasIndex(e => e.DocNo, "idx_BillCreditT");

                entity.HasIndex(e => e.BolFeeTId, "idx_BillCreditT_0");

                entity.HasIndex(e => e.PoTId, "idx_BillCreditT_1");

                entity.HasIndex(e => e.BolEntryId, "idx_BillCreditT_2");

                entity.Property(e => e.BillCreditTId).HasColumnName("BillCreditT_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.BolEntryId).HasColumnName("BolEntry_id");

                entity.Property(e => e.BolFeeTId).HasColumnName("BolFeeT_id");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Memo).HasMaxLength(255);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.PoTId).HasColumnName("PoT_id");

                entity.Property(e => e.TsNo)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.VendorId).HasColumnName("Vendor_id");

                entity.HasOne(d => d.BolEntry)
                    .WithMany(p => p.BillCreditTs)
                    .HasForeignKey(d => d.BolEntryId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_BillCreditT_BolEntry");

                entity.HasOne(d => d.BolFeeT)
                    .WithMany(p => p.BillCreditTs)
                    .HasForeignKey(d => d.BolFeeTId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_BillCreditT_BolFeeT");

                entity.HasOne(d => d.PoT)
                    .WithMany(p => p.BillCreditTs)
                    .HasForeignKey(d => d.PoTId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_BillCreditT_PoT");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.BillCreditTs)
                    .HasForeignKey(d => d.VendorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_BillCreditT_Vendor");
            });

            modelBuilder.Entity<BillOfMaterial>(entity =>
            {
                entity.HasKey(e => e.BoMId);

                entity.ToTable("BillOfMaterial");

                entity.HasIndex(e => new { e.ChildItemId, e.ParentItemId }, "Idx_BillOfMaterial")
                    .IsUnique();

                entity.Property(e => e.BoMId).HasColumnName("BoM_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ChildItemId).HasColumnName("ChildItem_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.ParentItemId).HasColumnName("ParentItem_id");

                entity.HasOne(d => d.ChildItem)
                    .WithMany(p => p.BillOfMaterialChildItems)
                    .HasForeignKey(d => d.ChildItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_BillOfMaterial_KO_Itemno_0");

                entity.HasOne(d => d.ParentItem)
                    .WithMany(p => p.BillOfMaterialParentItems)
                    .HasForeignKey(d => d.ParentItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BillOfMaterial_KO_Itemno");
            });

            modelBuilder.Entity<BillToCustomer>(entity =>
            {
                entity.ToTable("BillToCustomer", "ord");

                entity.Property(e => e.BillToCustomerId).HasColumnName("BillToCustomer_id");

                entity.Property(e => e.BillToName).HasMaxLength(50);

                entity.Property(e => e.BillingAddr1).HasMaxLength(50);

                entity.Property(e => e.BillingAddr2).HasMaxLength(50);

                entity.Property(e => e.BillingAddr3).HasMaxLength(50);

                entity.Property(e => e.BillingCity).HasMaxLength(50);

                entity.Property(e => e.BillingCountry).HasMaxLength(50);

                entity.Property(e => e.BillingState).HasMaxLength(50);

                entity.Property(e => e.BillingZip)
                    .HasMaxLength(50)
                    .HasColumnName("BillingZIP");

                entity.Property(e => e.CcexpDate)
                    .HasMaxLength(50)
                    .HasColumnName("CCExpDate");

                entity.Property(e => e.Ccnumber)
                    .HasMaxLength(50)
                    .HasColumnName("CCNumber");

                entity.Property(e => e.Cctype)
                    .HasMaxLength(50)
                    .HasColumnName("CCType");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.PhoneNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<BinCntList>(entity =>
            {
                entity.ToTable("BinCntList", "wms");

                entity.HasIndex(e => e.InvtCntTId, "idx_BinCntList_InvtCntT_id");

                entity.Property(e => e.BinCntListId).HasColumnName("BinCntList_id");

                entity.Property(e => e.BinNoId).HasColumnName("BinNo_id");

                entity.Property(e => e.InvtCntTId).HasColumnName("InvtCntT_id");

                entity.HasOne(d => d.BinNo)
                    .WithMany(p => p.BinCntLists)
                    .HasForeignKey(d => d.BinNoId)
                    .HasConstraintName("fk_BinCntList_MslBinNo");

                entity.HasOne(d => d.InvtCntT)
                    .WithMany(p => p.BinCntLists)
                    .HasForeignKey(d => d.InvtCntTId)
                    .HasConstraintName("fk_BinCntList_InvtCntT");
            });

            modelBuilder.Entity<BinInvtAdj>(entity =>
            {
                entity.ToTable("BinInvtAdj", "wms");

                entity.HasIndex(e => e.BinInvtCurId, "idx_BinInvtAdj_BinInvtCur_id");

                entity.Property(e => e.BinInvtAdjId).HasColumnName("BinInvtAdj_id");

                entity.Property(e => e.BinInvtCurId).HasColumnName("BinInvtCur_id");

                entity.Property(e => e.EmployeeId).HasColumnName("Employee_id");

                entity.Property(e => e.TimeAdjusted).HasColumnType("datetime");

                entity.HasOne(d => d.BinInvtCur)
                    .WithMany(p => p.BinInvtAdjs)
                    .HasForeignKey(d => d.BinInvtCurId)
                    .HasConstraintName("fk_BinInvtAdj_BinInvtCur");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.BinInvtAdjs)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_BinInvtAdj_Employee");
            });

            modelBuilder.Entity<BinInvtCur>(entity =>
            {
                entity.ToTable("BinInvtCur", "wms");

                entity.HasIndex(e => e.BinNoId, "idx_BinInvtCur_BinNo_id");

                entity.HasIndex(e => e.CountCycleNo, "idx_BinInvtCur_CountCycleNo");

                entity.HasIndex(e => e.InvtCntTId, "idx_BinInvtCur_InvtCntT_id");

                entity.Property(e => e.BinInvtCurId).HasColumnName("BinInvtCur_id");

                entity.Property(e => e.BinNoId).HasColumnName("BinNo_id");

                entity.Property(e => e.InvtCntTId).HasColumnName("InvtCntT_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.Note)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.TimeAdded).HasColumnType("datetime");

                entity.HasOne(d => d.BinNo)
                    .WithMany(p => p.BinInvtCurs)
                    .HasForeignKey(d => d.BinNoId)
                    .HasConstraintName("fk_BinInvtCur_MslBinNo");

                entity.HasOne(d => d.InvtCntT)
                    .WithMany(p => p.BinInvtCurs)
                    .HasForeignKey(d => d.InvtCntTId)
                    .HasConstraintName("fk_BinInvtCur_InvtCntT");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.BinInvtCurs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_BinInvtCur_BpmItem");
            });

            modelBuilder.Entity<BinItemScan>(entity =>
            {
                entity.ToTable("BinItemScan", "wms");

                entity.Property(e => e.BinItemScanId).HasColumnName("BinItemScan_id");

                entity.Property(e => e.BinInvtCurId).HasColumnName("BinInvtCur_id");

                entity.Property(e => e.EmployeeId).HasColumnName("Employee_id");

                entity.Property(e => e.InvtCntTId).HasColumnName("InvtCntT_id");

                entity.Property(e => e.TimeScanned).HasColumnType("datetime");

                entity.HasOne(d => d.BinInvtCur)
                    .WithMany(p => p.BinItemScans)
                    .HasForeignKey(d => d.BinInvtCurId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_BinItemScan_BinInvtCur");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.BinItemScans)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_BinItemScan_Employee");

                entity.HasOne(d => d.InvtCntT)
                    .WithMany(p => p.BinItemScans)
                    .HasForeignKey(d => d.InvtCntTId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_BinItemScan_InvtCntT");
            });

            modelBuilder.Entity<BolEntry>(entity =>
            {
                entity.ToTable("BolEntry");

                entity.HasIndex(e => e.EntryNo, "Unq_ContEntry")
                    .IsUnique();

                entity.Property(e => e.BolEntryId).HasColumnName("BolEntry_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.AmountDuty).HasColumnType("money");

                entity.Property(e => e.AmountEnteredValue).HasColumnType("money");

                entity.Property(e => e.AmountOther).HasColumnType("money");

                entity.Property(e => e.AmountTax).HasColumnType("money");

                entity.Property(e => e.AmountTotal).HasColumnType("money");

                entity.Property(e => e.EntryDate).HasColumnType("date");

                entity.Property(e => e.EntryNo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BolFeeD>(entity =>
            {
                entity.ToTable("BolFeeD");

                entity.HasIndex(e => e.BolFeeTId, "idx_BolFeeD");

                entity.Property(e => e.BolFeeDId).HasColumnName("BolFeeD_id");

                entity.Property(e => e.BolFeeTId).HasColumnName("BolFeeT_id");

                entity.Property(e => e.ChargeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.Property(e => e.UoM)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.HasOne(d => d.BolFeeT)
                    .WithMany(p => p.BolFeeDs)
                    .HasForeignKey(d => d.BolFeeTId)
                    .HasConstraintName("fk_BolFeeD_BolFeeT");
            });

            modelBuilder.Entity<BolFoot>(entity =>
            {
                entity.HasKey(e => e.BolFeeTId)
                    .HasName("Pk_BolFeeT_BolFeeT_id");

                entity.ToTable("BolFeeT");

                entity.HasIndex(e => e.InvNo, "idx_BolFeeT");

                entity.HasIndex(e => e.BolEntryId, "idx_BolFeeT_0");

                entity.HasIndex(e => e.ToBolId, "idx_BolFeeT_1");

                entity.HasIndex(e => e.PoBolId, "idx_BolFeeT_2");

                entity.Property(e => e.BolFeeTId).HasColumnName("BolFeeT_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BolEntryId).HasColumnName("BolEntry_id");

                entity.Property(e => e.DueDate).HasColumnType("date");

                entity.Property(e => e.HouseBolNo)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvNo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MasterBolNo)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.PoBolId).HasColumnName("PoBol_id");

                entity.Property(e => e.Publisher)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceAmount).HasColumnType("money");

                entity.Property(e => e.ToBolId).HasColumnName("ToBol_id");

                entity.HasOne(d => d.BolEntry)
                    .WithMany(p => p.BolFeet)
                    .HasForeignKey(d => d.BolEntryId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_BolFeeT_BolEntry");

                entity.HasOne(d => d.PoBol)
                    .WithMany(p => p.BolFeet)
                    .HasForeignKey(d => d.PoBolId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_BolFeeT_PoBol");

                entity.HasOne(d => d.ToBol)
                    .WithMany(p => p.BolFeet)
                    .HasForeignKey(d => d.ToBolId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_BolFeeT_ToBol");
            });

            modelBuilder.Entity<BolPickTask>(entity =>
            {
                entity.ToTable("BolPickTask", "ord");

                entity.Property(e => e.BolPickTaskId).HasColumnName("BolPickTask_id");

                entity.Property(e => e.BolId).HasColumnName("Bol_id");
            });

            modelBuilder.Entity<BolSailDay>(entity =>
            {
                entity.HasKey(e => e.SailDayId)
                    .HasName("Pk_BolSailDays_SailDay_id");

                entity.Property(e => e.SailDayId).HasColumnName("SailDay_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.PortDestId).HasColumnName("PortDest_id");

                entity.Property(e => e.PortOriginId).HasColumnName("PortOrigin_id");

                entity.HasOne(d => d.PortDest)
                    .WithMany(p => p.BolSailDays)
                    .HasForeignKey(d => d.PortDestId)
                    .HasConstraintName("Fk_BolSailDays_PortDest");

                entity.HasOne(d => d.PortOrigin)
                    .WithMany(p => p.BolSailDays)
                    .HasForeignKey(d => d.PortOriginId)
                    .HasConstraintName("Fk_BolSailDays_PortOrigin");
            });

            modelBuilder.Entity<Bom>(entity =>
            {
                entity.ToTable("BOM");

                entity.HasIndex(e => new { e.ParentItemId, e.ChildItemId }, "Unq_BOM_PC")
                    .IsUnique();

                entity.Property(e => e.BomId).HasColumnName("BOM_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.ChildItemId).HasColumnName("ChildItem_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.ParentItemId).HasColumnName("ParentItem_id");

                entity.HasOne(d => d.ChildItem)
                    .WithMany(p => p.BomChildItems)
                    .HasForeignKey(d => d.ChildItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_BOM_ItemNo_0");

                entity.HasOne(d => d.ParentItem)
                    .WithMany(p => p.BomParentItems)
                    .HasForeignKey(d => d.ParentItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_BOM_ItemNo");
            });

            modelBuilder.Entity<Bookmark>(entity =>
            {
                entity.ToTable("Bookmark");

                entity.Property(e => e.DeptEmployeeId).HasColumnName("Dept_Employee_Id");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IsDept).HasColumnName("isDept");

                entity.Property(e => e.Link)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BpmBegInventory>(entity =>
            {
                entity.HasKey(e => e.BegInvId)
                    .HasName("Pk_BegInventory_BegInv_id");

                entity.ToTable("BpmBegInventory");

                entity.HasIndex(e => e.DateRecord, "idx_BpmBegInventory_DateRecord");

                entity.HasIndex(e => e.ItemNoId, "idx_BpmBegInventory_ItemNo_id");

                entity.HasIndex(e => e.LocationId, "idx_BpmBegInventory_Location_id");

                entity.HasIndex(e => new { e.DateRecord, e.LocationId, e.ItemNoId }, "unq_BpmBegInventory")
                    .IsUnique();

                entity.Property(e => e.BegInvId).HasColumnName("BegInv_id");

                entity.Property(e => e.DateRecord).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.QavTpl).HasColumnName("Qav_TPL");

                entity.Property(e => e.QoHTpl).HasColumnName("QoH_TPL");

                entity.Property(e => e.TimeRecord).HasColumnType("datetime");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.BpmBegInventories)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_BegInventory_BpmItem");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.BpmBegInventories)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_BegInventory_Location");
            });

            modelBuilder.Entity<BpmBizRule>(entity =>
            {
                entity.HasKey(e => e.BpmBizRulesId)
                    .HasName("pk_BpmBizRules");

                entity.Property(e => e.BpmBizRulesId).HasColumnName("BpmBizRules_id");

                entity.Property(e => e.DsCutOffTime).HasComment("DS Same day Shipping Cut off time");
            });

            modelBuilder.Entity<BpmBol>(entity =>
            {
                entity.HasKey(e => e.BolId)
                    .HasName("Pk_BpmBOL");

                entity.ToTable("BpmBOL", "ord");

                entity.Property(e => e.BolId).HasColumnName("Bol_id");

                entity.Property(e => e.OrderId).HasColumnName("Order_id");

                entity.Property(e => e.ProNo).HasMaxLength(50);

                entity.Property(e => e.Scac)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SCAC");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.BpmBols)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("FK_BpmBOL_Order");
            });

            modelBuilder.Entity<BpmEdiInterchange>(entity =>
            {
                entity.HasKey(e => e.InterchangeKey)
                    .HasName("PK_EdiInterchangeIndex");

                entity.ToTable("BpmEdiInterchange", "ord");

                entity.Property(e => e.Isa01AuthorizationInformationQualifier)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ISA01_Authorization_Information_Qualifier");

                entity.Property(e => e.Isa02AuthorizationInformation)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ISA02_Authorization_Information");

                entity.Property(e => e.Isa03SecurityInformationQualifier)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ISA03_Security_Information_Qualifier");

                entity.Property(e => e.Isa04SecurityInformation)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ISA04_Security_Information");

                entity.Property(e => e.Isa05InterchangeSenderIdQualifier)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ISA05_Interchange_SenderId_Qualifier");

                entity.Property(e => e.Isa06InterchangeSenderId)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ISA06_Interchange_Sender_Id");

                entity.Property(e => e.Isa07InterchangeReceiverIdQualifier)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ISA07_Interchange_ReceiverId_Qualifier");

                entity.Property(e => e.Isa08InterchangeReceiverId)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ISA08_Interchange_Receiver_Id");

                entity.Property(e => e.Isa09InterchangeDate)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("ISA09_Interchange_Date");

                entity.Property(e => e.Isa10InterchangeTime)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("ISA10_Interchange_Time");

                entity.Property(e => e.Isa11InterchangeControlStandardsIdentifier)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ISA11_Interchange_Control_Standards_Identifier");

                entity.Property(e => e.Isa12InterchangeControlVersionNumber)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("ISA12_Interchange_Control_Version_Number");

                entity.Property(e => e.Isa13InterchangeControlNumber)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("ISA13_Interchange_Control_Number");

                entity.Property(e => e.Isa14AcknowledgmentRequested)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ISA14_Acknowledgment_Requested");

                entity.Property(e => e.Isa15UsageIndicator)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ISA15_Usage_Indicator");

                entity.Property(e => e.Isa16ComponentElementSeparator)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ISA16_Component_Element_Separator");
            });

            modelBuilder.Entity<BpmItem>(entity =>
            {
                entity.HasKey(e => e.ItemNoId)
                    .HasName("Pk_ItemNo_ItemNo_id_0");

                entity.ToTable("BpmItem");

                entity.HasIndex(e => new { e.ItemName, e.ItemTypeId }, "unq_BpmItem")
                    .IsUnique();

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.BpmUpc)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("BpmUPC");

                entity.Property(e => e.CartonHeight).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CartonLength).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CartonMfgCcm)
                    .HasColumnType("money")
                    .HasColumnName("CartonMfgCCM")
                    .HasComment("Cubic Centi Meter");

                entity.Property(e => e.CartonMfgCm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("CartonMfgCM");

                entity.Property(e => e.CartonWeight).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CartonWidth).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Cat1Id).HasColumnName("Cat1_id");

                entity.Property(e => e.Cat2Id).HasColumnName("Cat2_id");

                entity.Property(e => e.Cat3Id).HasColumnName("Cat3_id");

                entity.Property(e => e.Cat4Id).HasColumnName("Cat4_id");

                entity.Property(e => e.Cat5Id).HasColumnName("Cat5_id");

                entity.Property(e => e.Cat6Id).HasColumnName("Cat6_id");

                entity.Property(e => e.CatGlobalZId).HasColumnName("CatGlobalZ_id");

                entity.Property(e => e.CatSage)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CatZinOldId).HasColumnName("CatZinOld_id");

                entity.Property(e => e.CatZinusId).HasColumnName("CatZinus_id");

                entity.Property(e => e.Category)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryAd)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("Category_AD");

                entity.Property(e => e.ChanExclusiveId).HasColumnName("ChanExclusive_id");

                entity.Property(e => e.CheckBackOrderLeadTimeBancid)
                    .HasColumnName("CheckBackOrderLeadTimeBANCId")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.CheckBackOrderLeadTimeBascid)
                    .HasColumnName("CheckBackOrderLeadTimeBASCId")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.CheckBackOrderLeadTimeMainSlid)
                    .HasColumnName("CheckBackOrderLeadTimeMainSLId")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.CheckBackOrderLeadTimeSwcaftid)
                    .HasColumnName("CheckBackOrderLeadTimeSWCAFTId")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.CoOmasterSkuId).HasColumnName("CoOMasterSkuId");

                entity.Property(e => e.Color)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.DateObsolete).HasColumnType("date");

                entity.Property(e => e.Description)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.HtsCode)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.IsAllowDupUpc).HasColumnName("IsAllowDupUPC");

                entity.Property(e => e.IsAmzDisku).HasColumnName("IsAmzDISku");

                entity.Property(e => e.IsCoOmasterSku).HasColumnName("IsCoOMasterSku");

                entity.Property(e => e.IsFeedable).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsLageSmallBox).HasComment("True is OSMI Report items");

                entity.Property(e => e.ItemCollId).HasColumnName("ItemColl_id");

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ItemStatusId).HasColumnName("ItemStatus_id");

                entity.Property(e => e.ItemTypeId)
                    .HasColumnName("ItemType_id")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LastModKoT).HasColumnType("datetime");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.LaunchDate).HasColumnType("date");

                entity.Property(e => e.LeftOverBancassgndMktId).HasColumnName("LeftOverBANCAssgndMktId");

                entity.Property(e => e.LeftOverBascassgndMktId).HasColumnName("LeftOverBASCAssgndMktId");

                entity.Property(e => e.LeftOverMainSlassgndMktId).HasColumnName("LeftOverMainSLAssgndMktId");

                entity.Property(e => e.LeftOverSwcaftassgndMktId).HasColumnName("LeftOverSWCAFTAssgndMktId");

                entity.Property(e => e.MasterSkuId).HasColumnName("MasterSKU_id");

                entity.Property(e => e.MatTypeId).HasColumnName("MatType_id");

                entity.Property(e => e.MatrialTypeId).HasColumnName("MatrialType_id");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.PalletTypeId).HasColumnName("PalletType_id");

                entity.Property(e => e.ProductHeight).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProductLength).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProductWeight).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProductWidth).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Size)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Thickness).HasColumnType("money");

                entity.Property(e => e.UserManualLink)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.VendorId).HasColumnName("Vendor_id");

                entity.Property(e => e.ZinusSku)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("ZinusSKU");

                entity.HasOne(d => d.Cat1)
                    .WithMany(p => p.BpmItems)
                    .HasForeignKey(d => d.Cat1Id)
                    .HasConstraintName("fk_BpmItem_Category1");

                entity.HasOne(d => d.Cat2)
                    .WithMany(p => p.BpmItems)
                    .HasForeignKey(d => d.Cat2Id)
                    .HasConstraintName("fk_BpmItem_Category2");

                entity.HasOne(d => d.Cat3)
                    .WithMany(p => p.BpmItems)
                    .HasForeignKey(d => d.Cat3Id)
                    .HasConstraintName("fk_BpmItem_Category3");

                entity.HasOne(d => d.Cat4)
                    .WithMany(p => p.BpmItems)
                    .HasForeignKey(d => d.Cat4Id)
                    .HasConstraintName("fk_BpmItem_Category4");

                entity.HasOne(d => d.Cat5)
                    .WithMany(p => p.BpmItems)
                    .HasForeignKey(d => d.Cat5Id)
                    .HasConstraintName("fk_BpmItem_Category5");

                entity.HasOne(d => d.Cat6)
                    .WithMany(p => p.BpmItems)
                    .HasForeignKey(d => d.Cat6Id)
                    .HasConstraintName("fk_BpmItem_Category6");

                entity.HasOne(d => d.CatGlobalZ)
                    .WithMany(p => p.BpmItems)
                    .HasForeignKey(d => d.CatGlobalZId)
                    .HasConstraintName("fk_BpmItem_CatGlobalZ");

                entity.HasOne(d => d.CatZinOld)
                    .WithMany(p => p.BpmItemCatZinOlds)
                    .HasForeignKey(d => d.CatZinOldId)
                    .HasConstraintName("fk_BpmItem_CategoryZinus_0");

                entity.HasOne(d => d.CatZinus)
                    .WithMany(p => p.BpmItemCatZinus)
                    .HasForeignKey(d => d.CatZinusId)
                    .HasConstraintName("fk_BpmItem_CategoryZinus");

                entity.HasOne(d => d.ChanExclusive)
                    .WithMany(p => p.BpmItems)
                    .HasForeignKey(d => d.ChanExclusiveId)
                    .HasConstraintName("fk_BpmItem_ChanExclusive");

                entity.HasOne(d => d.ItemColl)
                    .WithMany(p => p.BpmItems)
                    .HasForeignKey(d => d.ItemCollId)
                    .HasConstraintName("fk_BpmItem_ItemColl");

                entity.HasOne(d => d.ItemStatus)
                    .WithMany(p => p.BpmItems)
                    .HasForeignKey(d => d.ItemStatusId)
                    .HasConstraintName("fk_BpmItem_ItemStatus");

                entity.HasOne(d => d.ItemType)
                    .WithMany(p => p.BpmItems)
                    .HasForeignKey(d => d.ItemTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_BpmItem_ItemType");

                entity.HasOne(d => d.MasterSku)
                    .WithMany(p => p.BpmItems)
                    .HasForeignKey(d => d.MasterSkuId)
                    .HasConstraintName("fk_BpmItem_MasterSKU");

                entity.HasOne(d => d.MatInfus)
                    .WithMany(p => p.BpmItems)
                    .HasForeignKey(d => d.MatInfusid)
                    .HasConstraintName("fk_BpmItem_MatInfus");

                entity.HasOne(d => d.MatType)
                    .WithMany(p => p.BpmItems)
                    .HasForeignKey(d => d.MatTypeId)
                    .HasConstraintName("fk_BpmItem_MatType");

                entity.HasOne(d => d.MatrialType)
                    .WithMany(p => p.BpmItems)
                    .HasForeignKey(d => d.MatrialTypeId)
                    .HasConstraintName("fk_BpmItem_MatreialType");

                entity.HasOne(d => d.PalletType)
                    .WithMany(p => p.BpmItems)
                    .HasForeignKey(d => d.PalletTypeId)
                    .HasConstraintName("fk_BpmItem_PalletType");
            });

            modelBuilder.Entity<BpmLocation>(entity =>
            {
                entity.HasKey(e => e.LocationId)
                    .HasName("Pk_Location_Location_id");

                entity.ToTable("BpmLocation");

                entity.HasIndex(e => e.LocName, "Unq_LocationName")
                    .IsUnique();

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.Address1)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Address3)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.BudgetLocId).HasColumnName("BudgetLoc_id");

                entity.Property(e => e.City)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.DfPortDestId).HasColumnName("DfPortDest_id");

                entity.Property(e => e.EdipartnerId).HasColumnName("EDIPartner_id");

                entity.Property(e => e.FcstLocId).HasColumnName("FcstLoc_id");

                entity.Property(e => e.Is3Pl).HasColumnName("Is3PL");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsBulkFf).HasColumnName("IsBulkFF");

                entity.Property(e => e.IsDropShip).HasComment("1: DropShip location\\n0 or NULL: Non Dropship");

                entity.Property(e => e.IsFbaCa).HasColumnName("IsFBA_CA");

                entity.Property(e => e.IsUsingNs)
                    .HasColumnName("IsUsingNS")
                    .HasComment("Using the NetSuite at 3PL");

                entity.Property(e => e.IsWayfCg).HasColumnName("IsWayfCG");

                entity.Property(e => e.IsWfs).HasColumnName("IsWFS");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.LocIdAdds)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LocId_ADDS");

                entity.Property(e => e.LocIdAinSan)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LocId_AinSAN")
                    .HasComment("Amazon In-Network SAN");

                entity.Property(e => e.LocIdAmazon)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LocId_Amazon");

                entity.Property(e => e.LocIdHomeDp)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LocId_HomeDP");

                entity.Property(e => e.LocIdOverstock)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LocId_Overstock");

                entity.Property(e => e.LocIdTarget)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LocId_Target");

                entity.Property(e => e.LocIdWalmart)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LocId_Walmart");

                entity.Property(e => e.LocIdWay846)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("LocId_Way846");

                entity.Property(e => e.LocIdWay945)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("LocId_Way945");

                entity.Property(e => e.LocIdWayfair)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LocId_Wayfair");

                entity.Property(e => e.LocName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.LocType)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.LocationTypeId).HasColumnName("LocationType_id");

                entity.Property(e => e.MasterLocId).HasColumnName("MasterLoc_id");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.State)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.TimeOffset).HasComment("TimeOffset from PST. BANC is 3 hours ahead");

                entity.Property(e => e.ZinusLocId).HasColumnName("ZinusLoc_id");

                entity.Property(e => e.Zip)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ZIP");

                entity.HasOne(d => d.BudgetLoc)
                    .WithMany(p => p.BpmLocations)
                    .HasForeignKey(d => d.BudgetLocId)
                    .HasConstraintName("fk_BpmLocation_BudgetLoc");

                entity.HasOne(d => d.DfPortDest)
                    .WithMany(p => p.BpmLocations)
                    .HasForeignKey(d => d.DfPortDestId)
                    .HasConstraintName("Fk_BpmLocation_PortDest");

                entity.HasOne(d => d.Edipartner)
                    .WithMany(p => p.BpmLocations)
                    .HasForeignKey(d => d.EdipartnerId)
                    .HasConstraintName("Fk_BpmLocation_EDIPartner");

                entity.HasOne(d => d.FcstLoc)
                    .WithMany(p => p.BpmLocations)
                    .HasForeignKey(d => d.FcstLocId)
                    .HasConstraintName("Fk_BpmLocation_FcstLocation");

                entity.HasOne(d => d.LocationType)
                    .WithMany(p => p.BpmLocations)
                    .HasForeignKey(d => d.LocationTypeId)
                    .HasConstraintName("fk_BpmLocation_LocationType");

                entity.HasOne(d => d.MasterLoc)
                    .WithMany(p => p.InverseMasterLoc)
                    .HasForeignKey(d => d.MasterLocId)
                    .HasConstraintName("fk_BpmLocation_BpmLocation");

                entity.HasOne(d => d.ZinusLoc)
                    .WithMany(p => p.BpmLocations)
                    .HasForeignKey(d => d.ZinusLocId)
                    .HasConstraintName("fk_BpmLocation_ZinusLoc");
            });

            modelBuilder.Entity<BpmSkuStatus>(entity =>
            {
                entity.HasKey(e => e.StatusId)
                    .HasName("Pk_BpmSkuStatus_Status_id");

                entity.ToTable("BpmSkuStatus");

                entity.HasIndex(e => new { e.UploadDate, e.Item, e.Category }, "Idx_BpmSkuStatus")
                    .IsUnique();

                entity.Property(e => e.StatusId).HasColumnName("Status_id");

                entity.Property(e => e.AmzLaunchDate)
                    .HasColumnType("date")
                    .HasColumnName("AMZ_Launch_Date");

                entity.Property(e => e.Category)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Item)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Note)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Note2)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.UploadDate).HasColumnType("date");
            });

            modelBuilder.Entity<BrandCampaign>(entity =>
            {
                entity.HasKey(e => e.BrandCampId)
                    .HasName("pk_BrandCampaign");

                entity.ToTable("BrandCampaign");

                entity.Property(e => e.BrandCampId)
                    .ValueGeneratedNever()
                    .HasColumnName("BrandCamp_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.CampName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedCampaignTime).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.PortfolioId).HasColumnName("Portfolio_id");

                entity.Property(e => e.StartDate).HasColumnType("date");
            });

            modelBuilder.Entity<BudgetByLoc>(entity =>
            {
                entity.ToTable("BudgetByLoc");

                entity.HasComment("Yearly Budget qty by Location");

                entity.Property(e => e.BudgetByLocId).HasColumnName("BudgetByLoc_Id");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BudgetCust>(entity =>
            {
                entity.HasKey(e => e.BudgetCuId)
                    .HasName("Pk_BudgetCust_BudgetCu_id");

                entity.ToTable("BudgetCust");

                entity.Property(e => e.BudgetCuId).HasColumnName("BudgetCu_id");

                entity.Property(e => e.CustName)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BudgetDetail>(entity =>
            {
                entity.HasKey(e => e.BudgetId)
                    .HasName("Pk_BudgetCat_Budget_id");

                entity.ToTable("BudgetDetail");

                entity.HasIndex(e => new { e.FirstDoM, e.BudgetMkId, e.CatZinusId, e.IsNewness }, "Unq_BudgetDetail")
                    .IsUnique();

                entity.Property(e => e.BudgetId).HasColumnName("Budget_id");

                entity.Property(e => e.AddedDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BudgetMkId).HasColumnName("BudgetMk_id");

                entity.Property(e => e.Cat3Id).HasColumnName("Cat3_id");

                entity.Property(e => e.CatZinusId).HasColumnName("CatZinus_id");

                entity.Property(e => e.FirstDoM)
                    .HasColumnType("date")
                    .HasComment("First Day of Month");

                entity.Property(e => e.LastModDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.BudgetMk)
                    .WithMany(p => p.BudgetDetails)
                    .HasForeignKey(d => d.BudgetMkId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_BudgetDetil_BudMarket");

                entity.HasOne(d => d.CatZinus)
                    .WithMany(p => p.BudgetDetails)
                    .HasForeignKey(d => d.CatZinusId)
                    .HasConstraintName("Fk_BudgetDetil_CategoryZinus");
            });

            modelBuilder.Entity<BudgetLoc>(entity =>
            {
                entity.ToTable("BudgetLoc");

                entity.Property(e => e.BudgetLocId).HasColumnName("BudgetLoc_id");

                entity.Property(e => e.BudgetMkId).HasColumnName("BudgetMk_id");

                entity.Property(e => e.InvtUseOrder).HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.HasOne(d => d.BudgetMk)
                    .WithMany(p => p.BudgetLocs)
                    .HasForeignKey(d => d.BudgetMkId)
                    .HasConstraintName("fk_BudgetLoc_BudgetMk");
            });

            modelBuilder.Entity<BudgetMk>(entity =>
            {
                entity.ToTable("BudgetMk");

                entity.Property(e => e.BudgetMkId).HasColumnName("BudgetMk_id");

                entity.Property(e => e.MarketName)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BudgetSum>(entity =>
            {
                entity.HasKey(e => e.BudgetId)
                    .HasName("Pk_BudgetMarket_Budget_id");

                entity.ToTable("BudgetSum");

                entity.HasIndex(e => new { e.FirstDoM, e.BudgetCuId }, "Unq_BudgetSum")
                    .IsUnique();

                entity.Property(e => e.BudgetId).HasColumnName("Budget_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.BudgetCuId).HasColumnName("BudgetCu_id");

                entity.Property(e => e.FirstDoM)
                    .HasColumnType("date")
                    .HasComment("First Day of Month");

                entity.Property(e => e.LastModDate).HasColumnType("date");

                entity.Property(e => e.SalesBudget).HasColumnType("money");

                entity.HasOne(d => d.BudgetCu)
                    .WithMany(p => p.BudgetSums)
                    .HasForeignKey(d => d.BudgetCuId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_BudgetSum_BudgetCust");
            });

            modelBuilder.Entity<BudgetType>(entity =>
            {
                entity.ToTable("BudgetType");

                entity.Property(e => e.BudgetTypeId).HasColumnName("BudgetType_id");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CampStateType>(entity =>
            {
                entity.ToTable("CampStateType");

                entity.Property(e => e.CampStateTypeId).HasColumnName("CampStateType_id");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Cancel>(entity =>
            {
                entity.ToTable("Cancel", "ord");

                entity.HasIndex(e => e.OrderId, "Idx_Cancel_Oder_id");

                entity.Property(e => e.CancelId).HasColumnName("Cancel_id");

                entity.Property(e => e.OrderId).HasColumnName("Order_id");

                entity.Property(e => e.SalesRepId).HasColumnName("SalesRep_id");

                entity.Property(e => e.TimeRequested).HasColumnType("datetime");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.Cancels)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("Fk_Cancel_Order");
            });

            modelBuilder.Entity<CancelDetail>(entity =>
            {
                entity.HasKey(e => e.CancelLineId)
                    .HasName("Pk_CancelDetail_CancelLine_id");

                entity.ToTable("CancelDetail", "ord");

                entity.HasIndex(e => e.CancelId, "Idx_CancelDetail_Cancel_id");

                entity.HasIndex(e => e.OrderLineId, "Idx_CancelDetail_OrderLine_id");

                entity.Property(e => e.CancelLineId).HasColumnName("CancelLine_id");

                entity.Property(e => e.CancelId).HasColumnName("Cancel_id");

                entity.Property(e => e.OrderLineId).HasColumnName("OrderLine_id");

                entity.Property(e => e.TimeProcessed).HasColumnType("datetime");

                entity.Property(e => e.TimeReported).HasColumnType("datetime");

                entity.HasOne(d => d.Cancel)
                    .WithMany(p => p.CancelDetails)
                    .HasForeignKey(d => d.CancelId)
                    .HasConstraintName("Fk_CancelDetail_Cancel");

                entity.HasOne(d => d.OrderLine)
                    .WithMany(p => p.CancelDetails)
                    .HasForeignKey(d => d.OrderLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CancelDetail_OrderDetail");
            });

            modelBuilder.Entity<CarrierAccount>(entity =>
            {
                entity.HasKey(e => e.CarrierAcctId);

                entity.ToTable("CarrierAccount", "ord");

                entity.Property(e => e.CarrierAcctId).HasColumnName("CarrierAcct_id");

                entity.Property(e => e.BillAccNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CarrierId).HasColumnName("Carrier_id");

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.Property(e => e.ShipAccNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShipFromLocationId).HasColumnName("ShipFromLocation_id");

                entity.HasOne(d => d.Carrier)
                    .WithMany(p => p.CarrierAccounts)
                    .HasForeignKey(d => d.CarrierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CarrierAccount_ShippingCarrier");

                entity.HasOne(d => d.MarketPlace)
                    .WithMany(p => p.CarrierAccounts)
                    .HasForeignKey(d => d.MarketPlaceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CarrierAccount_KO_MarketPlace");

                entity.HasOne(d => d.ShipFromLocation)
                    .WithMany(p => p.CarrierAccounts)
                    .HasForeignKey(d => d.ShipFromLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CarrierAccount_KO_Location");
            });

            modelBuilder.Entity<CarrierCharge>(entity =>
            {
                entity.HasKey(e => e.CarChargeId)
                    .HasName("Pk_ContCharge_ContCharge_id");

                entity.ToTable("CarrierCharge");

                entity.HasIndex(e => e.ShipLineId, "Unq_CarrierCharge")
                    .IsUnique();

                entity.Property(e => e.CarChargeId).HasColumnName("CarCharge_id");

                entity.Property(e => e.ChasisDayQaul)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("W - Working (Business) days\\nC - Calendar days");

                entity.Property(e => e.ChasisFree)
                    .HasColumnType("money")
                    .HasComment("Chasis Free Days");

                entity.Property(e => e.DetDayQual)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("W - Working (Business) days\\nC - Calendar days");

                entity.Property(e => e.ShipLineId).HasColumnName("ShipLine_id");

                entity.HasOne(d => d.ShipLine)
                    .WithOne(p => p.CarrierCharge)
                    .HasForeignKey<CarrierCharge>(d => d.ShipLineId)
                    .HasConstraintName("Fk_ContCharge_ShipLine");
            });

            modelBuilder.Entity<CarrierMethodCode>(entity =>
            {
                entity.HasKey(e => e.CarrierMethodId);

                entity.ToTable("CarrierMethodCode", "ord");

                entity.Property(e => e.CarrierMethodId).HasColumnName("CarrierMethod_id");

                entity.Property(e => e.CarrierMethodId1).HasColumnName("Carrier_Method_id");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.Property(e => e.ShipViaId).HasColumnName("ShipVia_id");

                entity.Property(e => e.XmlCarrierMethodCode).HasColumnName("XML_Carrier_Method_code");

                entity.HasOne(d => d.MarketPlace)
                    .WithMany(p => p.CarrierMethodCodes)
                    .HasForeignKey(d => d.MarketPlaceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CarrierMethodCode_MarketPlace");

                entity.HasOne(d => d.ShipVia)
                    .WithMany(p => p.CarrierMethodCodes)
                    .HasForeignKey(d => d.ShipViaId)
                    .HasConstraintName("FK__CarrierMe__ShipV__6DC22B62");
            });

            modelBuilder.Entity<CastleCancel>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CastleCancel", "ord");

                entity.Property(e => e.ItemNo)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.PoNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CastleGateInventory>(entity =>
            {
                entity.HasKey(e => e.CgInventoryId)
                    .HasName("Pk_CastleGate_Inventory_CG_Inventory_id");

                entity.ToTable("CastleGate_Inventory");

                entity.HasIndex(e => new { e.ItemName, e.Warehouse, e.DateEnd }, "Idx_CastleGate_Inventory");

                entity.Property(e => e.CgInventoryId).HasColumnName("CG_Inventory_id");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.ItemId).HasColumnName("Item_id");

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.QtyAllocated).HasColumnName("Qty_Allocated");

                entity.Property(e => e.QtyOnHold).HasColumnName("Qty_OnHold");

                entity.Property(e => e.QtyReceived1y).HasColumnName("Qty_Received_1Y");

                entity.Property(e => e.QtyReserved).HasColumnName("Qty_Reserved");

                entity.Property(e => e.QtyShipped30d).HasColumnName("Qty_Shipped_30D");

                entity.Property(e => e.QtyUnpickable).HasColumnName("Qty_Unpickable");

                entity.Property(e => e.QtyUnprocessedAdjustment).HasColumnName("Qty_Unprocessed_Adjustment");

                entity.Property(e => e.QtyUnprocessedCycleCount).HasColumnName("Qty_Unprocessed_Cycle_Count");

                entity.Property(e => e.TotalAvailable).HasColumnName("Total_Available");

                entity.Property(e => e.TotalOnHand).HasColumnName("Total_OnHand");

                entity.Property(e => e.TotalOnOrder).HasColumnName("Total_OnOrder");

                entity.Property(e => e.TotalOnTransfer).HasColumnName("Total_OnTransfer");

                entity.Property(e => e.TotalUnavailable).HasColumnName("Total_Unavailable");

                entity.Property(e => e.Warehouse)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CastlegateInvoice>(entity =>
            {
                entity.ToTable("Castlegate_Invoice");

                entity.Property(e => e.CastlegateInvoiceId).HasColumnName("Castlegate_Invoice_ID");

                entity.Property(e => e.AdjustmentDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Adjustment_Description");

                entity.Property(e => e.AdminDescriptionNotes)
                    .HasMaxLength(100)
                    .HasColumnName("Admin_Description_Notes");

                entity.Property(e => e.BatchNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Batch_Number");

                entity.Property(e => e.ChargeDate)
                    .HasColumnType("date")
                    .HasColumnName("Charge_Date");

                entity.Property(e => e.ChargeNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Charge_Number");

                entity.Property(e => e.EventDate)
                    .HasColumnType("date")
                    .HasColumnName("Event_Date");

                entity.Property(e => e.ExchangeRate).HasColumnName("Exchange_Rate");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(10)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.IsSelfInvoiced)
                    .HasMaxLength(10)
                    .HasColumnName("Is_Self_Invoiced");

                entity.Property(e => e.Metric).HasMaxLength(10);

                entity.Property(e => e.OrderNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Order_Number");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Part_Number");

                entity.Property(e => e.ProductUnits).HasColumnName("Product_Units");

                entity.Property(e => e.RetailerName)
                    .HasMaxLength(50)
                    .HasColumnName("Retailer_Name");

                entity.Property(e => e.ShipSpeed)
                    .HasMaxLength(50)
                    .HasColumnName("Ship_Speed");

                entity.Property(e => e.Spo)
                    .HasMaxLength(50)
                    .HasColumnName("SPO");

                entity.Property(e => e.TotalWholesaleCost).HasColumnName("Total_Wholesale_Cost");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.UnitWholesaleCost).HasColumnName("Unit_Wholesale_Cost");

                entity.Property(e => e.UsedMaximumCharge)
                    .HasMaxLength(10)
                    .HasColumnName("Used_Maximum_Charge");

                entity.Property(e => e.UsedMinimumCharge)
                    .HasMaxLength(10)
                    .HasColumnName("Used_Minimum_Charge");

                entity.Property(e => e.Warehouse).HasMaxLength(50);

                entity.Property(e => e.WarehouseWholesaleCost).HasColumnName("Warehouse_Wholesale_Cost");
            });

            modelBuilder.Entity<CatBudget>(entity =>
            {
                entity.ToTable("CatBudget");

                entity.Property(e => e.CatBudgetId).HasColumnName("CatBudget_id");

                entity.Property(e => e.AddedDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.BudgetLocId).HasColumnName("BudgetLoc_id");

                entity.Property(e => e.BudgetMkId).HasColumnName("BudgetMk_id");

                entity.Property(e => e.CatZinusId).HasColumnName("CatZinus_id");

                entity.Property(e => e.FirstDoM).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.QtyIv).HasColumnName("QtyIV");

                entity.Property(e => e.QtyMs).HasColumnName("QtyMS");

                entity.Property(e => e.QtyOb).HasColumnName("QtyOB");

                entity.Property(e => e.QtyPo).HasColumnName("QtyPO");

                entity.HasOne(d => d.BudgetLoc)
                    .WithMany(p => p.CatBudgets)
                    .HasForeignKey(d => d.BudgetLocId)
                    .HasConstraintName("fk_CatBudget_BudgetLoc");

                entity.HasOne(d => d.BudgetMk)
                    .WithMany(p => p.CatBudgets)
                    .HasForeignKey(d => d.BudgetMkId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_CatBudget_BudgetMk");

                entity.HasOne(d => d.CatZinus)
                    .WithMany(p => p.CatBudgets)
                    .HasForeignKey(d => d.CatZinusId)
                    .HasConstraintName("fk_CatBudget_CategoryZinus");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.CatBudgets)
                    .HasForeignKey(d => d.ItemNoId)
                    .HasConstraintName("fk_CatBudget_BpmItem");
            });

            modelBuilder.Entity<CatBudgetWk>(entity =>
            {
                entity.ToTable("CatBudgetWk");

                entity.Property(e => e.CatBudgetWkId).HasColumnName("CatBudgetWk_id");

                entity.Property(e => e.AddedDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.BudgetLocId).HasColumnName("BudgetLoc_id");

                entity.Property(e => e.BudgetMkId).HasColumnName("BudgetMk_id");

                entity.Property(e => e.CatZinusId).HasColumnName("CatZinus_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.QtyIv).HasColumnName("QtyIV");

                entity.Property(e => e.QtyOb).HasColumnName("QtyOB");

                entity.Property(e => e.QtyObFcst).HasColumnName("QtyOB_Fcst");

                entity.Property(e => e.QtyPo).HasColumnName("QtyPO");

                entity.Property(e => e.SundayOfWk).HasColumnType("date");
            });

            modelBuilder.Entity<CatGlobalZ>(entity =>
            {
                entity.ToTable("CatGlobalZ");

                entity.HasIndex(e => e.CatGlobal, "CatGlobal")
                    .IsUnique();

                entity.Property(e => e.CatGlobalZId).HasColumnName("CatGlobalZ_id");

                entity.Property(e => e.CatGlobal)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Category");

                entity.Property(e => e.Category1)
                    .HasMaxLength(50)
                    .HasColumnName("Category");

                entity.Property(e => e.CategoryId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Category_id");
            });

            modelBuilder.Entity<Category1>(entity =>
            {
                entity.HasKey(e => e.Cat1Id)
                    .HasName("Pk_Category1_NsInt_id");

                entity.ToTable("Category1");

                entity.HasIndex(e => e.Cat1, "Unq_Category1")
                    .IsUnique();

                entity.Property(e => e.Cat1Id)
                    .ValueGeneratedNever()
                    .HasColumnName("Cat1_id");

                entity.Property(e => e.Cat1)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");
            });

            modelBuilder.Entity<Category2>(entity =>
            {
                entity.HasKey(e => e.Cat2Id)
                    .HasName("Pk_Category1_NsInt_id_0");

                entity.ToTable("Category2");

                entity.HasIndex(e => e.Cat2, "Unq_Category2")
                    .IsUnique();

                entity.Property(e => e.Cat2Id)
                    .ValueGeneratedNever()
                    .HasColumnName("Cat2_id");

                entity.Property(e => e.Cat2)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");
            });

            modelBuilder.Entity<Category3>(entity =>
            {
                entity.HasKey(e => e.Cat3Id)
                    .HasName("Pk_Category1_NsInt_id_1");

                entity.ToTable("Category3");

                entity.HasIndex(e => e.Cat3, "Unq_Category3")
                    .IsUnique();

                entity.Property(e => e.Cat3Id)
                    .ValueGeneratedNever()
                    .HasColumnName("Cat3_id");

                entity.Property(e => e.Cat3)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");
            });

            modelBuilder.Entity<Category4>(entity =>
            {
                entity.HasKey(e => e.Cat4Id)
                    .HasName("Pk_Category4_Cat4_id");

                entity.ToTable("Category4");

                entity.HasIndex(e => e.Cat4, "Unq_Category4")
                    .IsUnique();

                entity.Property(e => e.Cat4Id).HasColumnName("Cat4_id");

                entity.Property(e => e.Cat4)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");
            });

            modelBuilder.Entity<Category5>(entity =>
            {
                entity.HasKey(e => e.Cat5Id)
                    .HasName("Pk_Category5_Cat5_id");

                entity.ToTable("Category5");

                entity.HasIndex(e => e.Cat5, "Unq_Category5")
                    .IsUnique();

                entity.Property(e => e.Cat5Id).HasColumnName("Cat5_id");

                entity.Property(e => e.Cat5)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");
            });

            modelBuilder.Entity<Category6>(entity =>
            {
                entity.HasKey(e => e.Cat6Id)
                    .HasName("Pk_Category6_Cat6_id");

                entity.ToTable("Category6");

                entity.HasIndex(e => e.Cat6, "Unq_Category6")
                    .IsUnique();

                entity.Property(e => e.Cat6Id).HasColumnName("Cat6_id");

                entity.Property(e => e.Cat6)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");
            });

            modelBuilder.Entity<CategoryZinu>(entity =>
            {
                entity.HasKey(e => e.CatZinusId)
                    .HasName("Pk_CategoryZinus_CatZinus_id");

                entity.HasIndex(e => e.CatZinus, "Unq_CategoryZinus")
                    .IsUnique();

                entity.Property(e => e.CatZinusId).HasColumnName("CatZinus_id");

                entity.Property(e => e.CatZinus)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");
            });

            modelBuilder.Entity<ChanExclusive>(entity =>
            {
                entity.ToTable("ChanExclusive");

                entity.Property(e => e.ChanExclusiveId).HasColumnName("ChanExclusive_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChangeLog>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("PK_KO_SageChangeLog");

                entity.ToTable("ChangeLog", "log");

                entity.Property(e => e.ChId).HasColumnName("Ch_id");

                entity.Property(e => e.Date).HasColumnType("date");
            });

            modelBuilder.Entity<CmD>(entity =>
            {
                entity.ToTable("CmD", "ord");

                entity.HasIndex(e => new { e.CmTId, e.CmLineNo }, "Unq_CmD")
                    .IsUnique();

                entity.HasIndex(e => e.InvDId, "idx_CmD");

                entity.HasIndex(e => e.NsIntId, "idx_CmD_NS");

                entity.Property(e => e.CmDId).HasColumnName("CmD_id");

                entity.Property(e => e.CmTId).HasColumnName("CmT_id");

                entity.Property(e => e.InvDId).HasColumnName("InvD_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.LineTotal).HasColumnType("money");

                entity.Property(e => e.MemoLine)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.SoDate).HasColumnType("date");

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.HasOne(d => d.CmT)
                    .WithMany(p => p.CmDs)
                    .HasForeignKey(d => d.CmTId)
                    .HasConstraintName("Fk_CmD_CmT");

                entity.HasOne(d => d.InvD)
                    .WithMany(p => p.CmDs)
                    .HasForeignKey(d => d.InvDId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("Fk_CmD_InvD");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.CmDs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CmD_BpmItem");
            });

            modelBuilder.Entity<CmOrigin>(entity =>
            {
                entity.ToTable("CmOrigin");

                entity.Property(e => e.CmOriginId).HasColumnName("CmOrigin_id");

                entity.Property(e => e.AccountId).HasColumnName("Account_id");

                entity.Property(e => e.ItemId).HasColumnName("Item_id");

                entity.Property(e => e.MarketId).HasColumnName("Market_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShortName)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.CmOrigins)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CmOrigin_GlAccount");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.CmOrigins)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CmOrigin_BpmItem");

                entity.HasOne(d => d.Market)
                    .WithMany(p => p.CmOrigins)
                    .HasForeignKey(d => d.MarketId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CmOrigin_Market");
            });

            modelBuilder.Entity<CmRemit>(entity =>
            {
                entity.ToTable("CmRemit", "ord");

                entity.Property(e => e.CmRemitId).HasColumnName("CmRemit_id");

                entity.Property(e => e.CmTotal).HasColumnType("money");

                entity.Property(e => e.CrdMemoId).HasColumnName("CrdMemo_id");

                entity.Property(e => e.Note)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.RemitId).HasColumnName("Remit_id");

                entity.Property(e => e.RemitNoSub)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.HasOne(d => d.Remit)
                    .WithMany(p => p.CmRemits)
                    .HasForeignKey(d => d.RemitId)
                    .HasConstraintName("Fk_CmRemit_NsRemit");
            });

            modelBuilder.Entity<CmStatus>(entity =>
            {
                entity.ToTable("CmStatus", "ord");

                entity.Property(e => e.CmStatusId).HasColumnName("CmStatus_id");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CmT>(entity =>
            {
                entity.ToTable("CmT", "ord");

                entity.HasIndex(e => e.CmNo, "Unq_CmT")
                    .IsUnique();

                entity.HasIndex(e => e.GlimpactTId, "idx_CmT");

                entity.HasIndex(e => e.NsIntId, "idx_CmT_NS");

                entity.Property(e => e.CmTId).HasColumnName("CmT_id");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CmDate).HasColumnType("date");

                entity.Property(e => e.CmNo)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.CmStatusId).HasColumnName("CmStatus_id");

                entity.Property(e => e.CmTotal).HasColumnType("money");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.DocFrom)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.GlimpactTId).HasColumnName("GLImpactT_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.MemoMain)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.NsSyncTime).HasColumnType("datetime");

                entity.Property(e => e.PoNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.SoTId).HasColumnName("SoT_id");

                entity.HasOne(d => d.CmStatus)
                    .WithMany(p => p.CmTs)
                    .HasForeignKey(d => d.CmStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CmT_CmStatus");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CmTs)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("Fk_CmT_Customer");

                entity.HasOne(d => d.GlimpactT)
                    .WithMany(p => p.CmTs)
                    .HasForeignKey(d => d.GlimpactTId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_CmT_GLImpactT");

                entity.HasOne(d => d.SoT)
                    .WithMany(p => p.CmTs)
                    .HasForeignKey(d => d.SoTId)
                    .HasConstraintName("Fk_CmT_SoT");
            });

            modelBuilder.Entity<CommittedSo>(entity =>
            {
                entity.HasKey(e => e.UnqId)
                    .HasName("PK_FutureCustomerPO");

                entity.ToTable("CommittedSO", "Rpt");

                entity.Property(e => e.UnqId).HasColumnName("UNQ_id");

                entity.Property(e => e.ItemnoId).HasColumnName("Itemno_id");

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.HasOne(d => d.DateKeyNavigation)
                    .WithMany(p => p.CommittedSos)
                    .HasForeignKey(d => d.DateKey)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FutureCustomerPO_DimDate");

                entity.HasOne(d => d.Itemno)
                    .WithMany(p => p.CommittedSos)
                    .HasForeignKey(d => d.ItemnoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FutureCustomerPO_KO_Itemno");

                entity.HasOne(d => d.MarketPlace)
                    .WithMany(p => p.CommittedSos)
                    .HasForeignKey(d => d.MarketPlaceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FutureCustomerPO_KO_MarketPlace");
            });

            modelBuilder.Entity<CompetingItem>(entity =>
            {
                entity.ToTable("CompetingItem");

                entity.Property(e => e.CompetingItemId).HasColumnName("CompetingItem_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.ListingTitle)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MarketItemId)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.Property(e => e.SellerId).HasColumnName("Seller_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.CompetingItems)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CompetingItem_BpmItem");

                entity.HasOne(d => d.MarketPlace)
                    .WithMany(p => p.CompetingItems)
                    .HasForeignKey(d => d.MarketPlaceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CompetingItem_KO_MarketPlace");

                entity.HasOne(d => d.Seller)
                    .WithMany(p => p.CompetingItems)
                    .HasForeignKey(d => d.SellerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CompetingItem_KO_Seller");
            });

            modelBuilder.Entity<ConsolidationInventoryD>(entity =>
            {
                entity.ToTable("ConsolidationInventoryD");

                entity.Property(e => e.ConsolidationInventoryDId).HasColumnName("ConsolidationInventoryD_id");

                entity.Property(e => e.BeginAmt).HasColumnType("money");

                entity.Property(e => e.ConsolidationInventoryTId).HasColumnName("ConsolidationInventoryT_id");

                entity.Property(e => e.EndAmt).HasColumnType("money");

                entity.Property(e => e.GiotherAmt)
                    .HasColumnType("money")
                    .HasColumnName("GIOtherAmt");

                entity.Property(e => e.GiotherQty).HasColumnName("GIOtherQty");

                entity.Property(e => e.GrotherAmt)
                    .HasColumnType("money")
                    .HasColumnName("GROtherAmt");

                entity.Property(e => e.GrotherQty).HasColumnName("GROtherQty");

                entity.Property(e => e.InboundAmt).HasColumnType("money");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.ProductAmt).HasColumnType("money");

                entity.Property(e => e.SalesAmt).HasColumnType("money");

                entity.Property(e => e.ZinusSku)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("ZinusSKU");

                entity.HasOne(d => d.ConsolidationInventoryT)
                    .WithMany(p => p.ConsolidationInventoryDs)
                    .HasForeignKey(d => d.ConsolidationInventoryTId)
                    .HasConstraintName("fk_ConsolidationInventoryD_ConsolidationInventoryT");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ConsolidationInventoryDs)
                    .HasForeignKey(d => d.ItemNoId)
                    .HasConstraintName("fk_ConsolidationInventoryD_BpmItem");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.ConsolidationInventoryDs)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("fk_ConsolidationInventoryD_BpmLocation");
            });

            modelBuilder.Entity<ConsolidationInventoryT>(entity =>
            {
                entity.ToTable("ConsolidationInventoryT");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Date).HasColumnType("date");
            });

            modelBuilder.Entity<ContFeeD>(entity =>
            {
                entity.ToTable("ContFeeD");

                entity.HasIndex(e => e.ContFeeTId, "idx_ContFeeD");

                entity.HasIndex(e => e.PoDId, "idx_ContFeeD_0");

                entity.HasIndex(e => e.ToDId, "idx_ContFeeD_1");

                entity.Property(e => e.ContFeeDId).HasColumnName("ContFeeD_id");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.ContFeeTId).HasColumnName("ContFeeT_id");

                entity.Property(e => e.PoDId).HasColumnName("PoD_id");

                entity.Property(e => e.ProvDutyRate).HasColumnType("money");

                entity.Property(e => e.ProvTariff)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Tariff)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.TariffDutyRate).HasColumnType("money");

                entity.Property(e => e.ToDId).HasColumnName("ToD_id");

                entity.HasOne(d => d.ContFeeT)
                    .WithMany(p => p.ContFeeDs)
                    .HasForeignKey(d => d.ContFeeTId)
                    .HasConstraintName("Fk_ContFeeD_ContFeeT");

                entity.HasOne(d => d.PoD)
                    .WithMany(p => p.ContFeeDs)
                    .HasForeignKey(d => d.PoDId)
                    .HasConstraintName("Fk_ContFeeD_PoD");

                entity.HasOne(d => d.ToD)
                    .WithMany(p => p.ContFeeDs)
                    .HasForeignKey(d => d.ToDId)
                    .HasConstraintName("Fk_ContFeeD_ToD");
            });

            modelBuilder.Entity<ContFoot>(entity =>
            {
                entity.HasKey(e => e.ContFeeTId)
                    .HasName("Pk_ContFeeT_ContFeeT_id");

                entity.ToTable("ContFeeT");

                entity.HasIndex(e => e.BolFeeTId, "idx_ContFeeT");

                entity.Property(e => e.ContFeeTId).HasColumnName("ContFeeT_id");

                entity.Property(e => e.BolFeeTId).HasColumnName("BolFeeT_id");

                entity.Property(e => e.ContainerNo)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.SizeType)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Volume).HasColumnType("money");

                entity.HasOne(d => d.BolFeeT)
                    .WithMany(p => p.ContFeet)
                    .HasForeignKey(d => d.BolFeeTId)
                    .HasConstraintName("fk_ContFeeT_BolFeeT");
            });

            modelBuilder.Entity<ContStatus>(entity =>
            {
                entity.ToTable("ContStatus");

                entity.Property(e => e.ContStatusId).HasColumnName("ContStatus_id");

                entity.Property(e => e.StatusCont)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Container>(entity =>
            {
                entity.ToTable("Container");

                entity.HasIndex(e => new { e.ContainerNo, e.PoBoLId, e.NsIntId, e.NsIbsNo }, "Unq_Container")
                    .IsUnique();

                entity.HasIndex(e => e.ContainerNo, "idx_Container");

                entity.HasIndex(e => e.PoBoLId, "idx_Container_0");

                entity.Property(e => e.ContainerId).HasColumnName("Container_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.BolNo)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ContStatusId).HasColumnName("ContStatus_id");

                entity.Property(e => e.ContainerNo)
                    .IsRequired()
                    .HasMaxLength(64);

                entity.Property(e => e.DateArrivalNoti).HasColumnType("date");

                entity.Property(e => e.DateAvail).HasColumnType("date");

                entity.Property(e => e.DateGated).HasColumnType("date");

                entity.Property(e => e.DateLfdEmpty).HasColumnType("date");

                entity.Property(e => e.DateLfdPort).HasColumnType("date");

                entity.Property(e => e.DatePkUpAct).HasColumnType("date");

                entity.Property(e => e.DatePkUpPlan).HasColumnType("date");

                entity.Property(e => e.DatePrePull).HasColumnType("date");

                entity.Property(e => e.DateReceived).HasColumnType("date");

                entity.Property(e => e.DateReturnPlan).HasColumnType("date");

                entity.Property(e => e.DateReturned).HasColumnType("date");

                entity.Property(e => e.LastModKoT).HasColumnType("datetime");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.Memo)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.NsIbsNo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.PoBoLId).HasColumnName("PoBoL_id");

                entity.Property(e => e.TransporterId).HasColumnName("Transporter_id");

                entity.Property(e => e.UnloadPriority)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.ContStatus)
                    .WithMany(p => p.Containers)
                    .HasForeignKey(d => d.ContStatusId)
                    .HasConstraintName("Fk_Container_ContStatus");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.Containers)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("Fk_PoContainer_BpmLocation");

                entity.HasOne(d => d.PoBoL)
                    .WithMany(p => p.Containers)
                    .HasForeignKey(d => d.PoBoLId)
                    .HasConstraintName("Fk_Container_PoBol");

                entity.HasOne(d => d.Transporter)
                    .WithMany(p => p.Containers)
                    .HasForeignKey(d => d.TransporterId)
                    .HasConstraintName("Fk_PoContainer_Transporter");
            });

            modelBuilder.Entity<CostAllocationMethod>(entity =>
            {
                entity.HasKey(e => e.AllocationMethodId)
                    .HasName("pk_CostAllocationMethod");

                entity.ToTable("CostAllocationMethod");

                entity.Property(e => e.AllocationMethodId).HasColumnName("AllocationMethod_id");

                entity.Property(e => e.Method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CountType>(entity =>
            {
                entity.ToTable("CountType", "wms");

                entity.Property(e => e.CountTypeId).HasColumnName("CountType_id");

                entity.Property(e => e.CountType1)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CountType");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.ToTable("Country");

                entity.HasIndex(e => new { e.FullName, e.Alpha2, e.Alpha3 }, "Unq_Country")
                    .IsUnique();

                entity.HasIndex(e => e.Alpha2, "idx_Country_Alpha2");

                entity.Property(e => e.CountryId).HasColumnName("Country_id");

                entity.Property(e => e.Alpha2)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Alpha3)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(45)
                    .IsUnicode(false);

                entity.Property(e => e.NsCode)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");
            });

            modelBuilder.Entity<CrdD>(entity =>
            {
                entity.ToTable("CrdD", "ord");

                entity.HasIndex(e => e.Description, "idx_CrdD");

                entity.HasIndex(e => e.InvTId, "idx_CrdD_0");

                entity.Property(e => e.CrdDId).HasColumnName("CrdD_id");

                entity.Property(e => e.AccountId).HasColumnName("Account_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.CrdTId).HasColumnName("CrdT_id");

                entity.Property(e => e.Description)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.InvNo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.InvTId).HasColumnName("InvT_id");

                entity.Property(e => e.IsCredit).HasComment("1: Credit\\n0: Debit");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.Memo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.CrdDs)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("Fk_CrdAccount_GlAccount");

                entity.HasOne(d => d.CrdT)
                    .WithMany(p => p.CrdDs)
                    .HasForeignKey(d => d.CrdTId)
                    .HasConstraintName("Fk_CrdAccount_CrdT");

                entity.HasOne(d => d.InvT)
                    .WithMany(p => p.CrdDs)
                    .HasForeignKey(d => d.InvTId)
                    .HasConstraintName("Fk_CrdD_InvT");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.CrdDs)
                    .HasForeignKey(d => d.ItemNoId)
                    .HasConstraintName("Fk_CrdD_BpmItem");
            });

            modelBuilder.Entity<CrdPay>(entity =>
            {
                entity.ToTable("CrdPay", "ord");

                entity.Property(e => e.CrdPayId).HasColumnName("CrdPay_id");

                entity.Property(e => e.CrdTId).HasColumnName("CrdT_id");

                entity.Property(e => e.Memo)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentId).HasColumnName("Payment_Id");
            });

            modelBuilder.Entity<CrdT>(entity =>
            {
                entity.ToTable("CrdT", "ord");

                entity.HasIndex(e => e.CrdNo, "Unq_CrdT")
                    .IsUnique();

                entity.Property(e => e.CrdTId).HasColumnName("CrdT_id");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CrdDate).HasColumnType("date");

                entity.Property(e => e.CrdNo)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.CrdTotal).HasColumnType("money");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.Memo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");
            });

            modelBuilder.Entity<CryptKey>(entity =>
            {
                entity.HasKey(e => e.CriptId)
                    .HasName("pk_CryptKey");

                entity.ToTable("CryptKey");

                entity.HasIndex(e => e.RefDate, "unq_CryptKey_RefDate")
                    .IsUnique();

                entity.Property(e => e.CriptId).HasColumnName("Cript_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.IvValue)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("IV_Value");

                entity.Property(e => e.KeyValue)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.RefDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CsClaimPayD>(entity =>
            {
                entity.HasKey(e => e.ClaimPayDId)
                    .HasName("Pk_CsClaimPayD_ClaimPayD_id");

                entity.ToTable("CsClaimPayD");

                entity.Property(e => e.ClaimPayDId).HasColumnName("ClaimPayD_id");

                entity.Property(e => e.ClaimPayTId).HasColumnName("ClaimPayT_id");

                entity.Property(e => e.CustAsin)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.FeeClaimDId).HasColumnName("FeeClaimD_id");

                entity.Property(e => e.PaidNet).HasColumnType("money");

                entity.Property(e => e.PoNo)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.HasOne(d => d.ClaimPayT)
                    .WithMany(p => p.CsClaimPayDs)
                    .HasForeignKey(d => d.ClaimPayTId)
                    .HasConstraintName("Fk_CsClaimPayD_CsClaimPayT");

                entity.HasOne(d => d.FeeClaimD)
                    .WithMany(p => p.CsClaimPayDs)
                    .HasForeignKey(d => d.FeeClaimDId)
                    .HasConstraintName("Fk_CsClaimPayD_CsFeeClaimD");
            });

            modelBuilder.Entity<CsClaimPayT>(entity =>
            {
                entity.HasKey(e => e.ClaimPayTId)
                    .HasName("Pk_CsClaimPayT_ClaimPayT_id");

                entity.ToTable("CsClaimPayT");

                entity.HasIndex(e => new { e.FeeClaimTId, e.PaymentNo }, "Unq_CsClaimPayT")
                    .IsUnique();

                entity.Property(e => e.ClaimPayTId).HasColumnName("ClaimPayT_id");

                entity.Property(e => e.FeeClaimTId).HasColumnName("FeeClaimT_id");

                entity.Property(e => e.LastModDate).HasColumnType("date");

                entity.Property(e => e.Memo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PaidDate).HasColumnType("date");

                entity.Property(e => e.PaymentNo)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.TotalPaidNet).HasColumnType("money");

                entity.HasOne(d => d.FeeClaimT)
                    .WithMany(p => p.CsClaimPayTs)
                    .HasForeignKey(d => d.FeeClaimTId)
                    .HasConstraintName("Fk_CsClaimPayT_CsFeeClaimT");
            });

            modelBuilder.Entity<CsFeeClaimD>(entity =>
            {
                entity.HasKey(e => e.FeeClaimDId)
                    .HasName("Pk_CsFeeClaimD_FeeClaimD_id");

                entity.ToTable("CsFeeClaimD");

                entity.Property(e => e.FeeClaimDId).HasColumnName("FeeClaimD_id");

                entity.Property(e => e.AmzFeeNet).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AmzInvNet).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BpmFeeNet).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BpmInvNet).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ClaimNet).HasColumnType("money");

                entity.Property(e => e.CustAsin)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.FeeClaimTId).HasColumnName("FeeClaimT_id");

                entity.Property(e => e.FeeInvDId).HasColumnName("FeeInvD_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.PaidNet).HasColumnType("money");

                entity.Property(e => e.PoNo)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.HasOne(d => d.FeeClaimT)
                    .WithMany(p => p.CsFeeClaimDs)
                    .HasForeignKey(d => d.FeeClaimTId)
                    .HasConstraintName("Fk_CsFeeClaimD_CsFeeClaimT");

                entity.HasOne(d => d.FeeInvD)
                    .WithMany(p => p.CsFeeClaimDs)
                    .HasForeignKey(d => d.FeeInvDId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CsFeeClaimD_CsFeeInvD");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.CsFeeClaimDs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CsFeeClaimD_BpmItem");
            });

            modelBuilder.Entity<CsFeeClaimT>(entity =>
            {
                entity.HasKey(e => e.FeeClaimTId)
                    .HasName("Pk_CsFeeClamT_FeeClamT_id");

                entity.ToTable("CsFeeClaimT");

                entity.HasIndex(e => new { e.FeeInvTId, e.ClaimNo }, "Unq_CsFeeClaimT")
                    .IsUnique();

                entity.Property(e => e.FeeClaimTId).HasColumnName("FeeClaimT_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.ClaimDate).HasColumnType("date");

                entity.Property(e => e.ClaimNo)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.FeeInvTId).HasColumnName("FeeInvT_id");

                entity.Property(e => e.LastModDate).HasColumnType("date");

                entity.Property(e => e.Memo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TotalClaimNet).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TotalPaidNet).HasColumnType("money");

                entity.HasOne(d => d.FeeInvT)
                    .WithMany(p => p.CsFeeClaimTs)
                    .HasForeignKey(d => d.FeeInvTId)
                    .HasConstraintName("Fk_CsFeeClaimT_CsFeeInvT");
            });

            modelBuilder.Entity<CsFeeInvD>(entity =>
            {
                entity.HasKey(e => e.FeeInvDId)
                    .HasName("Pk_CsFeeInvD_FeeInvD_id");

                entity.ToTable("CsFeeInvD");

                entity.Property(e => e.FeeInvDId).HasColumnName("FeeInvD_id");

                entity.Property(e => e.CsFeeNet).HasColumnType("money");

                entity.Property(e => e.CsInvNet).HasColumnType("money");

                entity.Property(e => e.CustAsin)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.CustUpc)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("CustUPC");

                entity.Property(e => e.DateRcvd).HasColumnType("date");

                entity.Property(e => e.FeeInvTId).HasColumnName("FeeInvT_id");

                entity.Property(e => e.InvDId).HasColumnName("InvD_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.PoNo)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.HasOne(d => d.FeeInvT)
                    .WithMany(p => p.CsFeeInvDs)
                    .HasForeignKey(d => d.FeeInvTId)
                    .HasConstraintName("Fk_CsFeeInvD_CsFeeInvT");

                entity.HasOne(d => d.InvD)
                    .WithMany(p => p.CsFeeInvDs)
                    .HasForeignKey(d => d.InvDId)
                    .HasConstraintName("Fk_CsFeeInvD_InvD");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.CsFeeInvDs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CsFeeInvD_BpmItem");
            });

            modelBuilder.Entity<CsFeeInvT>(entity =>
            {
                entity.HasKey(e => e.FeeInvTId)
                    .HasName("Pk_CsFeeInvT_FeeInvT_id");

                entity.ToTable("CsFeeInvT");

                entity.HasIndex(e => new { e.MarketId, e.FeeInvNo }, "Unq_CsFeeInvT")
                    .IsUnique();

                entity.Property(e => e.FeeInvTId).HasColumnName("FeeInvT_id");

                entity.Property(e => e.FeeInvDate).HasColumnType("date");

                entity.Property(e => e.FeeInvNo)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.FeeTypeId).HasColumnName("FeeType_id");

                entity.Property(e => e.MarketId).HasColumnName("Market_id");

                entity.Property(e => e.TotalFeeNet).HasColumnType("money");

                entity.Property(e => e.TotalInvNet).HasColumnType("money");

                entity.HasOne(d => d.FeeType)
                    .WithMany(p => p.CsFeeInvTs)
                    .HasForeignKey(d => d.FeeTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CsFeeInvT_CsFeeType");

                entity.HasOne(d => d.Market)
                    .WithMany(p => p.CsFeeInvTs)
                    .HasForeignKey(d => d.MarketId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CsFeeInvT_Market");
            });

            modelBuilder.Entity<CsFeeType>(entity =>
            {
                entity.HasKey(e => e.FeeTypeId)
                    .HasName("Pk_CsFeeType_FeeType_id");

                entity.ToTable("CsFeeType");

                entity.HasIndex(e => new { e.MarketId, e.ShortName, e.DateStart }, "UNq_CsFeeType")
                    .IsUnique();

                entity.Property(e => e.FeeTypeId).HasColumnName("FeeType_id");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.FeeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FeePercent).HasColumnType("money");

                entity.Property(e => e.MarketId).HasColumnName("Market_id");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CsInvtFeedD>(entity =>
            {
                entity.ToTable("CsInvtFeedD");

                entity.Property(e => e.CsInvtFeedDId).HasColumnName("CsInvtFeedD_id");

                entity.Property(e => e.CsInvtFeedTId).HasColumnName("CsInvtFeedT_id");

                entity.Property(e => e.IcrId).HasColumnName("ICR_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.HasOne(d => d.CsInvtFeedT)
                    .WithMany(p => p.CsInvtFeedDs)
                    .HasForeignKey(d => d.CsInvtFeedTId)
                    .HasConstraintName("fk_CsInvtFeedD_CsInvtFeedT");

                entity.HasOne(d => d.Icr)
                    .WithMany(p => p.CsInvtFeedDs)
                    .HasForeignKey(d => d.IcrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_CsInvtFeedD_MkICR");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.CsInvtFeedDs)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_CsInvtFeedD_BpmLocation");
            });

            modelBuilder.Entity<CsInvtFeedT>(entity =>
            {
                entity.ToTable("CsInvtFeedT");

                entity.Property(e => e.CsInvtFeedTId).HasColumnName("CsInvtFeedT_id");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.EmpAddedId).HasColumnName("EmpAdded_id");

                entity.Property(e => e.EmpReviewdId).HasColumnName("EmpReviewd_id");

                entity.Property(e => e.EmpSentId).HasColumnName("EmpSent_id");

                entity.Property(e => e.Note)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TimeAdded).HasColumnType("datetime");

                entity.Property(e => e.TimeReviewed).HasColumnType("datetime");

                entity.Property(e => e.TimeSent).HasColumnType("datetime");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CsInvtFeedTs)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_CsInvtFeedT_Customer");

                entity.HasOne(d => d.EmpAdded)
                    .WithMany(p => p.CsInvtFeedTEmpAddeds)
                    .HasForeignKey(d => d.EmpAddedId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_CsInvtFeedT_Employee");

                entity.HasOne(d => d.EmpReviewd)
                    .WithMany(p => p.CsInvtFeedTEmpReviewds)
                    .HasForeignKey(d => d.EmpReviewdId)
                    .HasConstraintName("fk_CsInvtFeedT_Employee_0");

                entity.HasOne(d => d.EmpSent)
                    .WithMany(p => p.CsInvtFeedTEmpSents)
                    .HasForeignKey(d => d.EmpSentId)
                    .HasConstraintName("fk_CsInvtFeedT_Employee_1");
            });

            modelBuilder.Entity<CustAddr>(entity =>
            {
                entity.ToTable("CustAddr");

                entity.HasIndex(e => new { e.CustomerId, e.LocationId, e.CarrierId }, "unq_CustAddr")
                    .IsUnique();

                entity.Property(e => e.CustAddrId).HasColumnName("CustAddr_id");

                entity.Property(e => e.BillAddr1)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.BillAddr2)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.BillAddr3)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.BillCity)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.BillCountry)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.BillState)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.BillZip)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("BillZIP");

                entity.Property(e => e.CarrierId).HasColumnName("Carrier_id");

                entity.Property(e => e.CustName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.PhoneNo)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.RetAddr1)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.RetAddr2)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.RetAddr3)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.RetCity)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.RetCountry)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.RetState)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.RetZip)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("RetZIP");

                entity.HasOne(d => d.Carrier)
                    .WithMany(p => p.CustAddrs)
                    .HasForeignKey(d => d.CarrierId)
                    .HasConstraintName("fk_CustAddr_ShipCarrier");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CustAddrs)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CustAddr_Customer");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.CustAddrs)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("fk_CustAddr_BpmLocation");
            });

            modelBuilder.Entity<CustBillAddr>(entity =>
            {
                entity.ToTable("CustBillAddr");

                entity.HasIndex(e => new { e.CustomerId, e.CarrierId, e.LocationId }, "unq_CustBillAddr")
                    .IsUnique();

                entity.Property(e => e.CustBillAddrId).HasColumnName("CustBillAddr_id");

                entity.Property(e => e.Addr1)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Addr2)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Addr3)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.CarrierId).HasColumnName("Carrier_id");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Zip)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ZIP");

                entity.HasOne(d => d.Carrier)
                    .WithMany(p => p.CustBillAddrs)
                    .HasForeignKey(d => d.CarrierId)
                    .HasConstraintName("fk_CustBillAddr_ShipCarrier");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CustBillAddrs)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_CustBillAddr_Customer");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.CustBillAddrs)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("fk_CustBillAddr_BpmLocation");
            });

            modelBuilder.Entity<CustLocCode>(entity =>
            {
                entity.HasKey(e => e.LocCodeId)
                    .HasName("Pk_CustLocCode_LocCode_id");

                entity.ToTable("CustLocCode");

                entity.Property(e => e.LocCodeId).HasColumnName("LocCode_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.LocCode)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.LocId).HasColumnName("Loc_id");

                entity.Property(e => e.LocSan)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("LocSAN");

                entity.Property(e => e.MarketId).HasColumnName("Market_id");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CustLocCodes)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CustLocCode_Customer");

                entity.HasOne(d => d.Loc)
                    .WithMany(p => p.CustLocCodes)
                    .HasForeignKey(d => d.LocId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CustLocCode_BpmLocation");

                entity.HasOne(d => d.Market)
                    .WithMany(p => p.CustLocCodes)
                    .HasForeignKey(d => d.MarketId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CustLocCode_Market");
            });

            modelBuilder.Entity<CustRetuAddr>(entity =>
            {
                entity.ToTable("CustRetuAddr");

                entity.HasIndex(e => new { e.CustomerId, e.LocationId, e.CarrierId }, "unq_CustRetuAddr")
                    .IsUnique();

                entity.Property(e => e.CustRetuAddrId).HasColumnName("CustRetuAddr_id");

                entity.Property(e => e.Addr1)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Addr2)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Addr3)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.CarrierId).HasColumnName("Carrier_id");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Zip)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ZIP");

                entity.HasOne(d => d.Carrier)
                    .WithMany(p => p.CustRetuAddrs)
                    .HasForeignKey(d => d.CarrierId)
                    .HasConstraintName("fk_CustRetuAddr_ShipCarrier");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CustRetuAddrs)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_CustRetuAddr_Customer");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.CustRetuAddrs)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("fk_CustRetuAddr_BpmLocation");
            });

            modelBuilder.Entity<Custom>(entity =>
            {
                entity.HasKey(e => e.CustomsId)
                    .HasName("pk_Customs");

                entity.HasComment("Duty,GSP,Tariff per HTS code");

                entity.Property(e => e.CustomsId).HasColumnName("Customs_id");

                entity.Property(e => e.CountryId).HasColumnName("Country_id");

                entity.Property(e => e.DateFrom).HasColumnType("date");

                entity.Property(e => e.DateTo).HasColumnType("date");

                entity.Property(e => e.Duty)
                    .HasColumnType("money")
                    .HasComment("Percent");

                entity.Property(e => e.Gsp)
                    .HasColumnType("money")
                    .HasColumnName("GSP")
                    .HasComment("Percent");

                entity.Property(e => e.HtsCode)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Memo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Tariff)
                    .HasColumnType("money")
                    .HasComment("Percent");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Customs)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_Customs_Country");
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.ToTable("Customer");

                entity.HasIndex(e => e.CustName, "Unq_Customer")
                    .IsUnique();

                entity.HasIndex(e => e.FcstChannelId, "idx_Customer_FcstChannel_id");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.BudgetCuId).HasColumnName("BudgetCu_id");

                entity.Property(e => e.BudgetMkId).HasColumnName("BudgetMk_id");

                entity.Property(e => e.Category)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.CustName)
                    .IsRequired()
                    .HasMaxLength(48)
                    .IsUnicode(false);

                entity.Property(e => e.EdipartnerId).HasColumnName("EDIPartner_id");

                entity.Property(e => e.Email)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.FcstChannelId).HasColumnName("FcstChannel_id");

                entity.Property(e => e.IsWayfCg)
                    .HasColumnName("IsWayfCG")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.MarketId).HasColumnName("Market_id");

                entity.Property(e => e.MarketPlace)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.NameSage)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.NameZinus)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.SalesType)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.SpRecpChId).HasColumnName("SpRecpCH_id");

                entity.Property(e => e.Terms)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.ZinusCustId).HasColumnName("ZinusCust_id");

                entity.HasOne(d => d.BudgetCu)
                    .WithMany(p => p.Customers)
                    .HasForeignKey(d => d.BudgetCuId)
                    .HasConstraintName("Fk_Customer_BudgetCust");

                entity.HasOne(d => d.BudgetMk)
                    .WithMany(p => p.Customers)
                    .HasForeignKey(d => d.BudgetMkId)
                    .HasConstraintName("Fk_Customer_BudgetMk");

                entity.HasOne(d => d.Edipartner)
                    .WithMany(p => p.Customers)
                    .HasForeignKey(d => d.EdipartnerId)
                    .HasConstraintName("Fk_Customer_EDIPartner");

                entity.HasOne(d => d.FcstChannel)
                    .WithMany(p => p.Customers)
                    .HasForeignKey(d => d.FcstChannelId)
                    .HasConstraintName("fk_Customer_FcstChannel");

                entity.HasOne(d => d.Market)
                    .WithMany(p => p.Customers)
                    .HasForeignKey(d => d.MarketId)
                    .HasConstraintName("Fk_Customer_Market");

                entity.HasOne(d => d.SpRecpCh)
                    .WithMany(p => p.Customers)
                    .HasForeignKey(d => d.SpRecpChId)
                    .HasConstraintName("fk_Customer_SpRecap_CHN");

                entity.HasOne(d => d.ZinusCust)
                    .WithMany(p => p.Customers)
                    .HasForeignKey(d => d.ZinusCustId)
                    .HasConstraintName("fk_Customer_ZinusCust");
            });

            modelBuilder.Entity<CustomerInventoryAllocation>(entity =>
            {
                entity.HasKey(e => e.CustInventoryId)
                    .HasName("Pk_CustomerInventory");

                entity.ToTable("CustomerInventoryAllocation");

                entity.Property(e => e.CustInventoryId).HasColumnName("CustInventory_id");

                entity.Property(e => e.ItemListingId).HasColumnName("ItemListing_id");

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.Property(e => e.OrderDueDate).HasColumnType("date");

                entity.Property(e => e.RepotDate).HasColumnType("date");

                entity.HasOne(d => d.ItemListing)
                    .WithMany(p => p.CustomerInventoryAllocations)
                    .HasForeignKey(d => d.ItemListingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustomerInventory_ItemListing_Itemno");

                entity.HasOne(d => d.MarketPlace)
                    .WithMany(p => p.CustomerInventoryAllocations)
                    .HasForeignKey(d => d.MarketPlaceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustomerInventory_KO_MarketPlace");
            });

            modelBuilder.Entity<CustomerPo>(entity =>
            {
                entity.ToTable("CustomerPO");

                entity.Property(e => e.CustomerPoId).HasColumnName("CustomerPO_id");

                entity.Property(e => e.AddedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastModDateTime).HasColumnType("datetime");

                entity.Property(e => e.Ponumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("PONumber");

                entity.Property(e => e.ShipWindowEnd).HasColumnType("date");

                entity.Property(e => e.ShipWindowStart).HasColumnType("date");

                entity.Property(e => e.VendorCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CustomerPodetail>(entity =>
            {
                entity.ToTable("CustomerPODetail");

                entity.HasIndex(e => new { e.Asin, e.CustomerPoId, e.ItemName }, "Idx_CustomerPODetail");

                entity.Property(e => e.CustomerPodetailId).HasColumnName("CustomerPODetail_id");

                entity.Property(e => e.AddedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Asin)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.BackOrdered).HasDefaultValueSql("((0))");

                entity.Property(e => e.CustomerPoId).HasColumnName("CustomerPO_id");

                entity.Property(e => e.ExpectedShipDate).HasColumnType("date");

                entity.Property(e => e.IsCanceledButShipped).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModDateTime).HasColumnType("datetime");

                entity.Property(e => e.Ponumber)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("POnumber");

                entity.Property(e => e.TotalCost).HasColumnType("money");

                entity.Property(e => e.UnitCost).HasColumnType("money");

                entity.HasOne(d => d.CustomerPo)
                    .WithMany(p => p.CustomerPodetails)
                    .HasForeignKey(d => d.CustomerPoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustomerPODetail_CustomerPO");
            });

            modelBuilder.Entity<CycleCountMsl>(entity =>
            {
                entity.HasKey(e => e.CycleCountId)
                    .HasName("Pk_CycleCount_CycleCount_id");

                entity.ToTable("CycleCountMSL", "wms");

                entity.HasIndex(e => e.ItemNoId, "Idx_CycleCount_Itemno_id");

                entity.HasIndex(e => e.LocationId, "Idx_CycleCount_Location_id");

                entity.Property(e => e.CycleCountId).HasColumnName("CycleCount_id");

                entity.Property(e => e.ColId).HasColumnName("Col_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LevId)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Lev_id")
                    .IsFixedLength(true);

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.Note)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PosId)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Pos_id")
                    .IsFixedLength(true);

                entity.Property(e => e.RowId).HasColumnName("Row_id");

                entity.Property(e => e.TimeUpdated).HasColumnType("datetime");

                entity.Property(e => e.ZoneId)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Zone_id")
                    .IsFixedLength(true);

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.CycleCountMsls)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CycleCount_KO_Itemno");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.CycleCountMsls)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CycleCount_KO_Location_0");
            });

            modelBuilder.Entity<CycleCountZhw>(entity =>
            {
                entity.HasKey(e => e.CycleCountId)
                    .HasName("Pk_CycleCount_CycleCount_id_0");

                entity.ToTable("CycleCountZHW", "wms");

                entity.HasIndex(e => e.ItemNoId, "Idx_CycleCount_Itemno_id_0");

                entity.HasIndex(e => e.LocationId, "Idx_CycleCount_Location_id_0");

                entity.Property(e => e.CycleCountId).HasColumnName("CycleCount_id");

                entity.Property(e => e.ColId).HasColumnName("Col_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LevId)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Lev_id")
                    .IsFixedLength(true);

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.Note)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PosId)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Pos_id")
                    .IsFixedLength(true);

                entity.Property(e => e.RowId).HasColumnName("Row_id");

                entity.Property(e => e.TimeUpdated).HasColumnType("datetime");

                entity.Property(e => e.ZoneId)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Zone_id")
                    .IsFixedLength(true);

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.CycleCountZhws)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CycleCountHW_KO_Itemno");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.CycleCountZhws)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CycleCountHW_KO_Location");
            });

            modelBuilder.Entity<DemandForecast>(entity =>
            {
                entity.HasKey(e => e.DemandFrcId)
                    .HasName("PK_ForecastQuantity");

                entity.ToTable("DemandForecast", "frc");

                entity.Property(e => e.DemandFrcId).HasColumnName("DemandFrc_id");

                entity.Property(e => e.AddedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateFuture).HasColumnType("datetime");

                entity.Property(e => e.ItemnoId).HasColumnName("Itemno_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.HasOne(d => d.Itemno)
                    .WithMany(p => p.DemandForecasts)
                    .HasForeignKey(d => d.ItemnoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ForecastQ__Itemn__2A962F78");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.DemandForecasts)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ForecastQ__Locat__2B8A53B1");
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.ToTable("Department");

                entity.HasIndex(e => e.DeptName, "Unq_Department")
                    .IsUnique();

                entity.Property(e => e.DepartmentId).HasColumnName("Department_id");

                entity.Property(e => e.DeptName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeptShortName)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");
            });

            modelBuilder.Entity<DeptManager>(entity =>
            {
                entity.ToTable("DeptManager");

                entity.HasIndex(e => e.DepartmentId, "idx_DeptManager");

                entity.HasIndex(e => e.EmployeeId, "idx_DeptManager_0");

                entity.Property(e => e.DeptManagerId).HasColumnName("DeptManager_id");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateFrom).HasColumnType("date");

                entity.Property(e => e.DepartmentId).HasColumnName("Department_id");

                entity.Property(e => e.EmployeeId).HasColumnName("Employee_id");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.DeptManagers)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("fk_DeptManager");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.DeptManagers)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("fk_DeptManager_0");
            });

            modelBuilder.Entity<DimDate>(entity =>
            {
                entity.HasKey(e => e.DateKey)
                    .HasName("PK__DimDate__40DF45E38885AD2C");

                entity.ToTable("DimDate");

                entity.HasIndex(e => e.Date, "Unq_DimDate")
                    .IsUnique();

                entity.Property(e => e.DateKey).ValueGeneratedNever();

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateTime).HasColumnType("datetime");

                entity.Property(e => e.DayName)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.DayOfMonth)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DayOfQuarter)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DayOfWeekInMonth)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DayOfWeekInYear)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DayOfWeekUsa)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DayOfWeekUSA")
                    .IsFixedLength(true);

                entity.Property(e => e.DayOfYear)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DaySuffix)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.FirstDayOfMonth).HasColumnType("date");

                entity.Property(e => e.FirstDayOfQuarter).HasColumnType("date");

                entity.Property(e => e.FirstDayOfYear).HasColumnType("date");

                entity.Property(e => e.FullDateUsa)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FullDateUSA")
                    .IsFixedLength(true);

                entity.Property(e => e.HolidayUsa)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HolidayUSA");

                entity.Property(e => e.IsBpmholiday).HasColumnName("IsBPMHoliday");

                entity.Property(e => e.IsHolidayUsa).HasColumnName("IsHolidayUSA");

                entity.Property(e => e.LastDayOfMonth).HasColumnType("date");

                entity.Property(e => e.LastDayOfQuarter).HasColumnType("date");

                entity.Property(e => e.LastDayOfYear).HasColumnType("date");

                entity.Property(e => e.Mmyyyy)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("MMYYYY")
                    .IsFixedLength(true);

                entity.Property(e => e.MondayOfWeek).HasColumnType("date");

                entity.Property(e => e.Month)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.MonthName)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.MonthOfQuarter)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.MonthYear)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Quarter)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.QuarterName)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.WeekOfMonth)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.WeekOfQuarter)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.WeekOfYear)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Year)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.YearName)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<DrayageFeeD>(entity =>
            {
                entity.ToTable("DrayageFeeD");

                entity.HasIndex(e => new { e.ContainerId, e.PoTId }, "idx_DrayageFeeD");

                entity.Property(e => e.DrayageFeeDId).HasColumnName("DrayageFeeD_id");

                entity.Property(e => e.ContainerId).HasColumnName("Container_id");

                entity.Property(e => e.DrayageFeeTId).HasColumnName("DrayageFeeT_id");

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.PoTId).HasColumnName("PoT_id");

                entity.Property(e => e.Qty).HasColumnType("money");

                entity.Property(e => e.Rate).HasColumnType("money");

                entity.HasOne(d => d.Container)
                    .WithMany(p => p.DrayageFeeDs)
                    .HasForeignKey(d => d.ContainerId)
                    .HasConstraintName("fk_DrayageFeeD_Container");

                entity.HasOne(d => d.DrayageFeeT)
                    .WithMany(p => p.DrayageFeeDs)
                    .HasForeignKey(d => d.DrayageFeeTId)
                    .HasConstraintName("fk_DrayageFeeD_DrayageFeeT");

                entity.HasOne(d => d.PoT)
                    .WithMany(p => p.DrayageFeeDs)
                    .HasForeignKey(d => d.PoTId)
                    .HasConstraintName("fk_DrayageFeeD_PoT");
            });

            modelBuilder.Entity<DrayageFoot>(entity =>
            {
                entity.HasKey(e => e.DrayageFeeTId)
                    .HasName("pk_DrayageFeeT");

                entity.ToTable("DrayageFeeT");

                entity.HasIndex(e => new { e.VendorId, e.InvNo, e.PoBillTId, e.BillCreditTId }, "idx_DrayageFeeT");

                entity.HasIndex(e => new { e.VendorId, e.InvNo }, "unq_DrayageFeeT")
                    .IsUnique();

                entity.Property(e => e.DrayageFeeTId).HasColumnName("DrayageFeeT_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BillCreditTId).HasColumnName("BillCreditT_id");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvNo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.PoBillTId).HasColumnName("PoBillT_id");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_id");

                entity.HasOne(d => d.BillCreditT)
                    .WithMany(p => p.DrayageFeet)
                    .HasForeignKey(d => d.BillCreditTId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_DrayageFeeT_BillCreditT");

                entity.HasOne(d => d.PoBillT)
                    .WithMany(p => p.DrayageFeet)
                    .HasForeignKey(d => d.PoBillTId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_DrayageFeeT_PoBillT");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.DrayageFeet)
                    .HasForeignKey(d => d.VendorId)
                    .HasConstraintName("fk_DrayageFeeT_Vendor");
            });

            modelBuilder.Entity<EBayNotification>(entity =>
            {
                entity.HasKey(e => e.NotifyId)
                    .HasName("PK__eBay_Not__BA7EF5C66A0C11B6");

                entity.ToTable("eBay_Notification");

                entity.Property(e => e.NotifyId).HasColumnName("notifyId");

                entity.Property(e => e.Deprecated).HasColumnName("deprecated");

                entity.Property(e => e.EiasToken)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("eiasToken");

                entity.Property(e => e.EventDate)
                    .HasColumnType("datetime")
                    .HasColumnName("eventDate");

                entity.Property(e => e.NotificationId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("notificationId");

                entity.Property(e => e.PublishAttemtCount).HasColumnName("publishAttemtCount");

                entity.Property(e => e.PublishDate)
                    .HasColumnType("datetime")
                    .HasColumnName("publishDate");

                entity.Property(e => e.SchemaVerison)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("schemaVerison");

                entity.Property(e => e.Topic)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("topic");

                entity.Property(e => e.UserId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<EbayRefreshToken>(entity =>
            {
                entity.HasKey(e => e.TokenId)
                    .HasName("PK__ebay_ref__AC16DB478E2B26C4");

                entity.ToTable("ebay_refresh_token");

                entity.Property(e => e.TokenId).HasColumnName("tokenId");

                entity.Property(e => e.ExpiresTime)
                    .HasColumnType("datetime")
                    .HasColumnName("expiresTime");

                entity.Property(e => e.Token)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("token");

                entity.Property(e => e.TokenType)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EdiAutoMk>(entity =>
            {
                entity.HasKey(e => e.AutoSendId)
                    .HasName("Pk_EdiAutoMk_AutoSend_id");

                entity.ToTable("EdiAutoMk", "edi");

                entity.HasIndex(e => new { e.EpId, e.FgcId }, "Unq_EdiAutoMk")
                    .IsUnique();

                entity.Property(e => e.AutoSendId).HasColumnName("AutoSend_id");

                entity.Property(e => e.EpId).HasColumnName("EP_id");

                entity.Property(e => e.FgcId).HasColumnName("FGC_id");

                entity.HasOne(d => d.Ep)
                    .WithMany(p => p.EdiAutoMks)
                    .HasForeignKey(d => d.EpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_EdiAutoMk_EDIPartner");

                entity.HasOne(d => d.Fgc)
                    .WithMany(p => p.EdiAutoMks)
                    .HasForeignKey(d => d.FgcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_EdiAutoMk_EdiFGC");
            });

            modelBuilder.Entity<EdiAutoTpl>(entity =>
            {
                entity.HasKey(e => e.EdiTplLocId)
                    .HasName("Pk_EdiAutoTpl_EdiTplLoc_id");

                entity.ToTable("EdiAutoTpl", "edi");

                entity.HasIndex(e => new { e.EpId, e.LocId, e.FgcId }, "Unq_EdiAutoTpl")
                    .IsUnique();

                entity.Property(e => e.EdiTplLocId).HasColumnName("EdiTplLoc_id");

                entity.Property(e => e.EpId).HasColumnName("EP_id");

                entity.Property(e => e.FgcId).HasColumnName("FGC_id");

                entity.Property(e => e.LocId).HasColumnName("Loc_id");

                entity.HasOne(d => d.Ep)
                    .WithMany(p => p.EdiAutoTpls)
                    .HasForeignKey(d => d.EpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_EdiAutoTpl_EDIPartner");

                entity.HasOne(d => d.Fgc)
                    .WithMany(p => p.EdiAutoTpls)
                    .HasForeignKey(d => d.FgcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_EdiAutoTpl_EdiFGC");

                entity.HasOne(d => d.Loc)
                    .WithMany(p => p.EdiAutoTpls)
                    .HasForeignKey(d => d.LocId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_EdiAutoTpl_BpmLocation");
            });

            modelBuilder.Entity<EdiCarrier>(entity =>
            {
                entity.HasKey(e => e.EdiCarId)
                    .HasName("PK_EdiCarrier_EdiCar_id");

                entity.ToTable("EdiCarrier", "edi");

                entity.Property(e => e.EdiCarId).HasColumnName("EdiCar_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.CarCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CarName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CarSpeed)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EpId).HasColumnName("EP_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.RetCode)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Scac)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("SCAC");

                entity.Property(e => e.ShipViaId).HasColumnName("ShipVia_id");

                entity.HasOne(d => d.Ep)
                    .WithMany(p => p.EdiCarriers)
                    .HasForeignKey(d => d.EpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_EdiCarrier_EDIPartner");

                entity.HasOne(d => d.ShipVia)
                    .WithMany(p => p.EdiCarriers)
                    .HasForeignKey(d => d.ShipViaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_EdiCarrier_ShipVia");
            });

            modelBuilder.Entity<EdiEmailLog>(entity =>
            {
                entity.ToTable("EdiEmailLog");

                entity.HasIndex(e => e.EmailTitle, "idx_EdiEmailLog_EmailTitle");

                entity.Property(e => e.EdiEmailLogId).HasColumnName("EdiEmailLog_id");

                entity.Property(e => e.EmailTitle)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EmailTo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TimeSent).HasColumnType("datetime");
            });

            modelBuilder.Entity<EdiFgc>(entity =>
            {
                entity.HasKey(e => e.FgcId)
                    .HasName("Pk_EdiFGC_FGC_id");

                entity.ToTable("EdiFGC", "edi");

                entity.Property(e => e.FgcId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FGC_id");

                entity.Property(e => e.Fgc).HasColumnName("FGC");

                entity.Property(e => e.FgcDesc)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.FgcStr)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<EdiIcM2p>(entity =>
            {
                entity.HasKey(e => e.MyIcId)
                    .HasName("Pk_EdiIC_M2P_IcNo");

                entity.ToTable("Edi_IC_M2P", "edi");

                entity.Property(e => e.MyIcId).HasColumnName("MyIc_id");

                entity.Property(e => e.EdiFileId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("EdiFile_id");

                entity.Property(e => e.EdiFname)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EpId).HasColumnName("EP_id");

                entity.Property(e => e.FgcId).HasColumnName("FGC_id");

                entity.Property(e => e.IcTime).HasColumnType("datetime");

                entity.HasOne(d => d.Ep)
                    .WithMany(p => p.EdiIcM2ps)
                    .HasForeignKey(d => d.EpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_Edi_IC_M2P_EDIPartner");

                entity.HasOne(d => d.Fgc)
                    .WithMany(p => p.EdiIcM2ps)
                    .HasForeignKey(d => d.FgcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_EdiIC_M2P_EdiFGC");
            });

            modelBuilder.Entity<EdiIcP2m>(entity =>
            {
                entity.HasKey(e => e.EpIcId)
                    .HasName("Pk_EdiIC_P2M_pic_id");

                entity.ToTable("Edi_IC_P2M", "edi");

                entity.HasIndex(e => new { e.EpId, e.FgcId, e.EpIcNo, e.DateKey }, "Unq_Edi_IC_P2M")
                    .IsUnique();

                entity.Property(e => e.EpIcId).HasColumnName("EpIc_id");

                entity.Property(e => e.EdiFileId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("EdiFile_id");

                entity.Property(e => e.EdiFname)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EpId).HasColumnName("EP_id");

                entity.Property(e => e.FgcId).HasColumnName("FGC_id");

                entity.Property(e => e.IcTime).HasColumnType("datetime");

                entity.HasOne(d => d.Ep)
                    .WithMany(p => p.EdiIcP2ms)
                    .HasForeignKey(d => d.EpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_Edi_IC_P2M_EDIPartner");

                entity.HasOne(d => d.Fgc)
                    .WithMany(p => p.EdiIcP2ms)
                    .HasForeignKey(d => d.FgcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_EdiIC_P2M_EdiFGC");
            });

            modelBuilder.Entity<EdiT>(entity =>
            {
                entity.HasKey(e => e.EdiTsId)
                    .HasName("Pk_EdiTS_EdiTS_id");

                entity.ToTable("Edi_TS", "edi");

                entity.HasIndex(e => e.ArnId, "Idx_Edi_TS_ARN");

                entity.HasIndex(e => e.PoTId, "Idx_Edi_TS_PoT");

                entity.HasIndex(e => e.SoTId, "Idx_Edi_TS_SoT");

                entity.HasIndex(e => new { e.MyIcId, e.EpIcId, e.TsNo }, "Unq_Edi_TS_EDI")
                    .IsUnique();

                entity.HasIndex(e => e.CmTId, "idx_Edi_TS_0");

                entity.HasIndex(e => e.IfTId, "idx_Edi_TS_1");

                entity.HasIndex(e => e.InvTId, "idx_Edi_TS_2");

                entity.HasIndex(e => e.ToTId, "idx_Edi_TS_3");

                entity.HasIndex(e => e.RcvTId, "idx_Edi_TS_4");

                entity.HasIndex(e => e.InvFeedTId, "idx_Edi_TS_5");

                entity.HasIndex(e => e.EpIcId, "idx_Edi_TS_6");

                entity.HasIndex(e => e.MyIcId, "idx_Edi_TS_7");

                entity.Property(e => e.EdiTsId).HasColumnName("EdiTS_id");

                entity.Property(e => e.ArnId).HasColumnName("ARN_id");

                entity.Property(e => e.CmTId).HasColumnName("CmT_id");

                entity.Property(e => e.EpIcId)
                    .HasColumnName("EpIc_id")
                    .HasComment("Partner IC DB primary key (id)");

                entity.Property(e => e.FgcId).HasColumnName("FGC_id");

                entity.Property(e => e.IfTId).HasColumnName("IfT_id");

                entity.Property(e => e.InvFeedTId).HasColumnName("InvFeedT_id");

                entity.Property(e => e.InvTId).HasColumnName("InvT_id");

                entity.Property(e => e.IsM2p)
                    .HasColumnName("IsM2P")
                    .HasComment("0: Partner to Me\\n1: Me to Partner");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LocId).HasColumnName("Loc_id");

                entity.Property(e => e.MyIcId)
                    .HasColumnName("MyIc_id")
                    .HasComment("My IC primary key = IC NO");

                entity.Property(e => e.PoTId).HasColumnName("PoT_id");

                entity.Property(e => e.RcvTId).HasColumnName("RcvT_id");

                entity.Property(e => e.SoTId).HasColumnName("SoT_id");

                entity.Property(e => e.ToTId).HasColumnName("ToT_id");

                entity.Property(e => e.TplInvRptTId).HasColumnName("TplInvRptT_id");

                entity.Property(e => e.TrStatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TsNo).HasComment("Transaction No in Interchange");

                entity.HasOne(d => d.Arn)
                    .WithMany(p => p.EdiTs)
                    .HasForeignKey(d => d.ArnId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_Edi_TS_AdARN");

                entity.HasOne(d => d.CmT)
                    .WithMany(p => p.EdiTs)
                    .HasForeignKey(d => d.CmTId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_Edi_TS_KoCoT");

                entity.HasOne(d => d.EpIc)
                    .WithMany(p => p.EdiTs)
                    .HasForeignKey(d => d.EpIcId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("Fk_Edi_TS_EdiIC_P2M");

                entity.HasOne(d => d.Fgc)
                    .WithMany(p => p.EdiTs)
                    .HasForeignKey(d => d.FgcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_Edi_TS_EdiFGC");

                entity.HasOne(d => d.IfT)
                    .WithMany(p => p.EdiTs)
                    .HasForeignKey(d => d.IfTId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_Edi_TS_ItemFFT");

                entity.HasOne(d => d.InvFeedT)
                    .WithMany(p => p.EdiTs)
                    .HasForeignKey(d => d.InvFeedTId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_Edi_TS_MkInvFeedT");

                entity.HasOne(d => d.InvT)
                    .WithMany(p => p.EdiTs)
                    .HasForeignKey(d => d.InvTId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_Edi_TS_InvT");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.EdiTs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("Fk_Edi_TS_BpmItem");

                entity.HasOne(d => d.Loc)
                    .WithMany(p => p.EdiTs)
                    .HasForeignKey(d => d.LocId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_Edi_TS_BpmLocation_0");

                entity.HasOne(d => d.MyIc)
                    .WithMany(p => p.EdiTs)
                    .HasForeignKey(d => d.MyIcId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("Fk_Edi_TS_Edi_IC_M2P");

                entity.HasOne(d => d.PoT)
                    .WithMany(p => p.EdiTs)
                    .HasForeignKey(d => d.PoTId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_Edi_TS_PoT");

                entity.HasOne(d => d.RcvT)
                    .WithMany(p => p.EdiTs)
                    .HasForeignKey(d => d.RcvTId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_Edi_TS_PoRcvT");

                entity.HasOne(d => d.SoT)
                    .WithMany(p => p.EdiTs)
                    .HasForeignKey(d => d.SoTId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_Edi_TS_SoT");

                entity.HasOne(d => d.ToT)
                    .WithMany(p => p.EdiTs)
                    .HasForeignKey(d => d.ToTId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_Edi_TS_ToT_0");

                entity.HasOne(d => d.TplInvRptT)
                    .WithMany(p => p.EdiTs)
                    .HasForeignKey(d => d.TplInvRptTId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_Edi_TS_TplInvRptT");
            });

            modelBuilder.Entity<EdiWalmartCarrierInfo>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("EdiWalmartCarrierInfo", "edi");

                entity.Property(e => e.Code).ValueGeneratedNever();

                entity.Property(e => e.Name).IsRequired();

                entity.Property(e => e.ShipViaId).HasColumnName("ShipVia_id");

                entity.HasOne(d => d.ShipVia)
                    .WithMany(p => p.EdiWalmartCarrierInfos)
                    .HasForeignKey(d => d.ShipViaId)
                    .HasConstraintName("FK_EdiWalmartCarrierInfo_ShipVia");
            });

            modelBuilder.Entity<Edicertificate>(entity =>
            {
                entity.HasKey(e => e.CertificateId)
                    .HasName("Pk_EDICertification_Certification_id");

                entity.ToTable("EDICertificate", "edi");

                entity.Property(e => e.CertificateId).HasColumnName("Certificate_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.Begin).HasColumnType("datetime");

                entity.Property(e => e.End).HasColumnType("datetime");

                entity.Property(e => e.Filename)
                    .HasMaxLength(254)
                    .IsUnicode(false);

                entity.Property(e => e.MyInfoId).HasColumnName("MyInfo_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PartnerId).HasColumnName("Partner_id");

                entity.Property(e => e.Password)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Serial)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SignAlgorithm)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.HasOne(d => d.MyInfo)
                    .WithMany(p => p.Edicertificates)
                    .HasForeignKey(d => d.MyInfoId)
                    .HasConstraintName("Fk_EDICertification_EDIMyInfo");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.Edicertificates)
                    .HasForeignKey(d => d.PartnerId)
                    .HasConstraintName("Fk_EDICertification_EDIPartner");
            });

            modelBuilder.Entity<EdimyInfo>(entity =>
            {
                entity.HasKey(e => e.MyInfoId)
                    .HasName("Pk_EDIMyInfo_MyInfo_id");

                entity.ToTable("EDIMyInfo", "edi");

                entity.Property(e => e.MyInfoId).HasColumnName("MyInfo_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.As2id)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("AS2ID");

                entity.Property(e => e.IsMdn).HasColumnName("IsMDN");

                entity.Property(e => e.Isa)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("ISA");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Qualifier)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("URL");
            });

            modelBuilder.Entity<Edipartner>(entity =>
            {
                entity.HasKey(e => e.PartnerId)
                    .HasName("Pk_EDIPartner_Partner_id");

                entity.ToTable("EDIPartner", "edi");

                entity.HasIndex(e => new { e.Name, e.PartnerAs2id, e.IsSandbox, e.PartnerIsa }, "Unq_EDIPartner")
                    .IsUnique();

                entity.Property(e => e.PartnerId).HasColumnName("Partner_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.EdiVersion).HasDefaultValueSql("((4010))");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Is3Pl).HasColumnName("Is3PL");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.LoginId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("LoginID");

                entity.Property(e => e.LoginPw)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("LoginPW");

                entity.Property(e => e.MarketId).HasColumnName("Market_id");

                entity.Property(e => e.MyAs2id)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("MyAS2ID");

                entity.Property(e => e.MyCertificateId).HasColumnName("MyCertificate_id");

                entity.Property(e => e.MyIsa)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("MyISA");

                entity.Property(e => e.MyQual)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.PartnerAs2id)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("PartnerAS2ID");

                entity.Property(e => e.PartnerIsa)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("PartnerISA");

                entity.Property(e => e.PartnerQual)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Protocol).HasComment("0:AS2\\n1:FTP\\n2:SFTP");

                entity.Property(e => e.SftpRxDir)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("SFtp_RxDir");

                entity.Property(e => e.SftpTxDir)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("SFtp_TxDir");

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("URL");

                entity.Property(e => e.Usage)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.Market)
                    .WithMany(p => p.Edipartners)
                    .HasForeignKey(d => d.MarketId)
                    .HasConstraintName("Fk_EDIPartner_Market");

                entity.HasOne(d => d.MyCertificate)
                    .WithMany(p => p.Edipartners)
                    .HasForeignKey(d => d.MyCertificateId)
                    .HasConstraintName("fk_EDIPartner_EDICertificate");
            });

            modelBuilder.Entity<EmpChameleonConfig>(entity =>
            {
                entity.ToTable("EmpChameleonConfig");

                entity.Property(e => e.ChLastLogOnDate).HasColumnType("datetime");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmpChameleonConfigs)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_EmpChameleonConfig_Employee");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.ToTable("Employee");

                entity.HasIndex(e => e.LoginId, "Unq_Employee")
                    .IsUnique();

                entity.Property(e => e.EmployeeId).HasColumnName("Employee_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.ApiauthLvlId).HasColumnName("APIAuthLvlId");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateHired).HasColumnType("date");

                entity.Property(e => e.DatePwChange).HasColumnType("date");

                entity.Property(e => e.DateTerminated).HasColumnType("date");

                entity.Property(e => e.DepartmentId).HasColumnName("Department_id");

                entity.Property(e => e.EmpStatusId).HasColumnName("EmpStatus_id");

                entity.Property(e => e.EmpTypeId).HasColumnName("EmpType_id");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeNo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IsEdiadmin).HasColumnName("IsEDIAdmin");

                entity.Property(e => e.IsUserOnFstMvngSkus).HasColumnName("IsUserOnFstMvngSKUs");

                entity.Property(e => e.KoalaRoleId).HasColumnName("KoalaRole_id");

                entity.Property(e => e.LastLogOnTime).HasColumnType("datetime");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.LegalName)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.LoginId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LoginID")
                    .HasComment("email addr");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.PasswordHash)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.PasswordSalt)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.PrePoauthorizationLevel).HasColumnName("PrePOAuthorizationLevel");

                entity.HasOne(d => d.ApiauthLvl)
                    .WithMany(p => p.Employees)
                    .HasForeignKey(d => d.ApiauthLvlId)
                    .HasConstraintName("FK_Employee_APIAuthorityLevel");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.Employees)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("Fk_Employee_Department");

                entity.HasOne(d => d.EmpStatus)
                    .WithMany(p => p.Employees)
                    .HasForeignKey(d => d.EmpStatusId)
                    .HasConstraintName("Fk_Employee_EmployeeStatus");

                entity.HasOne(d => d.EmpType)
                    .WithMany(p => p.Employees)
                    .HasForeignKey(d => d.EmpTypeId)
                    .HasConstraintName("Fk_Employee_EmployeeType");

                entity.HasOne(d => d.KoalaRole)
                    .WithMany(p => p.Employees)
                    .HasForeignKey(d => d.KoalaRoleId)
                    .HasConstraintName("Fk_Employee_KoalaRole");
            });

            modelBuilder.Entity<EmployeeStatus>(entity =>
            {
                entity.HasKey(e => e.EmpStatusId)
                    .HasName("Pk_EmployeeStatus_EmpStatus_id");

                entity.ToTable("EmployeeStatus");

                entity.Property(e => e.EmpStatusId).HasColumnName("EmpStatus_id");

                entity.Property(e => e.EmpStatus)
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmployeeType>(entity =>
            {
                entity.HasKey(e => e.EmpTypeId)
                    .HasName("Pk_EmployeeType_EmpType_id");

                entity.ToTable("EmployeeType");

                entity.Property(e => e.EmpTypeId).HasColumnName("EmpType_id");

                entity.Property(e => e.EmpType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EndCustomer>(entity =>
            {
                entity.ToTable("EndCustomer", "ord");

                entity.HasIndex(e => new { e.FullName, e.Address1, e.Address2, e.Zip }, "UNQ_FullName_Adr1_Adr2_ZIP")
                    .IsUnique();

                entity.Property(e => e.EndCustomerId).HasColumnName("EndCustomer_id");

                entity.Property(e => e.AddrStatusId)
                    .HasColumnName("AddrStatus_id")
                    .HasDefaultValueSql("((4))");

                entity.Property(e => e.Address1).HasMaxLength(200);

                entity.Property(e => e.Address2).HasMaxLength(200);

                entity.Property(e => e.Address3).HasMaxLength(200);

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.Country).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(200);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.IsDcFor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNumber).HasMaxLength(50);

                entity.Property(e => e.State).HasMaxLength(50);

                entity.Property(e => e.TimeRegistered)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Zip)
                    .HasMaxLength(50)
                    .HasColumnName("ZIP");

                entity.Property(e => e.Zone).HasMaxLength(50);

                entity.HasOne(d => d.AddrStatus)
                    .WithMany(p => p.EndCustomers)
                    .HasForeignKey(d => d.AddrStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EndCustomer_StatusAddr");
            });

            modelBuilder.Entity<ErrorCategory>(entity =>
            {
                entity.HasKey(e => e.ErrorCatId)
                    .HasName("PK__ErrorCat__FA8CF85E543751C7");

                entity.ToTable("ErrorCategory");

                entity.Property(e => e.ErrorCatId).HasColumnName("ErrorCatID");

                entity.Property(e => e.CatType)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ErrorLog>(entity =>
            {
                entity.HasKey(e => e.ErrorId)
                    .HasName("PK_KO_ErrorLog");

                entity.ToTable("ErrorLog", "log");

                entity.Property(e => e.ErrorId).HasColumnName("Error_id");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ErrorMsg).HasColumnName("Error_msg");

                entity.Property(e => e.Field1).HasColumnName("field1");

                entity.Property(e => e.Field2).HasColumnName("field2");

                entity.Property(e => e.Field3).HasColumnName("field3");

                entity.Property(e => e.Field4).HasColumnName("field4");

                entity.Property(e => e.Field5).HasColumnName("field5");

                entity.Property(e => e.Field6).HasColumnName("field6");
            });

            modelBuilder.Entity<EventLogPo>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("Pk_ChangeLog_Log_id");

                entity.ToTable("EventLogPO", "Rpt");

                entity.Property(e => e.LogId).HasColumnName("Log_id");

                entity.Property(e => e.EventDesc)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.EventTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ExwCost>(entity =>
            {
                entity.ToTable("ExwCost");

                entity.Property(e => e.ExwCostId).HasColumnName("ExwCost_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.DateFr).HasColumnType("date");

                entity.Property(e => e.DateTo).HasColumnType("date");

                entity.Property(e => e.ModByWoId).HasColumnName("ModByWo_id");

                entity.Property(e => e.OceanCost)
                    .HasColumnType("money")
                    .HasComment("Ocean Cost per Container");

                entity.Property(e => e.StrCostPerCf)
                    .HasColumnType("money")
                    .HasColumnName("StrCostPerCF")
                    .HasComment("Storage Cost per CF for 3 month");

                entity.Property(e => e.StrageIr)
                    .HasColumnType("money")
                    .HasColumnName("StrageIR")
                    .HasComment("Storage Interest Rate");

                entity.Property(e => e.WhouseExp)
                    .HasColumnType("money")
                    .HasComment("Percent of DDP as Warehouse Expense");

                entity.HasOne(d => d.ModByWo)
                    .WithMany(p => p.ExwCosts)
                    .HasForeignKey(d => d.ModByWoId)
                    .HasConstraintName("Fk_ExwCost_Employee");
            });

            modelBuilder.Entity<FcIbLocation>(entity =>
            {
                entity.ToTable("FC_IB_Location");

                entity.Property(e => e.FcIbLocationId).HasColumnName("FC_IB_Location_id");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FcObChannel>(entity =>
            {
                entity.ToTable("FC_OB_Channel");

                entity.Property(e => e.FcObChannelId).HasColumnName("FC_OB_Channel_id");

                entity.Property(e => e.Channel)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FcsWkHdatum>(entity =>
            {
                entity.HasKey(e => e.FcsWkHdataId)
                    .HasName("pk_FcsWkHdata");

                entity.Property(e => e.FcsWkHdataId).HasColumnName("FcsWkHdata_id");

                entity.Property(e => e.FcstWkHtId).HasColumnName("FcstWkHT_id");

                entity.Property(e => e.InventoryBpm)
                    .HasColumnName("InventoryBPM")
                    .HasComment("Inventory at BPM WH");

                entity.Property(e => e.InventoryNw).HasColumnName("InventoryNW");

                entity.Property(e => e.MondayOfWk).HasColumnType("date");

                entity.HasOne(d => d.FcstWkHt)
                    .WithMany(p => p.FcsWkHdata)
                    .HasForeignKey(d => d.FcstWkHtId)
                    .HasConstraintName("fk_FcsWkHdata_FcstWkHT");
            });

            modelBuilder.Entity<FcstAccount>(entity =>
            {
                entity.ToTable("FcstAccount");

                entity.Property(e => e.FcstAccountId).HasColumnName("FcstAccount_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FcstAvgSo>(entity =>
            {
                entity.HasKey(e => e.AvgSoId)
                    .HasName("Pk_FcstAvgSO_AvgSO_id");

                entity.ToTable("FcstAvgSO");

                entity.HasComment("All Market report - FcstMarket_id is null\\nPer Market report - FcstMarket_id is not null");

                entity.HasIndex(e => new { e.FcstDate, e.FcstMarketId, e.ItemNoId }, "Unq_FcstAvgSO")
                    .IsUnique();

                entity.Property(e => e.AvgSoId).HasColumnName("AvgSO_id");

                entity.Property(e => e.FcstDate).HasColumnType("date");

                entity.Property(e => e.FcstLocId).HasColumnName("FcstLoc_id");

                entity.Property(e => e.FcstMarketId).HasColumnName("FcstMarket_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModDate).HasColumnType("date");

                entity.Property(e => e.QtyAvg12wk).HasColumnType("money");

                entity.Property(e => e.QtyAvg4wk).HasColumnType("money");

                entity.Property(e => e.QtyLastWk).HasColumnType("money");

                entity.HasOne(d => d.FcstLoc)
                    .WithMany(p => p.FcstAvgSos)
                    .HasForeignKey(d => d.FcstLocId)
                    .HasConstraintName("Fk_FcstAvgSO_FcstLocation");

                entity.HasOne(d => d.FcstMarket)
                    .WithMany(p => p.FcstAvgSos)
                    .HasForeignKey(d => d.FcstMarketId)
                    .HasConstraintName("Fk_FcstAvgSO_FcstMarket");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.FcstAvgSos)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_FcstAvgSO_BpmItem");
            });

            modelBuilder.Entity<FcstAvgSqa>(entity =>
            {
                entity.HasKey(e => e.FcstAvgSaId)
                    .HasName("Pk_FcstAvgSA");

                entity.ToTable("FcstAvgSQA");

                entity.Property(e => e.FcstAvgSaId).HasColumnName("FcstAvgSA_id");

                entity.Property(e => e.AmtAvg1mo).HasColumnName("AmtAvg_1Mo");

                entity.Property(e => e.AmtAvg1yr).HasColumnName("AmtAvg_1Yr");

                entity.Property(e => e.AmtAvg3mo).HasColumnName("AmtAvg_3Mo");

                entity.Property(e => e.AmtAvg6mo).HasColumnName("AmtAvg_6Mo");

                entity.Property(e => e.AmtLastWk).HasColumnName("Amt_LastWk");

                entity.Property(e => e.AmtMax).HasColumnName("Amt_Max");

                entity.Property(e => e.FcstChannelId).HasColumnName("FcstChannel_id");

                entity.Property(e => e.FcstDate).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.ItemStatusId).HasColumnName("ItemStatus_id");

                entity.Property(e => e.QtyAvg1mo).HasColumnName("QtyAvg_1Mo");

                entity.Property(e => e.QtyAvg1yr).HasColumnName("QtyAvg_1Yr");

                entity.Property(e => e.QtyAvg3mo).HasColumnName("QtyAvg_3Mo");

                entity.Property(e => e.QtyAvg6mo).HasColumnName("QtyAvg_6Mo");

                entity.Property(e => e.QtyLastWk).HasColumnName("Qty_LastWk");

                entity.Property(e => e.QtyMax).HasColumnName("Qty_Max");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.FcstAvgSqas)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_FcstAvgSQA_BpmItem");

                entity.HasOne(d => d.ItemStatus)
                    .WithMany(p => p.FcstAvgSqas)
                    .HasForeignKey(d => d.ItemStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_FcstAvgSQA_ItemStatus");
            });

            modelBuilder.Entity<FcstBpmSo>(entity =>
            {
                entity.HasKey(e => e.AvgSoId)
                    .HasName("Pk_FcstBpmSO_AvgSO_id");

                entity.ToTable("FcstBpmSO");

                entity.Property(e => e.AvgSoId).HasColumnName("AvgSO_id");

                entity.Property(e => e.FcstDate).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModDate).HasColumnType("date");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.FcstBpmSos)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_FcstBpmSO_BpmItem");
            });

            modelBuilder.Entity<FcstChannel>(entity =>
            {
                entity.ToTable("FcstChannel");

                entity.Property(e => e.FcstChannelId)
                    .ValueGeneratedNever()
                    .HasColumnName("FcstChannel_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FcstFactor>(entity =>
            {
                entity.ToTable("FcstFactor");

                entity.Property(e => e.FcstFactorId).HasColumnName("FcstFactor_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.CalendaDate).HasColumnType("date");

                entity.Property(e => e.GrowthFactor).HasColumnType("money");

                entity.Property(e => e.LastModDate).HasColumnType("date");

                entity.Property(e => e.SeasonFactor).HasColumnType("money");

                entity.Property(e => e.SeasonName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FcstFtApplied>(entity =>
            {
                entity.HasKey(e => e.FtAppliedId)
                    .HasName("Pk_FcstFactApply_FactApply_id");

                entity.ToTable("FcstFtApplied");

                entity.Property(e => e.FtAppliedId).HasColumnName("FtApplied_id");

                entity.Property(e => e.FcstDate).HasColumnType("date");

                entity.Property(e => e.FcstMarketId).HasColumnName("FcstMarket_id");

                entity.Property(e => e.GrowthFactor).HasColumnType("money");

                entity.Property(e => e.LastModDate).HasColumnType("date");

                entity.Property(e => e.SeasonFactor).HasColumnType("money");

                entity.Property(e => e.WkBegDate).HasColumnType("date");
            });

            modelBuilder.Entity<FcstHistory>(entity =>
            {
                entity.ToTable("FcstHistory");

                entity.Property(e => e.FcstHistoryId).HasColumnName("FcstHistory_id");
            });

            modelBuilder.Entity<FcstLocation>(entity =>
            {
                entity.HasKey(e => e.FcstLocId)
                    .HasName("Pk_FcstLocation_Location_id");

                entity.ToTable("FcstLocation");

                entity.Property(e => e.FcstLocId).HasColumnName("FcstLoc_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.LocName)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FcstMarket>(entity =>
            {
                entity.ToTable("FcstMarket");

                entity.Property(e => e.FcstMarketId).HasColumnName("FcstMarket_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.MarketName)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FcstNetwork>(entity =>
            {
                entity.ToTable("FcstNetwork");

                entity.Property(e => e.FcstNetworkId).HasColumnName("FcstNetwork_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(254)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FcstWkD>(entity =>
            {
                entity.ToTable("FcstWkD");

                entity.Property(e => e.FcstWkDId).HasColumnName("FcstWkD_id");

                entity.Property(e => e.FcstAccountId).HasColumnName("FcstAccount_id");

                entity.Property(e => e.FcstNetworkId).HasColumnName("FcstNetwork_id");

                entity.Property(e => e.FcstWkTId).HasColumnName("FcstWkT_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.Note)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.FcstAccount)
                    .WithMany(p => p.FcstWkDs)
                    .HasForeignKey(d => d.FcstAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_FcstWkD_FcstAccount");

                entity.HasOne(d => d.FcstNetwork)
                    .WithMany(p => p.FcstWkDs)
                    .HasForeignKey(d => d.FcstNetworkId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_FcstWkD_FcstNetwork");

                entity.HasOne(d => d.FcstWkT)
                    .WithMany(p => p.FcstWkDs)
                    .HasForeignKey(d => d.FcstWkTId)
                    .HasConstraintName("fk_FcstWkD_FcstWkT");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.FcstWkDs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FcstWkD_BpmItem");
            });

            modelBuilder.Entity<FcstWkDatum>(entity =>
            {
                entity.HasKey(e => e.FcstWkDataId)
                    .HasName("pk_FcstWkData");

                entity.Property(e => e.FcstWkDataId).HasColumnName("FcstWkData_id");

                entity.Property(e => e.FcstCntsQty).HasComment("Constraint Sales Forecast");

                entity.Property(e => e.FcstWkDId).HasColumnName("FcstWkD_id");

                entity.Property(e => e.InventoryBpm)
                    .HasColumnName("InventoryBPM")
                    .HasComment("Inventory at BPM WH");

                entity.Property(e => e.InventoryNw).HasColumnName("InventoryNW");

                entity.Property(e => e.MondayOfWk).HasColumnType("date");

                entity.HasOne(d => d.FcstWkD)
                    .WithMany(p => p.FcstWkData)
                    .HasForeignKey(d => d.FcstWkDId)
                    .HasConstraintName("fk_FcstWkData_FcstWkD");
            });

            modelBuilder.Entity<FcstWkHt>(entity =>
            {
                entity.ToTable("FcstWkHT");

                entity.Property(e => e.FcstWkHtId).HasColumnName("FcstWkHT_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.FcstAccountId).HasColumnName("FcstAccount_id");

                entity.Property(e => e.FcstMarketId).HasColumnName("FcstMarket_id");

                entity.Property(e => e.FcstNetworkId).HasColumnName("FcstNetwork_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.HasOne(d => d.FcstAccount)
                    .WithMany(p => p.FcstWkHts)
                    .HasForeignKey(d => d.FcstAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_FcstWkHT_FcstAccount");

                entity.HasOne(d => d.FcstMarket)
                    .WithMany(p => p.FcstWkHts)
                    .HasForeignKey(d => d.FcstMarketId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_FcstWkHT_FcstMarket");

                entity.HasOne(d => d.FcstNetwork)
                    .WithMany(p => p.FcstWkHts)
                    .HasForeignKey(d => d.FcstNetworkId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_FcstWkHT_FcstNetwork");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.FcstWkHts)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FcstWkHT_BpmItem");
            });

            modelBuilder.Entity<FcstWkInvt>(entity =>
            {
                entity.HasKey(e => e.BegInvId)
                    .HasName("Pk_FcstInventory_BegInv_id");

                entity.ToTable("FcstWkInvt");

                entity.Property(e => e.BegInvId).HasColumnName("BegInv_id");

                entity.Property(e => e.FcstDate).HasColumnType("date");

                entity.Property(e => e.FcstLocId).HasColumnName("FcstLoc_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModDate).HasColumnType("date");

                entity.Property(e => e.QtyEndM1).HasColumnName("QtyEnd_M1");

                entity.Property(e => e.QtyEndM2).HasColumnName("QtyEnd_M2");

                entity.Property(e => e.QtyEndM3).HasColumnName("QtyEnd_M3");

                entity.Property(e => e.WkBegDate).HasColumnType("date");

                entity.HasOne(d => d.FcstLoc)
                    .WithMany(p => p.FcstWkInvts)
                    .HasForeignKey(d => d.FcstLocId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_FcstWkInvt_FcstLocation");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.FcstWkInvts)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_FcstInventory_BpmItem");
            });

            modelBuilder.Entity<FcstWkPo>(entity =>
            {
                entity.HasKey(e => e.WkPoId)
                    .HasName("Pk_FcstWkPO_WkPO_id");

                entity.ToTable("FcstWkPO");

                entity.Property(e => e.WkPoId).HasColumnName("WkPO_id");

                entity.Property(e => e.FcstDate).HasColumnType("date");

                entity.Property(e => e.FcstLocId).HasColumnName("FcstLoc_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModDate).HasColumnType("date");

                entity.Property(e => e.QtyFcstM1).HasColumnName("QtyFcst_M1");

                entity.Property(e => e.WkBegDate).HasColumnType("date");

                entity.HasOne(d => d.FcstLoc)
                    .WithMany(p => p.FcstWkPos)
                    .HasForeignKey(d => d.FcstLocId)
                    .HasConstraintName("Fk_FcstWkPO_FcstLocation");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.FcstWkPos)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_FcstWkPO_BpmItem");
            });

            modelBuilder.Entity<FcstWkSo>(entity =>
            {
                entity.HasKey(e => e.WkSoId)
                    .HasName("Pk_FcstWkSO_WkSO_id");

                entity.ToTable("FcstWkSO");

                entity.Property(e => e.WkSoId).HasColumnName("WkSO_id");

                entity.Property(e => e.FcstDate)
                    .HasColumnType("date")
                    .HasComment("1st Day of a week when Forecast created");

                entity.Property(e => e.FcstLocId).HasColumnName("FcstLoc_id");

                entity.Property(e => e.FcstMarketId).HasColumnName("FcstMarket_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModDate).HasColumnType("date");

                entity.Property(e => e.QtyFcstM1).HasColumnName("QtyFcst_M1");

                entity.Property(e => e.WkBegDate).HasColumnType("date");

                entity.HasOne(d => d.FcstLoc)
                    .WithMany(p => p.FcstWkSos)
                    .HasForeignKey(d => d.FcstLocId)
                    .HasConstraintName("Fk_FcstWkSO_FcstLocation");

                entity.HasOne(d => d.FcstMarket)
                    .WithMany(p => p.FcstWkSos)
                    .HasForeignKey(d => d.FcstMarketId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_FcstWkSO_FcstMarket");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.FcstWkSos)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_FcstWkSO_BpmItem");
            });

            modelBuilder.Entity<FcstWkT>(entity =>
            {
                entity.ToTable("FcstWkT");

                entity.Property(e => e.FcstWkTId).HasColumnName("FcstWkT_id");

                entity.Property(e => e.AddedMonday).HasColumnType("date");

                entity.Property(e => e.AddedUserId).HasColumnName("AddedUser_id");

                entity.Property(e => e.FcstMarketId).HasColumnName("FcstMarket_id");

                entity.Property(e => e.FilePath)
                    .IsRequired()
                    .HasMaxLength(254)
                    .IsUnicode(false);

                entity.HasOne(d => d.AddedUser)
                    .WithMany(p => p.FcstWkTs)
                    .HasForeignKey(d => d.AddedUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_FcstWkT_Employee");

                entity.HasOne(d => d.FcstMarket)
                    .WithMany(p => p.FcstWkTs)
                    .HasForeignKey(d => d.FcstMarketId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_FcstWkT_FcstMarket");
            });

            modelBuilder.Entity<FedexInvoice>(entity =>
            {
                entity.ToTable("FedexInvoice");

                entity.Property(e => e.FedexInvoiceId).HasColumnName("FedexInvoice_id");

                entity.Property(e => e.AccountNumber).HasMaxLength(50);

                entity.Property(e => e.Channel).HasMaxLength(50);

                entity.Property(e => e.DiscountAmt).HasColumnType("money");

                entity.Property(e => e.DutyTaxAmt).HasColumnType("money");

                entity.Property(e => e.FedexTrackingId)
                    .HasMaxLength(50)
                    .HasColumnName("FedexTrackingID");

                entity.Property(e => e.FedexZone).HasMaxLength(50);

                entity.Property(e => e.GroundService).HasMaxLength(50);

                entity.Property(e => e.InvoiceDate).HasColumnType("date");

                entity.Property(e => e.InvoiceNum).HasMaxLength(50);

                entity.Property(e => e.Konumber)
                    .HasMaxLength(50)
                    .HasColumnName("KONumber");

                entity.Property(e => e.MasterTrackingId)
                    .HasMaxLength(50)
                    .HasColumnName("MasterTrackingID");

                entity.Property(e => e.MiscChargeAmt).HasColumnType("money");

                entity.Property(e => e.NetChargeAmt).HasColumnType("money");

                entity.Property(e => e.OrigCustRefItem)
                    .HasMaxLength(50)
                    .HasColumnName("Orig_cust_ref_item");

                entity.Property(e => e.PoRef)
                    .HasMaxLength(50)
                    .HasColumnName("PO_ref");

                entity.Property(e => e.Ref1)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Ref2)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Ref3)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceType).HasMaxLength(50);

                entity.Property(e => e.ShipFromAddr1).HasMaxLength(50);

                entity.Property(e => e.ShipFromCity).HasMaxLength(50);

                entity.Property(e => e.ShipFromName).HasMaxLength(50);

                entity.Property(e => e.ShipFromPostalCode).HasMaxLength(50);

                entity.Property(e => e.ShipFromState).HasMaxLength(50);

                entity.Property(e => e.ShipToAddr1).HasMaxLength(50);

                entity.Property(e => e.ShipToCity).HasMaxLength(50);

                entity.Property(e => e.ShipToName).HasMaxLength(50);

                entity.Property(e => e.ShipToPostalCode).HasMaxLength(50);

                entity.Property(e => e.ShipToState).HasMaxLength(50);

                entity.Property(e => e.ShipmentDate).HasColumnType("date");

                entity.Property(e => e.SoDId).HasColumnName("SoD_id");

                entity.Property(e => e.SoTId).HasColumnName("SoT_id");

                entity.Property(e => e.TransChargeAmt).HasColumnType("money");

                entity.HasOne(d => d.SoD)
                    .WithMany(p => p.FedexInvoices)
                    .HasForeignKey(d => d.SoDId)
                    .HasConstraintName("fk_FedexInvoice_SoD");

                entity.HasOne(d => d.SoT)
                    .WithMany(p => p.FedexInvoices)
                    .HasForeignKey(d => d.SoTId)
                    .HasConstraintName("fk_FedexInvoice_SoT");
            });

            modelBuilder.Entity<FedexInvoiceDetail>(entity =>
            {
                entity.ToTable("FedexInvoiceDetail");

                entity.HasIndex(e => new { e.FedexInvoiceId, e.ChargeDesc }, "UNQ_Invid_ChargeDesc")
                    .IsUnique();

                entity.Property(e => e.FedexInvoiceDetailId).HasColumnName("FedexInvoiceDetail_id");

                entity.Property(e => e.ChargeAmt).HasColumnType("money");

                entity.Property(e => e.ChargeDesc)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FedexInvoiceId).HasColumnName("FedexInvoice_id");

                entity.HasOne(d => d.FedexInvoice)
                    .WithMany(p => p.FedexInvoiceDetails)
                    .HasForeignKey(d => d.FedexInvoiceId)
                    .HasConstraintName("FedexInv_FedxInvD_CASCADE");
            });

            modelBuilder.Entity<FobCostTrack>(entity =>
            {
                entity.HasKey(e => e.FobCostId)
                    .HasName("Pk_FobCostTrack_FobCost_id");

                entity.ToTable("FobCostTrack");

                entity.Property(e => e.FobCostId).HasColumnName("FobCost_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.CoOId).HasColumnName("CoO_id");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.DutyRate).HasColumnType("decimal(5, 4)");

                entity.Property(e => e.FobAvg)
                    .HasColumnType("money")
                    .HasColumnName("FobAVG");

                entity.Property(e => e.FobCurr).HasColumnType("money");

                entity.Property(e => e.FobLastPo)
                    .HasColumnType("money")
                    .HasColumnName("FobLastPO");

                entity.Property(e => e.FobTotal).HasColumnType("money");

                entity.Property(e => e.GspRate).HasColumnType("decimal(5, 4)");

                entity.Property(e => e.IncoTermId).HasColumnName("IncoTerm_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModEId).HasColumnName("LastModE_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.TariffRate).HasColumnType("decimal(5, 4)");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_id");

                entity.HasOne(d => d.CoO)
                    .WithMany(p => p.FobCostTracks)
                    .HasForeignKey(d => d.CoOId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_FobCostTrack_FobCountry");

                entity.HasOne(d => d.IncoTerm)
                    .WithMany(p => p.FobCostTracks)
                    .HasForeignKey(d => d.IncoTermId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_FobCostTrack_FobIncoTerm");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.FobCostTracks)
                    .HasForeignKey(d => d.ItemNoId)
                    .HasConstraintName("Fk_FobCostTrack_BpmItem");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.FobCostTracks)
                    .HasForeignKey(d => d.VendorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_FobCostTrack_Vendor");
            });

            modelBuilder.Entity<FobCountry>(entity =>
            {
                entity.HasKey(e => e.CountryId)
                    .HasName("Pk_FobCountry_Country_id");

                entity.ToTable("FobCountry");

                entity.Property(e => e.CountryId).HasColumnName("Country_id");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FobIncoTerm>(entity =>
            {
                entity.HasKey(e => e.IncoTermId)
                    .HasName("Pk_FobIncoTerm_IncoTerm_id");

                entity.ToTable("FobIncoTerm");

                entity.Property(e => e.IncoTermId).HasColumnName("IncoTerm_id");

                entity.Property(e => e.TermName)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ForecastItemPo>(entity =>
            {
                entity.ToTable("ForecastItemPO");

                entity.HasComment("Forecast Item PO");

                entity.Property(e => e.ForecastItemPoId).HasColumnName("ForecastItemPO_Id");

                entity.Property(e => e.FcPoqty).HasColumnName("FC_POQty");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_Id");

                entity.HasOne(d => d.ForcastItem)
                    .WithMany(p => p.ForecastItemPos)
                    .HasForeignKey(d => d.ForcastItemId)
                    .HasConstraintName("FK_ForecastItemPO_ForecastRepItem");
            });

            modelBuilder.Entity<ForecastRepItem>(entity =>
            {
                entity.HasKey(e => e.ForecastItemId);

                entity.ToTable("ForecastRepItem");

                entity.HasComment("Forecast Report Item");

                entity.Property(e => e.FcIbLocationId).HasColumnName("FC_IB_Location_id");

                entity.Property(e => e.FcIbQty).HasColumnName("FC_IB_Qty");

                entity.Property(e => e.FcItemRank)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FC_ItemRank");

                entity.Property(e => e.FcObChannelId).HasColumnName("FC_OB_Channel_id");

                entity.Property(e => e.FcObQty).HasColumnName("FC_OB_Qty");

                entity.Property(e => e.ForecastItemPoId).HasColumnName("ForecastItemPO_Id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_Id");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.HasOne(d => d.FcIbLocation)
                    .WithMany(p => p.ForecastRepItems)
                    .HasForeignKey(d => d.FcIbLocationId)
                    .HasConstraintName("Fk_ForecastRepItem_FC_IB_Location");

                entity.HasOne(d => d.FcObChannel)
                    .WithMany(p => p.ForecastRepItems)
                    .HasForeignKey(d => d.FcObChannelId)
                    .HasConstraintName("Fk_ForecastRepItem_FC_OB_Channel");

                entity.HasOne(d => d.ForecastReport)
                    .WithMany(p => p.ForecastRepItems)
                    .HasForeignKey(d => d.ForecastReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ForecastRepItem_ForecastReport");
            });

            modelBuilder.Entity<ForecastReport>(entity =>
            {
                entity.ToTable("ForecastReport");

                entity.HasComment("Forecast Report");

                entity.Property(e => e.CreatedImportDate).HasColumnType("datetime");

                entity.Property(e => e.Creator)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatorId).HasColumnName("CreatorID");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.FcTargetDate)
                    .HasColumnType("date")
                    .HasColumnName("FC_TargetDate");

                entity.Property(e => e.IsInbound).HasColumnName("isInbound");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastModifier)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifierId).HasColumnName("LastModifierID");

                entity.Property(e => e.ReportNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("date");
            });

            modelBuilder.Entity<Forwarder>(entity =>
            {
                entity.ToTable("Forwarder");

                entity.Property(e => e.ForwarderId).HasColumnName("Forwarder_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.FwdName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.NsSyncTime).HasColumnType("datetime");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FreightCategory>(entity =>
            {
                entity.ToTable("FreightCategory");

                entity.HasIndex(e => new { e.Category, e.FreightType }, "unq_FreightCategory")
                    .IsUnique();

                entity.Property(e => e.FreightCategoryId).HasColumnName("FreightCategory_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.FreightType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FreightInvoiceD>(entity =>
            {
                entity.ToTable("FreightInvoiceD");

                entity.Property(e => e.FreightInvoiceDId).HasColumnName("FreightInvoiceD_id");

                entity.Property(e => e.Bolno)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("BOLNo");

                entity.Property(e => e.ContainerNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.FreightInvoiceTId).HasColumnName("FreightInvoiceT_id");

                entity.HasOne(d => d.FreightInvoiceT)
                    .WithMany(p => p.FreightInvoiceDs)
                    .HasForeignKey(d => d.FreightInvoiceTId)
                    .HasConstraintName("fk_FreightInvoiceD_FreightInvoiceT");
            });

            modelBuilder.Entity<FreightInvoiceLine>(entity =>
            {
                entity.ToTable("FreightInvoiceLine");

                entity.Property(e => e.FreightInvoiceLineId).HasColumnName("FreightInvoiceLine_id");

                entity.Property(e => e.AccountId)
                    .HasColumnName("Account_id")
                    .HasDefaultValueSql("((40))");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.Description)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.FreightCategoryId).HasColumnName("FreightCategory_id");

                entity.Property(e => e.FreightInvoiceDId).HasColumnName("FreightInvoiceD_id");

                entity.Property(e => e.Qty).HasColumnType("money");

                entity.Property(e => e.Rate).HasColumnType("money");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.FreightInvoiceLines)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_FreightInvoiceLine_GlAccount");

                entity.HasOne(d => d.FreightCategory)
                    .WithMany(p => p.FreightInvoiceLines)
                    .HasForeignKey(d => d.FreightCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_FreightInvoiceLine_FreightCategory");

                entity.HasOne(d => d.FreightInvoiceD)
                    .WithMany(p => p.FreightInvoiceLines)
                    .HasForeignKey(d => d.FreightInvoiceDId)
                    .HasConstraintName("fk_FreightInvoiceLine_FreightInvoiceD");
            });

            modelBuilder.Entity<FreightInvoiceRef>(entity =>
            {
                entity.ToTable("FreightInvoiceRef");

                entity.HasIndex(e => e.PoTId, "idx_FreightInvoiceRef_PoT_id");

                entity.HasIndex(e => e.ToTId, "idx_FreightInvoiceRef_ToT_id");

                entity.Property(e => e.FreightInvoiceRefId).HasColumnName("FreightInvoiceRef_id");

                entity.Property(e => e.FreightInvoiceDId).HasColumnName("FreightInvoiceD_id");

                entity.Property(e => e.PoTId).HasColumnName("PoT_id");

                entity.Property(e => e.ToTId).HasColumnName("ToT_id");

                entity.HasOne(d => d.FreightInvoiceD)
                    .WithMany(p => p.FreightInvoiceRefs)
                    .HasForeignKey(d => d.FreightInvoiceDId)
                    .HasConstraintName("fk_FreightInvoiceRef_FreightInvoiceD");

                entity.HasOne(d => d.PoT)
                    .WithMany(p => p.FreightInvoiceRefs)
                    .HasForeignKey(d => d.PoTId)
                    .HasConstraintName("fk_FreightInvoiceRef_PoT");

                entity.HasOne(d => d.ToT)
                    .WithMany(p => p.FreightInvoiceRefs)
                    .HasForeignKey(d => d.ToTId)
                    .HasConstraintName("fk_FreightInvoiceRef_ToT");
            });

            modelBuilder.Entity<FreightInvoiceT>(entity =>
            {
                entity.ToTable("FreightInvoiceT");

                entity.HasIndex(e => e.Date, "idx_FreightInvoiceT_Date");

                entity.HasIndex(e => e.InvoiceNo, "idx_FreightInvoiceT_InvoiceNo");

                entity.HasIndex(e => e.VendorBillCreditId, "idx_FreightInvoiceT_VendorBillCredit_id");

                entity.HasIndex(e => e.VendorBillId, "idx_FreightInvoiceT_VendorBill_id");

                entity.HasIndex(e => e.VendorId, "idx_FreightInvoiceT_Vendor_id");

                entity.Property(e => e.FreightInvoiceTId).HasColumnName("FreightInvoiceT_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.AmountPer).HasColumnType("money");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.InvoiceNo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.VendorBillCreditId).HasColumnName("VendorBillCredit_id");

                entity.Property(e => e.VendorBillId).HasColumnName("VendorBill_id");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_id");

                entity.HasOne(d => d.VendorBillCredit)
                    .WithMany(p => p.FreightInvoiceTs)
                    .HasForeignKey(d => d.VendorBillCreditId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_FreightInvoiceT_BillCreditT");

                entity.HasOne(d => d.VendorBill)
                    .WithMany(p => p.FreightInvoiceTs)
                    .HasForeignKey(d => d.VendorBillId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_FreightInvoiceT_PoBillT");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.FreightInvoiceTs)
                    .HasForeignKey(d => d.VendorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_FreightInvoiceT_Vendor");
            });

            modelBuilder.Entity<GlAccount>(entity =>
            {
                entity.HasKey(e => e.AccountId)
                    .HasName("Pk_GlAccount_Account_id");

                entity.ToTable("GlAccount");

                entity.HasIndex(e => e.AccountNo, "unq_GlAccount")
                    .IsUnique();

                entity.Property(e => e.AccountId).HasColumnName("Account_id");

                entity.Property(e => e.Account)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.Type)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.GlAccounts)
                    .HasForeignKey(d => d.ItemNoId)
                    .HasConstraintName("Fk_GlAccount_BpmItem");
            });

            modelBuilder.Entity<GlimpactD>(entity =>
            {
                entity.ToTable("GLImpactD");

                entity.HasIndex(e => e.GlimpactTId, "idx_GLImpactD");

                entity.HasIndex(e => e.AccountId, "idx_GLImpactD_0");

                entity.HasIndex(e => new { e.ItemNoId, e.AccountId }, "idx_GLImpactD_1");

                entity.HasIndex(e => e.NsIntId, "idx_GLImpactD_9");

                entity.HasIndex(e => e.ItemNoId, "idx_GLImpactD_ItemNo_id");

                entity.HasIndex(e => e.LocationId, "idx_GLImpactD_Location_id");

                entity.Property(e => e.GlimpactDId).HasColumnName("GLImpactD_id");

                entity.Property(e => e.AccountId).HasColumnName("Account_id");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.AmountCredit).HasColumnType("money");

                entity.Property(e => e.AmountDebit).HasColumnType("money");

                entity.Property(e => e.GlimpactTId).HasColumnName("GLImpactT_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.GlimpactDs)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_GLImpactD_GlAccount");

                entity.HasOne(d => d.GlimpactT)
                    .WithMany(p => p.GlimpactDs)
                    .HasForeignKey(d => d.GlimpactTId)
                    .HasConstraintName("fk_GLImpactD_GLImpactT");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.GlimpactDs)
                    .HasForeignKey(d => d.ItemNoId)
                    .HasConstraintName("fk_GLImpactD_BpmItem");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.GlimpactDs)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("fk_GLImpactD_BpmLocation");
            });

            modelBuilder.Entity<GlimpactT>(entity =>
            {
                entity.ToTable("GLImpactT");

                entity.HasIndex(e => e.NsIntId, "idx_GLImpactT");

                entity.HasIndex(e => new { e.TypeId, e.CreatedFromTypeId }, "idx_GLImpactT_0");

                entity.HasIndex(e => e.CreatedFromNsIntId, "idx_GLImpactT_CreatedFromNsInt_id");

                entity.HasIndex(e => e.CreatedFromTypeId, "idx_GLImpactT_CreatedFromType_id");

                entity.HasIndex(e => e.CustomerId, "idx_GLImpactT_Customer_id");

                entity.HasIndex(e => e.Date, "idx_GLImpactT_Date");

                entity.HasIndex(e => e.TypeId, "idx_GLImpactT_Type_id");

                entity.Property(e => e.GlimpactTId).HasColumnName("GLImpactT_id");

                entity.Property(e => e.CreatedFromNsIntId).HasColumnName("CreatedFromNsInt_id");

                entity.Property(e => e.CreatedFromTypeId).HasColumnName("CreatedFromType_id");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.TypeId).HasColumnName("Type_id");

                entity.HasOne(d => d.CreatedFromType)
                    .WithMany(p => p.GlimpactTCreatedFromTypes)
                    .HasForeignKey(d => d.CreatedFromTypeId)
                    .HasConstraintName("fk_GLImpactT_NsRecordType_0");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.GlimpactTs)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("fk_GLImpactT_Customer");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.GlimpactTTypes)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_GLImpactT_NsRecordType");
            });

            modelBuilder.Entity<Hansol20col>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Hansol20col");

                entity.Property(e => e.C01)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C02)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C03)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C04)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C05)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C06)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C07)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C08)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C09)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C10)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C11)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C12)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C13)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C14)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C15)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C16)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C17)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C18)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C19)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C20)
                    .HasMaxLength(128)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InLandTrDay>(entity =>
            {
                entity.HasKey(e => e.InLandTrId)
                    .HasName("Pk_InLandTrDays_InLandTr_id");

                entity.Property(e => e.InLandTrId).HasColumnName("InLandTr_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.DestWhId).HasColumnName("DestWh_id");

                entity.Property(e => e.PortFromId).HasColumnName("PortFrom_id");

                entity.Property(e => e.PortName)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.HasOne(d => d.DestWh)
                    .WithMany(p => p.InLandTrDays)
                    .HasForeignKey(d => d.DestWhId)
                    .HasConstraintName("Fk_InLandTrDays_BpmLocation");

                entity.HasOne(d => d.PortFrom)
                    .WithMany(p => p.InLandTrDays)
                    .HasForeignKey(d => d.PortFromId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("Fk_InLandTrDays_PortDest");
            });

            modelBuilder.Entity<Incoterm>(entity =>
            {
                entity.ToTable("Incoterm");

                entity.Property(e => e.IncotermId).HasColumnName("Incoterm_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");
            });

            modelBuilder.Entity<InvAdjD>(entity =>
            {
                entity.ToTable("InvAdjD");

                entity.HasIndex(e => e.InvAdjTId, "idx_InvAdjD");

                entity.HasIndex(e => e.ItemNoId, "idx_InvAdjD_0");

                entity.Property(e => e.InvAdjDId).HasColumnName("InvAdjD_id");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.InvAdjTId).HasColumnName("InvAdjT_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LineId).HasColumnName("Line_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.Rate).HasColumnType("money");

                entity.HasOne(d => d.InvAdjT)
                    .WithMany(p => p.InvAdjDs)
                    .HasForeignKey(d => d.InvAdjTId)
                    .HasConstraintName("Fk_InvAdjD_InvAdjT");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.InvAdjDs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_InvAdjD_BpmItem");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.InvAdjDs)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_InvAdjD_BpmLocation");
            });

            modelBuilder.Entity<InvAdjT>(entity =>
            {
                entity.ToTable("InvAdjT");

                entity.HasIndex(e => e.GlimpactTId, "idx_InvAdjT");

                entity.HasIndex(e => e.NsIntId, "idx_InvAdjT_0");

                entity.HasIndex(e => e.Iano, "idx_InvAdjT_1");

                entity.Property(e => e.InvAdjTId).HasColumnName("InvAdjT_id");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.GlimpactTId).HasColumnName("GLImpactT_id");

                entity.Property(e => e.Iano)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("IANo");

                entity.Property(e => e.IsCgbackordered).HasColumnName("IsCGBackordered");

                entity.Property(e => e.LastModDate).HasColumnType("datetime");

                entity.Property(e => e.Memo)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.InvAdjTs)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("Fk_InvAdjT_Customer");

                entity.HasOne(d => d.GlimpactT)
                    .WithMany(p => p.InvAdjTs)
                    .HasForeignKey(d => d.GlimpactTId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_InvAdjT_GLImpactT");
            });

            modelBuilder.Entity<InvCountEntry>(entity =>
            {
                entity.HasKey(e => e.IcEntryId)
                    .HasName("Pk_InvCountEntry_IcEntry_id");

                entity.ToTable("InvCountEntry", "wms");

                entity.Property(e => e.IcEntryId).HasColumnName("IcEntry_id");

                entity.Property(e => e.EmployeeId).HasColumnName("Employee_id");

                entity.Property(e => e.InvTxTypeId).HasColumnName("InvTxType_id");

                entity.Property(e => e.IpAddress)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.PhysCountId).HasColumnName("PhysCount_id");

                entity.Property(e => e.ScanGunId).HasColumnName("ScanGun_id");

                entity.Property(e => e.TimeChange).HasColumnType("datetime");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.InvCountEntries)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("Fk_InvCountEntry_Employee");

                entity.HasOne(d => d.InvTxType)
                    .WithMany(p => p.InvCountEntries)
                    .HasForeignKey(d => d.InvTxTypeId)
                    .HasConstraintName("Fk_InvCountEntry_InvTxType");

                entity.HasOne(d => d.PhysCount)
                    .WithMany(p => p.InvCountEntries)
                    .HasForeignKey(d => d.PhysCountId)
                    .HasConstraintName("Fk_InvCountEntry_PhysCountMSL");

                entity.HasOne(d => d.ScanGun)
                    .WithMany(p => p.InvCountEntries)
                    .HasForeignKey(d => d.ScanGunId)
                    .HasConstraintName("Fk_InvCountEntry_ScanGun");
            });

            modelBuilder.Entity<InvD>(entity =>
            {
                entity.ToTable("InvD", "ord");

                entity.HasIndex(e => e.InvTId, "idx_InvD");

                entity.HasIndex(e => e.ItemNoId, "idx_InvD_ItemNo_id");

                entity.HasIndex(e => e.NsIntId, "idx_InvD_NS");

                entity.HasIndex(e => e.SoDId, "idx_InvD_SoD");

                entity.Property(e => e.InvDId).HasColumnName("InvD_id");

                entity.Property(e => e.InvTId).HasColumnName("InvT_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.LineTotal).HasColumnType("money");

                entity.Property(e => e.MemoLine)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.SoDId).HasColumnName("SoD_id");

                entity.Property(e => e.SoDate).HasColumnType("date");

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.HasOne(d => d.InvT)
                    .WithMany(p => p.InvDs)
                    .HasForeignKey(d => d.InvTId)
                    .HasConstraintName("Fk_InvD_InvT");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.InvDs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_InvD_BpmItem");

                entity.HasOne(d => d.SoD)
                    .WithMany(p => p.InvDs)
                    .HasForeignKey(d => d.SoDId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("Fk_InvD_SoD");
            });

            modelBuilder.Entity<InvFeedsAllStopFeedFrom>(entity =>
            {
                entity.ToTable("InvFeedsAllStopFeedFrom");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.Title)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<InvFeedsAppliedRule>(entity =>
            {
                entity.ToTable("InvFeedsAppliedRule");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InvFeedsCheckBackOrderLeadTime>(entity =>
            {
                entity.ToTable("InvFeedsCheckBackOrderLeadTime");
            });

            modelBuilder.Entity<InvFeedsConflictType>(entity =>
            {
                entity.ToTable("InvFeedsConflictType");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InvFeedsCurrentStatus>(entity =>
            {
                entity.ToTable("InvFeedsCurrentStatus");

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.QtyAvailMainSl).HasColumnName("QtyAvailMainSL");

                entity.Property(e => e.QtyOnHandMainSl).HasColumnName("QtyOnHandMainSL");

                entity.Property(e => e.StagePomainSl).HasColumnName("StagePOMainSL");

                entity.Property(e => e.StagePozinusChs).HasColumnName("StagePOZinusChs");

                entity.Property(e => e.StagePozinusTracy).HasColumnName("StagePOZinusTracy");
            });

            modelBuilder.Entity<InvFeedsDailyZeroOutSku>(entity =>
            {
                entity.ToTable("InvFeedsDailyZeroOutSKU");

                entity.Property(e => e.InvFeedsDailyZeroOutSkuid).HasColumnName("InvFeedsDailyZeroOutSKUId");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.LocationName)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ZeroOutDate).HasColumnType("date");
            });

            modelBuilder.Entity<InvFeedsFstMvRepDetail>(entity =>
            {
                entity.HasKey(e => e.FstMvRepDetailId);

                entity.ToTable("InvFeedsFstMvRepDetail");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.MainslStagePoqty).HasColumnName("MainslStagePOQty");

                entity.Property(e => e.TotalStagePoqty).HasColumnName("TotalStagePOQty");

                entity.Property(e => e.ZinusChsStagePoqty).HasColumnName("ZinusChsStagePOQty");

                entity.Property(e => e.ZinusTracyStagePoqty).HasColumnName("ZinusTracyStagePOQty");

                entity.HasOne(d => d.FstMvSkusRep)
                    .WithMany(p => p.InvFeedsFstMvRepDetails)
                    .HasForeignKey(d => d.FstMvSkusRepId)
                    .HasConstraintName("FK_InvFeedsFstMvRepDetail_InvFeedsFstMvSkusReport");
            });

            modelBuilder.Entity<InvFeedsFstMvSkusReport>(entity =>
            {
                entity.HasKey(e => e.FstMvSkusRepId);

                entity.ToTable("InvFeedsFstMvSkusReport");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.Property(e => e.ReportedBy)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("date");
            });

            modelBuilder.Entity<InvFeedsItem>(entity =>
            {
                entity.ToTable("InvFeedsItem");

                entity.Property(e => e.IsSet).HasColumnName("isSet");

                entity.HasOne(d => d.InvFeedsReport)
                    .WithMany(p => p.InvFeedsItems)
                    .HasForeignKey(d => d.InvFeedsReportId)
                    .HasConstraintName("FK_InvFeedsItem_InvFeedsReport");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.InvFeedsItems)
                    .HasForeignKey(d => d.ItemNoId)
                    .HasConstraintName("FK_InvFeedsItem_BpmItem");
            });

            modelBuilder.Entity<InvFeedsItemLocQty>(entity =>
            {
                entity.ToTable("InvFeedsItemLocQty");

                entity.Property(e => e.StagePoqty60).HasColumnName("StagePOQty60");

                entity.Property(e => e.StagePoqty90).HasColumnName("StagePOQty90");

                entity.Property(e => e.StagePoqtyModified).HasColumnName("StagePOQtyModified");

                entity.Property(e => e.StagePoqtyOrig).HasColumnName("StagePOQtyOrig");

                entity.HasOne(d => d.InvFeedsItem)
                    .WithMany(p => p.InvFeedsItemLocQties)
                    .HasForeignKey(d => d.InvFeedsItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvFeedsItemLocQty_InvFeedsItem");

                entity.HasOne(d => d.ItemLoc)
                    .WithMany(p => p.InvFeedsItemLocQties)
                    .HasForeignKey(d => d.ItemLocId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvFeedsItemLocQty_BpmLocation");
            });

            modelBuilder.Entity<InvFeedsMrktSpecificSku>(entity =>
            {
                entity.ToTable("InvFeedsMrktSpecificSKU");

                entity.Property(e => e.InvFeedsMrktSpecificSkuid).HasColumnName("InvFeedsMrktSpecificSKUId");

                entity.Property(e => e.IsActivated).HasColumnName("isActivated");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.InvFeedsMrktSpecificSkus)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_InvFeedsMrktSpecificSKU_Customer");

                entity.HasOne(d => d.Icr)
                    .WithMany(p => p.InvFeedsMrktSpecificSkus)
                    .HasForeignKey(d => d.IcrId)
                    .HasConstraintName("FK_InvFeedsMrktSpecificSKU_NsICR");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.InvFeedsMrktSpecificSkus)
                    .HasForeignKey(d => d.ItemNoId)
                    .HasConstraintName("FK_InvFeedsMrktSpecificSKU_BpmItem");

                entity.HasOne(d => d.LastModifiedByNavigation)
                    .WithMany(p => p.InvFeedsMrktSpecificSkus)
                    .HasForeignKey(d => d.LastModifiedBy)
                    .HasConstraintName("FK_InvFeedsMrktSpecificSKU_Employee");
            });

            modelBuilder.Entity<InvFeedsRemark>(entity =>
            {
                entity.ToTable("InvFeedsRemark");

                entity.Property(e => e.IsActivated).HasColumnName("isActivated");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.HasOne(d => d.InvFeedsRmrkCtgry)
                    .WithMany(p => p.InvFeedsRemarks)
                    .HasForeignKey(d => d.InvFeedsRmrkCtgryId)
                    .HasConstraintName("FK_InvFeedsRemark_InvFeedsRmrkCtgry");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.InvFeedsRemarks)
                    .HasForeignKey(d => d.ItemNoId)
                    .HasConstraintName("FK_InvFeedsRemark_BpmItem");

                entity.HasOne(d => d.LastModifiedByNavigation)
                    .WithMany(p => p.InvFeedsRemarks)
                    .HasForeignKey(d => d.LastModifiedBy)
                    .HasConstraintName("FK_InvFeedsRemark_Employee");
            });

            modelBuilder.Entity<InvFeedsRepItemDetail>(entity =>
            {
                entity.ToTable("InvFeedsRepItemDetail");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.InvFeedsRepItemDetails)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_InvFeedsRepItemDetail_Customer");

                entity.HasOne(d => d.InvFeedsReportItem)
                    .WithMany(p => p.InvFeedsRepItemDetails)
                    .HasForeignKey(d => d.InvFeedsReportItemId)
                    .HasConstraintName("FK_InvFeedsRepItemDetail_InvFeedsReportItem");
            });

            modelBuilder.Entity<InvFeedsRepItemLoc>(entity =>
            {
                entity.ToTable("InvFeedsRepItemLoc");

                entity.Property(e => e.StagePoqty).HasColumnName("StagePOQty");

                entity.HasOne(d => d.InvFeedsAppliedRule)
                    .WithMany(p => p.InvFeedsRepItemLocs)
                    .HasForeignKey(d => d.InvFeedsAppliedRuleId)
                    .HasConstraintName("FK_InvFeedsRepItemLoc_InvFeedsAppliedRule");

                entity.HasOne(d => d.InvFeedsRepItemDetail)
                    .WithMany(p => p.InvFeedsRepItemLocs)
                    .HasForeignKey(d => d.InvFeedsRepItemDetailId)
                    .HasConstraintName("FK_InvFeedsRepItemLoc_InvFeedsRepItemDetail");
            });

            modelBuilder.Entity<InvFeedsRepTableDetail>(entity =>
            {
                entity.HasKey(e => e.InvFeedsReportItemId);

                entity.ToTable("InvFeedsRepTableDetail");

                entity.Property(e => e.InvFeedsReportItemId).ValueGeneratedNever();

                entity.Property(e => e.AmazonQtyMainSl).HasColumnName("AmazonQtyMainSL");

                entity.Property(e => e.AmazonQtyZinusChs).HasColumnName("AmazonQtyZinusCHS");

                entity.Property(e => e.BpmWebQtyMainSl).HasColumnName("BpmWebQtyMainSL");

                entity.Property(e => e.BpmWebQtyZinusChs).HasColumnName("BpmWebQtyZinusCHS");

                entity.Property(e => e.EBayQtyBanc).HasColumnName("eBayQtyBanc");

                entity.Property(e => e.EBayQtyBasc).HasColumnName("eBayQtyBasc");

                entity.Property(e => e.EBayQtyMainSl).HasColumnName("eBayQtyMainSL");

                entity.Property(e => e.EBayQtyPrismCalt).HasColumnName("eBayQtyPrismCalt");

                entity.Property(e => e.EBayQtyPrismCast).HasColumnName("eBayQtyPrismCast");

                entity.Property(e => e.EBayQtySwcaft).HasColumnName("eBayQtySwcaft");

                entity.Property(e => e.EBayQtyZinusChs).HasColumnName("eBayQtyZinusCHS");

                entity.Property(e => e.EBayQtyZinusTracy).HasColumnName("eBayQtyZinusTracy");

                entity.Property(e => e.HomeDepotQtyMainSl).HasColumnName("HomeDepotQtyMainSL");

                entity.Property(e => e.HomeDepotQtyZinusChs).HasColumnName("HomeDepotQtyZinusCHS");

                entity.Property(e => e.HouzzQtyMainSl).HasColumnName("HouzzQtyMainSL");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("itemName");

                entity.Property(e => e.ItemNoId).HasColumnName("itemNoId");

                entity.Property(e => e.MellowWebQtyMainSl).HasColumnName("MellowWebQtyMainSL");

                entity.Property(e => e.MellowWebQtyZinusChs).HasColumnName("MellowWebQtyZinusCHS");

                entity.Property(e => e.OverstockQtyMainSl).HasColumnName("OverstockQtyMainSL");

                entity.Property(e => e.OverstockQtyZinusChs).HasColumnName("OverstockQtyZinusCHS");

                entity.Property(e => e.QtyAvailMainSl).HasColumnName("QtyAvailMainSL");

                entity.Property(e => e.QtyAvailZinusChs).HasColumnName("QtyAvailZinusCHS");

                entity.Property(e => e.QtyOnHandMainSl).HasColumnName("QtyOnHandMainSL");

                entity.Property(e => e.QtyOnHandZinusChs).HasColumnName("QtyOnHandZinusCHS");

                entity.Property(e => e.TargetQtyMainSl).HasColumnName("TargetQtyMainSL");

                entity.Property(e => e.TargetQtyZinusChs).HasColumnName("TargetQtyZinusCHS");

                entity.Property(e => e.TotalStagePoqtyBanc).HasColumnName("TotalStagePOQtyBanc");

                entity.Property(e => e.TotalStagePoqtyBasc).HasColumnName("TotalStagePOQtyBasc");

                entity.Property(e => e.TotalStagePoqtyMainSl).HasColumnName("TotalStagePOQtyMainSL");

                entity.Property(e => e.TotalStagePoqtyPrismCalt).HasColumnName("TotalStagePOQtyPrismCalt");

                entity.Property(e => e.TotalStagePoqtyPrismCast).HasColumnName("TotalStagePOQtyPrismCast");

                entity.Property(e => e.TotalStagePoqtySwcaft).HasColumnName("TotalStagePOQtySwcaft");

                entity.Property(e => e.TotalStagePoqtyZinusChs).HasColumnName("TotalStagePOQtyZinusCHS");

                entity.Property(e => e.TotalStagePoqtyZinusTracy).HasColumnName("TotalStagePOQtyZinusTracy");

                entity.Property(e => e.WalmartQtyMainSl).HasColumnName("WalmartQtyMainSL");

                entity.Property(e => e.WalmartQtyZinusChs).HasColumnName("WalmartQtyZinusCHS");

                entity.Property(e => e.WayfairQtyMainSl).HasColumnName("WayfairQtyMainSL");

                entity.Property(e => e.WayfairQtyZinusChs).HasColumnName("WayfairQtyZinusCHS");

                entity.HasOne(d => d.InvFeedsReport)
                    .WithMany(p => p.InvFeedsRepTableDetails)
                    .HasForeignKey(d => d.InvFeedsReportId)
                    .HasConstraintName("FK_InvFeedsRepTableDetail_InvFeedsReport");

                entity.HasOne(d => d.InvFeedsReportItem)
                    .WithOne(p => p.InvFeedsRepTableDetail)
                    .HasForeignKey<InvFeedsRepTableDetail>(d => d.InvFeedsReportItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvFeedsRepTableDetail_InvFeedsReportItem");
            });

            modelBuilder.Entity<InvFeedsReport>(entity =>
            {
                entity.ToTable("InvFeedsReport");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FeedingDate).HasColumnType("date");

                entity.Property(e => e.HasSentToEdi)
                    .HasColumnName("hasSentToEDI")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsApproved).HasColumnName("isApproved");

                entity.HasOne(d => d.ApprovedByNavigation)
                    .WithMany(p => p.InvFeedsReportApprovedByNavigations)
                    .HasForeignKey(d => d.ApprovedBy)
                    .HasConstraintName("FK_InvFeedsReport_Employee1");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.InvFeedsReportCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_InvFeedsReport_Employee");
            });

            modelBuilder.Entity<InvFeedsReportItem>(entity =>
            {
                entity.ToTable("InvFeedsReportItem");

                entity.Property(e => e.IsSet).HasColumnName("isSet");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.HasOne(d => d.InvFeedsReport)
                    .WithMany(p => p.InvFeedsReportItems)
                    .HasForeignKey(d => d.InvFeedsReportId)
                    .HasConstraintName("FK_InvFeedsReportItem_InvFeedsReport");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.InvFeedsReportItems)
                    .HasForeignKey(d => d.ItemNoId)
                    .HasConstraintName("FK_InvFeedsReportItem_BpmItem");

                entity.HasOne(d => d.LastModifiedByNavigation)
                    .WithMany(p => p.InvFeedsReportItems)
                    .HasForeignKey(d => d.LastModifiedBy)
                    .HasConstraintName("FK_InvFeedsReportItem_Employee");
            });

            modelBuilder.Entity<InvFeedsRmrkCtgry>(entity =>
            {
                entity.ToTable("InvFeedsRmrkCtgry");

                entity.Property(e => e.CategoryName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomRatioBpm).HasColumnName("CustomRatioBPM");

                entity.Property(e => e.Description)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DoNotFeedToBpm).HasColumnName("DoNotFeedToBPM");

                entity.Property(e => e.IsActivated).HasColumnName("isActivated");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.HasOne(d => d.LastModifiedByNavigation)
                    .WithMany(p => p.InvFeedsRmrkCtgries)
                    .HasForeignKey(d => d.LastModifiedBy)
                    .HasConstraintName("FK_InvFeedsRmrkCtgry_Employee");
            });

            modelBuilder.Entity<InvFeedsRule>(entity =>
            {
                entity.HasKey(e => e.InvFeedRuleId);

                entity.ToTable("InvFeedsRule");

                entity.Property(e => e.IsActivated).HasColumnName("isActivated");

                entity.Property(e => e.LastModifiedTime).HasColumnType("datetime");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.InvFeedsRules)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_InvFeedsRule_Customer");

                entity.HasOne(d => d.LastModifiedByNavigation)
                    .WithMany(p => p.InvFeedsRules)
                    .HasForeignKey(d => d.LastModifiedBy)
                    .HasConstraintName("FK_InvFeedsRule_Employee");
            });

            modelBuilder.Entity<InvFeedsRuleSku>(entity =>
            {
                entity.ToTable("InvFeedsRuleSKU");

                entity.Property(e => e.InvFeedsRuleSkuid).HasColumnName("InvFeedsRuleSKUId");

                entity.Property(e => e.DoNotFeedFromBanc).HasColumnName("DoNotFeedFromBANC");

                entity.Property(e => e.DoNotFeedFromBasc).HasColumnName("DoNotFeedFromBASC");

                entity.Property(e => e.DoNotFeedFromPrismCalt).HasColumnName("DoNotFeedFromPrismCALT");

                entity.Property(e => e.DoNotFeedFromPrismCast).HasColumnName("DoNotFeedFromPrismCAST");

                entity.Property(e => e.DoNotFeedFromSwcaft).HasColumnName("DoNotFeedFromSWCAFT");

                entity.Property(e => e.DoNotFeedFromZinusChs).HasColumnName("DoNotFeedFromZinusCHS");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.InvFeedsRuleSkus)
                    .HasForeignKey(d => d.ItemNoId)
                    .HasConstraintName("FK_InvFeedsRuleSKU_BpmItem");
            });

            modelBuilder.Entity<InvFeedsRuleSkumkt>(entity =>
            {
                entity.ToTable("InvFeedsRuleSKUMkt");

                entity.Property(e => e.InvFeedsRuleSkumktId).HasColumnName("InvFeedsRuleSKUMktId");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.InvFeedsRuleSkuid).HasColumnName("InvFeedsRuleSKUId");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.HasOne(d => d.InvFeedsRuleSku)
                    .WithMany(p => p.InvFeedsRuleSkumkts)
                    .HasForeignKey(d => d.InvFeedsRuleSkuid)
                    .HasConstraintName("FK_InvFeedsRuleSKUMkt_InvFeedsRuleSKU");
            });

            modelBuilder.Entity<InvFeedsShopify>(entity =>
            {
                entity.ToTable("InvFeedsShopify");

                entity.Property(e => e.Coo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("COO");

                entity.Property(e => e.Handle)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.HsCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("HS_Code");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.NsIcrid).HasColumnName("NsICRId");

                entity.Property(e => e.Option1Name)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Option1Value)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Option2Name)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Option2Value)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Option3Name)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Option3Value)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Sku)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("SKU");

                entity.Property(e => e.Title)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.InvFeedsShopifies)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_InvFeedsShopify_Customer");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.InvFeedsShopifies)
                    .HasForeignKey(d => d.ItemNoId)
                    .HasConstraintName("FK_InvFeedsShopify_BpmItem");

                entity.HasOne(d => d.LastModifiedByNavigation)
                    .WithMany(p => p.InvFeedsShopifies)
                    .HasForeignKey(d => d.LastModifiedBy)
                    .HasConstraintName("FK_InvFeedsShopify_Employee");

                entity.HasOne(d => d.NsIcr)
                    .WithMany(p => p.InvFeedsShopifies)
                    .HasForeignKey(d => d.NsIcrid)
                    .HasConstraintName("FK_InvFeedsShopify_NsICR");
            });

            modelBuilder.Entity<InvFeedsShopifyOption>(entity =>
            {
                entity.ToTable("InvFeedsShopifyOption");

                entity.Property(e => e.OptionName)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.OptionValue)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InvFeedsSkucnflctRepItem>(entity =>
            {
                entity.ToTable("InvFeedsSKUCnflctRepItem");

                entity.Property(e => e.InvFeedsSkucnflctRepItemId).HasColumnName("InvFeedsSKUCnflctRepItemId");

                entity.Property(e => e.Asin)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.CustSku)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("CustSKU");

                entity.Property(e => e.Description)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.InvFeedsSkuconflictReportId).HasColumnName("InvFeedsSKUConflictReportId");

                entity.HasOne(d => d.InvFeedsConflictType)
                    .WithMany(p => p.InvFeedsSkucnflctRepItems)
                    .HasForeignKey(d => d.InvFeedsConflictTypeId)
                    .HasConstraintName("FK_InvFeedsSKUCnflctRepItem_InvFeedsConflictType");

                entity.HasOne(d => d.InvFeedsSkuconflictReport)
                    .WithMany(p => p.InvFeedsSkucnflctRepItems)
                    .HasForeignKey(d => d.InvFeedsSkuconflictReportId)
                    .HasConstraintName("FK_InvFeedsSKUCnflctRepItem_InvFeedsSKUConflictReport");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.InvFeedsSkucnflctRepItems)
                    .HasForeignKey(d => d.ItemNoId)
                    .HasConstraintName("FK_InvFeedsSKUCnflctRepItem_BpmItem");
            });

            modelBuilder.Entity<InvFeedsSkuconflictReport>(entity =>
            {
                entity.ToTable("InvFeedsSKUConflictReport");

                entity.Property(e => e.InvFeedsSkuconflictReportId).HasColumnName("InvFeedsSKUConflictReportId");

                entity.Property(e => e.ImportedDate).HasColumnType("datetime");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.InvFeedsSkuconflictReports)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_InvFeedsSKUConflictReport_Customer");

                entity.HasOne(d => d.ImportedByNavigation)
                    .WithMany(p => p.InvFeedsSkuconflictReports)
                    .HasForeignKey(d => d.ImportedBy)
                    .HasConstraintName("FK_InvFeedsSKUConflictReport_Employee");
            });

            modelBuilder.Entity<InvFeedsWhSwitchingType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("InvFeedsWhSwitchingType");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InvMeTotalAmt>(entity =>
            {
                entity.HasKey(e => e.MeAmtId)
                    .HasName("pk_InvMeTotalAmt");

                entity.ToTable("InvMeTotalAmt");

                entity.Property(e => e.MeAmtId).HasColumnName("MeAmt_id");

                entity.Property(e => e.MeDate).HasColumnType("date");

                entity.Property(e => e.TotalAmt).HasColumnType("money");
            });

            modelBuilder.Entity<InvNsMend>(entity =>
            {
                entity.HasKey(e => e.InvMendId)
                    .HasName("Pk_InvNsMend_InvMend_id");

                entity.ToTable("InvNsMend");

                entity.HasComment("NetSuite Month End Inventory");

                entity.HasIndex(e => e.DateRecord, "idx_InvNsMend_DateRecord");

                entity.HasIndex(e => e.ItemNoId, "idx_InvNsMend_ItemNo_id");

                entity.HasIndex(e => e.LocationId, "idx_InvNsMend_Location_id");

                entity.Property(e => e.InvMendId).HasColumnName("InvMend_id");

                entity.Property(e => e.AmtOnHand).HasColumnType("money");

                entity.Property(e => e.DateRecord).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.InvNsMends)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_InvNsMend_BpmItem");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.InvNsMends)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_InvNsMend_BpmLocation");
            });

            modelBuilder.Entity<InvPay>(entity =>
            {
                entity.ToTable("InvPay", "ord");

                entity.HasIndex(e => e.PaymentId, "idx_InvPay");

                entity.HasIndex(e => e.InvNo, "idx_InvPay_0");

                entity.Property(e => e.InvPayId).HasColumnName("InvPay_id");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.InvNo)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.InvTId).HasColumnName("InvT_id");

                entity.Property(e => e.Memo)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentId).HasColumnName("Payment_Id");

                entity.Property(e => e.RemitNo)
                    .HasMaxLength(128)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InvPayDetail>(entity =>
            {
                entity.ToTable("InvPayDetail", "ord");

                entity.HasIndex(e => e.InvPayId, "idx_InvPayDetail");

                entity.HasIndex(e => e.Description, "idx_InvPayDetail_0");

                entity.Property(e => e.InvPayDetailId).HasColumnName("InvPayDetail_id");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.Description)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.InvPayId).HasColumnName("InvPay_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.Rate).HasColumnType("money");
            });

            modelBuilder.Entity<InvRealTime>(entity =>
            {
                entity.ToTable("InvRealTime");

                entity.HasIndex(e => new { e.LocationId, e.ItemNoId, e.TimeRecord }, "Unq_InvRealTime")
                    .IsUnique();

                entity.Property(e => e.InvRealTimeId).HasColumnName("InvRealTime_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.TimeRecord).HasColumnType("datetime");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.InvRealTimes)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_InvRealTime_BpmItem");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.InvRealTimes)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_InvRealTime_BpmLocation");
            });

            modelBuilder.Entity<InvRemit>(entity =>
            {
                entity.ToTable("InvRemit", "ord");

                entity.Property(e => e.InvRemitId).HasColumnName("InvRemit_id");

                entity.Property(e => e.InvDeduct).HasColumnType("money");

                entity.Property(e => e.InvPaid).HasColumnType("money");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.InvoiceId).HasColumnName("Invoice_id");

                entity.Property(e => e.Note)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.RemitId).HasColumnName("Remit_id");

                entity.Property(e => e.RemitNoSub)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.HasOne(d => d.Remit)
                    .WithMany(p => p.InvRemits)
                    .HasForeignKey(d => d.RemitId)
                    .HasConstraintName("Fk_NsInvRemitN_NsRemit");
            });

            modelBuilder.Entity<InvStatus>(entity =>
            {
                entity.ToTable("InvStatus", "ord");

                entity.Property(e => e.InvStatusId).HasColumnName("InvStatus_id");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InvT>(entity =>
            {
                entity.ToTable("InvT", "ord");

                entity.HasIndex(e => e.InvNo, "idx_InvT");

                entity.HasIndex(e => e.GlimpactTId, "idx_InvT_0");

                entity.HasIndex(e => e.CustomerId, "idx_InvT_Cust");

                entity.HasIndex(e => e.InvDate, "idx_InvT_Date");

                entity.HasIndex(e => e.NsIntId, "idx_InvT_NS");

                entity.HasIndex(e => e.SoTId, "idx_InvT_SoT");

                entity.Property(e => e.InvTId).HasColumnName("InvT_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.DueDate).HasColumnType("date");

                entity.Property(e => e.GlimpactTId).HasColumnName("GLImpactT_id");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvNo)
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.InvPaid).HasColumnType("money");

                entity.Property(e => e.InvStatusId).HasColumnName("InvStatus_id");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.MemoMain)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.NsSyncTime).HasColumnType("datetime");

                entity.Property(e => e.PoNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.RemitNo)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.SoTId).HasColumnName("SoT_id");

                entity.Property(e => e.Source)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.InvTs)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("Fk_InvT_Customer");

                entity.HasOne(d => d.GlimpactT)
                    .WithMany(p => p.InvTs)
                    .HasForeignKey(d => d.GlimpactTId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_InvT_GLImpactT");

                entity.HasOne(d => d.InvStatus)
                    .WithMany(p => p.InvTs)
                    .HasForeignKey(d => d.InvStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_InvT_InvStatus");

                entity.HasOne(d => d.SoT)
                    .WithMany(p => p.InvTs)
                    .HasForeignKey(d => d.SoTId)
                    .HasConstraintName("Fk_InvT_SoT");
            });

            modelBuilder.Entity<InvTrD>(entity =>
            {
                entity.ToTable("InvTrD");

                entity.HasIndex(e => e.InvTrTId, "idx_InvTrD");

                entity.HasIndex(e => e.ItemNoId, "idx_InvTrD_0");

                entity.Property(e => e.InvTrDId).HasColumnName("InvTrD_id");

                entity.Property(e => e.FrLocId).HasColumnName("FrLoc_id");

                entity.Property(e => e.InvTrTId).HasColumnName("InvTrT_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LineId).HasColumnName("Line_id");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.ToLocId).HasColumnName("ToLoc_id");

                entity.HasOne(d => d.FrLoc)
                    .WithMany(p => p.InvTrDFrLocs)
                    .HasForeignKey(d => d.FrLocId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_InvTrD_BpmLocation");

                entity.HasOne(d => d.InvTrT)
                    .WithMany(p => p.InvTrDs)
                    .HasForeignKey(d => d.InvTrTId)
                    .HasConstraintName("Fk_InvTrD_InvTrT");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.InvTrDs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_InvTrD_BpmItem");

                entity.HasOne(d => d.ToLoc)
                    .WithMany(p => p.InvTrDToLocs)
                    .HasForeignKey(d => d.ToLocId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_InvTrD_BpmLocation_0");
            });

            modelBuilder.Entity<InvTrT>(entity =>
            {
                entity.ToTable("InvTrT");

                entity.HasIndex(e => e.GlimpactTId, "idx_InvTrT");

                entity.HasIndex(e => e.NsIntId, "idx_InvTrT_0");

                entity.HasIndex(e => e.Itno, "idx_InvTrT_1");

                entity.Property(e => e.InvTrTId).HasColumnName("InvTrT_id");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.ContainerNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.GlimpactTId).HasColumnName("GLImpactT_id");

                entity.Property(e => e.Itno)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ITNo");

                entity.Property(e => e.LastModDate).HasColumnType("datetime");

                entity.Property(e => e.Memo)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.PoNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.HasOne(d => d.GlimpactT)
                    .WithMany(p => p.InvTrTs)
                    .HasForeignKey(d => d.GlimpactTId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_InvTrT_GLImpactT");
            });

            modelBuilder.Entity<InvTxDaily>(entity =>
            {
                entity.HasKey(e => e.InvTxId)
                    .HasName("Pk_InvTransaction_InvTx_id");

                entity.ToTable("InvTxDaily", "wms");

                entity.Property(e => e.InvTxId).HasColumnName("InvTx_id");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.InvTxDailies)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_InvTransaction_KO_Itemno");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.InvTxDailies)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_InvTransaction_KO_Location");
            });

            modelBuilder.Entity<InvTxType>(entity =>
            {
                entity.ToTable("InvTxType", "wms");

                entity.Property(e => e.InvTxTypeId).HasColumnName("InvTxType_id");

                entity.Property(e => e.InvTxType1)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("InvTxType");
            });

            modelBuilder.Entity<InvWorksheetD>(entity =>
            {
                entity.ToTable("InvWorksheetD");

                entity.HasIndex(e => new { e.ItemNoId, e.LocationId, e.AccountId }, "idx_InvWorksheetD");

                entity.HasIndex(e => new { e.NsIntId, e.Line }, "unq_InvWorksheetD")
                    .IsUnique();

                entity.Property(e => e.InvWorksheetDId).HasColumnName("InvWorksheetD_id");

                entity.Property(e => e.AccountId).HasColumnName("Account_id");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.AmountCredit).HasColumnType("money");

                entity.Property(e => e.AmountDebit).HasColumnType("money");

                entity.Property(e => e.InvWorksheetTId).HasColumnName("InvWorksheetT_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.InvWorksheetDs)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_InvWorksheetD_GlAccount");

                entity.HasOne(d => d.InvWorksheetT)
                    .WithMany(p => p.InvWorksheetDs)
                    .HasForeignKey(d => d.InvWorksheetTId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_InvWorksheetD_InvWorksheetT");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.InvWorksheetDs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_InvWorksheetD_BpmItem");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.InvWorksheetDs)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_InvWorksheetD_BpmLocation");
            });

            modelBuilder.Entity<InvWorksheetT>(entity =>
            {
                entity.ToTable("InvWorksheetT");

                entity.HasIndex(e => new { e.NsIntId, e.Iwno }, "unq_InvWorksheetT")
                    .IsUnique();

                entity.Property(e => e.InvWorksheetTId).HasColumnName("InvWorksheetT_id");

                entity.Property(e => e.AddedDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Iwno)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("IWNo");

                entity.Property(e => e.LastModDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Memo)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");
            });

            modelBuilder.Entity<InventoryAgingD>(entity =>
            {
                entity.ToTable("InventoryAgingD");

                entity.HasIndex(e => e.InventoryAgingTId, "idx_InventoryAgingD_InventoryAgingT_id");

                entity.HasIndex(e => e.PoDId, "idx_InventoryAgingD_PoD_id");

                entity.Property(e => e.InventoryAgingDId).HasColumnName("InventoryAgingD_id");

                entity.Property(e => e.InventoryAgingTId).HasColumnName("InventoryAgingT_id");

                entity.Property(e => e.PoDId).HasColumnName("PoD_id");

                entity.HasOne(d => d.InventoryAgingT)
                    .WithMany(p => p.InventoryAgingDs)
                    .HasForeignKey(d => d.InventoryAgingTId)
                    .HasConstraintName("fk_EndInvValueD_EndInvtValueT");

                entity.HasOne(d => d.PoD)
                    .WithMany(p => p.InventoryAgingDs)
                    .HasForeignKey(d => d.PoDId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_EndInvValueD_PoD");
            });

            modelBuilder.Entity<InventoryAgingT>(entity =>
            {
                entity.ToTable("InventoryAgingT");

                entity.HasIndex(e => e.Date, "idx_InventoryAgingT_Date");

                entity.HasIndex(e => e.ItemNoId, "idx_InventoryAgingT_ItemNo_id");

                entity.HasIndex(e => e.LocationId, "idx_InventoryAgingT_Location_id");

                entity.Property(e => e.InventoryAgingTId).HasColumnName("InventoryAgingT_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.LocationTypeId).HasColumnName("LocationType_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.InventoryAgingTs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_EndInvtValueT_BpmItem");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.InventoryAgingTs)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("fk_InventoryAgingT_BpmLocation");

                entity.HasOne(d => d.LocationType)
                    .WithMany(p => p.InventoryAgingTs)
                    .HasForeignKey(d => d.LocationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_InventoryAgingT_LocationType");
            });

            modelBuilder.Entity<InventoryAllocation>(entity =>
            {
                entity.HasKey(e => e.InvAllocId)
                    .HasName("Pk_InventoryAllocation");

                entity.ToTable("InventoryAllocation");

                entity.Property(e => e.InvAllocId).HasColumnName("InvAlloc_id");

                entity.Property(e => e.DateTime).HasColumnType("datetime");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.Note)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.QAmD).HasColumnName("qAmD");

                entity.Property(e => e.QAmS).HasColumnName("qAmS");

                entity.Property(e => e.QOvs).HasColumnName("qOvs");

                entity.Property(e => e.QWaf).HasColumnName("qWaf");

                entity.Property(e => e.QWal).HasColumnName("qWal");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.InventoryAllocations)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InventoryAllocation_KO_Itemno");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.InventoryAllocations)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InventoryAllocation_KO_Location");
            });

            modelBuilder.Entity<InventoryConfig>(entity =>
            {
                entity.ToTable("InventoryConfig");

                entity.Property(e => e.AbcOthersBpmweb).HasColumnName("abcOthersBPMWeb");

                entity.Property(e => e.AbcOthersHomeDepot).HasColumnName("abcOthersHomeDepot");

                entity.Property(e => e.AbcOthersHouzz).HasColumnName("abcOthersHouzz");

                entity.Property(e => e.AbcOthersMellowWeb).HasColumnName("abcOthersMellowWeb");

                entity.Property(e => e.AbcOthersOverstock).HasColumnName("abcOthersOverstock");

                entity.Property(e => e.AbcOthersTarget).HasColumnName("abcOthersTarget");

                entity.Property(e => e.AbcOtherseBay).HasColumnName("abcOtherseBay");

                entity.Property(e => e.AbcRatioA).HasColumnName("abcRatioA");

                entity.Property(e => e.AbcRatioAnoB).HasColumnName("abcRatioAnoB");

                entity.Property(e => e.AbcRatioAnoC).HasColumnName("abcRatioAnoC");

                entity.Property(e => e.AbcRatioB).HasColumnName("abcRatioB");

                entity.Property(e => e.AbcRatioBnoC).HasColumnName("abcRatioBnoC");

                entity.Property(e => e.AbcRatioC).HasColumnName("abcRatioC");

                entity.Property(e => e.CheckWayfairCgstockRule).HasColumnName("CheckWayfairCGStockRule");

                entity.Property(e => e.IsActivatedWfsvsWhs).HasColumnName("IsActivatedWFSvsWHs");

                entity.Property(e => e.IsActivatedWmttopSellers).HasColumnName("IsActivatedWMTTopSellers");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.SetBomratio).HasColumnName("SetBOMRatio");

                entity.Property(e => e.WayfairCgstockMinQty).HasColumnName("WayfairCGStockMinQty");

                entity.Property(e => e.WfsvsWhsBufferQty).HasColumnName("WFSvsWHsBufferQty");

                entity.Property(e => e.WmtminQtyAllowance).HasColumnName("WMTMinQtyAllowance");

                entity.Property(e => e.ZeroOutBufferBanc).HasColumnName("ZeroOutBufferBANC");

                entity.Property(e => e.ZeroOutBufferBasc).HasColumnName("ZeroOutBufferBASC");

                entity.Property(e => e.ZeroOutBufferMainSl).HasColumnName("ZeroOutBufferMainSL");

                entity.Property(e => e.ZeroOutBufferSwcaft).HasColumnName("ZeroOutBufferSWCAFT");
            });

            modelBuilder.Entity<InventoryForecast>(entity =>
            {
                entity.HasKey(e => e.InvtForcId);

                entity.ToTable("InventoryForecast", "frc");

                entity.Property(e => e.InvtForcId).HasColumnName("InvtForc_id");

                entity.Property(e => e.AddedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateFuture).HasColumnType("datetime");

                entity.Property(e => e.ItemnoId).HasColumnName("Itemno_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.HasOne(d => d.Itemno)
                    .WithMany(p => p.InventoryForecasts)
                    .HasForeignKey(d => d.ItemnoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Inventory__Itemn__4826925F");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.InventoryForecasts)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Inventory__Locat__491AB698");
            });

            modelBuilder.Entity<InvtCntT>(entity =>
            {
                entity.ToTable("InvtCntT", "wms");

                entity.HasIndex(e => e.LocationId, "idx_InvtCntT_Location_id");

                entity.HasIndex(e => e.CountName, "unq_InvtCntT_CountName")
                    .IsUnique();

                entity.Property(e => e.InvtCntTId).HasColumnName("InvtCntT_id");

                entity.Property(e => e.CountName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.CountTypeId).HasColumnName("CountType_id");

                entity.Property(e => e.DateFr).HasColumnType("date");

                entity.Property(e => e.DateTo).HasColumnType("date");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.HasOne(d => d.CountType)
                    .WithMany(p => p.InvtCntTs)
                    .HasForeignKey(d => d.CountTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_InvtCntT_CountType");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.InvtCntTs)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_InvtCntT_BpmLocation");
            });

            modelBuilder.Entity<InvtCoO>(entity =>
            {
                entity.ToTable("InvtCoO");

                entity.HasIndex(e => e.GlimpactDId, "idx_InvtCoO_GLImpactD_id");

                entity.HasIndex(e => e.InvWorksheetDId, "idx_InvtCoO_InvWorksheetD_id");

                entity.Property(e => e.InvtCoOId).HasColumnName("InvtCoO_id");

                entity.Property(e => e.CountryId)
                    .HasColumnName("Country_id")
                    .HasComment("Static CoO");

                entity.Property(e => e.GlimpactDId).HasColumnName("GLImpactD_id");

                entity.Property(e => e.InvWorksheetDId).HasColumnName("InvWorksheetD_id");

                entity.Property(e => e.PoDId).HasColumnName("PoD_id");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.InvtCoOs)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("fk_InvtCoO_Country");

                entity.HasOne(d => d.GlimpactD)
                    .WithMany(p => p.InvtCoOs)
                    .HasForeignKey(d => d.GlimpactDId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_InvtCoO_GLImpactD");

                entity.HasOne(d => d.InvWorksheetD)
                    .WithMany(p => p.InvtCoOs)
                    .HasForeignKey(d => d.InvWorksheetDId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_InvtCoO_InvWorksheetD");

                entity.HasOne(d => d.PoD)
                    .WithMany(p => p.InvtCoOs)
                    .HasForeignKey(d => d.PoDId)
                    .HasConstraintName("fk_InvtCoO_PoD");
            });

            modelBuilder.Entity<InvtDailyTrxD>(entity =>
            {
                entity.ToTable("InvtDailyTrxD");

                entity.HasIndex(e => e.PoTId, "idx_InvtDailyTrxD_PoT_id");

                entity.HasIndex(e => e.Ref1, "idx_InvtDailyTrxD_Ref1");

                entity.HasIndex(e => e.SoTId, "idx_InvtDailyTrxD_SoT_id");

                entity.HasIndex(e => e.ToTId, "idx_InvtDailyTrxD_ToT_id");

                entity.HasIndex(e => e.TypeId, "idx_InvtDailyTrxD_Type_id");

                entity.Property(e => e.InvtDailyTrxDId).HasColumnName("InvtDailyTrxD_id");

                entity.Property(e => e.CustSku)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("CustSKU");

                entity.Property(e => e.InvtDailyTrxTId).HasColumnName("InvtDailyTrxT_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.PoTId).HasColumnName("PoT_id");

                entity.Property(e => e.Ref1)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.SoTId).HasColumnName("SoT_id");

                entity.Property(e => e.ToTId).HasColumnName("ToT_id");

                entity.Property(e => e.TypeId).HasColumnName("Type_id");

                entity.HasOne(d => d.InvtDailyTrxT)
                    .WithMany(p => p.InvtDailyTrxDs)
                    .HasForeignKey(d => d.InvtDailyTrxTId)
                    .HasConstraintName("fk_InvDailyTrsD_InvDailyTrsT");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.InvtDailyTrxDs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_InvDailyTrsD_BpmItem");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.InvtDailyTrxDs)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_InvDailyTrsD_BpmLocation");

                entity.HasOne(d => d.PoT)
                    .WithMany(p => p.InvtDailyTrxDs)
                    .HasForeignKey(d => d.PoTId)
                    .HasConstraintName("fk_InvtDailyTrxD_PoT");

                entity.HasOne(d => d.SoT)
                    .WithMany(p => p.InvtDailyTrxDs)
                    .HasForeignKey(d => d.SoTId)
                    .HasConstraintName("fk_InvtDailyTrxD_SoT");

                entity.HasOne(d => d.ToT)
                    .WithMany(p => p.InvtDailyTrxDs)
                    .HasForeignKey(d => d.ToTId)
                    .HasConstraintName("fk_InvtDailyTrxD_ToT");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.InvtDailyTrxDs)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_InvDailyTrsD_InvTrsType");
            });

            modelBuilder.Entity<InvtDailyTrxT>(entity =>
            {
                entity.ToTable("InvtDailyTrxT");

                entity.HasIndex(e => new { e.LocationTypeId, e.Date }, "unq_InvDailyTrsT")
                    .IsUnique();

                entity.Property(e => e.InvtDailyTrxTId).HasColumnName("InvtDailyTrxT_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.LocationTypeId).HasColumnName("LocationType_id");

                entity.HasOne(d => d.LocationType)
                    .WithMany(p => p.InvtDailyTrxTs)
                    .HasForeignKey(d => d.LocationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_InvDailyTrsT_LocationType");
            });

            modelBuilder.Entity<InvtTrxRecordType>(entity =>
            {
                entity.ToTable("InvtTrxRecordType");

                entity.Property(e => e.InvtTrxRecordTypeId).HasColumnName("InvtTrxRecordType_id");

                entity.Property(e => e.Type)
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InvtTrxType>(entity =>
            {
                entity.ToTable("InvtTrxType");

                entity.Property(e => e.InvtTrxTypeId).HasColumnName("InvtTrxType_id");

                entity.Property(e => e.IsDbf).HasColumnName("IsDBF");

                entity.Property(e => e.RecordTypeId).HasColumnName("RecordType_id");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.HasOne(d => d.RecordType)
                    .WithMany(p => p.InvtTrxTypes)
                    .HasForeignKey(d => d.RecordTypeId)
                    .HasConstraintName("fk_InvtTrxType_InvtTrxRecordType");
            });

            modelBuilder.Entity<ItFeedRatioD>(entity =>
            {
                entity.HasKey(e => e.FeedRatioDId);

                entity.ToTable("ItFeedRatioD");

                entity.Property(e => e.FeedRatioDId).HasColumnName("FeedRatioD_id");

                entity.Property(e => e.CustId).HasColumnName("Cust_id");

                entity.Property(e => e.CustRatio).HasColumnName("Cust_Ratio");

                entity.Property(e => e.FeedRatioTId).HasColumnName("FeedRatioT_id");

                entity.HasOne(d => d.Cust)
                    .WithMany(p => p.ItFeedRatioDs)
                    .HasForeignKey(d => d.CustId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItFeedRatioD_Customer");

                entity.HasOne(d => d.FeedRatioT)
                    .WithMany(p => p.ItFeedRatioDs)
                    .HasForeignKey(d => d.FeedRatioTId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItFeedRatioD_ItFeedRatioT");
            });

            modelBuilder.Entity<ItFeedRatioT>(entity =>
            {
                entity.HasKey(e => e.FeedRatioTId);

                entity.ToTable("ItFeedRatioT");

                entity.Property(e => e.FeedRatioTId).HasColumnName("FeedRatioT_id");

                entity.Property(e => e.IsAutoModeOn)
                    .IsRequired()
                    .HasColumnName("IsAutoModeON")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LowQDfCustId).HasColumnName("LowQ_DfCust_id");

                entity.Property(e => e.LowQDfRatio).HasColumnName("LowQ_DfRatio");

                entity.Property(e => e.LowQQtyAt)
                    .HasColumnName("LowQ_QtyAt")
                    .HasDefaultValueSql("((20))");

                entity.Property(e => e.LowQWosAt).HasColumnName("LowQ_WosAt");

                entity.Property(e => e.ManualCustId).HasColumnName("Manual_Cust_id");

                entity.Property(e => e.ManualRatio).HasColumnName("Manual_Ratio");

                entity.Property(e => e.MasterRatio).HasColumnName("Master_Ratio");

                entity.Property(e => e.NormQDfRatio).HasColumnName("NormQ_DfRatio");

                entity.Property(e => e.YrAvgWkQty).HasColumnName("Yr_AvgWkQty");

                entity.Property(e => e.YrSalesQty).HasColumnName("Yr_SalesQty");

                entity.Property(e => e.YrSalesWks).HasColumnName("Yr_SalesWks");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ItFeedRatioTs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItFeedRatioT_BpmItem");

                entity.HasOne(d => d.LowQDfCust)
                    .WithMany(p => p.ItFeedRatioTLowQDfCusts)
                    .HasForeignKey(d => d.LowQDfCustId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItFeedRatioT_Customer");

                entity.HasOne(d => d.ManualCust)
                    .WithMany(p => p.ItFeedRatioTManualCusts)
                    .HasForeignKey(d => d.ManualCustId)
                    .HasConstraintName("fk_ItFeedRatioT_Customer_0");
            });

            modelBuilder.Entity<ItemAbcAm>(entity =>
            {
                entity.ToTable("ItemAbcAM");

                entity.HasComment("Item ABC, XYZ for All Market");

                entity.HasIndex(e => new { e.FcstDate, e.ItemNoId }, "Unq_ItemAbcAM")
                    .IsUnique();

                entity.HasIndex(e => e.ItemNoId, "idx_ItemAbcAM");

                entity.Property(e => e.ItemAbcAmId).HasColumnName("ItemAbcAM_id");

                entity.Property(e => e.Abc)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ABC")
                    .IsFixedLength(true);

                entity.Property(e => e.AvgQty).HasColumnType("money");

                entity.Property(e => e.FcstDate).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.Lmh)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LMH")
                    .IsFixedLength(true);

                entity.Property(e => e.StdDev).HasColumnType("money");

                entity.Property(e => e.TotalSale).HasColumnType("money");

                entity.Property(e => e.TovrBpm)
                    .HasColumnType("money")
                    .HasColumnName("TovrBPM");

                entity.Property(e => e.TovrCastle).HasColumnType("money");

                entity.Property(e => e.Xyz)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("XYZ")
                    .IsFixedLength(true);

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ItemAbcAms)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_ItemAbcAM_BpmItem");
            });

            modelBuilder.Entity<ItemAbcCm>(entity =>
            {
                entity.ToTable("ItemAbcCM");

                entity.Property(e => e.ItemAbcCmId).HasColumnName("ItemAbcCM_id");

                entity.Property(e => e.Abc00)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ABC_00")
                    .IsFixedLength(true);

                entity.Property(e => e.Abc01)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ABC_01")
                    .IsFixedLength(true);

                entity.Property(e => e.Abc02)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ABC_02")
                    .IsFixedLength(true);

                entity.Property(e => e.Abc03)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ABC_03")
                    .IsFixedLength(true);

                entity.Property(e => e.Abc04)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ABC_04")
                    .IsFixedLength(true);

                entity.Property(e => e.Abc05)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ABC_05")
                    .IsFixedLength(true);

                entity.Property(e => e.Abc06)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ABC_06")
                    .IsFixedLength(true);

                entity.Property(e => e.Abc07)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ABC_07")
                    .IsFixedLength(true);

                entity.Property(e => e.Abc08)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ABC_08")
                    .IsFixedLength(true);

                entity.Property(e => e.Abc09)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ABC_09")
                    .IsFixedLength(true);

                entity.Property(e => e.Abc10)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ABC_10")
                    .IsFixedLength(true);

                entity.Property(e => e.Abc11)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ABC_11")
                    .IsFixedLength(true);

                entity.Property(e => e.FcstChannelId).HasColumnName("FcstChannel_id");

                entity.Property(e => e.FcstDate).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.HasOne(d => d.FcstChannel)
                    .WithMany(p => p.ItemAbcCms)
                    .HasForeignKey(d => d.FcstChannelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemAbcCM_FcstChannel");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ItemAbcCms)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemAbcCM_BpmItem");
            });

            modelBuilder.Entity<ItemAbcPc>(entity =>
            {
                entity.ToTable("ItemAbcPC");

                entity.HasIndex(e => e.FcstChannelId, "idx_ItemAbcPC_FcstChannel_id");

                entity.HasIndex(e => e.FcstDate, "idx_ItemAbcPC_FcstDate");

                entity.Property(e => e.ItemAbcPcId).HasColumnName("ItemAbcPC_id");

                entity.Property(e => e.Abc)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ABC")
                    .IsFixedLength(true);

                entity.Property(e => e.AvgQty).HasColumnType("money");

                entity.Property(e => e.FcstChannelId).HasColumnName("FcstChannel_id");

                entity.Property(e => e.FcstDate).HasColumnType("date");

                entity.Property(e => e.FirstInvDate).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.ItemStatusId).HasColumnName("ItemStatus_id");

                entity.Property(e => e.LastInvDate).HasColumnType("date");

                entity.Property(e => e.QtyAvg1mo).HasColumnName("QtyAvg_1Mo");

                entity.Property(e => e.QtyAvg1yr).HasColumnName("QtyAvg_1Yr");

                entity.Property(e => e.QtyAvg3mo).HasColumnName("QtyAvg_3Mo");

                entity.Property(e => e.QtyAvg6mo).HasColumnName("QtyAvg_6Mo");

                entity.Property(e => e.QtyLastWk).HasColumnName("Qty_LastWk");

                entity.Property(e => e.SalesWeeksYr).HasColumnName("SalesWeeksYR");

                entity.Property(e => e.StdDev).HasColumnType("money");

                entity.Property(e => e.TotalAmount).HasColumnType("money");

                entity.Property(e => e.TurnOverRatio).HasColumnType("money");

                entity.Property(e => e.WkOfSupply).HasColumnType("money");

                entity.Property(e => e.Xyz)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("XYZ")
                    .IsFixedLength(true);

                entity.HasOne(d => d.FcstChannel)
                    .WithMany(p => p.ItemAbcPcs)
                    .HasForeignKey(d => d.FcstChannelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemAbcPC_FcstChannel");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ItemAbcPcs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemAbcPC_BpmItem");

                entity.HasOne(d => d.ItemStatus)
                    .WithMany(p => p.ItemAbcPcs)
                    .HasForeignKey(d => d.ItemStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemAbcPC_ItemStatus");
            });

            modelBuilder.Entity<ItemAbcPm>(entity =>
            {
                entity.ToTable("ItemAbcPM");

                entity.HasComment("Item ABC, XYZ Per Market");

                entity.HasIndex(e => new { e.FcstDate, e.MarketId, e.ItemNoId }, "Unq_ItemAbcPM")
                    .IsUnique();

                entity.HasIndex(e => e.ItemNoId, "idx_ItemAbcPM");

                entity.Property(e => e.ItemAbcPmId).HasColumnName("ItemAbcPM_id");

                entity.Property(e => e.Abc)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ABC")
                    .IsFixedLength(true);

                entity.Property(e => e.AvgQty).HasColumnType("money");

                entity.Property(e => e.FcstDate).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.Lmh)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LMH")
                    .IsFixedLength(true);

                entity.Property(e => e.MarketId).HasColumnName("Market_id");

                entity.Property(e => e.StdDev).HasColumnType("money");

                entity.Property(e => e.TotalSale).HasColumnType("money");

                entity.Property(e => e.Xyz)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("XYZ")
                    .IsFixedLength(true);

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ItemAbcPms)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_ItemAbcPM_BpmItem");

                entity.HasOne(d => d.Market)
                    .WithMany(p => p.ItemAbcPms)
                    .HasForeignKey(d => d.MarketId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_ItemAbcPM_FcstMarket");
            });

            modelBuilder.Entity<ItemAcctFob>(entity =>
            {
                entity.ToTable("ItemAcctFob");

                entity.Property(e => e.ItemAcctFobId).HasColumnName("ItemAcctFob_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.DateOn).HasColumnType("date");

                entity.Property(e => e.EmployeeId).HasColumnName("Employee_id");

                entity.Property(e => e.FobCost).HasColumnType("money");

                entity.Property(e => e.IsAmzDi).HasColumnName("IsAmzDI");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ItemAcctFobs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemAcctFob_BpmItem");
            });

            modelBuilder.Entity<ItemAvgCost>(entity =>
            {
                entity.HasKey(e => e.ItemCostId)
                    .HasName("Pk_ItemAvgCost_ItemCost_id");

                entity.ToTable("ItemAvgCost");

                entity.HasIndex(e => e.ItemNoId, "idx_ItemAvgCost_ItemNo_id");

                entity.Property(e => e.ItemCostId).HasColumnName("ItemCost_id");

                entity.Property(e => e.AvgCost).HasColumnType("money");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ItemAvgCosts)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_ItemAvgCost_BpmItem");
            });

            modelBuilder.Entity<ItemAvgCostByLoc>(entity =>
            {
                entity.ToTable("ItemAvgCostByLoc");

                entity.HasIndex(e => e.ItemNoId, "idx_ItemAvgCostByLoc_ItemNo_id");

                entity.HasIndex(e => e.LocationId, "idx_ItemAvgCostByLoc_Location_id");

                entity.Property(e => e.ItemAvgCostByLocId).HasColumnName("ItemAvgCostByLoc_id");

                entity.Property(e => e.Cost).HasColumnType("money");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.QtyOnHand).HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ItemAvgCostByLocs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemAvgCostByLoc_BpmItem");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.ItemAvgCostByLocs)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemAvgCostByLoc_BpmLocation");
            });

            modelBuilder.Entity<ItemBoxDim>(entity =>
            {
                entity.ToTable("ItemBoxDim");

                entity.HasIndex(e => new { e.ItemNoId, e.DateFrom }, "unq_ItemDim")
                    .IsUnique();

                entity.Property(e => e.ItemBoxDimId).HasColumnName("ItemBoxDim_id");

                entity.Property(e => e.BoxDimWgt).HasColumnType("money");

                entity.Property(e => e.BoxGirth).HasColumnType("money");

                entity.Property(e => e.BoxHeight).HasColumnType("money");

                entity.Property(e => e.BoxLength).HasColumnType("money");

                entity.Property(e => e.BoxVolCf)
                    .HasColumnType("money")
                    .HasColumnName("BoxVolCF");

                entity.Property(e => e.BoxVolCm)
                    .HasColumnType("money")
                    .HasColumnName("BoxVolCM");

                entity.Property(e => e.BoxWeight).HasColumnType("money");

                entity.Property(e => e.BoxWidth).HasColumnType("money");

                entity.Property(e => e.DateFrom).HasColumnType("date");

                entity.Property(e => e.DateTo).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ItemBoxDims)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemDim_BpmItem");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.ItemBoxDims)
                    .HasForeignKey(d => d.VendorId)
                    .HasConstraintName("fk_ItemDim_Vendor");
            });

            modelBuilder.Entity<ItemColl>(entity =>
            {
                entity.ToTable("ItemColl");

                entity.Property(e => e.ItemCollId).HasColumnName("ItemColl_id");

                entity.Property(e => e.CollName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemCurrFob>(entity =>
            {
                entity.ToTable("ItemCurrFob");

                entity.Property(e => e.ItemCurrFobId).HasColumnName("ItemCurrFob_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.CountryFrId).HasColumnName("CountryFr_id");

                entity.Property(e => e.CountryToId).HasColumnName("CountryTo_id");

                entity.Property(e => e.DateFrom).HasColumnType("date");

                entity.Property(e => e.DateTo).HasColumnType("date");

                entity.Property(e => e.EmployeeId).HasColumnName("Employee_id");

                entity.Property(e => e.FobCost).HasColumnType("money");

                entity.Property(e => e.IsAmzDi).HasColumnName("IsAmzDI");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.VendorId).HasColumnName("Vendor_id");

                entity.HasOne(d => d.CountryFr)
                    .WithMany(p => p.ItemCurrFobCountryFrs)
                    .HasForeignKey(d => d.CountryFrId)
                    .HasConstraintName("fk_ItemCurrFob_Country_0");

                entity.HasOne(d => d.CountryTo)
                    .WithMany(p => p.ItemCurrFobCountryTos)
                    .HasForeignKey(d => d.CountryToId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemCurrFob_Country");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ItemCurrFobs)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("fk_ItemCurrFob_Employee_0");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ItemCurrFobs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemCurrFob_BpmItem");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.ItemCurrFobs)
                    .HasForeignKey(d => d.VendorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemCurrFob_Vendor");
            });

            modelBuilder.Entity<ItemDimMfg>(entity =>
            {
                entity.ToTable("ItemDimMFG");

                entity.Property(e => e.ItemDimMfgId).HasColumnName("ItemDimMFG_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.CartonHeight).HasColumnType("money");

                entity.Property(e => e.CartonLength).HasColumnType("money");

                entity.Property(e => e.CartonWeight).HasColumnType("money");

                entity.Property(e => e.CartonWidth).HasColumnType("money");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ItemDimMfgs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemDimMFG_BpmItem");
            });

            modelBuilder.Entity<ItemDutyTarif>(entity =>
            {
                entity.HasKey(e => e.DutyTarifId)
                    .HasName("Pk_ItemDutTarf_DutTarf_id");

                entity.ToTable("ItemDutyTarif");

                entity.Property(e => e.DutyTarifId).HasColumnName("DutyTarif_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.DateFr).HasColumnType("date");

                entity.Property(e => e.DateTo).HasColumnType("date");

                entity.Property(e => e.Duty).HasColumnType("money");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.Tariff).HasColumnType("money");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ItemDutyTarifs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_ItemDutTarf_BpmItem");
            });

            modelBuilder.Entity<ItemFfd>(entity =>
            {
                entity.HasKey(e => e.IfdId)
                    .HasName("Pk_ItemFFD_IFD_id");

                entity.ToTable("ItemFFD", "ord");

                entity.HasIndex(e => e.SoDId, "idx_ItemFFD");

                entity.HasIndex(e => e.IftId, "idx_ItemFFD_0");

                entity.HasIndex(e => e.NsIntId, "idx_ItemFFD_NS");

                entity.Property(e => e.IfdId).HasColumnName("IFD_id");

                entity.Property(e => e.CustSku)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("CustSKU");

                entity.Property(e => e.IftId).HasColumnName("IFT_id");

                entity.Property(e => e.IsAsnuploaded).HasColumnName("IsASNUploaded");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.SoDId).HasColumnName("SoD_id");

                entity.Property(e => e.SoDate).HasColumnType("date");

                entity.Property(e => e.TrackNo)
                    .HasMaxLength(4096)
                    .IsUnicode(false);

                entity.HasOne(d => d.Ift)
                    .WithMany(p => p.ItemFfds)
                    .HasForeignKey(d => d.IftId)
                    .HasConstraintName("Fk_ItemFFD_ItemFFT");

                entity.HasOne(d => d.SoD)
                    .WithMany(p => p.ItemFfds)
                    .HasForeignKey(d => d.SoDId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_ItemFFD_SoD");
            });

            modelBuilder.Entity<ItemFft>(entity =>
            {
                entity.HasKey(e => e.IftId)
                    .HasName("Pk_ItemFFT_IFT_id");

                entity.ToTable("ItemFFT", "ord");

                entity.HasIndex(e => e.IfNo, "idx_ItemFFT");

                entity.HasIndex(e => e.GlimpactTId, "idx_ItemFFT_0");

                entity.HasIndex(e => e.SoTId, "idx_ItemFFT_1");

                entity.HasIndex(e => e.Date, "idx_ItemFFT_Date");

                entity.HasIndex(e => e.IfStatusId, "idx_ItemFFT_IfStatus_id");

                entity.HasIndex(e => e.NsIntId, "idx_ItemFFT_NS");

                entity.Property(e => e.IftId).HasColumnName("IFT_id");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.GlimpactTId).HasColumnName("GLImpactT_id");

                entity.Property(e => e.IfNo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IfStatusId).HasColumnName("IfStatus_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.NsSyncTime).HasColumnType("datetime");

                entity.Property(e => e.ProNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ShipDate)
                    .HasColumnType("datetime")
                    .HasComment("NS ShipTime\\n- 3PL: EDI 945 receive, then create/update IF\\n- MAINSL: pick/pack/ship time");

                entity.Property(e => e.SoTId).HasColumnName("SoT_id");

                entity.Property(e => e.Source)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TplShipId)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.HasOne(d => d.GlimpactT)
                    .WithMany(p => p.ItemFfts)
                    .HasForeignKey(d => d.GlimpactTId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ItemFFT_GLImpactT");

                entity.HasOne(d => d.IfStatus)
                    .WithMany(p => p.ItemFfts)
                    .HasForeignKey(d => d.IfStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_ItemFFT_StatusIF");

                entity.HasOne(d => d.SoT)
                    .WithMany(p => p.ItemFfts)
                    .HasForeignKey(d => d.SoTId)
                    .HasConstraintName("Fk_ItemFFT_SoT");
            });

            modelBuilder.Entity<ItemFobCc>(entity =>
            {
                entity.ToTable("ItemFobCC");

                entity.HasIndex(e => new { e.ItemNoId, e.BegDateMo, e.Country }, "Unq_ItemFobCC")
                    .IsUnique();

                entity.Property(e => e.ItemFobCcId).HasColumnName("ItemFobCC_id");

                entity.Property(e => e.BegDateMo).HasColumnType("date");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FobAvg4).HasColumnType("money");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ItemFobCcs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_ItemFobCC_BpmItem");
            });

            modelBuilder.Entity<ItemFobHist>(entity =>
            {
                entity.ToTable("ItemFobHist");

                entity.Property(e => e.ItemFobHistId).HasColumnName("ItemFobHist_id");

                entity.Property(e => e.CountryFrId).HasColumnName("CountryFr_id");

                entity.Property(e => e.CountryToId).HasColumnName("CountryTo_id");

                entity.Property(e => e.DateFrom).HasColumnType("date");

                entity.Property(e => e.DateTo).HasColumnType("date");

                entity.Property(e => e.EmployeeId).HasColumnName("Employee_id");

                entity.Property(e => e.FobCost).HasColumnType("money");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_id");

                entity.HasOne(d => d.CountryFr)
                    .WithMany(p => p.ItemFobHistCountryFrs)
                    .HasForeignKey(d => d.CountryFrId)
                    .HasConstraintName("fk_ItemFobHist_Country");

                entity.HasOne(d => d.CountryTo)
                    .WithMany(p => p.ItemFobHistCountryTos)
                    .HasForeignKey(d => d.CountryToId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemFobHist_Country_0");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ItemFobHists)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemFobHist_Employee");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ItemFobHists)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemFobHist_BpmItem");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.ItemFobHists)
                    .HasForeignKey(d => d.VendorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemFobHist_Vendor");
            });

            modelBuilder.Entity<ItemFobPc>(entity =>
            {
                entity.HasKey(e => e.ItemFobId)
                    .HasName("Pk_ItemFob_ItemFobPC_id");

                entity.ToTable("ItemFobPC");

                entity.Property(e => e.ItemFobId).HasColumnName("ItemFob_id");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FobAvg).HasColumnType("money");

                entity.Property(e => e.FobCost).HasColumnType("money");

                entity.Property(e => e.FobLast).HasColumnType("money");

                entity.Property(e => e.FobMan).HasColumnType("money");

                entity.Property(e => e.FobSource)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModEid).HasColumnName("LastModEID");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ItemFobPcs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_ItemFobPC_BpmItem");
            });

            modelBuilder.Entity<ItemFobVc>(entity =>
            {
                entity.ToTable("ItemFobVC");

                entity.HasIndex(e => new { e.ItemNoId, e.BegDateMo, e.VendorId, e.Country }, "Unq_ItemFobVC")
                    .IsUnique();

                entity.Property(e => e.ItemFobVcId).HasColumnName("ItemFobVC_id");

                entity.Property(e => e.BegDateMo).HasColumnType("date");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FobAvg4).HasColumnType("money");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ItemFobVcs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_ItemFobVC_BpmItem");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.ItemFobVcs)
                    .HasForeignKey(d => d.VendorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_ItemFobVC_Vendor");
            });

            modelBuilder.Entity<ItemFvcp>(entity =>
            {
                entity.ToTable("ItemFVCP");

                entity.HasComment("Item Future Vendor Contract Price");

                entity.HasIndex(e => new { e.ItemNoId, e.VendorId, e.IsAmazonDi }, "unq_ItemFVCP")
                    .IsUnique();

                entity.Property(e => e.ItemFvcpId).HasColumnName("ItemFVCP_id");

                entity.Property(e => e.IsAmazonDi).HasColumnName("IsAmazonDI");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModById).HasColumnName("LastModBy_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.Memo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ItemFvcps)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemFVCP_BpmItem");

                entity.HasOne(d => d.LastModBy)
                    .WithMany(p => p.ItemFvcps)
                    .HasForeignKey(d => d.LastModById)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemFVCP_Employee");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.ItemFvcps)
                    .HasForeignKey(d => d.VendorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemFVCP_Vendor");
            });

            modelBuilder.Entity<ItemListingItemno>(entity =>
            {
                entity.HasKey(e => e.ItemListingId);

                entity.ToTable("ItemListing_Itemno");

                entity.Property(e => e.ItemListingId).HasColumnName("ItemListing_id");

                entity.Property(e => e.AddedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsInvReport).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsLisingActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsNsImport).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsWfsleepBrand)
                    .HasColumnName("IsWFSleepBrand")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModDateTime).HasColumnType("datetime");

                entity.Property(e => e.LaunchDate).HasColumnType("datetime");

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.Property(e => e.PriceGroupon).HasColumnType("money");

                entity.Property(e => e.PriceWdsv)
                    .HasColumnType("money")
                    .HasColumnName("PriceWDSV");

                entity.Property(e => e.SellerSku)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("SellerSKU");

                entity.Property(e => e.SellerUnqId)
                    .HasMaxLength(50)
                    .HasColumnName("Seller_UNQ_id")
                    .HasComment("ASIN in Amazon");

                entity.Property(e => e.SellerUrlId)
                    .HasMaxLength(50)
                    .HasColumnName("Seller_URL_id");

                entity.Property(e => e.Upc).HasColumnName("UPC");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ItemListingItemnos)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemListing_Itemno_KO_Itemno");

                entity.HasOne(d => d.MarketPlace)
                    .WithMany(p => p.ItemListingItemnos)
                    .HasForeignKey(d => d.MarketPlaceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemListing_Itemno_KO_MarketPlace");
            });

            modelBuilder.Entity<ItemMdFob>(entity =>
            {
                entity.ToTable("ItemMdFob");

                entity.Property(e => e.ItemMdFobId).HasColumnName("ItemMdFob_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.CountryFrId).HasColumnName("CountryFr_id");

                entity.Property(e => e.CountryToId).HasColumnName("CountryTo_id");

                entity.Property(e => e.DateFrom).HasColumnType("date");

                entity.Property(e => e.DateTo).HasColumnType("date");

                entity.Property(e => e.EmployeeId).HasColumnName("Employee_id");

                entity.Property(e => e.FobCost).HasColumnType("money");

                entity.Property(e => e.IsAmzDi).HasColumnName("IsAmzDI");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.Note)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.VendorId).HasColumnName("Vendor_id");

                entity.HasOne(d => d.CountryFr)
                    .WithMany(p => p.ItemMdFobCountryFrs)
                    .HasForeignKey(d => d.CountryFrId)
                    .HasConstraintName("fk_ItemMdFob_Country");

                entity.HasOne(d => d.CountryTo)
                    .WithMany(p => p.ItemMdFobCountryTos)
                    .HasForeignKey(d => d.CountryToId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemMdFob_Country_0");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ItemMdFobs)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("fk_ItemMdFob_Employee");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ItemMdFobs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemMdFob_BpmItem");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.ItemMdFobs)
                    .HasForeignKey(d => d.VendorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemMdFob_Vendor");
            });

            modelBuilder.Entity<ItemPrice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ItemPrice");

                entity.Property(e => e.Ca)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.CategoryZinus)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("Category_Zinus")
                    .IsFixedLength(true);

                entity.Property(e => e.Cbm).HasColumnName("CBM");

                entity.Property(e => e.Cft).HasColumnName("CFT");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.CurrentFobIfMultiPriceMax)
                    .HasColumnType("money")
                    .HasColumnName("Current FOB (if Multi price=MAX)");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DdpWarehouse)
                    .HasColumnType("money")
                    .HasColumnName("DDP warehouse");

                entity.Property(e => e.DutyTariff)
                    .HasColumnType("money")
                    .HasColumnName("Duty+Tariff");

                entity.Property(e => e.Elc)
                    .HasColumnType("money")
                    .HasColumnName("ELC");

                entity.Property(e => e.FobPriceFromPriceRecapFile05202020)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("FOB PRICE FROM PRICE recap FILE - 05/20/2020")
                    .IsFixedLength(true);

                entity.Property(e => e.InterestRate)
                    .HasColumnType("money")
                    .HasColumnName("Interest rate");

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.ItemSku)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("Item SKU")
                    .IsFixedLength(true);

                entity.Property(e => e.OceanFreight)
                    .HasColumnType("money")
                    .HasColumnName("Ocean Freight");

                entity.Property(e => e.Ratio)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.SalesTier)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("Sales Tier")
                    .IsFixedLength(true);

                entity.Property(e => e.Sort).HasColumnName("Sort#");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.Storage3month)
                    .HasColumnType("money")
                    .HasColumnName("STORAGE (3Month)");

                entity.Property(e => e.WhseExpense)
                    .HasColumnType("money")
                    .HasColumnName("WHSE EXPENSE");

                entity.Property(e => e._2019AveFob)
                    .HasColumnType("money")
                    .HasColumnName("2019 ave FOB");

                entity.Property(e => e._2019OldFob)
                    .HasColumnType("money")
                    .HasColumnName("2019-OLD FOB");

                entity.Property(e => e._2020AveFob)
                    .HasColumnType("money")
                    .HasColumnName("2020 ave FOB");

                entity.Property(e => e._40HqQty).HasColumnName("40 HQ QTY");
            });

            modelBuilder.Entity<ItemPriceLevel>(entity =>
            {
                entity.HasKey(e => e.PriceLevelId)
                    .HasName("Pk_NsItemPriceLevel_PriceLevel_id");

                entity.ToTable("ItemPriceLevel", "ord");

                entity.Property(e => e.PriceLevelId).HasColumnName("PriceLevel_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasComment("Custom,...");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");
            });

            modelBuilder.Entity<ItemProductType>(entity =>
            {
                entity.ToTable("ItemProductType");

                entity.HasIndex(e => new { e.ReportType, e.ItemNoId, e.Type }, "unq_ItemProductType")
                    .IsUnique();

                entity.Property(e => e.ItemProductTypeId).HasColumnName("ItemProductType_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.ReportType)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ItemProductTypes)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemProductType_BpmItem");
            });

            modelBuilder.Entity<ItemRegPrice>(entity =>
            {
                entity.HasKey(e => e.RegPriceId)
                    .HasName("Pk_ItemCustPrice_CustPrice_id");

                entity.ToTable("ItemRegPrice", "ord");

                entity.HasComment("Customer Contracted Price.\\nWayfair and Walmart - need to maintain price list as their report doesn't have regular price.\\nAmazon & Overstock - trust Price from their report.\\nOverstock is fixed 10%.");

                entity.HasIndex(e => new { e.CustomerId, e.VendorCode, e.ItemNoId, e.DateStart, e.DateEnd }, "Unq_ItemRegPrice")
                    .IsUnique();

                entity.HasIndex(e => new { e.CustomerId, e.VendorCode, e.ItemNoId }, "idx_ItemRegPrice");

                entity.Property(e => e.RegPriceId).HasColumnName("RegPrice_id");

                entity.Property(e => e.ConfirmDate).HasColumnType("date");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.RegularPrice).HasColumnType("money");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.ItemRegPrices)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_ItemRegPrice_Customer");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ItemRegPrices)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_ItemRegPrice_BpmItem");
            });

            modelBuilder.Entity<ItemSoldByComponent>(entity =>
            {
                entity.HasKey(e => e.UnqId);

                entity.ToTable("ItemSoldByComponent", "Rpt");

                entity.Property(e => e.UnqId).HasColumnName("UNQ_id");

                entity.Property(e => e.ItemnoId).HasColumnName("Itemno_id");

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.HasOne(d => d.DateKeyNavigation)
                    .WithMany(p => p.ItemSoldByComponents)
                    .HasForeignKey(d => d.DateKey)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemSoldByComponent_DimDate");

                entity.HasOne(d => d.Itemno)
                    .WithMany(p => p.ItemSoldByComponents)
                    .HasForeignKey(d => d.ItemnoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemSoldByComponent_KO_Itemno");

                entity.HasOne(d => d.MarketPlace)
                    .WithMany(p => p.ItemSoldByComponents)
                    .HasForeignKey(d => d.MarketPlaceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemSoldByComponent_KO_MarketPlace");
            });

            modelBuilder.Entity<ItemStatLog>(entity =>
            {
                entity.ToTable("ItemStatLog");

                entity.HasIndex(e => e.DateFrom, "idx_ItemStatLog_DateFrom");

                entity.HasIndex(e => e.DateTo, "idx_ItemStatLog_DateTo");

                entity.HasIndex(e => e.ItemNoId, "idx_ItemStatLog_ItemNo_id");

                entity.Property(e => e.ItemStatLogId).HasColumnName("ItemStatLog_id");

                entity.Property(e => e.AddedById).HasColumnName("AddedBy_id");

                entity.Property(e => e.DateFrom).HasColumnType("date");

                entity.Property(e => e.DateTo).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.ItemStatusId).HasColumnName("ItemStatus_id");

                entity.HasOne(d => d.AddedBy)
                    .WithMany(p => p.ItemStatLogs)
                    .HasForeignKey(d => d.AddedById)
                    .HasConstraintName("fk_ItemStatLog_Employee");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ItemStatLogs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemStatLog_BpmItem");

                entity.HasOne(d => d.ItemStatus)
                    .WithMany(p => p.ItemStatLogs)
                    .HasForeignKey(d => d.ItemStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ItemStatLog_ItemStatus");
            });

            modelBuilder.Entity<ItemStatus>(entity =>
            {
                entity.ToTable("ItemStatus");

                entity.Property(e => e.ItemStatusId).HasColumnName("ItemStatus_id");

                entity.Property(e => e.StatusItem)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.StatusNs)
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemStatusHistory>(entity =>
            {
                entity.ToTable("ItemStatusHistory");

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ItemStdPrice>(entity =>
            {
                entity.HasKey(e => e.StdPriceId)
                    .HasName("Pk_ItemRegPrice_RegPrice_id");

                entity.ToTable("ItemStdPrice");

                entity.Property(e => e.StdPriceId).HasColumnName("StdPrice_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ItemListingId).HasColumnName("ItemListing_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.Property(e => e.RegPrice).HasColumnType("money");

                entity.HasOne(d => d.ItemListing)
                    .WithMany(p => p.ItemStdPrices)
                    .HasForeignKey(d => d.ItemListingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_ItemRegPrice_ItemListing_Itemno");

                entity.HasOne(d => d.MarketPlace)
                    .WithMany(p => p.ItemStdPrices)
                    .HasForeignKey(d => d.MarketPlaceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_ItemRegPrice_KO_MarketPlace");
            });

            modelBuilder.Entity<ItemTrkCoO>(entity =>
            {
                entity.ToTable("ItemTrkCoO");

                entity.HasComment("ItemNo_id: Master SKU, CoItemNo_id: Indonesia SKU");

                entity.HasIndex(e => new { e.ItemNoId, e.CoItemNoId }, "Unq_ItemTrkCoO")
                    .IsUnique();

                entity.HasIndex(e => e.CoItemNoId, "idx_ItemTrkCoO_CoItemNo_id");

                entity.HasIndex(e => e.CountryCode, "idx_ItemTrkCoO_CountryCode");

                entity.HasIndex(e => e.ItemNoId, "idx_ItemTrkCoO_ItemNo_id");

                entity.Property(e => e.ItemTrkCoOId).HasColumnName("ItemTrkCoO_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.CoItemNoId).HasColumnName("CoItemNo_id");

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.HasOne(d => d.CoItemNo)
                    .WithMany(p => p.ItemTrkCoOCoItemNos)
                    .HasForeignKey(d => d.CoItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_ItemTrkCoO_BpmItem_0");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ItemTrkCoOItemNos)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_ItemTrkCoO_BpmItem");
            });

            modelBuilder.Entity<ItemType>(entity =>
            {
                entity.ToTable("ItemType");

                entity.HasIndex(e => e.ItType, "Unq_ItemType")
                    .IsUnique();

                entity.Property(e => e.ItemTypeId).HasColumnName("ItemType_id");

                entity.Property(e => e.ItType)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<JournalD>(entity =>
            {
                entity.ToTable("JournalD");

                entity.Property(e => e.JournalDId).HasColumnName("JournalD_id");

                entity.Property(e => e.AccountId).HasColumnName("Account_id");

                entity.Property(e => e.CreditAmount).HasColumnType("money");

                entity.Property(e => e.DebitAmount).HasColumnType("money");

                entity.Property(e => e.JournalTId).HasColumnName("JournalT_id");

                entity.Property(e => e.Memo).HasMaxLength(1024);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.JournalDs)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_JournalD_GlAccount");

                entity.HasOne(d => d.JournalT)
                    .WithMany(p => p.JournalDs)
                    .HasForeignKey(d => d.JournalTId)
                    .HasConstraintName("fk_JournalD_JournalT");
            });

            modelBuilder.Entity<JournalT>(entity =>
            {
                entity.ToTable("JournalT");

                entity.Property(e => e.JournalTId).HasColumnName("JournalT_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Memo).HasMaxLength(255);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.Source)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Tranid)
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<KoAmzcategory>(entity =>
            {
                entity.HasKey(e => e.CategoryNodeId);

                entity.ToTable("KO_AMZCategory");

                entity.HasIndex(e => e.CategoryNodeId, "idx_KO_AMZCategory")
                    .IsUnique();

                entity.Property(e => e.CategoryNodeId).ValueGeneratedNever();

                entity.Property(e => e.CategoryNode).IsRequired();
            });

            modelBuilder.Entity<KoAmzproduct>(entity =>
            {
                entity.HasKey(e => e.Asin)
                    .HasName("PK_KO_AMZProduct_1");

                entity.ToTable("KO_AMZProduct");

                entity.HasIndex(e => e.ItemNoId, "UNQ_AMZProd_Itemnoid_IsGettingPrice1")
                    .IsUnique()
                    .HasFilter("([IsGettingPrice]=(1))");

                entity.HasIndex(e => e.ItemNoId, "UNQ_AMZProd_Itemnoid_IsGettingRank1")
                    .IsUnique()
                    .HasFilter("([IsGettingRank]=(1))");

                entity.HasIndex(e => e.Asin, "idx_KO_AMZProduct")
                    .IsUnique();

                entity.Property(e => e.Asin)
                    .HasMaxLength(50)
                    .HasColumnName("ASIN");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.HasOne(d => d.ItemNo)
                    .WithOne(p => p.KoAmzproduct)
                    .HasForeignKey<KoAmzproduct>(d => d.ItemNoId)
                    .HasConstraintName("FK_KO_AMZProduct_KO_Itemno1");
            });

            modelBuilder.Entity<KoAmzsellerRankHistory>(entity =>
            {
                entity.HasKey(e => new { e.Date, e.Asin, e.CategoryNodeId });

                entity.ToTable("KO_AMZSellerRankHistory");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Asin)
                    .HasMaxLength(50)
                    .HasColumnName("ASIN");

                entity.Property(e => e.CountryId)
                    .HasColumnName("Country_id")
                    .HasDefaultValueSql("((239))");

                entity.HasOne(d => d.CategoryNode)
                    .WithMany(p => p.KoAmzsellerRankHistories)
                    .HasForeignKey(d => d.CategoryNodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_KO_AMZSellerRankHistory");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.KoAmzsellerRankHistories)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_KO_AMZSellerRankHistory_Country");
            });

            modelBuilder.Entity<KoAmzvendorRpt>(entity =>
            {
                entity.HasKey(e => new { e.DateStart, e.DateEnd, e.ItemNo });

                entity.ToTable("KO_AMZVendorRpt");

                entity.HasIndex(e => new { e.DateStart, e.ItemNo }, "UNQ_DateStart_Itemno")
                    .IsUnique();

                entity.HasIndex(e => e.ItemNo, "idx_KO_AMZVendorRpt");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.ItemNo).HasMaxLength(50);

                entity.Property(e => e.Amzobqty)
                    .HasColumnName("AMZOBQty")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Excluding AMZ Drop Ship");

                entity.Property(e => e.QtyAmzful).HasColumnName("Qty_AMZFUL");

                entity.Property(e => e.QtyOpenPo).HasColumnName("QtyOpenPO");

                entity.Property(e => e.UnitsShipped).HasComment("Shipped unit including AMZ Drop Ship");

                entity.HasOne(d => d.ItemNoNavigation)
                    .WithMany(p => p.KoAmzvendorRpts)
                    .HasPrincipalKey(p => p.ItemNo)
                    .HasForeignKey(d => d.ItemNo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_KO_AMZVendorRpt");
            });

            modelBuilder.Entity<KoAmzvendorRptChargeBack>(entity =>
            {
                entity.HasKey(e => e.ChargeBackId)
                    .HasName("Pk_KO_AMZVendorRpt_ChargeBack_ChargeBack_id");

                entity.ToTable("KO_AMZVendorRpt_ChargeBack");

                entity.HasIndex(e => new { e.IssueId, e.CreationDate, e.Asin, e.ShipmentId }, "Idx_KO_AMZVendorRpt_ChargeBack")
                    .IsUnique();

                entity.Property(e => e.ChargeBackId).HasColumnName("ChargeBack_id");

                entity.Property(e => e.Asin)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.CarrierTrackingPronumber)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("Carrier_tracking_PRONumber");

                entity.Property(e => e.ConfirmedProductQuantity).HasColumnName("Confirmed_product_quantity");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Creation_date");

                entity.Property(e => e.DaysLate).HasColumnName("Days_late");

                entity.Property(e => e.DisputeBy)
                    .HasColumnType("datetime")
                    .HasColumnName("Dispute_By");

                entity.Property(e => e.EarlyDays).HasColumnName("Early_days");

                entity.Property(e => e.FinancialCharge)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("Financial_charge");

                entity.Property(e => e.IssueId)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("Issue_ID");

                entity.Property(e => e.IssueType)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("Issue_type");

                entity.Property(e => e.Notes)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.OrderType)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("Order_type");

                entity.Property(e => e.PurchaseOrderNumber)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("Purchase_order_Number");

                entity.Property(e => e.RoutingRequestCreationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Routing_Request_Creation_Date");

                entity.Property(e => e.ShipWindowEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("Ship_window_end");

                entity.Property(e => e.ShipWindowStart)
                    .HasColumnType("datetime")
                    .HasColumnName("Ship_window_start");

                entity.Property(e => e.ShipmentId).HasColumnName("Shipment_ID");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.SubmittedQuantity).HasColumnName("Submitted_Quantity");

                entity.Property(e => e.SubtypeOfTheNoncompliance)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("Subtype_of_the_noncompliance");
            });

            modelBuilder.Entity<KoAmzvendorRptInvt>(entity =>
            {
                entity.HasKey(e => e.InventoryId)
                    .HasName("Pk_KO_AMZVendorRpt_Invt_Inventory_id");

                entity.ToTable("KO_AMZVendorRpt_Invt");

                entity.HasIndex(e => new { e.DateStart, e.DateEnd, e.ItemNo, e.Asin, e.AsinId }, "Unq_KO_AMZVendorRpt_Invt")
                    .IsUnique();

                entity.Property(e => e.InventoryId).HasColumnName("Inventory_id");

                entity.Property(e => e.Asin)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.AsinId).HasColumnName("ASIN_id");

                entity.Property(e => e.Category)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.ItemNo)
                    .IsRequired()
                    .HasMaxLength(32);

                entity.Property(e => e.LocName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NetReceived)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Net_Received");

                entity.Property(e => e.NetReceivedUnits).HasColumnName("Net_Received_Units");

                entity.Property(e => e.OpenPoqty).HasColumnName("OpenPOQty");

                entity.Property(e => e.Over90daysInventory30dAvg)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Over_90Days_Inventory_30d_Avg");

                entity.Property(e => e.Over90daysSellableInventory)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Over_90Days_Sellable_Inventory");

                entity.Property(e => e.Over90daysSellableUnits).HasColumnName("Over_90Days_Sellable_Units");

                entity.Property(e => e.ProcurableProductOos)
                    .HasColumnType("decimal(10, 0)")
                    .HasColumnName("Procurable_Product_OOS");

                entity.Property(e => e.QtyOnHand30dAvg)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("QtyOnHand_30d_Avg");

                entity.Property(e => e.QtyOnHandValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("QtyOnHand_Value");

                entity.Property(e => e.ReleaseDate)
                    .HasColumnType("date")
                    .HasColumnName("Release_Date");

                entity.Property(e => e.ReplenishmentCategory)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("Replenishment_Category");

                entity.Property(e => e.SellThroughRate)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Sell_Through_Rate");

                entity.Property(e => e.Subcategory)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UnhealthyInventory)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Unhealthy_Inventory");

                entity.Property(e => e.UnhealthyInventory30dAvg)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Unhealthy_Inventory_30d_Avg");

                entity.Property(e => e.UnhealthyUnits).HasColumnName("Unhealthy_Units");

                entity.Property(e => e.UnsellableInventory30dAvg)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Unsellable_Inventory_30d_Avg");

                entity.Property(e => e.UnsellableInventoryValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Unsellable_Inventory_Value");

                entity.Property(e => e.UnsellableQtyOnHand).HasColumnName("Unsellable_QtyOnHand");

                entity.Property(e => e.Upc)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("UPC");

                entity.Property(e => e.VendorConfirmationRate)
                    .HasColumnType("decimal(10, 0)")
                    .HasColumnName("Vendor_Confirmation_Rate");

                entity.HasOne(d => d.AsinNavigation)
                    .WithMany(p => p.KoAmzvendorRptInvts)
                    .HasForeignKey(d => d.AsinId)
                    .HasConstraintName("Fk_KO_AMZVendorRpt_Invt_NsCustPN");
            });

            modelBuilder.Entity<KoAmzvendorRptNetPpm>(entity =>
            {
                entity.HasKey(e => e.NetPpmId)
                    .HasName("Pk_dbo.KO_AMZVendorRpt_NetPPM_NetPPM_id");

                entity.ToTable("KO_AMZVendorRpt_NetPPM");

                entity.HasIndex(e => new { e.DateStart, e.DateEnd, e.Asin }, "Idx_KO_AMZVendorRpt_NetPPM")
                    .IsUnique();

                entity.Property(e => e.NetPpmId).HasColumnName("NetPPM_id");

                entity.Property(e => e.Asin)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NetPpm)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("Net_PPM");

                entity.Property(e => e.NetPpmLastYear)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("Net_PPM_LastYear");

                entity.Property(e => e.NetPpmPercentOfTotal)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("Net_PPM_Percent_of_Total");

                entity.Property(e => e.NetPpmPriorPeriod)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("Net_PPM_Prior_Period");

                entity.Property(e => e.Subcategory)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(512)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<KoAmzvendorRptSale>(entity =>
            {
                entity.HasKey(e => e.SalesId)
                    .HasName("Pk_KO_AMZVendorRpt_Sales_Sales_id");

                entity.ToTable("KO_AMZVendorRpt_Sales");

                entity.HasIndex(e => new { e.DateStart, e.DateEnd, e.ItemNo, e.Asin, e.AsinId }, "Unq_Idx_KO_AMZVendorRpt_Sales")
                    .IsUnique();

                entity.Property(e => e.SalesId).HasColumnName("Sales_id");

                entity.Property(e => e.Asin)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.AsinId).HasColumnName("ASIN_id");

                entity.Property(e => e.AvgSalesPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Avg_Sales_Price");

                entity.Property(e => e.AvgSalesPricePrior)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Avg_Sales_Price_Prior");

                entity.Property(e => e.Category)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.ConversionRate)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("Conversion_Rate");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.GlanceViewLastYear)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("GlanceView_LastYear");

                entity.Property(e => e.GlanceViewPrior)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("GlanceView_Prior");

                entity.Property(e => e.GlanceViews)
                    .HasColumnType("decimal(10, 0)")
                    .HasColumnName("Glance_Views");

                entity.Property(e => e.ItemNo)
                    .IsRequired()
                    .HasMaxLength(32);

                entity.Property(e => e.LbbPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("LBB_Price");

                entity.Property(e => e.LocName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OrdRevenue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Ord_Revenue");

                entity.Property(e => e.OrdRevenueLastYear)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Ord_Revenue_LastYear");

                entity.Property(e => e.OrdRevenuePrior)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Ord_Revenue_Prior");

                entity.Property(e => e.OrdRevenueTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Ord_Revenue_Total");

                entity.Property(e => e.ReleaseDate)
                    .HasColumnType("date")
                    .HasColumnName("Release_Date");

                entity.Property(e => e.RepOos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Rep_OOS");

                entity.Property(e => e.RepOosPrior)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Rep_OOS_Prior");

                entity.Property(e => e.RepOosTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Rep_OOS_Total");

                entity.Property(e => e.SalesRank).HasColumnName("Sales_Rank");

                entity.Property(e => e.ShippedCogs)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ShippedCOGS");

                entity.Property(e => e.Subcategory)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UnitOrdLastYear)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("UnitOrd_LastYear");

                entity.Property(e => e.UnitOrdPrior)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("UnitOrd_Prior");

                entity.Property(e => e.UnitOrdTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("UnitOrd_Total");

                entity.Property(e => e.Upc)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("UPC");

                entity.HasOne(d => d.AsinNavigation)
                    .WithMany(p => p.KoAmzvendorRptSales)
                    .HasForeignKey(d => d.AsinId)
                    .HasConstraintName("Fk_KO_AMZVendorRpt_Sales_NsCustPN");
            });

            modelBuilder.Entity<KoAmzvendorRptSummary>(entity =>
            {
                entity.HasKey(e => e.SummaryId)
                    .HasName("Pk_KO_AMZVendorRpt_Summary_Summary_id");

                entity.ToTable("KO_AMZVendorRpt_Summary");

                entity.HasIndex(e => new { e.DateStart, e.DateEnd, e.Kpis }, "Idx_KO_AMZVendorRpt_Summary")
                    .IsUnique();

                entity.Property(e => e.SummaryId).HasColumnName("Summary_id");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.Kpis)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("KPIs");

                entity.Property(e => e.LastYear)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("Last_Year");

                entity.Property(e => e.PriorPeriod)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("Prior_Period");

                entity.Property(e => e.Reported).HasColumnType("decimal(10, 2)");
            });

            modelBuilder.Entity<KoCoD>(entity =>
            {
                entity.ToTable("KoCoD", "ord");

                entity.HasIndex(e => e.SoDId, "idx_KoCoD");

                entity.Property(e => e.KoCoDId).HasColumnName("KoCoD_id");

                entity.Property(e => e.AcptTime).HasColumnType("datetime");

                entity.Property(e => e.CustSku)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("CustSKU");

                entity.Property(e => e.KoCoTId).HasColumnName("KoCoT_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.NsSyncTime).HasColumnType("datetime");

                entity.Property(e => e.SoDId).HasColumnName("SoD_id");

                entity.Property(e => e.StatusId)
                    .HasColumnName("Status_id")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.KoCoT)
                    .WithMany(p => p.KoCoDs)
                    .HasForeignKey(d => d.KoCoTId)
                    .HasConstraintName("Fk_KoCoD_KoCoT");

                entity.HasOne(d => d.SoD)
                    .WithMany(p => p.KoCoDs)
                    .HasForeignKey(d => d.SoDId)
                    .HasConstraintName("Fk_KoCoD_SoD");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.KoCoDs)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_KoCoD_WithdrawalStatus");
            });

            modelBuilder.Entity<KoCoT>(entity =>
            {
                entity.ToTable("KoCoT", "ord");

                entity.HasIndex(e => e.SoTId, "idx_KoCoT");

                entity.HasIndex(e => e.CustRef, "idx_KoCoT_CustRef");

                entity.Property(e => e.KoCoTId).HasColumnName("KoCoT_id");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CustRef)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.PoNo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.SoTId).HasColumnName("SoT_id");

                entity.HasOne(d => d.SoT)
                    .WithMany(p => p.KoCoTs)
                    .HasForeignKey(d => d.SoTId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_KoCoT_SoT");
            });

            modelBuilder.Entity<KoCompetingItem>(entity =>
            {
                entity.HasKey(e => e.CompetingItemId);

                entity.ToTable("KO_CompetingItem");

                entity.Property(e => e.CompetingItemId).HasColumnName("CompetingItem_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.MarketItemId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.Property(e => e.SellerId).HasColumnName("Seller_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.KoCompetingItems)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KO_CompetingItem_KO_Itemno");

                entity.HasOne(d => d.MarketPlace)
                    .WithMany(p => p.KoCompetingItems)
                    .HasForeignKey(d => d.MarketPlaceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KO_CompetingItem_KO_MarketPlace");

                entity.HasOne(d => d.Seller)
                    .WithMany(p => p.KoCompetingItems)
                    .HasForeignKey(d => d.SellerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KO_CompetingItem_KO_Seller");
            });

            modelBuilder.Entity<KoInventoryHistory>(entity =>
            {
                entity.ToTable("KO_InventoryHistory");

                entity.HasIndex(e => e.ItemNoId, "idx_KO_BPM_Inventory_History");

                entity.Property(e => e.KoInventoryHistoryId).HasColumnName("KO_InventoryHistory_id");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.KoInventoryHistories)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KO_BPM_Inventory_History_KO_ITEMNO");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.KoInventoryHistories)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KO_BPM_Inventory_History_KO_LOCATION");
            });

            modelBuilder.Entity<KoItemno>(entity =>
            {
                entity.HasKey(e => e.ItemNoId)
                    .HasName("PK_KO_ITEMNO");

                entity.ToTable("KO_Itemno");

                entity.HasIndex(e => e.ItemNo, "Pk_KO_Itemno_0")
                    .IsUnique();

                entity.HasIndex(e => e.ItemNo, "UNQ_Itemno")
                    .IsUnique();

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.BpmUpc)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("BpmUPC");

                entity.Property(e => e.Cat1Id).HasColumnName("Cat1_id");

                entity.Property(e => e.Cat2Id).HasColumnName("Cat2_id");

                entity.Property(e => e.Cat3Id).HasColumnName("Cat3_id");

                entity.Property(e => e.CatSage)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.CatSub1).HasMaxLength(50);

                entity.Property(e => e.CatSub2).HasMaxLength(50);

                entity.Property(e => e.CatZinusId).HasColumnName("CatZinus_id");

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.CategoryAd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Category_AD");

                entity.Property(e => e.CategoryZinus)
                    .HasMaxLength(50)
                    .HasColumnName("Category_Zinus");

                entity.Property(e => e.Color)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Htscode)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("HTScode");

                entity.Property(e => e.IsNew).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ItemTypeId)
                    .HasColumnName("ItemType_id")
                    .HasComment("0: Inventory Item\\n1: Kit Item\\n2:\\n3:");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.MasterSku)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("MasterSKU");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.Obsolete).HasDefaultValueSql("((1))");

                entity.Property(e => e.PalletTypeId).HasColumnName("PalletType_id");

                entity.Property(e => e.Size)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.VendorId).HasColumnName("Vendor_id");

                entity.HasOne(d => d.Cat1)
                    .WithMany(p => p.KoItemnos)
                    .HasForeignKey(d => d.Cat1Id)
                    .HasConstraintName("Fk_KO_Itemno_Category1");

                entity.HasOne(d => d.Cat2)
                    .WithMany(p => p.KoItemnos)
                    .HasForeignKey(d => d.Cat2Id)
                    .HasConstraintName("Fk_KO_Itemno_Category2");

                entity.HasOne(d => d.Cat3)
                    .WithMany(p => p.KoItemnos)
                    .HasForeignKey(d => d.Cat3Id)
                    .HasConstraintName("Fk_KO_Itemno_Category3");

                entity.HasOne(d => d.CatZinus)
                    .WithMany(p => p.KoItemnos)
                    .HasForeignKey(d => d.CatZinusId)
                    .HasConstraintName("Fk_KO_Itemno_CategoryZinus");

                entity.HasOne(d => d.PalletType)
                    .WithMany(p => p.KoItemnos)
                    .HasForeignKey(d => d.PalletTypeId)
                    .HasConstraintName("Fk_KO_Itemno_PalletType");
            });

            modelBuilder.Entity<KoKitTrkNo>(entity =>
            {
                entity.HasKey(e => e.KitTrkId)
                    .HasName("Pk_KoKitTrkNo_KitTrk_id");

                entity.ToTable("KoKitTrkNo", "ord");

                entity.Property(e => e.KitTrkId).HasColumnName("KitTrk_id");

                entity.Property(e => e.ChildItemId).HasColumnName("ChildItem_id");

                entity.Property(e => e.ChildQty).HasComment("QtyOrdered * KittingQty");

                entity.Property(e => e.KoIfdId).HasColumnName("KoIFD_id");

                entity.Property(e => e.TrackNo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Comma Separated Tracking #");
            });

            modelBuilder.Entity<KoLocation>(entity =>
            {
                entity.HasKey(e => e.LocationId)
                    .HasName("PK_KO_LOCATION");

                entity.ToTable("KO_Location");

                entity.HasIndex(e => e.Location, "UNQ_LOCATION")
                    .IsUnique();

                entity.HasIndex(e => e.LocationId, "idx_KO_LOCATION")
                    .IsUnique();

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Address1).HasMaxLength(50);

                entity.Property(e => e.Address2).HasMaxLength(50);

                entity.Property(e => e.Address3).HasMaxLength(50);

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.Country).HasMaxLength(50);

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.LocIdAmazon)
                    .HasMaxLength(50)
                    .HasColumnName("LocId_Amazon");

                entity.Property(e => e.LocIdOverstock)
                    .HasMaxLength(50)
                    .HasColumnName("LocId_Overstock");

                entity.Property(e => e.LocIdWalmartDsv)
                    .HasMaxLength(50)
                    .HasColumnName("LocId_WalmartDSV");

                entity.Property(e => e.LocIdWayfair)
                    .HasMaxLength(50)
                    .HasColumnName("LocId_Wayfair");

                entity.Property(e => e.LocNameCastle)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LocName_Castle");

                entity.Property(e => e.LocNameWayfair)
                    .HasMaxLength(50)
                    .HasColumnName("LocName_Wayfair");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.State).HasMaxLength(50);

                entity.Property(e => e.Zip)
                    .HasMaxLength(50)
                    .HasColumnName("ZIP");
            });

            modelBuilder.Entity<KoMarketPlace>(entity =>
            {
                entity.HasKey(e => e.MarketPlaceId);

                entity.ToTable("KO_MarketPlace");

                entity.HasIndex(e => e.MarketPlaceName, "Pk_KO_MarketPlace_0")
                    .IsUnique();

                entity.HasIndex(e => e.ShipFromAddrId, "idx_KO_MarketPlace");

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.CsvDelimiter)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.MarketPlaceName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("MarketPlace_name");

                entity.Property(e => e.MarketPlaceNameZinus)
                    .HasMaxLength(50)
                    .HasColumnName("MarketPlace_name_Zinus");

                entity.Property(e => e.MarketType)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.MasterMarketId).HasColumnName("MasterMarket_id");

                entity.Property(e => e.NsCategory)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.NsMarketPlace)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.NsOrderType)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.NscustomerName)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("NSCustomerName");

                entity.Property(e => e.ShipFromAddrId).HasColumnName("ShipFromAddr_id");

                entity.Property(e => e.VendorId).HasMaxLength(50);

                entity.HasOne(d => d.ShipFromAddr)
                    .WithMany(p => p.KoMarketPlaces)
                    .HasForeignKey(d => d.ShipFromAddrId)
                    .HasConstraintName("fk_KO_MarketPlace");
            });

            modelBuilder.Entity<KoPossiblePo>(entity =>
            {
                entity.HasKey(e => e.PossBpmPoId);

                entity.ToTable("KO_PossiblePO");

                entity.HasIndex(e => e.ItemNo, "idx_KO_PossiblePO");

                entity.Property(e => e.PossBpmPoId).HasColumnName("PossBpmPO_id");

                entity.Property(e => e.ItemNo).HasMaxLength(50);

                entity.HasOne(d => d.ItemNoNavigation)
                    .WithMany(p => p.KoPossiblePos)
                    .HasPrincipalKey(p => p.ItemNo)
                    .HasForeignKey(d => d.ItemNo)
                    .HasConstraintName("fk_KO_PossiblePO");
            });

            modelBuilder.Entity<KoPossibleSalesOrder>(entity =>
            {
                entity.HasKey(e => e.PossCustSoId)
                    .HasName("PK_KO_PossibleAMZBulkPO");

                entity.ToTable("KO_PossibleSalesOrder");

                entity.HasIndex(e => e.ItemNo, "idx_KO_PossibleAMZBulkPO");

                entity.HasIndex(e => e.Customer, "idx_KO_PossibleSalesOrder");

                entity.Property(e => e.PossCustSoId).HasColumnName("PossCustSO_id");

                entity.Property(e => e.Customer).HasMaxLength(50);

                entity.Property(e => e.ItemNo).HasMaxLength(50);

                entity.Property(e => e.Year).HasDefaultValueSql("((2017))");

                entity.HasOne(d => d.CustomerNavigation)
                    .WithMany(p => p.KoPossibleSalesOrders)
                    .HasPrincipalKey(p => p.MarketPlaceName)
                    .HasForeignKey(d => d.Customer)
                    .HasConstraintName("fk_KO_PossibleSalesOrder");

                entity.HasOne(d => d.ItemNoNavigation)
                    .WithMany(p => p.KoPossibleSalesOrders)
                    .HasPrincipalKey(p => p.ItemNo)
                    .HasForeignKey(d => d.ItemNo)
                    .HasConstraintName("fk_KO_PossibleAMZBulkPO");
            });

            modelBuilder.Entity<KoPredSale>(entity =>
            {
                entity.HasKey(e => e.KoPredSalesId)
                    .HasName("pk_KO_PredSales");

                entity.ToTable("KO_PredSales");

                entity.HasIndex(e => e.ItemNo, "idx_KO_PredSales");

                entity.Property(e => e.KoPredSalesId).HasColumnName("KO_PredSales_id");

                entity.Property(e => e.Customer).HasMaxLength(50);

                entity.Property(e => e.ItemNo).HasMaxLength(50);

                entity.HasOne(d => d.ItemNoNavigation)
                    .WithMany(p => p.KoPredSales)
                    .HasPrincipalKey(p => p.ItemNo)
                    .HasForeignKey(d => d.ItemNo)
                    .HasConstraintName("fk_KO_PredSales");
            });

            modelBuilder.Entity<KoProdReview>(entity =>
            {
                entity.HasKey(e => e.ReviewId);

                entity.ToTable("KO_Prod_Reviews");

                entity.Property(e => e.ReviewId).HasColumnName("Review_id");

                entity.Property(e => e.ItemNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.Property(e => e.RevDate)
                    .HasColumnType("date")
                    .HasColumnName("Rev_date");

                entity.Property(e => e.RevId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Rev_id");

                entity.Property(e => e.RevImage)
                    .HasMaxLength(50)
                    .HasColumnName("Rev_image");

                entity.Property(e => e.RevName)
                    .HasMaxLength(50)
                    .HasColumnName("Rev_name");

                entity.Property(e => e.RevOption1)
                    .HasMaxLength(50)
                    .HasColumnName("Rev_option1");

                entity.Property(e => e.RevOption2)
                    .HasMaxLength(50)
                    .HasColumnName("Rev_option2");

                entity.Property(e => e.RevOption3)
                    .HasMaxLength(50)
                    .HasColumnName("Rev_option3");

                entity.Property(e => e.RevRating).HasColumnName("Rev_rating");

                entity.Property(e => e.RevText)
                    .IsUnicode(false)
                    .HasColumnName("Rev_text");

                entity.Property(e => e.RevTitle)
                    .HasMaxLength(50)
                    .HasColumnName("Rev_title");

                entity.Property(e => e.SellerUnqId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Seller_UNQ_id");
            });

            modelBuilder.Entity<KoRetailPrcHistory>(entity =>
            {
                entity.HasKey(e => e.RpHistoryId)
                    .HasName("Pk_KO_RetailPrcistory_RpHistory_id");

                entity.ToTable("KO_RetailPrcHistory");

                entity.HasIndex(e => e.ItemNoId, "Idx_KO_RetailPrcistory_Itemno_id");

                entity.HasIndex(e => e.MarketPlaceId, "Idx_KO_RetailPrcistory_MarketPlace_id");

                entity.HasIndex(e => e.SellerId, "Idx_KO_RetailPrcistory_Seller_id");

                entity.Property(e => e.RpHistoryId).HasColumnName("RpHistory_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.Property(e => e.RptTime).HasColumnType("datetime");

                entity.Property(e => e.SellerId).HasColumnName("Seller_id");

                entity.HasOne(d => d.MarketPlace)
                    .WithMany(p => p.KoRetailPrcHistories)
                    .HasForeignKey(d => d.MarketPlaceId)
                    .HasConstraintName("Fk_KO_RetailPrcistory_KO_MarketPlace");

                entity.HasOne(d => d.Seller)
                    .WithMany(p => p.KoRetailPrcHistories)
                    .HasForeignKey(d => d.SellerId)
                    .HasConstraintName("Fk_KO_RetailPrcistory_KO_Seller");
            });

            modelBuilder.Entity<KoRetailPriceHistory>(entity =>
            {
                entity.HasKey(e => new { e.Date, e.ItemNoId, e.MarketPlaceId, e.SellerId });

                entity.ToTable("KO_RetailPriceHistory");

                entity.HasIndex(e => new { e.Date, e.ItemNoId, e.MarketPlaceId, e.SellerId }, "UNQ_Date_Itemno_Market_Seller")
                    .IsUnique();

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.Property(e => e.SellerId).HasColumnName("Seller_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.KoRetailPriceHistories)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KO_RetailPriceHistory_KO_Itemno");

                entity.HasOne(d => d.MarketPlace)
                    .WithMany(p => p.KoRetailPriceHistories)
                    .HasForeignKey(d => d.MarketPlaceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KO_RetailPriceHistory_KO_MarketPlace");

                entity.HasOne(d => d.Seller)
                    .WithMany(p => p.KoRetailPriceHistories)
                    .HasForeignKey(d => d.SellerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KO_RetailPriceHistory_KO_Seller");
            });

            modelBuilder.Entity<KoSalesTarget>(entity =>
            {
                entity.HasKey(e => e.SalesTargetId)
                    .HasName("Pk_KO_SalesTarget");

                entity.ToTable("KO_SalesTarget");

                entity.HasIndex(e => e.MarketPlaceId, "idx_KO_SalesTarget");

                entity.Property(e => e.SalesTargetId).HasColumnName("SalesTarget_id");

                entity.Property(e => e.Apr).HasColumnType("money");

                entity.Property(e => e.Aug).HasColumnType("money");

                entity.Property(e => e.Dec).HasColumnType("money");

                entity.Property(e => e.Feb).HasColumnType("money");

                entity.Property(e => e.Jan).HasColumnType("money");

                entity.Property(e => e.Jul).HasColumnType("money");

                entity.Property(e => e.Jun).HasColumnType("money");

                entity.Property(e => e.Mar).HasColumnType("money");

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.Property(e => e.May).HasColumnType("money");

                entity.Property(e => e.Nov).HasColumnType("money");

                entity.Property(e => e.Oct).HasColumnType("money");

                entity.Property(e => e.Sep).HasColumnType("money");

                entity.HasOne(d => d.MarketPlace)
                    .WithMany(p => p.KoSalesTargets)
                    .HasForeignKey(d => d.MarketPlaceId)
                    .HasConstraintName("fk_KO_SalesTarget");
            });

            modelBuilder.Entity<KoSeller>(entity =>
            {
                entity.HasKey(e => e.SellerId);

                entity.ToTable("KO_Seller");

                entity.Property(e => e.SellerId).HasColumnName("Seller_id");

                entity.Property(e => e.SellerName).HasMaxLength(50);
            });

            modelBuilder.Entity<KoShipFromAddr>(entity =>
            {
                entity.HasKey(e => e.ShipFromAddrId)
                    .HasName("Pk_KO_ShipFromAddr");

                entity.ToTable("KO_ShipFromAddr");

                entity.Property(e => e.ShipFromAddrId).HasColumnName("ShipFromAddr_id");

                entity.Property(e => e.Address1).HasMaxLength(100);

                entity.Property(e => e.Address2).HasMaxLength(100);

                entity.Property(e => e.Address3).HasMaxLength(100);

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Country).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.FullName).HasMaxLength(100);

                entity.Property(e => e.PhoneNumber).HasMaxLength(50);

                entity.Property(e => e.State).HasMaxLength(50);

                entity.Property(e => e.Zip)
                    .HasMaxLength(50)
                    .HasColumnName("ZIP");
            });

            modelBuilder.Entity<KoShippingMethod>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("KO_ShippingMethod");

                entity.Property(e => e.ShippingMethod)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShippingType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<KoSoD>(entity =>
            {
                entity.ToTable("KoSoD", "ord");

                entity.Property(e => e.KoSoDId).HasColumnName("KoSoD_id");

                entity.Property(e => e.ApplyDbst).HasColumnName("ApplyDBST");

                entity.Property(e => e.CustSku)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("CustSKU");

                entity.Property(e => e.DiscAmt).HasColumnType("money");

                entity.Property(e => e.DiscCode)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.FeeAmt).HasColumnType("money");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.KoSoTId).HasColumnName("KoSoT_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.MemoLine)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NsSyncTime).HasColumnType("datetime");

                entity.Property(e => e.OrderStatusId).HasColumnName("OrderStatus_id");

                entity.Property(e => e.ShipAmt).HasColumnType("money");

                entity.Property(e => e.ShipFromWhId).HasColumnName("ShipFromWh_id");

                entity.Property(e => e.ShipScac)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ShipSCAC");

                entity.Property(e => e.ShipViaId).HasColumnName("ShipVia_id");

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.Property(e => e.VatAmt).HasColumnType("money");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.KoSoDs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_KoSoD_BpmItem");

                entity.HasOne(d => d.KoSoT)
                    .WithMany(p => p.KoSoDs)
                    .HasForeignKey(d => d.KoSoTId)
                    .HasConstraintName("Fk_KoSoD_KoSoT");

                entity.HasOne(d => d.OrderStatus)
                    .WithMany(p => p.KoSoDs)
                    .HasForeignKey(d => d.OrderStatusId)
                    .HasConstraintName("Fk_KoSoD_SoStatusKo");

                entity.HasOne(d => d.ShipFromWh)
                    .WithMany(p => p.KoSoDs)
                    .HasForeignKey(d => d.ShipFromWhId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_KoSoD_BpmLocation");

                entity.HasOne(d => d.ShipVia)
                    .WithMany(p => p.KoSoDs)
                    .HasForeignKey(d => d.ShipViaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_KoSoD_ShipVia");
            });

            modelBuilder.Entity<KoSoT>(entity =>
            {
                entity.ToTable("KoSoT", "ord");

                entity.HasIndex(e => new { e.CustomerId, e.PoNo }, "Unq_KoSoT")
                    .IsUnique();

                entity.HasIndex(e => e.KoSoTId, "Unq_KoSoT_Order_id")
                    .IsUnique();

                entity.Property(e => e.KoSoTId).HasColumnName("KoSoT_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.Address1)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Address3)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CustOrdTime).HasColumnType("datetime");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.Email)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ExpShipDate).HasColumnType("date");

                entity.Property(e => e.IoNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Memo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.PoNo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ShipCode)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ShipSpeed)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToAfcId).HasColumnName("ShipToAFC_id");

                entity.Property(e => e.ShipToName)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.ShipWindowEnd).HasColumnType("date");

                entity.Property(e => e.ShipWindowStart).HasColumnType("date");

                entity.Property(e => e.SoDate).HasColumnType("date");

                entity.Property(e => e.Source)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasComment("EDI, API, CSV, UI");

                entity.Property(e => e.State)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Zip)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ZIP");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.KoSoTs)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_KoSoT_Customer");
            });

            modelBuilder.Entity<KoWklySalesAvg>(entity =>
            {
                entity.HasKey(e => e.ItemNo);

                entity.ToTable("KO_WklySalesAvg");

                entity.HasIndex(e => e.ItemNo, "idx_KO_WklySalesAvg");

                entity.Property(e => e.ItemNo).HasMaxLength(50);

                entity.Property(e => e.WkAvg12).HasColumnName("WkAvg_12");

                entity.Property(e => e.WkAvg4).HasColumnName("WkAvg_4");

                entity.HasOne(d => d.ItemNoNavigation)
                    .WithOne(p => p.KoWklySalesAvg)
                    .HasPrincipalKey<KoItemno>(p => p.ItemNo)
                    .HasForeignKey<KoWklySalesAvg>(d => d.ItemNo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_KO_WklySalesAvg");
            });

            modelBuilder.Entity<KoWmtproduct>(entity =>
            {
                entity.HasKey(e => e.WmtItemId);

                entity.ToTable("KO_WMTProduct");

                entity.HasIndex(e => e.ItemNoId, "UNQ_WMTProd_Itemno_id_IsGettingPrice1")
                    .IsUnique()
                    .HasFilter("([IsGettingPrice]=(1))");

                entity.Property(e => e.WmtItemId)
                    .HasMaxLength(50)
                    .HasColumnName("WMT_Item_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.HasOne(d => d.ItemNo)
                    .WithOne(p => p.KoWmtproduct)
                    .HasForeignKey<KoWmtproduct>(d => d.ItemNoId)
                    .HasConstraintName("FK_KO_WMTProduct_KO_Itemno");
            });

            modelBuilder.Entity<KoalaMasterInventory>(entity =>
            {
                entity.HasKey(e => e.BegInvId)
                    .HasName("Pk_KoalaBegInventory_BegInv_id");

                entity.ToTable("KoalaMasterInventory");

                entity.Property(e => e.BegInvId).HasColumnName("BegInv_id");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.QtyAllocAdir).HasColumnName("QtyAllocADIR");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.KoalaMasterInventories)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KoalaBegInventory_KO_Itemno");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.KoalaMasterInventories)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KoalaBegInventory_KO_Location");
            });

            modelBuilder.Entity<KoalaRole>(entity =>
            {
                entity.ToTable("KoalaRole");

                entity.Property(e => e.KoalaRoleId).HasColumnName("KoalaRole_id");

                entity.Property(e => e.IsAduser).HasColumnName("IsADUser");
            });

            modelBuilder.Entity<LandedCost>(entity =>
            {
                entity.ToTable("LandedCost");

                entity.HasIndex(e => e.PoDId, "idx_LandedCost_PoD_id");

                entity.HasIndex(e => e.ToDId, "idx_LandedCost_ToD_id");

                entity.HasIndex(e => e.VendorBillDId, "idx_LandedCost_VendorBillD_id");

                entity.Property(e => e.LandedCostId).HasColumnName("LandedCost_id");

                entity.Property(e => e.PoDId).HasColumnName("PoD_id");

                entity.Property(e => e.ToDId).HasColumnName("ToD_id");

                entity.Property(e => e.VendorBillDId).HasColumnName("VendorBillD_id");

                entity.HasOne(d => d.PoD)
                    .WithMany(p => p.LandedCosts)
                    .HasForeignKey(d => d.PoDId)
                    .HasConstraintName("fk_LandedCost_PoD");

                entity.HasOne(d => d.ToD)
                    .WithMany(p => p.LandedCosts)
                    .HasForeignKey(d => d.ToDId)
                    .HasConstraintName("fk_LandedCost_ToD");

                entity.HasOne(d => d.VendorBillD)
                    .WithMany(p => p.LandedCosts)
                    .HasForeignKey(d => d.VendorBillDId)
                    .HasConstraintName("fk_LandedCost_VendorBillD");
            });

            modelBuilder.Entity<LocationType>(entity =>
            {
                entity.ToTable("LocationType");

                entity.Property(e => e.LocationTypeId).HasColumnName("LocationType_id");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Market>(entity =>
            {
                entity.ToTable("Market");

                entity.HasIndex(e => e.MarketPlace, "Unq_Market")
                    .IsUnique();

                entity.Property(e => e.MarketId).HasColumnName("Market_id");

                entity.Property(e => e.FcstMarketId).HasColumnName("FcstMarket_id");

                entity.Property(e => e.MarketPlace)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");
            });

            modelBuilder.Entity<MarketFulfilledInventory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MarketFulfilledInventory");

                entity.HasIndex(e => new { e.Date, e.MarketPlaceId, e.ItemNoId }, "UNIQ_Date_MarketPlace_id_Itemno_id")
                    .IsUnique();

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.InStockSupplyQty).HasComment("The item quantity in AMZ fulfillment center that is avaialble for shipping.");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.Property(e => e.TotalSupplyQty).HasComment("The total item quantity that a seller has in Amazon's fulfillment network supply chain.");
            });

            modelBuilder.Entity<MarketMasterItem>(entity =>
            {
                entity.ToTable("MarketMasterItem");

                entity.Property(e => e.MarketMasterItemId).HasColumnName("MarketMasterItem_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.MasterSkuId).HasColumnName("MasterSKU_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.MarketMasterItems)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_MarketMasterItem_BpmItem");

                entity.HasOne(d => d.MasterSku)
                    .WithMany(p => p.MarketMasterItems)
                    .HasForeignKey(d => d.MasterSkuId)
                    .HasConstraintName("fk_MarketMasterItem_MarketMasterSKU");
            });

            modelBuilder.Entity<MarketMasterSku>(entity =>
            {
                entity.HasKey(e => e.MasterSkuId)
                    .HasName("pk_MarketMasterSKU");

                entity.ToTable("MarketMasterSKU");

                entity.Property(e => e.MasterSkuId).HasColumnName("MasterSKU_id");

                entity.Property(e => e.Collection)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MarketId).HasColumnName("Market_id");

                entity.Property(e => e.Sku)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("SKU");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.HasOne(d => d.Market)
                    .WithMany(p => p.MarketMasterSkus)
                    .HasForeignKey(d => d.MarketId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_MarketMasterSKU_Market");
            });

            modelBuilder.Entity<MarketMasterSkuIcr>(entity =>
            {
                entity.HasKey(e => e.MasterSkuIcrId)
                    .HasName("pk_MarketMasterSKU_ICR");

                entity.ToTable("MarketMasterSKU_ICR");

                entity.HasComment("Not Use - Need delete");

                entity.Property(e => e.MasterSkuIcrId).HasColumnName("MasterSKU_ICR_id");

                entity.Property(e => e.IcrId).HasColumnName("ICR_id");

                entity.Property(e => e.MasterSkuId).HasColumnName("MasterSKU_id");
            });

            modelBuilder.Entity<MasterSku>(entity =>
            {
                entity.ToTable("MasterSKU");

                entity.HasIndex(e => e.SkuName, "Unq_MasterSKU")
                    .IsUnique();

                entity.Property(e => e.MasterSkuId).HasColumnName("MasterSKU_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.SkuName)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MatInfu>(entity =>
            {
                entity.HasKey(e => e.MatInfusId)
                    .HasName("Pk_MatInfusion_MatInfusion_id");

                entity.Property(e => e.MatInfusId).HasColumnName("MatInfus_id");

                entity.Property(e => e.InfusName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MatType>(entity =>
            {
                entity.ToTable("MatType");

                entity.Property(e => e.MatTypeId).HasColumnName("MatType_id");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MatreialType>(entity =>
            {
                entity.HasKey(e => e.MaterialTypeId)
                    .HasName("Pk_MaterialType_MaterialType_id");

                entity.ToTable("MatreialType");

                entity.HasIndex(e => e.MaterialName, "Unq_MatreialType")
                    .IsUnique();

                entity.Property(e => e.MaterialTypeId).HasColumnName("MaterialType_id");

                entity.Property(e => e.MaterialName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MelPriceDataExport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mel_price_data_export");

                entity.Property(e => e.Category)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("category");

                entity.Property(e => e.Collection)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("collection");

                entity.Property(e => e.CstmNm)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cstm_nm");

                entity.Property(e => e.Date)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("date");

                entity.Property(e => e.ItemId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("item_id");

                entity.Property(e => e.Link)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("link");

                entity.Property(e => e.NewCategory)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("new_category");

                entity.Property(e => e.ProductDescription)
                    .IsRequired()
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("product_description");

                entity.Property(e => e.RtlPrice)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("rtl_price");

                entity.Property(e => e.Sku)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("sku");
            });

            modelBuilder.Entity<MkIcr>(entity =>
            {
                entity.HasKey(e => e.IcrId)
                    .HasName("Pk_MkICR_ICR_id");

                entity.ToTable("MkICR");

                entity.HasIndex(e => new { e.MarketId, e.ItemNoId, e.CustSku, e.CustUpc, e.CustAsin }, "Unq_MkICR")
                    .IsUnique();

                entity.Property(e => e.IcrId).HasColumnName("ICR_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.CustAsin)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("CustASIN");

                entity.Property(e => e.CustSku)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("CustSKU");

                entity.Property(e => e.CustUpc)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CustUPC");

                entity.Property(e => e.DiscoDate).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.ItemStatusId).HasColumnName("ItemStatus_id");

                entity.Property(e => e.LastFdsUdate).HasColumnType("datetime");

                entity.Property(e => e.LastModKoT).HasColumnType("datetime");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.LaunchDate).HasColumnType("date");

                entity.Property(e => e.MarketId).HasColumnName("Market_id");

                entity.Property(e => e.MarketUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MarketURL");

                entity.Property(e => e.ReLaunchDate).HasColumnType("date");

                entity.Property(e => e.RealTimeId).HasColumnName("RealTime_id");

                entity.Property(e => e.WayfairCgstockRule).HasColumnName("WayfairCGStockRule");

                entity.HasOne(d => d.AmazonCollection)
                    .WithMany(p => p.MkIcrs)
                    .HasForeignKey(d => d.AmazonCollectionId)
                    .HasConstraintName("fk_MkICR_AmazonCollection");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.MkIcrs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_MkICR_BpmItem");

                entity.HasOne(d => d.ItemStatus)
                    .WithMany(p => p.MkIcrs)
                    .HasForeignKey(d => d.ItemStatusId)
                    .HasConstraintName("Fk_MkICR_ItemStatus");

                entity.HasOne(d => d.Market)
                    .WithMany(p => p.MkIcrs)
                    .HasForeignKey(d => d.MarketId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_MkICR_Market");
            });

            modelBuilder.Entity<MkInvFeedD>(entity =>
            {
                entity.HasKey(e => e.InvFeedDId)
                    .HasName("Pk_MkInvFeedD_InvFeedD_id");

                entity.ToTable("MkInvFeedD");

                entity.HasIndex(e => new { e.InvFeedTId, e.IcrId }, "Unq_MkInvFeedD")
                    .IsUnique();

                entity.Property(e => e.InvFeedDId).HasColumnName("InvFeedD_id");

                entity.Property(e => e.IcrId).HasColumnName("ICR_id");

                entity.Property(e => e.InvFeedTId).HasColumnName("InvFeedT_id");

                entity.HasOne(d => d.Icr)
                    .WithMany(p => p.MkInvFeedDs)
                    .HasForeignKey(d => d.IcrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_MkInvFeedD_MkICR");

                entity.HasOne(d => d.InvFeedT)
                    .WithMany(p => p.MkInvFeedDs)
                    .HasForeignKey(d => d.InvFeedTId)
                    .HasConstraintName("Fk_MkInvFeedD_MkInvFeed");
            });

            modelBuilder.Entity<MkInvFeedT>(entity =>
            {
                entity.HasKey(e => e.InvFeedTId)
                    .HasName("Pk_MkInvFeed_InvFeed_id");

                entity.ToTable("MkInvFeedT");

                entity.Property(e => e.InvFeedTId).HasColumnName("InvFeedT_id");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.EmpAddedId).HasColumnName("EmpAdded_id");

                entity.Property(e => e.EmpCheckId).HasColumnName("EmpCheck_id");

                entity.Property(e => e.EmpSentId).HasColumnName("EmpSent_id");

                entity.Property(e => e.FeedDate).HasColumnType("date");

                entity.Property(e => e.IsFullFeed)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.TimeAdded).HasColumnType("datetime");

                entity.Property(e => e.TimeSent).HasColumnType("datetime");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.MkInvFeedTs)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_MkInvFeed_Customer");

                entity.HasOne(d => d.EmpCheck)
                    .WithMany(p => p.MkInvFeedTEmpChecks)
                    .HasForeignKey(d => d.EmpCheckId)
                    .HasConstraintName("fk_MkInvFeedT_Employee_0");

                entity.HasOne(d => d.EmpSent)
                    .WithMany(p => p.MkInvFeedTEmpSents)
                    .HasForeignKey(d => d.EmpSentId)
                    .HasConstraintName("Fk_MkInvFeedT_Employee");

                entity.HasOne(d => d.InvtFeedsReport)
                    .WithMany(p => p.MkInvFeedTs)
                    .HasForeignKey(d => d.InvtFeedsReportId)
                    .HasConstraintName("fk_MkInvFeedT_InvFeedsReport");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.MkInvFeedTs)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_MkInvFeed_BpmLocation");
            });

            modelBuilder.Entity<MkPayment>(entity =>
            {
                entity.HasKey(e => e.PaymentId)
                    .HasName("Pk_MkPayment_Payment_Id");

                entity.ToTable("MkPayment");

                entity.HasIndex(e => new { e.CustomerId, e.PayNo }, "Idx_MkPayment")
                    .IsUnique();

                entity.Property(e => e.PaymentId).HasColumnName("Payment_Id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.Memo)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.PayDate).HasColumnType("date");

                entity.Property(e => e.PayNo)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.PayTotal)
                    .HasColumnType("money")
                    .HasComment("Invoice - Credit");

                entity.Property(e => e.RemitNo)
                    .HasMaxLength(128)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MsBinScan>(entity =>
            {
                entity.HasKey(e => e.BinScanId)
                    .HasName("Pk_MsBinScan_BinScan_id");

                entity.ToTable("MsBinScan", "wms");

                entity.HasIndex(e => e.BinNoId, "idx_MsBinScan_BinNo_id");

                entity.HasIndex(e => e.InvtCntTId, "idx_MsBinScan_InvtCntT_id");

                entity.Property(e => e.BinScanId).HasColumnName("BinScan_id");

                entity.Property(e => e.BinNoId).HasColumnName("BinNo_id");

                entity.Property(e => e.EmployeeId).HasColumnName("Employee_id");

                entity.Property(e => e.InvtCntTId).HasColumnName("InvtCntT_id");

                entity.Property(e => e.TimeScanned).HasColumnType("datetime");

                entity.HasOne(d => d.BinNo)
                    .WithMany(p => p.MsBinScans)
                    .HasForeignKey(d => d.BinNoId)
                    .HasConstraintName("fk_MsBinScan_MslBinNo");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.MsBinScans)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_MsBinScan_Employee");

                entity.HasOne(d => d.InvtCntT)
                    .WithMany(p => p.MsBinScans)
                    .HasForeignKey(d => d.InvtCntTId)
                    .HasConstraintName("fk_MsBinScan_InvtCntT");
            });

            modelBuilder.Entity<MsInvAdjEntry>(entity =>
            {
                entity.HasKey(e => e.IcAdjId)
                    .HasName("Pk_MsInvAdjEntry_IcAdj_id");

                entity.ToTable("MsInvAdjEntry", "wms");

                entity.Property(e => e.IcAdjId).HasColumnName("IcAdj_id");

                entity.Property(e => e.EmployeeId).HasColumnName("Employee_id");

                entity.Property(e => e.InvAtBinId).HasColumnName("InvAtBin_id");

                entity.Property(e => e.InvTxTypeId).HasColumnName("InvTxType_id");

                entity.Property(e => e.TimeAdjusted).HasColumnType("datetime");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.MsInvAdjEntries)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_MsInvAdjEntry_Employee");

                entity.HasOne(d => d.InvAtBin)
                    .WithMany(p => p.MsInvAdjEntries)
                    .HasForeignKey(d => d.InvAtBinId)
                    .HasConstraintName("Fk_MsInvAdjEntry_MsInvAtBin");

                entity.HasOne(d => d.InvTxType)
                    .WithMany(p => p.MsInvAdjEntries)
                    .HasForeignKey(d => d.InvTxTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_MsInvAdjEntry_InvTxType");
            });

            modelBuilder.Entity<MsInvAtBin>(entity =>
            {
                entity.HasKey(e => e.InvAtBinId)
                    .HasName("Pk_MsBinInventory_BinInv_id");

                entity.ToTable("MsInvAtBin", "wms");

                entity.Property(e => e.InvAtBinId).HasColumnName("InvAtBin_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.BinNoId).HasColumnName("BinNo_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.Note)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.HasOne(d => d.BinNo)
                    .WithMany(p => p.MsInvAtBins)
                    .HasForeignKey(d => d.BinNoId)
                    .HasConstraintName("Fk_MsInvAtBin_MslBinNo");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.MsInvAtBins)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_MsInvAtBin_BpmItem");
            });

            modelBuilder.Entity<MslBinNo>(entity =>
            {
                entity.HasKey(e => e.BinNoId)
                    .HasName("Pk_MslBinNo_BinNo_id");

                entity.ToTable("MslBinNo", "wms");

                entity.HasIndex(e => e.BinNo, "Unq_MslBinNo")
                    .IsUnique();

                entity.Property(e => e.BinNoId).HasColumnName("BinNo_id");

                entity.Property(e => e.BinNo)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.BinNoHr)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("BinNoHR");

                entity.Property(e => e.ColId)
                    .HasColumnName("Col_id")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsUsable).HasDefaultValueSql("((1))");

                entity.Property(e => e.LevelId)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Level_id")
                    .IsFixedLength(true);

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.Note)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.PosId)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Pos_id")
                    .IsFixedLength(true);

                entity.Property(e => e.RowId).HasColumnName("Row_id");

                entity.Property(e => e.ZoneId)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Zone_id")
                    .IsFixedLength(true);

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.MslBinNos)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_MslBinNo_BpmLocation");
            });

            modelBuilder.Entity<NotesAndRule>(entity =>
            {
                entity.HasKey(e => e.NotesAndRulesId);

                entity.Property(e => e.CreatedTime).HasColumnType("datetime");

                entity.Property(e => e.IsActivated).HasColumnName("isActivated");

                entity.Property(e => e.LastModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.NoteRule)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.NotesAndRuleCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_NotesAndRules_Employee_Created");

                entity.HasOne(d => d.LastModifiedByNavigation)
                    .WithMany(p => p.NotesAndRuleLastModifiedByNavigations)
                    .HasForeignKey(d => d.LastModifiedBy)
                    .HasConstraintName("FK_NotesAndRules_Employee_Mod");

                entity.HasOne(d => d.NoteCategoryNavigation)
                    .WithMany(p => p.NotesAndRules)
                    .HasForeignKey(d => d.NoteCategory)
                    .HasConstraintName("FK_NotesAndRules_NotesRulesRmrkCat");
            });

            modelBuilder.Entity<NotesRulesRmrkCat>(entity =>
            {
                entity.HasKey(e => e.NoteRuleRmrkCatId);

                entity.ToTable("NotesRulesRmrkCat");

                entity.Property(e => e.CreatedTime).HasColumnType("datetime");

                entity.Property(e => e.ModifiedTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.RemarkCategory)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.NotesRulesRmrkCatCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_NotesRulesRmrkCat_Employee");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.NotesRulesRmrkCatModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_NotesRulesRmrkCat_Employee1");
            });

            modelBuilder.Entity<NsApplied>(entity =>
            {
                entity.ToTable("NsApplied");

                entity.HasIndex(e => e.NsCreditMemoId, "idx_NsApplied_CreditMemoT_id");

                entity.HasIndex(e => e.NsPaymentId, "idx_NsApplied_Payment_id");

                entity.Property(e => e.NsAppliedId).HasColumnName("NsApplied_id");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.NsCreditMemoId).HasColumnName("NsCreditMemo_id");

                entity.Property(e => e.NsInvoiceId).HasColumnName("NsInvoice_id");

                entity.Property(e => e.NsPaymentId).HasColumnName("NsPayment_id");

                entity.HasOne(d => d.NsCreditMemo)
                    .WithMany(p => p.NsApplieds)
                    .HasPrincipalKey(p => p.NsIntId)
                    .HasForeignKey(d => d.NsCreditMemoId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_NsApplied_NsCreditMemoT");

                entity.HasOne(d => d.NsInvoice)
                    .WithMany(p => p.NsApplieds)
                    .HasPrincipalKey(p => p.NsIntId)
                    .HasForeignKey(d => d.NsInvoiceId)
                    .HasConstraintName("fk_NsApplied_NsInvoiceT");

                entity.HasOne(d => d.NsPayment)
                    .WithMany(p => p.NsApplieds)
                    .HasForeignKey(d => d.NsPaymentId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_NsApplyed_NsPayment");
            });

            modelBuilder.Entity<NsCreditMemoD>(entity =>
            {
                entity.ToTable("NsCreditMemoD");

                entity.HasIndex(e => e.Memo, "idx_NsCreditMemoD_Memo");

                entity.HasIndex(e => e.NsCreditMemoTId, "idx_NsCreditMemoD_NsCreditMemoT_id");

                entity.Property(e => e.NsCreditMemoDId).HasColumnName("NsCreditMemoD_id");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.GlaccountId).HasColumnName("GLAccount_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LineId).HasColumnName("LineID");

                entity.Property(e => e.Memo)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.NsCreditMemoTId).HasColumnName("NsCreditMemoT_id");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.Rate).HasColumnType("money");

                entity.HasOne(d => d.Glaccount)
                    .WithMany(p => p.NsCreditMemoDs)
                    .HasForeignKey(d => d.GlaccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_NsCreditMemoD_GlAccount");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.NsCreditMemoDs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_NsCreditMemoD_BpmItem");

                entity.HasOne(d => d.NsCreditMemoT)
                    .WithMany(p => p.NsCreditMemoDs)
                    .HasForeignKey(d => d.NsCreditMemoTId)
                    .HasConstraintName("fk_NsCreditMemoD_NsCreditMemoT");
            });

            modelBuilder.Entity<NsCreditMemoT>(entity =>
            {
                entity.ToTable("NsCreditMemoT");

                entity.HasIndex(e => e.CreatedFromId, "idx_NsCreditMemoT_CratedFrom_id");

                entity.HasIndex(e => e.DocNo, "idx_NsCreditMemoT_DocNo");

                entity.HasIndex(e => e.NsIntId, "idx_NsCreditMemoT_NsInt_id")
                    .IsUnique();

                entity.HasIndex(e => e.Remittance, "idx_NsCreditMemoT_Remittance");

                entity.Property(e => e.NsCreditMemoTId).HasColumnName("NsCreditMemoT_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.CreatedFromId).HasColumnName("CreatedFrom_id");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DocNo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.GlaccountId).HasColumnName("GLAccount_id");

                entity.Property(e => e.LastModTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Memo)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.Remittance)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId)
                    .HasColumnName("Status_id")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TypeId)
                    .HasColumnName("Type_id")
                    .HasDefaultValueSql("((4))");

                entity.HasOne(d => d.CreatedFrom)
                    .WithMany(p => p.NsCreditMemoTs)
                    .HasPrincipalKey(p => p.NsIntId)
                    .HasForeignKey(d => d.CreatedFromId)
                    .HasConstraintName("fk_NsCreditMemoT_NsInvoiceT");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.NsCreditMemoTs)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_NsCreditMemoT_Customer");

                entity.HasOne(d => d.Glaccount)
                    .WithMany(p => p.NsCreditMemoTs)
                    .HasForeignKey(d => d.GlaccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_NsCreditMemoT_GlAccount");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.NsCreditMemoTs)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_NsCreditMemoT_CmStatus");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.NsCreditMemoTs)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_NsCreditMemoT_NsRecordType");
            });

            modelBuilder.Entity<NsCredited>(entity =>
            {
                entity.ToTable("NsCredited");

                entity.HasIndex(e => e.NsPaymentId, "idx_NsCredited_Payment_id");

                entity.Property(e => e.NsCreditedId).HasColumnName("NsCredited_id");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.NsCreditMemoId).HasColumnName("NsCreditMemo_id");

                entity.Property(e => e.NsInvoiceId).HasColumnName("NsInvoice_id");

                entity.Property(e => e.NsPaymentId).HasColumnName("NsPayment_id");

                entity.HasOne(d => d.NsCreditMemo)
                    .WithMany(p => p.NsCrediteds)
                    .HasPrincipalKey(p => p.NsIntId)
                    .HasForeignKey(d => d.NsCreditMemoId)
                    .HasConstraintName("fk_NsCredited_NsCreditMemoT");

                entity.HasOne(d => d.NsInvoice)
                    .WithMany(p => p.NsCrediteds)
                    .HasPrincipalKey(p => p.NsIntId)
                    .HasForeignKey(d => d.NsInvoiceId)
                    .HasConstraintName("fk_NsCredited_NsInvoiceT");

                entity.HasOne(d => d.NsPayment)
                    .WithMany(p => p.NsCrediteds)
                    .HasForeignKey(d => d.NsPaymentId)
                    .HasConstraintName("fk_NsCredited_NsPayment");
            });

            modelBuilder.Entity<NsCurrency>(entity =>
            {
                entity.ToTable("NsCurrency");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.Symbol)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NsCurrencyRate>(entity =>
            {
                entity.ToTable("NsCurrencyRate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BaseCurrencyId).HasColumnName("BaseCurrency_id");

                entity.Property(e => e.EffectiveDate).HasColumnType("date");

                entity.Property(e => e.FromCurrencyId).HasColumnName("FromCurrency_id");

                entity.HasOne(d => d.BaseCurrency)
                    .WithMany(p => p.NsCurrencyRateBaseCurrencies)
                    .HasForeignKey(d => d.BaseCurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_NsCurrencyRate_NsCurrency");

                entity.HasOne(d => d.FromCurrency)
                    .WithMany(p => p.NsCurrencyRateFromCurrencies)
                    .HasForeignKey(d => d.FromCurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_NsCurrencyRate_NsCurrency_0");
            });

            modelBuilder.Entity<NsCustPn>(entity =>
            {
                entity.HasKey(e => e.CustPnId)
                    .HasName("Pk_NsCustPN_CustPN_id");

                entity.ToTable("NsCustPN");

                entity.HasComment("Customer Part # (like ASIN) table");

                entity.HasIndex(e => new { e.MarketPlace, e.CustAsin, e.ItemNoId, e.MarketId }, "Unq_NsCustPN")
                    .IsUnique();

                entity.Property(e => e.CustPnId).HasColumnName("CustPN_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.Cat3)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Cat3Id).HasColumnName("Cat3_id");

                entity.Property(e => e.CustAsin)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("CustASIN")
                    .HasComment("ASIN");

                entity.Property(e => e.IsActive).HasComment("0: Inactive\\n1: Active");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.MarketId).HasColumnName("Market_id");

                entity.Property(e => e.MarketPlace)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.NsCustPns)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_NsCustPN_BpmItem");

                entity.HasOne(d => d.Market)
                    .WithMany(p => p.NsCustPns)
                    .HasForeignKey(d => d.MarketId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_NsCustPN_Market");
            });

            modelBuilder.Entity<NsDeductType>(entity =>
            {
                entity.HasKey(e => e.DeductTypeId)
                    .HasName("Pk_NsDeductType_DeductType_id");

                entity.ToTable("NsDeductType", "ord");

                entity.Property(e => e.DeductTypeId).HasColumnName("DeductType_id");

                entity.Property(e => e.DeductName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.DeductPercent).HasColumnType("money");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.Property(e => e.StartDate).HasColumnType("date");
            });

            modelBuilder.Entity<NsExpenseCategory>(entity =>
            {
                entity.ToTable("NsExpenseCategory");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("Account_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.NsExpenseCategories)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_NsExpenseCategory_GlAccount");
            });

            modelBuilder.Entity<NsIcr>(entity =>
            {
                entity.HasKey(e => e.IcrId)
                    .HasName("Pk_NsICR_ICR_id");

                entity.ToTable("NsICR");

                entity.HasIndex(e => new { e.NsIntId, e.CustomerId, e.ItemNoId, e.CustSku, e.CustUpc }, "Idx_NsICR")
                    .IsUnique();

                entity.Property(e => e.IcrId).HasColumnName("ICR_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.CustAsin)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("CustASIN")
                    .HasComment("Market ID like ASIN");

                entity.Property(e => e.CustSku)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("CustSKU")
                    .HasComment("Buyer Part No. Or, Customer SKU");

                entity.Property(e => e.CustUpc)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CustUPC");

                entity.Property(e => e.CustomerId)
                    .HasColumnName("Customer_id")
                    .HasComment("Sales Customer");

                entity.Property(e => e.DiscoDate)
                    .HasColumnType("date")
                    .HasComment("Discountinued Date");

                entity.Property(e => e.Gtin)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("GTIN");

                entity.Property(e => e.IsDisco).HasComment("0 for Active, 1 for Discontinued");

                entity.Property(e => e.IsInvFeed).HasComment("0 - No feed. 1 - Yes, feed inventory");

                entity.Property(e => e.IsNew).HasComment("1 for New Item, Less than 1 year after launch.");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastFeedStatusUpdateDate).HasColumnType("datetime");

                entity.Property(e => e.LastModKoE).HasComment("Last Modified Employee in Koala");

                entity.Property(e => e.LastModKoT)
                    .HasColumnType("datetime")
                    .HasComment("Last Modified Time in Koala");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.LaunchDate)
                    .HasColumnType("date")
                    .HasComment("Launch Date");

                entity.Property(e => e.NsIntId)
                    .HasColumnName("NsInt_id")
                    .HasComment("NS Internal ID");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.NsIcrs)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_NsICR_Customer");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.NsIcrs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_NsICR_ItemNo");

                entity.HasOne(d => d.LastFeedStatusUpdateByNavigation)
                    .WithMany(p => p.NsIcrs)
                    .HasForeignKey(d => d.LastFeedStatusUpdateBy)
                    .HasConstraintName("FK_NsICR_Employee");
            });

            modelBuilder.Entity<NsInvDetail>(entity =>
            {
                entity.HasKey(e => e.InvLineId)
                    .HasName("Pk_NsInvDetail_InvLine_id");

                entity.ToTable("NsInvDetail", "ord");

                entity.Property(e => e.InvLineId).HasColumnName("InvLine_id");

                entity.Property(e => e.DiscAmt).HasColumnType("money");

                entity.Property(e => e.FeeAmt).HasColumnType("money");

                entity.Property(e => e.InvoiceId).HasColumnName("Invoice_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.Property(e => e.VatAmt).HasColumnType("money");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.NsInvDetails)
                    .HasForeignKey(d => d.InvoiceId)
                    .HasConstraintName("Fk_NsInvDetail_NsInvoice");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.NsInvDetails)
                    .HasForeignKey(d => d.ItemNoId)
                    .HasConstraintName("Fk_NsInvDetail_KO_Itemno");
            });

            modelBuilder.Entity<NsInvRemit>(entity =>
            {
                entity.HasKey(e => e.InvRemitId)
                    .HasName("Pk_NsInvRemit_InvRemit_id");

                entity.ToTable("NsInvRemit", "ord");

                entity.Property(e => e.InvRemitId).HasColumnName("InvRemit_id");

                entity.Property(e => e.InvDeduct).HasColumnType("money");

                entity.Property(e => e.InvPaid).HasColumnType("money");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.InvoiceId).HasColumnName("Invoice_id");

                entity.Property(e => e.Note)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.RemitId).HasColumnName("Remit_id");

                entity.Property(e => e.RemitNoSub)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.NsInvRemits)
                    .HasForeignKey(d => d.InvoiceId)
                    .HasConstraintName("Fk_NsInvRemit_NsInvoice");

                entity.HasOne(d => d.Remit)
                    .WithMany(p => p.NsInvRemits)
                    .HasForeignKey(d => d.RemitId)
                    .HasConstraintName("Fk_NsInvRemit_NsRemit");
            });

            modelBuilder.Entity<NsInvoice>(entity =>
            {
                entity.HasKey(e => e.InvoiceId)
                    .HasName("Pk_NsInvoice_Invoice_id");

                entity.ToTable("NsInvoice", "ord");

                entity.Property(e => e.InvoiceId).HasColumnName("Invoice_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.DueDate).HasColumnType("date");

                entity.Property(e => e.InvBalance).HasColumnType("money");

                entity.Property(e => e.InvDate).HasColumnType("datetime");

                entity.Property(e => e.InvGross).HasColumnType("money");

                entity.Property(e => e.InvNet).HasColumnType("money");

                entity.Property(e => e.InvNo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.OrderId).HasColumnName("Order_id");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.NsInvoices)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("Fk_NsInvoice_NsOrder");
            });

            modelBuilder.Entity<NsInvoiceD>(entity =>
            {
                entity.ToTable("NsInvoiceD");

                entity.HasIndex(e => e.Memo, "idx_NsInvoiceD_Memo");

                entity.HasIndex(e => e.NsInvoiceTId, "idx_NsInvoiceD_NsInvoiceT_id");

                entity.Property(e => e.NsInvoiceDId).HasColumnName("NsInvoiceD_id");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.GlaccountId).HasColumnName("GLAccount_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LineId).HasColumnName("LineID");

                entity.Property(e => e.Memo)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.NsInvoiceTId).HasColumnName("NsInvoiceT_id");

                entity.Property(e => e.Rate).HasColumnType("money");

                entity.HasOne(d => d.Glaccount)
                    .WithMany(p => p.NsInvoiceDs)
                    .HasForeignKey(d => d.GlaccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_NsInvoiceD_GlAccount");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.NsInvoiceDs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_NsInvoiceD_BpmItem");

                entity.HasOne(d => d.NsInvoiceT)
                    .WithMany(p => p.NsInvoiceDs)
                    .HasForeignKey(d => d.NsInvoiceTId)
                    .HasConstraintName("fk_NsInvoiceD_NsInvoiceT");
            });

            modelBuilder.Entity<NsInvoiceT>(entity =>
            {
                entity.ToTable("NsInvoiceT");

                entity.HasIndex(e => e.CreatedFromId, "idx_NsInvoiceT_CratedFrom_id");

                entity.HasIndex(e => e.DocNo, "idx_NsInvoiceT_DocNo");

                entity.HasIndex(e => e.NsIntId, "idx_NsInvoiceT_NsInt_id")
                    .IsUnique();

                entity.HasIndex(e => e.Remittance, "idx_NsInvoiceT_Remittance");

                entity.Property(e => e.NsInvoiceTId).HasColumnName("NsInvoiceT_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.AmountPaid).HasColumnType("money");

                entity.Property(e => e.AmountRemaining).HasColumnType("money");

                entity.Property(e => e.CreatedFromId).HasColumnName("CreatedFrom_id");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DocNo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.DueDate).HasColumnType("date");

                entity.Property(e => e.GlaccountId).HasColumnName("GLAccount_id");

                entity.Property(e => e.LastModTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Memo)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.Remittance)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId)
                    .HasColumnName("Status_id")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TypeId)
                    .HasColumnName("Type_id")
                    .HasDefaultValueSql("((3))");

                entity.HasOne(d => d.CreatedFrom)
                    .WithMany(p => p.NsInvoiceTs)
                    .HasForeignKey(d => d.CreatedFromId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_NsInvoiceT_SoT");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.NsInvoiceTs)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_NsInvoiceT_Customer");

                entity.HasOne(d => d.Glaccount)
                    .WithMany(p => p.NsInvoiceTs)
                    .HasForeignKey(d => d.GlaccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_NsInvoiceT_GlAccount");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.NsInvoiceTs)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_NsInvoiceT_InvStatus");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.NsInvoiceTs)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_NsInvoiceT_NsRecordType");
            });

            modelBuilder.Entity<NsOrder>(entity =>
            {
                entity.HasKey(e => e.OrderId)
                    .HasName("Pk_NsOrder_Order_id");

                entity.ToTable("NsOrder", "ord");

                entity.Property(e => e.OrderId).HasColumnName("Order_id");

                entity.Property(e => e.Address1)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Address3)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ExpShipDate).HasColumnType("date");

                entity.Property(e => e.FullName)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.IoNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.LastModDate).HasColumnType("datetime");

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.OrderDate).HasColumnType("date");

                entity.Property(e => e.PhoneNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.PoNo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToAfcId).HasColumnName("ShipToAFC_id");

                entity.Property(e => e.ShipWindowEnd).HasColumnType("date");

                entity.Property(e => e.ShipWindowStart).HasColumnType("date");

                entity.Property(e => e.SoNo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Zip)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ZIP");

                entity.HasOne(d => d.MarketPlace)
                    .WithMany(p => p.NsOrders)
                    .HasForeignKey(d => d.MarketPlaceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_NsOrder_KO_MarketPlace");

                entity.HasOne(d => d.ShipToAfc)
                    .WithMany(p => p.NsOrders)
                    .HasForeignKey(d => d.ShipToAfcId)
                    .HasConstraintName("Fk_NsOrder_AdAFCID");
            });

            modelBuilder.Entity<NsOrderDetail>(entity =>
            {
                entity.HasKey(e => e.OrderLineId)
                    .HasName("Pk_NsOrderDetail_OrderLine_id");

                entity.ToTable("NsOrderDetail", "ord");

                entity.Property(e => e.OrderLineId).HasColumnName("OrderLine_id");

                entity.Property(e => e.ActShipDate).HasColumnType("date");

                entity.Property(e => e.ApplyDbst).HasColumnName("ApplyDBST");

                entity.Property(e => e.CustSku)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("CustSKU");

                entity.Property(e => e.DiscAmt).HasColumnType("money");

                entity.Property(e => e.DiscCode)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ExpShipDate).HasColumnType("date");

                entity.Property(e => e.FeeAmt).HasColumnType("money");

                entity.Property(e => e.ItemCat1)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCat2)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCat3)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.Note)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.OrderId).HasColumnName("Order_id");

                entity.Property(e => e.OrderStatusId).HasColumnName("OrderStatus_id");

                entity.Property(e => e.ShipAmt).HasColumnType("money");

                entity.Property(e => e.ShipFromHdId).HasColumnName("ShipFromHd_id");

                entity.Property(e => e.ShipFromWhId).HasColumnName("ShipFromWh_id");

                entity.Property(e => e.ShipViaId).HasColumnName("ShipVia_id");

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.Property(e => e.VatAmt).HasColumnType("money");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.NsOrderDetails)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_NsOrderDetail_KO_Itemno");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.NsOrderDetails)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("Fk_NsOrderDetail_NsOrder");

                entity.HasOne(d => d.ShipFromWh)
                    .WithMany(p => p.NsOrderDetails)
                    .HasForeignKey(d => d.ShipFromWhId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_NsOrderDetail_KO_Location");

                entity.HasOne(d => d.ShipVia)
                    .WithMany(p => p.NsOrderDetails)
                    .HasForeignKey(d => d.ShipViaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_NsOrderDetail_ShipVia");
            });

            modelBuilder.Entity<NsPayment>(entity =>
            {
                entity.ToTable("NsPayment");

                entity.HasIndex(e => e.DocNo, "idx_NsPayment_DocNo");

                entity.HasIndex(e => e.NsIntId, "idx_NsPayment_NsInt_id");

                entity.HasIndex(e => e.Remittance, "idx_NsPayment_Remittance");

                entity.Property(e => e.NsPaymentId).HasColumnName("NsPayment_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DocNo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.LastModTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Memo)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.RemitId).HasColumnName("Remit_id");

                entity.Property(e => e.Remittance)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.NsPayments)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_NsPayment_Customer");

                entity.HasOne(d => d.Remit)
                    .WithMany(p => p.NsPayments)
                    .HasForeignKey(d => d.RemitId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_NsPayment_SalesRemit");
            });

            modelBuilder.Entity<NsRecordType>(entity =>
            {
                entity.HasKey(e => e.TypeId)
                    .HasName("pk_NsRecordType");

                entity.ToTable("NsRecordType");

                entity.Property(e => e.TypeId).HasColumnName("Type_id");

                entity.Property(e => e.NsType)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NsRemit>(entity =>
            {
                entity.HasKey(e => e.RemitId)
                    .HasName("Pk_NsRemit_RemitId");

                entity.ToTable("NsRemit", "ord");

                entity.HasIndex(e => new { e.MarketPlaceId, e.RemitNo }, "Idx_NsRemit")
                    .IsUnique();

                entity.Property(e => e.RemitId).HasColumnName("Remit_Id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.IsImported).HasDefaultValueSql("((0))");

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Note)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.RemitDate).HasColumnType("date");

                entity.Property(e => e.RemitNo)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.RemitTotal).HasColumnType("money");

                entity.HasOne(d => d.MarketPlace)
                    .WithMany(p => p.NsRemits)
                    .HasForeignKey(d => d.MarketPlaceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_NsRemit_KO_MarketPlace");
            });

            modelBuilder.Entity<NsRemitDeduct>(entity =>
            {
                entity.HasKey(e => e.RemitDeductId)
                    .HasName("Pk_NsRemitDeduct_RemitDeduct_id");

                entity.ToTable("NsRemitDeduct", "ord");

                entity.Property(e => e.RemitDeductId).HasColumnName("RemitDeduct_id");

                entity.Property(e => e.AmtDeduct).HasColumnType("money");

                entity.Property(e => e.AmtTotal).HasColumnType("money");

                entity.Property(e => e.DeductNo)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.DeductTypeId).HasColumnName("DeductType_id");

                entity.Property(e => e.IsClosed).HasDefaultValueSql("((0))");

                entity.Property(e => e.RemitId).HasColumnName("Remit_id");

                entity.HasOne(d => d.DeductType)
                    .WithMany(p => p.NsRemitDeducts)
                    .HasForeignKey(d => d.DeductTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_NsRemitDeduct_NsDeductType");

                entity.HasOne(d => d.Remit)
                    .WithMany(p => p.NsRemitDeducts)
                    .HasForeignKey(d => d.RemitId)
                    .HasConstraintName("Fk_NsRemitDeduct_NsRemit");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.ToTable("Order", "ord");

                entity.HasIndex(e => new { e.CustomerPonumber, e.MarketPlaceId }, "UNQ_PONumber_MarketPlaceId")
                    .IsUnique();

                entity.Property(e => e.OrderId).HasColumnName("Order_id");

                entity.Property(e => e.AddedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CustomerIonumber)
                    .HasMaxLength(50)
                    .HasColumnName("Customer_IONumber");

                entity.Property(e => e.CustomerPonumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Customer_PONumber");

                entity.Property(e => e.EndCustomerId).HasColumnName("EndCustomer_id");

                entity.Property(e => e.LastModDateTime).HasColumnType("datetime");

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.SageInvNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SageSoNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScacCode).HasMaxLength(50);

                entity.Property(e => e.ShipAccount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShipViaId).HasColumnName("ShipVia_id");

                entity.Property(e => e.ShipWindowEnd).HasColumnType("datetime");

                entity.Property(e => e.ShipWindowStart).HasColumnType("datetime");

                entity.Property(e => e.TimeAccepted).HasColumnType("datetime");

                entity.Property(e => e.TimeInvoiced).HasColumnType("datetime");

                entity.Property(e => e.TimeKoCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TimeSoCreated).HasColumnType("datetime");

                entity.HasOne(d => d.EndCustomer)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.EndCustomerId)
                    .HasConstraintName("FK_Order_EndCustomer");

                entity.HasOne(d => d.MarketPlace)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.MarketPlaceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_Order");

                entity.HasOne(d => d.ShipVia)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.ShipViaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_ShipVia");
            });

            modelBuilder.Entity<OrderBomPrice>(entity =>
            {
                entity.HasKey(e => e.OrderBomId)
                    .HasName("Pk_OrderBomPrice_OrderBom_id");

                entity.ToTable("OrderBomPrice", "ord");

                entity.Property(e => e.OrderBomId).HasColumnName("OrderBom_id");

                entity.Property(e => e.ChiItemId).HasColumnName("ChiItem_id");

                entity.Property(e => e.ChiItemPrice).HasColumnType("money");

                entity.Property(e => e.OrderLineId).HasColumnName("OrderLine_id");

                entity.HasOne(d => d.OrderLine)
                    .WithMany(p => p.OrderBomPrices)
                    .HasForeignKey(d => d.OrderLineId)
                    .HasConstraintName("Fk_OrderBomPrice_OrderDetail");
            });

            modelBuilder.Entity<OrderDetail>(entity =>
            {
                entity.HasKey(e => e.OrderLineId)
                    .HasName("PK_KO_OrderDetail");

                entity.ToTable("OrderDetail", "ord");

                entity.Property(e => e.OrderLineId).HasColumnName("OrderLine_id");

                entity.Property(e => e.AddedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CustSku)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("custSKU");

                entity.Property(e => e.CustomerIolnumber)
                    .HasMaxLength(50)
                    .HasColumnName("Customer_IOLNumber");

                entity.Property(e => e.ItemNoId)
                    .HasColumnName("ItemNo_id")
                    .HasDefaultValueSql("((819))");

                entity.Property(e => e.ItemOriginalId).HasColumnName("ItemOriginal_id");

                entity.Property(e => e.LastModDateTime).HasColumnType("datetime");

                entity.Property(e => e.MasterTrackNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiscFeeAmt).HasColumnType("money");

                entity.Property(e => e.Note).HasMaxLength(600);

                entity.Property(e => e.OrderId).HasColumnName("Order_id");

                entity.Property(e => e.OrderStatusId)
                    .HasColumnName("OrderStatus_id")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PriceAmt).HasColumnType("money");

                entity.Property(e => e.QtyAccepted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ShipFromOriginalId).HasColumnName("ShipFromOriginal_id");

                entity.Property(e => e.ShipFromWhouseId)
                    .HasColumnName("ShipFromWhouse_id")
                    .HasDefaultValueSql("((19))");

                entity.Property(e => e.TaxAmt).HasColumnType("money");

                entity.Property(e => e.Time753Sent).HasColumnType("datetime");

                entity.Property(e => e.Time754Rcvd).HasColumnType("datetime");

                entity.Property(e => e.Time810Sent).HasColumnType("datetime");

                entity.Property(e => e.Time855Sent).HasColumnType("datetime");

                entity.Property(e => e.Time856Sent).HasColumnType("datetime");

                entity.Property(e => e.Time865Sent).HasColumnType("datetime");

                entity.Property(e => e.Time940Sent).HasColumnType("datetime");

                entity.Property(e => e.TimeAccept).HasColumnType("datetime");

                entity.Property(e => e.TimeCanceled).HasColumnType("datetime");

                entity.Property(e => e.TimeCarrierScan).HasColumnType("datetime");

                entity.Property(e => e.TimeExpectToShip).HasColumnType("datetime");

                entity.Property(e => e.TimeRemitReceived).HasColumnType("datetime");

                entity.Property(e => e.TimeShipArrived).HasColumnType("datetime");

                entity.Property(e => e.TimeShipRequested).HasColumnType("datetime");

                entity.Property(e => e.TimeShipped).HasColumnType("datetime");

                entity.Property(e => e.TimeStaged).HasColumnType("datetime");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetail_KO_Itemno");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("Order_OrderDetail_CASCADE");

                entity.HasOne(d => d.OrderStatus)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.OrderStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_OrderDetail_0");

                entity.HasOne(d => d.ShipFromWhouse)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.ShipFromWhouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetail_KO_Location");
            });

            modelBuilder.Entity<OrderError>(entity =>
            {
                entity.ToTable("OrderError", "ord");

                entity.Property(e => e.OrderErrorId).HasColumnName("OrderError_id");

                entity.Property(e => e.CustSku)
                    .HasMaxLength(50)
                    .HasColumnName("CustSKU");

                entity.Property(e => e.CustomerPonumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Customer_PONumber");

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.Property(e => e.Note).HasMaxLength(100);

                entity.Property(e => e.Zip)
                    .HasMaxLength(50)
                    .HasColumnName("ZIP");
            });

            modelBuilder.Entity<OsitemConversion>(entity =>
            {
                entity.HasKey(e => e.OsSkuId);

                entity.ToTable("OSItemConversion");

                entity.Property(e => e.OsSkuId).HasColumnName("os_SKU_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.OsSkuname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Os_SKUname");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.OsitemConversions)
                    .HasForeignKey(d => d.ItemNoId)
                    .HasConstraintName("FK_OSItemConversion_KO_Itemno");
            });

            modelBuilder.Entity<OverallStatusType>(entity =>
            {
                entity.HasKey(e => e.OverallStatusId)
                    .HasName("pk_OverallStatusType");

                entity.ToTable("OverallStatusType");

                entity.Property(e => e.OverallStatusId).HasColumnName("OverallStatus_id");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PalletType>(entity =>
            {
                entity.ToTable("PalletType");

                entity.Property(e => e.PalletTypeId).HasColumnName("PalletType_id");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.PalType)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasComment("Standard,Long");
            });

            modelBuilder.Entity<PalletType1>(entity =>
            {
                entity.HasKey(e => e.PalletTypeId)
                    .HasName("Pk_PalletType_PalletType_id");

                entity.ToTable("PalletType", "ord");

                entity.Property(e => e.PalletTypeId).HasColumnName("PalletType_id");

                entity.Property(e => e.LengthIn)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("LengthIN");

                entity.Property(e => e.MaxHeightIn)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("MaxHeightIN");

                entity.Property(e => e.MaxVolumeCf)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("MaxVolumeCF");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.WeightLb)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("WeightLB");

                entity.Property(e => e.WidthIn)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("WidthIN");
            });

            modelBuilder.Entity<PhysCountMsl>(entity =>
            {
                entity.HasKey(e => e.PhysCountId)
                    .HasName("Pk_PhysCountMSL_PhysCount_id");

                entity.ToTable("PhysCountMSL", "wms");

                entity.Property(e => e.PhysCountId).HasColumnName("PhysCount_id");

                entity.Property(e => e.BinNoId).HasColumnName("BinNo_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.Note)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Time1)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Time2).HasColumnType("datetime");

                entity.HasOne(d => d.BinNo)
                    .WithMany(p => p.PhysCountMsls)
                    .HasForeignKey(d => d.BinNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_PhysCountMSL_MslBinNo");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.PhysCountMsls)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_PhysCountMSL_KO_Itemno");
            });

            modelBuilder.Entity<PickPlan>(entity =>
            {
                entity.ToTable("PickPlan", "ord");

                entity.HasIndex(e => e.PtName, "Unq_PickPlan")
                    .IsUnique();

                entity.Property(e => e.PickPlanId).HasColumnName("PickPlan_id");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.PtName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PickTask>(entity =>
            {
                entity.HasKey(e => e.NsPtNo)
                    .HasName("Pk_PickTas_NsPtNo");

                entity.ToTable("PickTask", "ord");

                entity.Property(e => e.NsPtNo).ValueGeneratedNever();

                entity.Property(e => e.EmpAsgnedId).HasColumnName("EmpAsgned_id");

                entity.Property(e => e.EmpPickedId).HasColumnName("EmpPicked_id");

                entity.Property(e => e.PickPlanId).HasColumnName("PickPlan_id");

                entity.Property(e => e.PtStatusId).HasColumnName("PtStatus_id");

                entity.Property(e => e.StagingBinId).HasColumnName("StagingBin_id");

                entity.Property(e => e.TimeCompleted).HasColumnType("datetime");

                entity.Property(e => e.TimePlanned).HasColumnType("datetime");

                entity.Property(e => e.ToteNo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.HasOne(d => d.EmpAsgned)
                    .WithMany(p => p.PickTaskEmpAsgneds)
                    .HasForeignKey(d => d.EmpAsgnedId)
                    .HasConstraintName("Fk_PickTas_Employee");

                entity.HasOne(d => d.EmpPicked)
                    .WithMany(p => p.PickTaskEmpPickeds)
                    .HasForeignKey(d => d.EmpPickedId)
                    .HasConstraintName("Fk_PickTas_Employee_0");

                entity.HasOne(d => d.PickPlan)
                    .WithMany(p => p.PickTasks)
                    .HasForeignKey(d => d.PickPlanId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_PickTas_PickPlan");

                entity.HasOne(d => d.PtStatus)
                    .WithMany(p => p.PickTasks)
                    .HasForeignKey(d => d.PtStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_PickTas_PtStatus");

                entity.HasOne(d => d.StagingBin)
                    .WithMany(p => p.PickTasks)
                    .HasForeignKey(d => d.StagingBinId)
                    .HasConstraintName("Fk_PickTas_MslBinNo");
            });

            modelBuilder.Entity<PoBillD>(entity =>
            {
                entity.ToTable("PoBillD");

                entity.Property(e => e.PoBillDId).HasColumnName("PoBillD_id");

                entity.Property(e => e.AccountId).HasColumnName("Account_id");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.Memo).HasMaxLength(255);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.PoBillTId).HasColumnName("PoBillT_id");

                entity.Property(e => e.PoDId).HasColumnName("PoD_id");

                entity.Property(e => e.Rate).HasColumnType("money");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.PoBillDs)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("fk_PoBillD_GlAccount");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.PoBillDs)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("fk_PoBillD_BpmLocation");

                entity.HasOne(d => d.PoBillT)
                    .WithMany(p => p.PoBillDs)
                    .HasForeignKey(d => d.PoBillTId)
                    .HasConstraintName("Fk_PoBillD_PoBillT");

                entity.HasOne(d => d.PoD)
                    .WithMany(p => p.PoBillDs)
                    .HasForeignKey(d => d.PoDId)
                    .HasConstraintName("Fk_PoBillD_PoD");
            });

            modelBuilder.Entity<PoBillStatus>(entity =>
            {
                entity.ToTable("PoBillStatus");

                entity.Property(e => e.PoBillStatusId).HasColumnName("PoBillStatus_id");

                entity.Property(e => e.NsStatus)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PoBillT>(entity =>
            {
                entity.ToTable("PoBillT");

                entity.HasIndex(e => e.RefNo, "idx_PoBillT");

                entity.HasIndex(e => e.PoTId, "idx_PoBillT_0");

                entity.HasIndex(e => e.BolFeeTId, "idx_PoBillT_1");

                entity.HasIndex(e => e.BolEntryId, "idx_PoBillT_2");

                entity.Property(e => e.PoBillTId).HasColumnName("PoBillT_id");

                entity.Property(e => e.AddedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BillDate).HasColumnType("date");

                entity.Property(e => e.BolEntryId).HasColumnName("BolEntry_id");

                entity.Property(e => e.BolFeeTId).HasColumnName("BolFeeT_id");

                entity.Property(e => e.DueDate).HasColumnType("date");

                entity.Property(e => e.ExternalId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("External_id");

                entity.Property(e => e.IsInbill).HasColumnName("IsINBill");

                entity.Property(e => e.LastModDateTime).HasColumnType("datetime");

                entity.Property(e => e.Memo).HasMaxLength(256);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.PoTId).HasColumnName("PoT_id");

                entity.Property(e => e.RefNo).HasMaxLength(64);

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId).HasColumnName("Status_id");

                entity.Property(e => e.TransNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.VendorId).HasColumnName("Vendor_id");

                entity.HasOne(d => d.BolEntry)
                    .WithMany(p => p.PoBillTs)
                    .HasForeignKey(d => d.BolEntryId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_PoBillT_BolEntry");

                entity.HasOne(d => d.BolFeeT)
                    .WithMany(p => p.PoBillTs)
                    .HasForeignKey(d => d.BolFeeTId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_PoBillT_BolFeeT");

                entity.HasOne(d => d.PoT)
                    .WithMany(p => p.PoBillTs)
                    .HasForeignKey(d => d.PoTId)
                    .HasConstraintName("Fk_PoBillT_PoT");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.PoBillTs)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_PoBillT_PoBillStatus");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.PoBillTs)
                    .HasForeignKey(d => d.VendorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_PoBillT_Vendor");
            });

            modelBuilder.Entity<PoBol>(entity =>
            {
                entity.ToTable("PoBol");

                entity.HasIndex(e => new { e.BoLno, e.NsIntId }, "Unq_PoBol")
                    .IsUnique();

                entity.HasIndex(e => e.BoLno, "idx_PoBol");

                entity.Property(e => e.PoBolId).HasColumnName("PoBol_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.BoLno)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("BoLNo")
                    .HasComment("Master BOL");

                entity.Property(e => e.BolEta)
                    .HasColumnType("date")
                    .HasColumnName("BolETA");

                entity.Property(e => e.BolEtd)
                    .HasColumnType("date")
                    .HasColumnName("BolETD");

                entity.Property(e => e.ForwarderId).HasColumnName("Forwarder_id");

                entity.Property(e => e.LastModKoT).HasColumnType("datetime");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.PortDestId).HasColumnName("PortDest_id");

                entity.Property(e => e.PortOriginId).HasColumnName("PortOrigin_id");

                entity.Property(e => e.ShipLineId).HasColumnName("ShipLine_id");

                entity.Property(e => e.Source)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Voyage)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.HasOne(d => d.Forwarder)
                    .WithMany(p => p.PoBols)
                    .HasForeignKey(d => d.ForwarderId)
                    .HasConstraintName("Fk_PoBol_Forwarder");

                entity.HasOne(d => d.PortDest)
                    .WithMany(p => p.PoBols)
                    .HasForeignKey(d => d.PortDestId)
                    .HasConstraintName("Fk_PoBol_PortDest");

                entity.HasOne(d => d.PortOrigin)
                    .WithMany(p => p.PoBols)
                    .HasForeignKey(d => d.PortOriginId)
                    .HasConstraintName("Fk_PoBol_PortOrigin");

                entity.HasOne(d => d.ShipLine)
                    .WithMany(p => p.PoBols)
                    .HasForeignKey(d => d.ShipLineId)
                    .HasConstraintName("Fk_PoBol_ShipLine");
            });

            modelBuilder.Entity<PoChange>(entity =>
            {
                entity.ToTable("PoChange");

                entity.Property(e => e.PoChangeId).HasColumnName("PoChange_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.ChgReasonId).HasColumnName("ChgReason_id");

                entity.Property(e => e.LastModTime)
                    .HasColumnType("datetime")
                    .HasColumnName("LastModTIme");

                entity.Property(e => e.NewEtd)
                    .HasColumnType("date")
                    .HasColumnName("New_ETD");

                entity.Property(e => e.NewEuld)
                    .HasColumnType("date")
                    .HasColumnName("New_EULD");

                entity.Property(e => e.Note)
                    .HasMaxLength(600)
                    .IsUnicode(false)
                    .HasComment("Requester Note");

                entity.Property(e => e.OriginalEtd)
                    .HasColumnType("date")
                    .HasColumnName("Original_ETD");

                entity.Property(e => e.OriginalEuld)
                    .HasColumnType("date")
                    .HasColumnName("Original_EULD");

                entity.Property(e => e.PoTId).HasColumnName("PoT_id");

                entity.Property(e => e.PocStatusId).HasColumnName("PocStatus_id");

                entity.Property(e => e.PocTypeId).HasColumnName("PocType_id");

                entity.Property(e => e.RequestTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Time");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_id");

                entity.Property(e => e.ScmNote)
                    .HasMaxLength(600)
                    .IsUnicode(false)
                    .HasComment("SCM Note");

                entity.HasOne(d => d.ChgReason)
                    .WithMany(p => p.PoChanges)
                    .HasForeignKey(d => d.ChgReasonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_PoChange_PocReason");

                entity.HasOne(d => d.PoT)
                    .WithMany(p => p.PoChanges)
                    .HasForeignKey(d => d.PoTId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_PoChgRec_PoT");

                entity.HasOne(d => d.PocStatus)
                    .WithMany(p => p.PoChanges)
                    .HasForeignKey(d => d.PocStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_PoChgRec_PoChgStat");

                entity.HasOne(d => d.PocType)
                    .WithMany(p => p.PoChanges)
                    .HasForeignKey(d => d.PocTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_PoChgRec_PoChgType");

                entity.HasOne(d => d.Requester)
                    .WithMany(p => p.PoChanges)
                    .HasForeignKey(d => d.RequesterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_PoChgRec_Employee");
            });

            modelBuilder.Entity<PoChanged>(entity =>
            {
                entity.ToTable("PoChanged");

                entity.Property(e => e.PoChangedId).HasColumnName("PoChanged_id");

                entity.Property(e => e.ChangedTime).HasColumnType("datetime");

                entity.Property(e => e.EmployeeId).HasColumnName("Employee_id");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.NewValue)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.OldValue)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.PoBolId).HasColumnName("PoBol_id");

                entity.Property(e => e.PoTId).HasColumnName("PoT_id");

                entity.HasOne(d => d.PoBol)
                    .WithMany(p => p.PoChangeds)
                    .HasForeignKey(d => d.PoBolId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("Fk_PoChanged_PoBol");

                entity.HasOne(d => d.PoT)
                    .WithMany(p => p.PoChangeds)
                    .HasForeignKey(d => d.PoTId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("Fk_PoChanged_PoT");
            });

            modelBuilder.Entity<PoCmD>(entity =>
            {
                entity.ToTable("PoCmD");

                entity.Property(e => e.PoCmDId).HasColumnName("PoCmD_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.LineTotal).HasColumnType("money");

                entity.Property(e => e.MemoLine)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PoCmTId).HasColumnName("PoCmT_id");

                entity.Property(e => e.PoDate).HasColumnType("date");

                entity.Property(e => e.UnitCost).HasColumnType("money");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.PoCmDs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_PoCmD_BpmItem");

                entity.HasOne(d => d.PoCmT)
                    .WithMany(p => p.PoCmDs)
                    .HasForeignKey(d => d.PoCmTId)
                    .HasConstraintName("Fk_PoCmD_PoCmT");
            });

            modelBuilder.Entity<PoCmT>(entity =>
            {
                entity.ToTable("PoCmT");

                entity.Property(e => e.PoCmTId).HasColumnName("PoCmT_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.CmDate).HasColumnType("date");

                entity.Property(e => e.CmNo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.CmStatusId).HasColumnName("CmStatus_id");

                entity.Property(e => e.CmTotal).HasColumnType("money");

                entity.Property(e => e.DocFrom)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.MemoMain)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PoNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.VendorId).HasColumnName("Vendor_id");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.PoCmTs)
                    .HasForeignKey(d => d.VendorId)
                    .HasConstraintName("Fk_PoCmT_Vendor");
            });

            modelBuilder.Entity<PoD>(entity =>
            {
                entity.ToTable("PoD");

                entity.HasIndex(e => new { e.PoTId, e.PoDlineNo, e.NsIntId, e.NsLineKey }, "Unq_PoD")
                    .IsUnique();

                entity.HasIndex(e => e.PrePoId, "idx_PoD_PrePO_id");

                entity.Property(e => e.PoDId).HasColumnName("PoD_id");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.InternalPoNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.PoDlineNo).HasColumnName("PoDLineNo");

                entity.Property(e => e.PoStatusId).HasColumnName("PoStatus_id");

                entity.Property(e => e.PoTId).HasColumnName("PoT_id");

                entity.Property(e => e.PrePoId).HasColumnName("PrePO_id");

                entity.Property(e => e.SoDId).HasColumnName("SoD_id");

                entity.Property(e => e.SpInstruction)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.UnitCost).HasColumnType("money");

                entity.Property(e => e.VirtualRcvDate).HasColumnType("date");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.PoDs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_PoD_BpmItem");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.PoDs)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_PoD_BpmLocation");

                entity.HasOne(d => d.PoStatus)
                    .WithMany(p => p.PoDs)
                    .HasForeignKey(d => d.PoStatusId)
                    .HasConstraintName("fk_PoD_PoStatus");

                entity.HasOne(d => d.PoT)
                    .WithMany(p => p.PoDs)
                    .HasForeignKey(d => d.PoTId)
                    .HasConstraintName("Fk_PoD_PoT");

                entity.HasOne(d => d.PrePo)
                    .WithMany(p => p.PoDs)
                    .HasForeignKey(d => d.PrePoId)
                    .HasConstraintName("fk_PoD_PrePO");

                entity.HasOne(d => d.SoD)
                    .WithMany(p => p.PoDs)
                    .HasForeignKey(d => d.SoDId)
                    .HasConstraintName("Fk_PoD_SoD");
            });

            modelBuilder.Entity<PoDCont>(entity =>
            {
                entity.ToTable("PoD_Cont");

                entity.HasIndex(e => new { e.PoDId, e.ContainerId, e.QtyContExp }, "Unq_PoD_Cont")
                    .IsUnique();

                entity.HasIndex(e => e.ContainerId, "idx_PoD_Cont");

                entity.HasIndex(e => e.PoDId, "idx_PoD_Cont_0");

                entity.Property(e => e.PoDContId).HasColumnName("PoD_Cont_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.ContainerId).HasColumnName("Container_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.NsLineId).HasColumnName("NsLine_id");

                entity.Property(e => e.PoDId).HasColumnName("PoD_id");

                entity.HasOne(d => d.Container)
                    .WithMany(p => p.PoDConts)
                    .HasForeignKey(d => d.ContainerId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("Fk_PoD_Cont_Container");

                entity.HasOne(d => d.PoD)
                    .WithMany(p => p.PoDConts)
                    .HasForeignKey(d => d.PoDId)
                    .HasConstraintName("Fk_PoD_Cont_PoD");
            });

            modelBuilder.Entity<PoEtaEstimate>(entity =>
            {
                entity.HasKey(e => e.EtaEstId)
                    .HasName("Pk_PoEtaEstimate_EtaEst_id");

                entity.ToTable("PoEtaEstimate");

                entity.HasIndex(e => new { e.PortOriginId, e.PortDestId }, "Unq_PoEtaEstimate")
                    .IsUnique();

                entity.Property(e => e.EtaEstId).HasColumnName("EtaEst_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.LastModKoT).HasColumnType("datetime");

                entity.Property(e => e.PortDestId).HasColumnName("PortDest_id");

                entity.Property(e => e.PortOriginId).HasColumnName("PortOrigin_id");

                entity.HasOne(d => d.PortDest)
                    .WithMany(p => p.PoEtaEstimates)
                    .HasForeignKey(d => d.PortDestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_PoEtaEstimate_PortDest");

                entity.HasOne(d => d.PortOrigin)
                    .WithMany(p => p.PoEtaEstimates)
                    .HasForeignKey(d => d.PortOriginId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_PoEtaEstimate_PortOrigin");
            });

            modelBuilder.Entity<PoOwnershipD>(entity =>
            {
                entity.ToTable("PoOwnershipD");

                entity.HasIndex(e => e.PoDId, "idx_PoOwnershipD_PoD_id");

                entity.Property(e => e.PoOwnershipDId).HasColumnName("PoOwnershipD_id");

                entity.Property(e => e.LineTotal).HasColumnType("money");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.PoDId).HasColumnName("PoD_id");

                entity.Property(e => e.PoOwnershipTId).HasColumnName("PoOwnershipT_id");

                entity.Property(e => e.Rate).HasColumnType("money");

                entity.HasOne(d => d.PoD)
                    .WithMany(p => p.PoOwnershipDs)
                    .HasForeignKey(d => d.PoDId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_PoOwnershipD_PoD");

                entity.HasOne(d => d.PoOwnershipT)
                    .WithMany(p => p.PoOwnershipDs)
                    .HasForeignKey(d => d.PoOwnershipTId)
                    .HasConstraintName("fk_PoOwnershipD_PoOwnershipT");
            });

            modelBuilder.Entity<PoOwnershipT>(entity =>
            {
                entity.ToTable("PoOwnershipT");

                entity.Property(e => e.PoOwnershipTId).HasColumnName("PoOwnershipT_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.ContainerId).HasColumnName("Container_id");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.PoTId).HasColumnName("PoT_id");

                entity.HasOne(d => d.Container)
                    .WithMany(p => p.PoOwnershipTs)
                    .HasForeignKey(d => d.ContainerId)
                    .HasConstraintName("fk_PoOwnershipT_Container");

                entity.HasOne(d => d.PoT)
                    .WithMany(p => p.PoOwnershipTs)
                    .HasForeignKey(d => d.PoTId)
                    .HasConstraintName("fk_PoOwnershipT_PoT");
            });

            modelBuilder.Entity<PoPackD>(entity =>
            {
                entity.ToTable("PoPackD");

                entity.Property(e => e.PoPackDId).HasColumnName("PoPackD_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.PoDId).HasColumnName("PoD_id");

                entity.Property(e => e.PoPackTId).HasColumnName("PoPackT_id");

                entity.HasOne(d => d.PoD)
                    .WithMany(p => p.PoPackDs)
                    .HasForeignKey(d => d.PoDId)
                    .HasConstraintName("Fk_PoPackD_PoD");

                entity.HasOne(d => d.PoPackT)
                    .WithMany(p => p.PoPackDs)
                    .HasForeignKey(d => d.PoPackTId)
                    .HasConstraintName("Fk_PoPackD_PoPackT");
            });

            modelBuilder.Entity<PoPackT>(entity =>
            {
                entity.ToTable("PoPackT");

                entity.HasIndex(e => e.BookKey, "Idx_PoPackT");

                entity.Property(e => e.PoPackTId).HasColumnName("PoPackT_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.BookKey)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.InvNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.PackNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.PoTId).HasColumnName("PoT_id");

                entity.Property(e => e.ShipKey)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.HasOne(d => d.PoT)
                    .WithMany(p => p.PoPackTs)
                    .HasForeignKey(d => d.PoTId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_PoPackT_PoT");
            });

            modelBuilder.Entity<PoRcvD>(entity =>
            {
                entity.HasKey(e => e.RcvDId)
                    .HasName("Pk_PoRcvD_RcvvD_id");

                entity.ToTable("PoRcvD");

                entity.HasIndex(e => new { e.RcvTId, e.PoDId }, "Unq_PoRcvD")
                    .IsUnique();

                entity.HasIndex(e => e.RcvTId, "idx_PoRcvD");

                entity.HasIndex(e => e.PoDId, "idx_PoRcvD_PoD_id");

                entity.Property(e => e.RcvDId).HasColumnName("RcvD_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.LineTotal).HasColumnType("money");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.PoDId).HasColumnName("PoD_id");

                entity.Property(e => e.RcvTId).HasColumnName("RcvT_id");

                entity.Property(e => e.UnitCost).HasColumnType("money");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.PoRcvDs)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("fk_PoRcvD_BpmLocation_1");

                entity.HasOne(d => d.PoD)
                    .WithMany(p => p.PoRcvDs)
                    .HasForeignKey(d => d.PoDId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_PoRcvD_PoD");

                entity.HasOne(d => d.RcvT)
                    .WithMany(p => p.PoRcvDs)
                    .HasForeignKey(d => d.RcvTId)
                    .HasConstraintName("Fk_PoRcvD_PoRcvT");
            });

            modelBuilder.Entity<PoRcvT>(entity =>
            {
                entity.HasKey(e => e.RcvTId)
                    .HasName("Pk_PoRcvT_RcvT_id");

                entity.ToTable("PoRcvT");

                entity.HasIndex(e => e.TplRcvNo, "Idx_PoRcvT_TplRcvNo");

                entity.HasIndex(e => e.PoTId, "idx_PoRcvT");

                entity.HasIndex(e => e.RcvNo, "idx_PoRcvT_0");

                entity.HasIndex(e => e.GlimpactTId, "idx_PoRcvT_1");

                entity.HasIndex(e => e.ContainerId, "idx_PoRcvT_Container_id");

                entity.HasIndex(e => e.NsIntId, "idx_PoRcvT_NS");

                entity.HasIndex(e => e.OwnershipId, "idx_PoRcvT_Ownership_id");

                entity.Property(e => e.RcvTId).HasColumnName("RcvT_id");

                entity.Property(e => e.AccountId).HasColumnName("Account_id");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.ContNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ContainerId).HasColumnName("Container_id");

                entity.Property(e => e.ExternalId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("External_id");

                entity.Property(e => e.GlimpactTId).HasColumnName("GLImpactT_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.NsSyncTime).HasColumnType("datetime");

                entity.Property(e => e.OwnershipId).HasColumnName("Ownership_id");

                entity.Property(e => e.PoNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.PoTId).HasColumnName("PoT_id");

                entity.Property(e => e.RcvDate).HasColumnType("date");

                entity.Property(e => e.RcvNo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Source)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TplRcvNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.PoRcvTs)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("fk_PoRcvT_GlAccount");

                entity.HasOne(d => d.Container)
                    .WithMany(p => p.PoRcvTs)
                    .HasForeignKey(d => d.ContainerId)
                    .HasConstraintName("fk_PoRcvT_Container");

                entity.HasOne(d => d.GlimpactT)
                    .WithMany(p => p.PoRcvTs)
                    .HasForeignKey(d => d.GlimpactTId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_PoRcvT_GLImpactT");

                entity.HasOne(d => d.Ownership)
                    .WithMany(p => p.PoRcvTs)
                    .HasForeignKey(d => d.OwnershipId)
                    .HasConstraintName("fk_PoRcvT_PoOwnershipT");

                entity.HasOne(d => d.PoT)
                    .WithMany(p => p.PoRcvTs)
                    .HasForeignKey(d => d.PoTId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_PoRcvT_PoT");
            });

            modelBuilder.Entity<PoStatus>(entity =>
            {
                entity.ToTable("PoStatus");

                entity.Property(e => e.PoStatusId).HasColumnName("PoStatus_id");

                entity.Property(e => e.StatusPo)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("StatusPO");
            });

            modelBuilder.Entity<PoT>(entity =>
            {
                entity.ToTable("PoT");

                entity.HasIndex(e => e.DateEstUnload, "Idx_PoT_EstULD");

                entity.HasIndex(e => e.PoNo, "Unq_PoT")
                    .IsUnique();

                entity.HasIndex(e => e.NsIntId, "idx_PoT");

                entity.HasIndex(e => e.CustRef, "idx_PoT_0");

                entity.Property(e => e.PoTId).HasColumnName("PoT_id");

                entity.Property(e => e.ActualLocId).HasColumnName("ActualLoc_id");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CountryId)
                    .HasColumnName("Country_id")
                    .HasComment("Country of origin");

                entity.Property(e => e.CustRef)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.DateEstUnload).HasColumnType("date");

                entity.Property(e => e.DateFixedEstUnload).HasColumnType("date");

                entity.Property(e => e.DateRcvd).HasColumnType("date");

                entity.Property(e => e.IncotermId).HasColumnName("Incoterm_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.Memo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.NsSyncTime).HasColumnType("datetime");

                entity.Property(e => e.PoCostTotal).HasColumnType("money");

                entity.Property(e => e.PoDate).HasColumnType("date");

                entity.Property(e => e.PoEpcd)
                    .HasColumnType("date")
                    .HasColumnName("PoEPCD")
                    .HasComment("Estimated Production Complete Date");

                entity.Property(e => e.PoEta)
                    .HasColumnType("date")
                    .HasColumnName("PoETA");

                entity.Property(e => e.PoEtd)
                    .HasColumnType("date")
                    .HasColumnName("PoETD");

                entity.Property(e => e.PoEtdConf)
                    .HasColumnType("date")
                    .HasColumnName("PoETD_Conf");

                entity.Property(e => e.PoNo)
                    .IsRequired()
                    .HasMaxLength(32);

                entity.Property(e => e.PoStatusId).HasColumnName("PoStatus_id");

                entity.Property(e => e.PoTypeId).HasColumnName("PoType_id");

                entity.Property(e => e.PortDestId).HasColumnName("PortDest_id");

                entity.Property(e => e.PortOriginId).HasColumnName("PortOrigin_id");

                entity.Property(e => e.SoTId).HasColumnName("SoT_id");

                entity.Property(e => e.Source)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNo)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.VendorId).HasColumnName("Vendor_id");

                entity.HasOne(d => d.ActualLoc)
                    .WithMany(p => p.PoTs)
                    .HasForeignKey(d => d.ActualLocId)
                    .HasConstraintName("Fk_PoT_BpmLocation");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.PoTs)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("fk_PoT_Country");

                entity.HasOne(d => d.Incoterm)
                    .WithMany(p => p.PoTs)
                    .HasForeignKey(d => d.IncotermId)
                    .HasConstraintName("Fk_PoT_Incoterm");

                entity.HasOne(d => d.PoStatus)
                    .WithMany(p => p.PoTs)
                    .HasForeignKey(d => d.PoStatusId)
                    .HasConstraintName("Fk_PoT_PoStatus");

                entity.HasOne(d => d.PoType)
                    .WithMany(p => p.PoTs)
                    .HasForeignKey(d => d.PoTypeId)
                    .HasConstraintName("fk_PoT_PoType");

                entity.HasOne(d => d.PortDest)
                    .WithMany(p => p.PoTs)
                    .HasForeignKey(d => d.PortDestId)
                    .HasConstraintName("Fk_PoT_PortDest");

                entity.HasOne(d => d.PortOrigin)
                    .WithMany(p => p.PoTs)
                    .HasForeignKey(d => d.PortOriginId)
                    .HasConstraintName("Fk_PoT_PortOrigin");

                entity.HasOne(d => d.SoT)
                    .WithMany(p => p.PoTs)
                    .HasForeignKey(d => d.SoTId)
                    .HasConstraintName("fk_PoT_SoT");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.PoTs)
                    .HasForeignKey(d => d.VendorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_PoT_Vendor");
            });

            modelBuilder.Entity<PoType>(entity =>
            {
                entity.ToTable("PoType");

                entity.Property(e => e.PoTypeId).HasColumnName("PoType_id");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PocReason>(entity =>
            {
                entity.HasKey(e => e.ChgReasonId)
                    .HasName("pk_PoChgReasons");

                entity.ToTable("PocReason");

                entity.HasComment("PO Change Reason");

                entity.Property(e => e.ChgReasonId).HasColumnName("ChgReason_id");

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PocStatus>(entity =>
            {
                entity.ToTable("PocStatus");

                entity.HasComment("PO Change Status");

                entity.Property(e => e.PocStatusId).HasColumnName("PocStatus_id");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PocType>(entity =>
            {
                entity.ToTable("PocType");

                entity.HasComment("PO Change Type");

                entity.Property(e => e.PocTypeId).HasColumnName("PocType_id");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PortDest>(entity =>
            {
                entity.ToTable("PortDest");

                entity.HasIndex(e => e.DestName, "Unq_PortDest")
                    .IsUnique();

                entity.Property(e => e.PortDestId).HasColumnName("PortDest_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.DestName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.NsSyncTime).HasColumnType("datetime");

                entity.Property(e => e.PortCode)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.PortName)
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PortOrigin>(entity =>
            {
                entity.ToTable("PortOrigin");

                entity.HasIndex(e => e.OriginName, "Unq_PortOrigin")
                    .IsUnique();

                entity.Property(e => e.PortOriginId).HasColumnName("PortOrigin_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.NsSyncTime).HasColumnType("datetime");

                entity.Property(e => e.OriginName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.PortCode)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.PortName)
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PrePo>(entity =>
            {
                entity.ToTable("PrePO");

                entity.Property(e => e.PrePoid).HasColumnName("PrePOId");

                entity.Property(e => e.AcceptedByLogisticsDate).HasColumnType("datetime");

                entity.Property(e => e.ApprovalLevel)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.HasDeleted).HasDefaultValueSql("((0))");

                entity.Property(e => e.InitialApprovedBy)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.InitialApprovedDate).HasColumnType("datetime");

                entity.Property(e => e.InternalPono)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("InternalPONo");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.LogisticsAcceptanceNote)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LogisticsAcceptedBy)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.LogisticsChosenVendor)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.LogisticsCompletedBy)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.LogisticsCompletedDate).HasColumnType("datetime");

                entity.Property(e => e.LogisticsEtdC)
                    .HasColumnType("date")
                    .HasColumnName("LogisticsETD_C");

                entity.Property(e => e.LogisticsPonoNote)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LogisticsPONoNote");

                entity.Property(e => e.MgmtApprovedBy)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.MgmtApprovedDate).HasColumnType("datetime");

                entity.Property(e => e.MgmtsNote)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MustEtadate)
                    .HasColumnType("date")
                    .HasColumnName("MustETADate");

                entity.Property(e => e.MustEtadateUpdtdByLogistics)
                    .HasColumnType("date")
                    .HasColumnName("MustETADateUpdtdByLogistics");

                entity.Property(e => e.Pochannel)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("POChannel");

                entity.Property(e => e.PochannelId).HasColumnName("POChannelId");

                entity.Property(e => e.PrePostatusTypeId).HasColumnName("PrePOStatusTypeId");

                entity.Property(e => e.Requestor)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.RequestorsNote)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PrePohistory>(entity =>
            {
                entity.ToTable("PrePOHistory");

                entity.Property(e => e.PrePohistoryId).HasColumnName("PrePOHistoryId");

                entity.Property(e => e.ApprovalLevel)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ItemName)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.LogisticsAcceptanceNote)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LogisticsChosenVendor)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.LogisticsEtdC)
                    .HasColumnType("date")
                    .HasColumnName("LogisticsETD_C");

                entity.Property(e => e.LogisticsPonoNote)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LogisticsPONoNote");

                entity.Property(e => e.MgmtsNote)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.MustEtadate)
                    .HasColumnType("date")
                    .HasColumnName("MustETADate");

                entity.Property(e => e.MustEtadateUpdtdByLogistics)
                    .HasColumnType("date")
                    .HasColumnName("MustETADateUpdtdByLogistics");

                entity.Property(e => e.Pochannel)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("POChannel");

                entity.Property(e => e.PrePoid).HasColumnName("PrePOId");

                entity.Property(e => e.PrePostatusTypeId).HasColumnName("PrePOStatusTypeId");

                entity.Property(e => e.RequestorsNote)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.PrePo)
                    .WithMany(p => p.PrePohistories)
                    .HasForeignKey(d => d.PrePoid)
                    .HasConstraintName("FK_PrePOHistory_PrePO");
            });

            modelBuilder.Entity<PrePostatusType>(entity =>
            {
                entity.ToTable("PrePOStatusType");

                entity.Property(e => e.PrePostatusTypeId).HasColumnName("PrePOStatusTypeId");

                entity.Property(e => e.Description)
                    .HasMaxLength(64)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ProductColor>(entity =>
            {
                entity.HasKey(e => e.ColorId)
                    .HasName("Pk_ProductColor_Color_id");

                entity.ToTable("ProductColor");

                entity.HasIndex(e => e.Color, "Unq_ProductColor_Color")
                    .IsUnique();

                entity.Property(e => e.ColorId).HasColumnName("Color_id");

                entity.Property(e => e.Color)
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PromoEd>(entity =>
            {
                entity.ToTable("PromoED", "ord");

                entity.HasComment("Promo Event Detail\\nOverstock - From BPM invoice, fixed 10% promo rate.\\nWayfair - From BPM invoice, Invoice price is result of applying deepest promos\\nWalmart - Cust UPC, Promo #, Start & End Date, Promo Amount * Units not including Regular price.\\nAmazon - Cust ASIN, Promo #, Ship Date, In/Out Price, Promo Amount,");

                entity.HasIndex(e => e.ItemNoId, "idx_PromoED_ItemNo_id");

                entity.HasIndex(e => e.PromoEtId, "idx_PromoED_PromoET_id");

                entity.Property(e => e.PromoEdId).HasColumnName("PromoED_id");

                entity.Property(e => e.DiscPrice)
                    .HasColumnType("money")
                    .HasComment("Discounted Price");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.MfgCodeId).HasColumnName("MfgCode_id");

                entity.Property(e => e.PromoAmt).HasColumnType("money");

                entity.Property(e => e.PromoEtId).HasColumnName("PromoET_id");

                entity.Property(e => e.RegularPrice).HasColumnType("money");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.PromoEds)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_PromoED_BpmItem");

                entity.HasOne(d => d.MfgCode)
                    .WithMany(p => p.PromoEds)
                    .HasForeignKey(d => d.MfgCodeId)
                    .HasConstraintName("Fk_PromoED_AmzMfgCode");

                entity.HasOne(d => d.PromoEt)
                    .WithMany(p => p.PromoEds)
                    .HasForeignKey(d => d.PromoEtId)
                    .HasConstraintName("Fk_PromoED_PromoET");
            });

            modelBuilder.Entity<PromoEt>(entity =>
            {
                entity.ToTable("PromoET", "ord");

                entity.Property(e => e.PromoEtId).HasColumnName("PromoET_id");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.PromoId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("PromoID");

                entity.Property(e => e.PromoName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.PromoEts)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_PromoET_Customer");
            });

            modelBuilder.Entity<Promotion>(entity =>
            {
                entity.ToTable("Promotion");

                entity.Property(e => e.ActualPromoAsp)
                    .HasColumnType("money")
                    .HasColumnName("ActualPromoASP");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CurrentAsp)
                    .HasColumnType("money")
                    .HasColumnName("CurrentASP");

                entity.Property(e => e.CurrentWsc)
                    .HasColumnType("money")
                    .HasColumnName("CurrentWSC");

                entity.Property(e => e.EventName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FundingPerUnit).HasColumnType("money");

                entity.Property(e => e.Icrid).HasColumnName("ICRId");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.PromoWsc)
                    .HasColumnType("money")
                    .HasColumnName("PromoWSC");

                entity.Property(e => e.SuggestedPromoAsp)
                    .HasColumnType("money")
                    .HasColumnName("SuggestedPromoASP");

                entity.Property(e => e.WasPrice).HasColumnType("money");
            });

            modelBuilder.Entity<PurchaseConfig>(entity =>
            {
                entity.ToTable("PurchaseConfig");

                entity.Property(e => e.CurWeekBpmpreNo).HasColumnName("CurWeekBPMPreNo");

                entity.Property(e => e.CurWeekCcguspreNo).HasColumnName("CurWeekCCGUSPreNo");

                entity.Property(e => e.CurWeekCgcanadaPreNo).HasColumnName("CurWeekCGCanadaPreNo");

                entity.Property(e => e.CurWeekCgukpreNo).HasColumnName("CurWeekCGUKPreNo");

                entity.Property(e => e.CurWeekFbacanadaPreNo).HasColumnName("CurWeekFBACanadaPreNo");

                entity.Property(e => e.CurWeekWfspreNo).HasColumnName("CurWeekWFSPreNo");
            });

            modelBuilder.Entity<QpPalByLoc>(entity =>
            {
                entity.ToTable("QpPalByLoc");

                entity.HasComment("Qty Per Pallet By Location");

                entity.Property(e => e.QpPalByLocId).HasColumnName("QpPalByLoc_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.QpPalByLocs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_QpPalByLoc_BpmItem");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.QpPalByLocs)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_QpPalByLoc_BpmLocation");
            });

            modelBuilder.Entity<RealTimeInvUpdDetail>(entity =>
            {
                entity.ToTable("RealTimeInvUpdDetail");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.RealTimeInvUpdDetails)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RealTimeInvUpdDetail_BpmItem");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.RealTimeInvUpdDetails)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RealTimeInvUpdDetail_BpmLocation");

                entity.HasOne(d => d.RealTimeInvUpdate)
                    .WithMany(p => p.RealTimeInvUpdDetails)
                    .HasForeignKey(d => d.RealTimeInvUpdateId)
                    .HasConstraintName("FK_RealTimeInvUpdDetail_RealTimeInvUpdate");
            });

            modelBuilder.Entity<RealTimeInvUpdate>(entity =>
            {
                entity.ToTable("RealTimeInvUpdate");

                entity.Property(e => e.CreatedTime).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.RealTimeInvUpdates)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_RealTimeInvUpdate_Employee");
            });

            modelBuilder.Entity<ReasonNameType>(entity =>
            {
                entity.HasKey(e => e.ReasonTypeId)
                    .HasName("pk_ReasonNameType");

                entity.ToTable("ReasonNameType");

                entity.Property(e => e.ReasonTypeId).HasColumnName("ReasonType_id");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RemitClaim>(entity =>
            {
                entity.ToTable("RemitClaim", "ord");

                entity.HasIndex(e => e.RemitId, "idx_RemitClaim");

                entity.HasIndex(e => e.RefNo, "idx_RemitClaim_0");

                entity.HasIndex(e => e.CmOriginId, "idx_RemitClaim_CmOrigin_id");

                entity.Property(e => e.RemitClaimId).HasColumnName("RemitClaim_id");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.CmOriginId).HasColumnName("CmOrigin_id");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("NetSuite Doc#");

                entity.Property(e => e.Note)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.RefNo)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.RemitId).HasColumnName("Remit_id");

                entity.HasOne(d => d.CmOrigin)
                    .WithMany(p => p.RemitClaims)
                    .HasForeignKey(d => d.CmOriginId)
                    .HasConstraintName("Fk_RemitClaim_CmOrigin");

                entity.HasOne(d => d.Remit)
                    .WithMany(p => p.RemitClaims)
                    .HasForeignKey(d => d.RemitId)
                    .HasConstraintName("Fk_RemitClaim_CsRemit");
            });

            modelBuilder.Entity<RemitCm>(entity =>
            {
                entity.ToTable("RemitCm", "ord");

                entity.HasIndex(e => e.RemitId, "idx_RemitCm");

                entity.HasIndex(e => e.SoTId, "idx_RemitCm_0");

                entity.Property(e => e.RemitCmId).HasColumnName("RemitCm_id");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.Market)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Note)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.PoNo)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.RefNo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.RemitId).HasColumnName("Remit_id");

                entity.Property(e => e.SoTId).HasColumnName("SoT_id");

                entity.HasOne(d => d.Remit)
                    .WithMany(p => p.RemitCms)
                    .HasForeignKey(d => d.RemitId)
                    .HasConstraintName("Fk_RemitCm_CsRemit");

                entity.HasOne(d => d.SoT)
                    .WithMany(p => p.RemitCms)
                    .HasForeignKey(d => d.SoTId)
                    .HasConstraintName("Fk_RemitCm_SoT");
            });

            modelBuilder.Entity<RemitCmD>(entity =>
            {
                entity.ToTable("RemitCmD", "ord");

                entity.HasIndex(e => e.RemitCmTId, "idx_RemitCmD");

                entity.HasIndex(e => e.RemitCmId, "idx_RemitCmD_0");

                entity.HasIndex(e => e.RemitClaimId, "idx_RemitCmD_1");

                entity.HasIndex(e => e.RemitFeeId, "idx_RemitCmD_2");

                entity.HasIndex(e => e.RemitServiceId, "idx_RemitCmD_3");

                entity.HasIndex(e => e.SoDId, "idx_RemitCmD_4");

                entity.HasIndex(e => e.RemitItemId, "idx_RemitCmD_5");

                entity.HasIndex(e => e.SoTId, "idx_RemitCmD_6");

                entity.Property(e => e.RemitCmDId).HasColumnName("RemitCmD_id");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.Note)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.Rate).HasColumnType("money");

                entity.Property(e => e.RemitClaimId).HasColumnName("RemitClaim_id");

                entity.Property(e => e.RemitCmId).HasColumnName("RemitCm_id");

                entity.Property(e => e.RemitCmTId).HasColumnName("RemitCmT_id");

                entity.Property(e => e.RemitFeeId).HasColumnName("RemitFee_id");

                entity.Property(e => e.RemitItemId).HasColumnName("RemitItem_id");

                entity.Property(e => e.RemitServiceId).HasColumnName("RemitService_id");

                entity.Property(e => e.SoDId).HasColumnName("SoD_id");

                entity.Property(e => e.SoTId).HasColumnName("SoT_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.RemitCmDItemNos)
                    .HasForeignKey(d => d.ItemNoId)
                    .HasConstraintName("Fk_RemitCmD_BpmItem");

                entity.HasOne(d => d.RemitClaim)
                    .WithMany(p => p.RemitCmDs)
                    .HasForeignKey(d => d.RemitClaimId)
                    .HasConstraintName("Fk_RemitCmD_RemitClaim");

                entity.HasOne(d => d.RemitCm)
                    .WithMany(p => p.RemitCmDs)
                    .HasForeignKey(d => d.RemitCmId)
                    .HasConstraintName("Fk_RemitCmD_RemitCm");

                entity.HasOne(d => d.RemitCmT)
                    .WithMany(p => p.RemitCmDs)
                    .HasForeignKey(d => d.RemitCmTId)
                    .HasConstraintName("Fk_RemitCmD_RemitCmT");

                entity.HasOne(d => d.RemitFee)
                    .WithMany(p => p.RemitCmDs)
                    .HasForeignKey(d => d.RemitFeeId)
                    .HasConstraintName("Fk_RemitCmD_RemitFee");

                entity.HasOne(d => d.RemitItem)
                    .WithMany(p => p.RemitCmDRemitItems)
                    .HasForeignKey(d => d.RemitItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_RemitCmD_BpmItem_0");

                entity.HasOne(d => d.RemitService)
                    .WithMany(p => p.RemitCmDs)
                    .HasForeignKey(d => d.RemitServiceId)
                    .HasConstraintName("Fk_RemitCmD_RemitService");

                entity.HasOne(d => d.SoD)
                    .WithMany(p => p.RemitCmDs)
                    .HasForeignKey(d => d.SoDId)
                    .HasConstraintName("Fk_RemitCmD_SoD");

                entity.HasOne(d => d.SoT)
                    .WithMany(p => p.RemitCmDs)
                    .HasForeignKey(d => d.SoTId)
                    .HasConstraintName("Fk_RemitCmD_SoT");
            });

            modelBuilder.Entity<RemitCmT>(entity =>
            {
                entity.ToTable("RemitCmT", "ord");

                entity.HasIndex(e => e.RemitId, "idx_RemitCmT");

                entity.Property(e => e.RemitCmTId).HasColumnName("RemitCmT_id");

                entity.Property(e => e.ActAmount).HasColumnType("money");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.CmNo)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Note)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.RemitId).HasColumnName("Remit_id");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.RemitCmTs)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("Fk_RemitCmT_Customer");

                entity.HasOne(d => d.Remit)
                    .WithMany(p => p.RemitCmTs)
                    .HasForeignKey(d => d.RemitId)
                    .HasConstraintName("Fk_RemitCmT_CsRemit");
            });

            modelBuilder.Entity<RemitFee>(entity =>
            {
                entity.ToTable("RemitFee", "ord");

                entity.HasIndex(e => e.RemitId, "idx_RemitFee");

                entity.Property(e => e.RemitFeeId).HasColumnName("RemitFee_id");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.FeeTypeId).HasColumnName("FeeType_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Percent).HasColumnType("money");

                entity.Property(e => e.RemitId).HasColumnName("Remit_id");

                entity.HasOne(d => d.FeeType)
                    .WithMany(p => p.RemitFees)
                    .HasForeignKey(d => d.FeeTypeId)
                    .HasConstraintName("Fk_RemitFee_CsFeeType");

                entity.HasOne(d => d.Remit)
                    .WithMany(p => p.RemitFees)
                    .HasForeignKey(d => d.RemitId)
                    .HasConstraintName("Fk_RemitFee_CsRemit");
            });

            modelBuilder.Entity<RemitInv>(entity =>
            {
                entity.ToTable("RemitInv", "ord");

                entity.HasIndex(e => e.RemitId, "idx_RemitInv");

                entity.HasIndex(e => e.SoTId, "idx_RemitInv_0");

                entity.Property(e => e.RemitInvId).HasColumnName("RemitInv_id");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.InvTId).HasColumnName("InvT_id");

                entity.Property(e => e.Market)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Note)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.PoNo)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.RefNo)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.RemitId).HasColumnName("Remit_id");

                entity.Property(e => e.SoTId).HasColumnName("SoT_id");

                entity.HasOne(d => d.InvT)
                    .WithMany(p => p.RemitInvs)
                    .HasForeignKey(d => d.InvTId)
                    .HasConstraintName("fk_RemitInv_InvT");

                entity.HasOne(d => d.Remit)
                    .WithMany(p => p.RemitInvs)
                    .HasForeignKey(d => d.RemitId)
                    .HasConstraintName("Fk_RemitInv_CsRemit");

                entity.HasOne(d => d.SoT)
                    .WithMany(p => p.RemitInvs)
                    .HasForeignKey(d => d.SoTId)
                    .HasConstraintName("Fk_RemitInv_SoT");
            });

            modelBuilder.Entity<RemitInvD>(entity =>
            {
                entity.ToTable("RemitInvD", "ord");

                entity.HasIndex(e => e.RemitInvTId, "idx_RemitInvD");

                entity.HasIndex(e => e.RemitInvId, "idx_RemitInvD_0");

                entity.HasIndex(e => e.RemitClaimId, "idx_RemitInvD_1");

                entity.HasIndex(e => e.RemitServiceId, "idx_RemitInvD_2");

                entity.HasIndex(e => e.SoTId, "idx_RemitInvD_3");

                entity.HasIndex(e => e.SoDId, "idx_RemitInvD_4");

                entity.HasIndex(e => e.RemitItemId, "idx_RemitInvD_5");

                entity.Property(e => e.RemitInvDId).HasColumnName("RemitInvD_id");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.Note)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.Rate).HasColumnType("money");

                entity.Property(e => e.RemitClaimId).HasColumnName("RemitClaim_id");

                entity.Property(e => e.RemitInvId).HasColumnName("RemitInv_id");

                entity.Property(e => e.RemitInvTId).HasColumnName("RemitInvT_id");

                entity.Property(e => e.RemitItemId).HasColumnName("RemitItem_id");

                entity.Property(e => e.RemitServiceId).HasColumnName("RemitService_id");

                entity.Property(e => e.SoDId).HasColumnName("SoD_id");

                entity.Property(e => e.SoTId).HasColumnName("SoT_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.RemitInvDItemNos)
                    .HasForeignKey(d => d.ItemNoId)
                    .HasConstraintName("Fk_RemitInvD_BpmItem");

                entity.HasOne(d => d.RemitClaim)
                    .WithMany(p => p.RemitInvDs)
                    .HasForeignKey(d => d.RemitClaimId)
                    .HasConstraintName("Fk_RemitInvD_RemitClaim");

                entity.HasOne(d => d.RemitInv)
                    .WithMany(p => p.RemitInvDs)
                    .HasForeignKey(d => d.RemitInvId)
                    .HasConstraintName("Fk_RemitInvD_RemitInv");

                entity.HasOne(d => d.RemitInvT)
                    .WithMany(p => p.RemitInvDs)
                    .HasForeignKey(d => d.RemitInvTId)
                    .HasConstraintName("Fk_RemitInvD_RemitInvT");

                entity.HasOne(d => d.RemitItem)
                    .WithMany(p => p.RemitInvDRemitItems)
                    .HasForeignKey(d => d.RemitItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_RemitInvD_BpmItem_0");

                entity.HasOne(d => d.RemitService)
                    .WithMany(p => p.RemitInvDs)
                    .HasForeignKey(d => d.RemitServiceId)
                    .HasConstraintName("Fk_RemitInvD_RemitService");

                entity.HasOne(d => d.SoD)
                    .WithMany(p => p.RemitInvDs)
                    .HasForeignKey(d => d.SoDId)
                    .HasConstraintName("Fk_RemitInvD_SoD");

                entity.HasOne(d => d.SoT)
                    .WithMany(p => p.RemitInvDs)
                    .HasForeignKey(d => d.SoTId)
                    .HasConstraintName("Fk_RemitInvD_SoT");
            });

            modelBuilder.Entity<RemitInvT>(entity =>
            {
                entity.ToTable("RemitInvT", "ord");

                entity.HasIndex(e => e.RemitId, "idx_RemitInvT");

                entity.Property(e => e.RemitInvTId).HasColumnName("RemitInvT_id");

                entity.Property(e => e.ActAmount).HasColumnType("money");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.InvNo)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Note)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.RemitId).HasColumnName("Remit_id");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.RemitInvTs)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("Fk_RemitInvT_Customer");

                entity.HasOne(d => d.Remit)
                    .WithMany(p => p.RemitInvTs)
                    .HasForeignKey(d => d.RemitId)
                    .HasConstraintName("Fk_RemitInvT_CsRemit");
            });

            modelBuilder.Entity<RemitMatchClaim>(entity =>
            {
                entity.ToTable("RemitMatchClaim", "ord");

                entity.Property(e => e.RemitMatchClaimId).HasColumnName("RemitMatchClaim_id");

                entity.Property(e => e.DocNo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.GlaccountId).HasColumnName("GLAccount_id");

                entity.Property(e => e.InvNo)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.MarkitId).HasColumnName("Markit_id");

                entity.HasOne(d => d.Glaccount)
                    .WithMany(p => p.RemitMatchClaims)
                    .HasForeignKey(d => d.GlaccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_RemitMatchClaim_GlAccount");

                entity.HasOne(d => d.Markit)
                    .WithMany(p => p.RemitMatchClaims)
                    .HasForeignKey(d => d.MarkitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_RemitMatchClaim_Market");
            });

            modelBuilder.Entity<RemitService>(entity =>
            {
                entity.ToTable("RemitService", "ord");

                entity.HasIndex(e => e.RemitId, "idx_RemitService");

                entity.Property(e => e.RemitServiceId).HasColumnName("RemitService_id");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.Note)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.RefNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.RemitId).HasColumnName("Remit_id");

                entity.Property(e => e.Type)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.HasOne(d => d.Remit)
                    .WithMany(p => p.RemitServices)
                    .HasForeignKey(d => d.RemitId)
                    .HasConstraintName("Fk_RemitService_CsRemit");
            });

            modelBuilder.Entity<RenameMarket>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RenameMarket");

                entity.Property(e => e.NewName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.SageId)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RenameVendor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RenameVendor");

                entity.Property(e => e.Diff)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NewName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.OldName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.SageId)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RetailPriceHistory>(entity =>
            {
                entity.HasKey(e => e.RpHistoryId)
                    .HasName("Pk_RetailPriceHistory_RpHistory_id");

                entity.ToTable("RetailPriceHistory");

                entity.Property(e => e.RpHistoryId).HasColumnName("RpHistory_id");

                entity.Property(e => e.IsOos).HasColumnName("IsOOS");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.RptTime)
                    .HasColumnType("datetime")
                    .HasComment("Time Price Date collected");

                entity.Property(e => e.SellerId)
                    .HasColumnName("Seller_id")
                    .HasComment("Competitor ID");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.RetailPriceHistories)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_RetailPriceHistory_BpmItem");

                entity.HasOne(d => d.MarketPlace)
                    .WithMany(p => p.RetailPriceHistories)
                    .HasForeignKey(d => d.MarketPlaceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_RetailPriceHistory_KO_MarketPlace");

                entity.HasOne(d => d.Seller)
                    .WithMany(p => p.RetailPriceHistories)
                    .HasForeignKey(d => d.SellerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_RetailPriceHistory_KO_Seller");
            });

            modelBuilder.Entity<ReviewHistory>(entity =>
            {
                entity.ToTable("ReviewHistory");

                entity.Property(e => e.ReviewHistoryId).HasColumnName("ReviewHistory_id");

                entity.Property(e => e.AddedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.LastModDateTime).HasColumnType("datetime");

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.Property(e => e.SellerUnqId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Seller_UNQ_id");
            });

            modelBuilder.Entity<Rma>(entity =>
            {
                entity.ToTable("RMA", "ord");

                entity.Property(e => e.RmaId).HasColumnName("RMA_id");

                entity.Property(e => e.DateApproved).HasColumnType("datetime");

                entity.Property(e => e.DateRefunded).HasColumnType("datetime");

                entity.Property(e => e.DateReplaced).HasColumnType("date");

                entity.Property(e => e.DateRequested).HasColumnType("datetime");

                entity.Property(e => e.DateReturned).HasColumnType("date");

                entity.Property(e => e.MasterTrackNoReplace)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MasterTrackNoReturn)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Note).IsUnicode(false);

                entity.Property(e => e.OrderId).HasColumnName("Order_id");

                entity.Property(e => e.RmaActionId).HasColumnName("RmaAction_id");

                entity.Property(e => e.RmaReasonDetailId).HasColumnName("RmaReasonDetail_id");

                entity.Property(e => e.RmaReasonId).HasColumnName("RmaReason_id");

                entity.Property(e => e.RmaStatusId).HasColumnName("RmaStatus_id");

                entity.Property(e => e.SageCreditNoteNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SageInternalUseNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SalesRepId).HasColumnName("SalesRep_id");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.Rmas)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("FK_RMA_Order");

                entity.HasOne(d => d.RmaAction)
                    .WithMany(p => p.Rmas)
                    .HasForeignKey(d => d.RmaActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RMA_RmaAction");

                entity.HasOne(d => d.RmaReasonDetail)
                    .WithMany(p => p.Rmas)
                    .HasForeignKey(d => d.RmaReasonDetailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RMA_RmaReasonDetail");

                entity.HasOne(d => d.RmaReason)
                    .WithMany(p => p.Rmas)
                    .HasForeignKey(d => d.RmaReasonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RMA_RmaReason");

                entity.HasOne(d => d.RmaStatus)
                    .WithMany(p => p.Rmas)
                    .HasForeignKey(d => d.RmaStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RMA_RmaStatus");

                entity.HasOne(d => d.SalesRep)
                    .WithMany(p => p.Rmas)
                    .HasForeignKey(d => d.SalesRepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RMA_Employee");
            });

            modelBuilder.Entity<RmaAction>(entity =>
            {
                entity.ToTable("RmaAction", "ord");

                entity.Property(e => e.RmaActionId)
                    .ValueGeneratedNever()
                    .HasColumnName("RmaAction_id");

                entity.Property(e => e.RmaAction1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RmaAction");
            });

            modelBuilder.Entity<RmaDetail>(entity =>
            {
                entity.HasKey(e => e.RmaLineId)
                    .HasName("Pk_RmaDetail_RmaDetail_id");

                entity.ToTable("RmaDetail", "ord");

                entity.Property(e => e.RmaLineId).HasColumnName("RmaLine_id");

                entity.Property(e => e.AmountRefund).HasColumnType("money");

                entity.Property(e => e.AmountShipDeduct).HasColumnType("money");

                entity.Property(e => e.ItemReplacedId).HasColumnName("ItemReplaced_id");

                entity.Property(e => e.ItemShippedId).HasColumnName("ItemShipped_id");

                entity.Property(e => e.RmaId).HasColumnName("RMA_id");

                entity.Property(e => e.RmaQtyReplaced).HasDefaultValueSql("((0))");

                entity.Property(e => e.RmaQtyReturned).HasDefaultValueSql("((0))");

                entity.Property(e => e.TimeReturned).HasColumnType("datetime");

                entity.HasOne(d => d.ItemReplaced)
                    .WithMany(p => p.RmaDetailItemReplaceds)
                    .HasForeignKey(d => d.ItemReplacedId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RmaDetail_KO_Itemno1");

                entity.HasOne(d => d.ItemShipped)
                    .WithMany(p => p.RmaDetailItemShippeds)
                    .HasForeignKey(d => d.ItemShippedId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RmaDetail_KO_Itemno");

                entity.HasOne(d => d.Rma)
                    .WithMany(p => p.RmaDetails)
                    .HasForeignKey(d => d.RmaId)
                    .HasConstraintName("FK_RmaDetail_RMA");
            });

            modelBuilder.Entity<RmaReason>(entity =>
            {
                entity.ToTable("RmaReason", "ord");

                entity.Property(e => e.RmaReasonId).HasColumnName("RmaReason_id");

                entity.Property(e => e.RmaReason1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RmaReason");
            });

            modelBuilder.Entity<RmaReasonDetail>(entity =>
            {
                entity.ToTable("RmaReasonDetail", "ord");

                entity.Property(e => e.RmaReasonDetailId).HasColumnName("RmaReasonDetail_id");

                entity.Property(e => e.RmaReasonDetail1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RmaReasonDetail");

                entity.Property(e => e.RmaReasonId).HasColumnName("RmaReason_id");

                entity.HasOne(d => d.RmaReason)
                    .WithMany(p => p.RmaReasonDetails)
                    .HasForeignKey(d => d.RmaReasonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RmaReasonDetail_RmaReason");
            });

            modelBuilder.Entity<RmaStatus>(entity =>
            {
                entity.ToTable("RmaStatus", "ord");

                entity.Property(e => e.RmaStatusId).HasColumnName("RmaStatus_id");

                entity.Property(e => e.RmaStatus1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RmaStatus");
            });

            modelBuilder.Entity<SalesEvent>(entity =>
            {
                entity.ToTable("SalesEvent");

                entity.Property(e => e.SalesEventId).HasColumnName("SalesEvent_id");

                entity.Property(e => e.AddedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.EventId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Event_id");

                entity.Property(e => e.LastModDateTime).HasColumnType("datetime");

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.Property(e => e.SalesEventName)
                    .HasMaxLength(50)
                    .HasColumnName("SalesEvent_name");

                entity.Property(e => e.Store)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.MarketPlace)
                    .WithMany(p => p.SalesEvents)
                    .HasForeignKey(d => d.MarketPlaceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesEvent_KO_MarketPlace");
            });

            modelBuilder.Entity<SalesEventDetail>(entity =>
            {
                entity.ToTable("SalesEventDetail");

                entity.Property(e => e.SalesEventDetailId).HasColumnName("SalesEventDetail_id");

                entity.Property(e => e.AddedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ApprovedPrice).HasColumnType("money");

                entity.Property(e => e.ItemListingId).HasColumnName("ItemListing_id");

                entity.Property(e => e.LastModDateTime).HasColumnType("datetime");

                entity.Property(e => e.RegularPrice).HasColumnType("money");

                entity.Property(e => e.RequestedPrice).HasColumnType("money");

                entity.Property(e => e.SalesEventId).HasColumnName("SalesEvent_id");

                entity.HasOne(d => d.ItemListing)
                    .WithMany(p => p.SalesEventDetails)
                    .HasForeignKey(d => d.ItemListingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesEventDetail_ItemListing_Itemno");

                entity.HasOne(d => d.SalesEvent)
                    .WithMany(p => p.SalesEventDetails)
                    .HasForeignKey(d => d.SalesEventId)
                    .HasConstraintName("FK_SalesEventDetail_SalesEvent");
            });

            modelBuilder.Entity<SalesRemit>(entity =>
            {
                entity.HasKey(e => e.RemitId)
                    .HasName("Pk_CsRemit_Remit_Id");

                entity.ToTable("SalesRemit", "ord");

                entity.HasIndex(e => e.MarketId, "idx_SalesRemit_Market_id");

                entity.HasIndex(e => e.RemitNo, "idx_SalesRemit_RemitNo");

                entity.Property(e => e.RemitId).HasColumnName("Remit_Id");

                entity.Property(e => e.AddedEmpId).HasColumnName("AddedEmp_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.LastModeEmpId).HasColumnName("LastModeEmp_id");

                entity.Property(e => e.MarketId).HasColumnName("Market_id");

                entity.Property(e => e.Note)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.RemitDate).HasColumnType("date");

                entity.Property(e => e.RemitNo)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.RemitTotal).HasColumnType("money");

                entity.HasOne(d => d.AddedEmp)
                    .WithMany(p => p.SalesRemitAddedEmps)
                    .HasForeignKey(d => d.AddedEmpId)
                    .HasConstraintName("Fk_CsRemit_Employee");

                entity.HasOne(d => d.LastModeEmp)
                    .WithMany(p => p.SalesRemitLastModeEmps)
                    .HasForeignKey(d => d.LastModeEmpId)
                    .HasConstraintName("Fk_CsRemit_Employee_0");

                entity.HasOne(d => d.Market)
                    .WithMany(p => p.SalesRemits)
                    .HasForeignKey(d => d.MarketId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CsRemit_Market");
            });

            modelBuilder.Entity<SalesTax>(entity =>
            {
                entity.ToTable("SalesTax");

                entity.Property(e => e.SalesTaxId).HasColumnName("SalesTax_id");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.DateFrom).HasColumnType("date");

                entity.Property(e => e.DateTo).HasColumnType("date");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ZipCode)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ScanGun>(entity =>
            {
                entity.ToTable("ScanGun", "wms");

                entity.Property(e => e.ScanGunId).HasColumnName("ScanGun_id");

                entity.Property(e => e.EmployeeId).HasColumnName("Employee_id");

                entity.Property(e => e.IpAddress)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.ModelNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ScanGunNo)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ScanGuns)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("Fk_ScanGun_Employee");
            });

            modelBuilder.Entity<SchAppointment>(entity =>
            {
                entity.HasKey(e => e.UniqueId)
                    .HasName("PK_Appointments");

                entity.Property(e => e.UniqueId).HasColumnName("UniqueID");

                entity.Property(e => e.EndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Location).HasMaxLength(50);

                entity.Property(e => e.ResourceId).HasColumnName("ResourceID");

                entity.Property(e => e.ResourceIds).HasColumnName("ResourceIDs");

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Subject).HasMaxLength(50);
            });

            modelBuilder.Entity<SchResource>(entity =>
            {
                entity.HasKey(e => e.UniqueId)
                    .HasName("PK_Resources");

                entity.Property(e => e.UniqueId).HasColumnName("UniqueID");

                entity.Property(e => e.Image).HasColumnType("image");

                entity.Property(e => e.ResourceId).HasColumnName("ResourceID");

                entity.Property(e => e.ResourceName).HasMaxLength(50);
            });

            modelBuilder.Entity<ServerityType>(entity =>
            {
                entity.ToTable("ServerityType");

                entity.Property(e => e.ServerityTypeId).HasColumnName("ServerityType_id");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ServiceType>(entity =>
            {
                entity.ToTable("ServiceType");

                entity.Property(e => e.ServiceTypeId).HasColumnName("ServiceType_id");

                entity.Property(e => e.ServiceLevel)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Level");

                entity.Property(e => e.Type).HasMaxLength(15);
            });

            modelBuilder.Entity<ServingStatusDetail>(entity =>
            {
                entity.Property(e => e.ServingStatusDetailId).HasColumnName("ServingStatusDetail_id");

                entity.Property(e => e.AddetTime)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ProdCampHistId).HasColumnName("ProdCampHist_id");

                entity.Property(e => e.StatusDetailType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.ProdCampHist)
                    .WithMany(p => p.ServingStatusDetails)
                    .HasForeignKey(d => d.ProdCampHistId)
                    .HasConstraintName("fk_ServingStatusDetails_ProductCampHist");
            });

            modelBuilder.Entity<ServingStatusType>(entity =>
            {
                entity.HasKey(e => e.ServingStatusId)
                    .HasName("pk_ServingStatusType");

                entity.ToTable("ServingStatusType");

                entity.Property(e => e.ServingStatusId).HasColumnName("ServingStatus_id");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SgActionAllow>(entity =>
            {
                entity.HasKey(e => e.SgaaId)
                    .HasName("Pk_SgActionAllow_SGAA_id");

                entity.ToTable("SgActionAllow", "wms");

                entity.Property(e => e.SgaaId).HasColumnName("SGAA_id");

                entity.Property(e => e.InvTxTypeId).HasColumnName("InvTxType_id");

                entity.Property(e => e.ScanGunId).HasColumnName("ScanGun_id");

                entity.HasOne(d => d.InvTxType)
                    .WithMany(p => p.SgActionAllows)
                    .HasForeignKey(d => d.InvTxTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_SgActionAllow_InvTxType");

                entity.HasOne(d => d.ScanGun)
                    .WithMany(p => p.SgActionAllows)
                    .HasForeignKey(d => d.ScanGunId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_SgActionAllow_ScanGun");
            });

            modelBuilder.Entity<ShipAcct>(entity =>
            {
                entity.HasKey(e => e.ShipActId)
                    .HasName("Pk_ShipAccount_ShipAct_id");

                entity.ToTable("ShipAcct");

                entity.HasIndex(e => new { e.CustomerId, e.ShipFrWhId, e.CarrierId }, "Unq_ShipAcct")
                    .IsUnique();

                entity.Property(e => e.ShipActId).HasColumnName("ShipAct_id");

                entity.Property(e => e.BillAcctNo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.CarrierId).HasColumnName("Carrier_id");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.ShipAcctNo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ShipFrWhId).HasColumnName("ShipFrWh_id");

                entity.HasOne(d => d.Carrier)
                    .WithMany(p => p.ShipAccts)
                    .HasForeignKey(d => d.CarrierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_ShipAcct_ShipCarrier");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.ShipAccts)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_CarrierAcct_Customer");

                entity.HasOne(d => d.ShipFrWh)
                    .WithMany(p => p.ShipAccts)
                    .HasForeignKey(d => d.ShipFrWhId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_ShipAcct_BpmLocation");
            });

            modelBuilder.Entity<ShipCarrier>(entity =>
            {
                entity.HasKey(e => e.CarrierId)
                    .HasName("PK_ShippingCarrier");

                entity.ToTable("ShipCarrier", "ord");

                entity.HasIndex(e => e.CarrierName, "Unq_ShippingCarrier")
                    .IsUnique();

                entity.Property(e => e.CarrierId).HasColumnName("Carrier_id");

                entity.Property(e => e.CarrierName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ShipLine>(entity =>
            {
                entity.ToTable("ShipLine");

                entity.HasIndex(e => e.ShipLineName, "Unq_ShipLine")
                    .IsUnique();

                entity.Property(e => e.ShipLineId).HasColumnName("ShipLine_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.NsSyncTime).HasColumnType("datetime");

                entity.Property(e => e.Scac)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("SCAC");

                entity.Property(e => e.ShipLineName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ShipVium>(entity =>
            {
                entity.HasKey(e => e.ShipViaId);

                entity.ToTable("ShipVia", "ord");

                entity.Property(e => e.ShipViaId).HasColumnName("ShipVia_id");

                entity.Property(e => e.CarrierId).HasColumnName("Carrier_id");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.NsShipItem)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ShipViaCode).HasMaxLength(50);

                entity.Property(e => e.ShipViaName).HasMaxLength(50);

                entity.Property(e => e.ShipViaShortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShippingType).HasMaxLength(50);

                entity.Property(e => e.SvcAmazon)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Svc_Amazon");

                entity.Property(e => e.WmtCarMethod).HasMaxLength(50);

                entity.HasOne(d => d.Carrier)
                    .WithMany(p => p.ShipVia)
                    .HasForeignKey(d => d.CarrierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShipVia_ShippingCarrier");
            });

            modelBuilder.Entity<ShippingZone>(entity =>
            {
                entity.ToTable("ShippingZone", "ord");

                entity.HasIndex(e => new { e.OrigZip, e.DestZip }, "Unq_ShippingZone")
                    .IsUnique();

                entity.Property(e => e.ShippingZoneId).HasColumnName("ShippingZone_id");

                entity.Property(e => e.CarrierId).HasColumnName("Carrier_id");

                entity.Property(e => e.DestZip)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("DestZIP");

                entity.Property(e => e.OrigZip)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("OrigZIP");

                entity.HasOne(d => d.Carrier)
                    .WithMany(p => p.ShippingZones)
                    .HasForeignKey(d => d.CarrierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShippingZone_ShippingCarrier");
            });

            modelBuilder.Entity<SkuSubstitudePlan>(entity =>
            {
                entity.HasKey(e => e.SubstitudeId)
                    .HasName("Pk_SkuSubstitude_Substitude_id");

                entity.ToTable("SkuSubstitudePlan", "ord");

                entity.HasIndex(e => e.ItemFromId, "Idx_SkuSubstitudePlan_ItemFrom_id");

                entity.HasIndex(e => e.ItemToId, "Idx_SkuSubstitudePlan_ItemTo_id");

                entity.HasIndex(e => e.LocationId, "Idx_SkuSubstitudePlan_Location_id");

                entity.Property(e => e.SubstitudeId).HasColumnName("Substitude_id");

                entity.Property(e => e.ItemFromId).HasColumnName("ItemFrom_id");

                entity.Property(e => e.ItemToId).HasColumnName("ItemTo_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.Note)
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.TargetDate).HasColumnType("date");

                entity.HasOne(d => d.ItemFrom)
                    .WithMany(p => p.SkuSubstitudePlanItemFroms)
                    .HasForeignKey(d => d.ItemFromId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_SkuSubstitudePlan_KO_Itemno");

                entity.HasOne(d => d.ItemTo)
                    .WithMany(p => p.SkuSubstitudePlanItemTos)
                    .HasForeignKey(d => d.ItemToId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_SkuSubstitudePlan_KO_Itemno_0");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.SkuSubstitudePlans)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_SkuSubstitudePlan_KO_Location");
            });

            modelBuilder.Entity<SoCancel>(entity =>
            {
                entity.ToTable("SoCancel");

                entity.HasIndex(e => e.SoTId, "UQ__SoCancel__12C8B93F535C151F")
                    .IsUnique();

                entity.HasIndex(e => e.PoNo, "UQ__SoCancel__A4C0162C15C05CA2")
                    .IsUnique();

                entity.Property(e => e.SoCancelId).HasColumnName("SoCancelID");

                entity.Property(e => e.CancelledTime)
                    .HasColumnType("datetime")
                    .HasColumnName("cancelledTime");

                entity.Property(e => e.CustId).HasColumnName("custID");

                entity.Property(e => e.IsCancelled).HasColumnName("isCancelled");

                entity.Property(e => e.MrklocId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PoNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReqTime)
                    .HasColumnType("datetime")
                    .HasColumnName("reqTime");

                entity.Property(e => e.SoTId).HasColumnName("SoT_Id");

                entity.HasOne(d => d.Cust)
                    .WithMany(p => p.SoCancels)
                    .HasForeignKey(d => d.CustId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApiSoCancelCustomer");

                entity.HasOne(d => d.SoT)
                    .WithOne(p => p.SoCancel)
                    .HasForeignKey<SoCancel>(d => d.SoTId)
                    .HasConstraintName("FK_SotApiSoCancel");
            });

            modelBuilder.Entity<SoCoo>(entity =>
            {
                entity.ToTable("SoCOO", "ord");

                entity.HasIndex(e => new { e.SoDId, e.PoDId }, "idx_SoCOO");

                entity.Property(e => e.SoCooId).HasColumnName("SoCOO_id");

                entity.Property(e => e.PoDId).HasColumnName("PoD_id");

                entity.Property(e => e.SoDId).HasColumnName("SoD_id");

                entity.HasOne(d => d.PoD)
                    .WithMany(p => p.SoCoos)
                    .HasForeignKey(d => d.PoDId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_SoCOO_PoD");

                entity.HasOne(d => d.SoD)
                    .WithMany(p => p.SoCoos)
                    .HasForeignKey(d => d.SoDId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_SoCOO_SoD");
            });

            modelBuilder.Entity<SoD>(entity =>
            {
                entity.ToTable("SoD", "ord");

                entity.HasIndex(e => new { e.SoTId, e.SodLineNo }, "Unq_SoD")
                    .IsUnique();

                entity.HasIndex(e => e.NsIntId, "idx_SoD");

                entity.HasIndex(e => e.AmzBolNo, "idx_SoD_AmzBolNo");

                entity.HasIndex(e => e.ParentSoDId, "idx_SoD_ParentSoD_id");

                entity.HasIndex(e => e.WmtRouteNo, "idx_SoD_WmtRouteNo");

                entity.Property(e => e.SoDId)
                    .HasColumnName("SoD_id")
                    .HasComment("NS Internal ID");

                entity.Property(e => e.AcptStatusId).HasColumnName("AcptStatus_id");

                entity.Property(e => e.ActShipDate).HasColumnType("date");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.AmzBolNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ApplyDbst).HasColumnName("ApplyDBST");

                entity.Property(e => e.AutoBol)
                    .HasColumnName("AutoBOL")
                    .HasComment("1 -Auto BOL Yes\\n0 - No");

                entity.Property(e => e.BackOrderDate).HasColumnType("date");

                entity.Property(e => e.CommitInv).HasComment("0 - DO NOT COMMIT\\n1 - COMMIT");

                entity.Property(e => e.CustItemId)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("CustItem_id");

                entity.Property(e => e.CustSku)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("CustSKU");

                entity.Property(e => e.DiscAmt).HasColumnType("money");

                entity.Property(e => e.DiscCode)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ExpShipDate).HasColumnType("date");

                entity.Property(e => e.FeeAmt).HasColumnType("money");

                entity.Property(e => e.IsMissing3Pl).HasColumnName("IsMissing3PL");

                entity.Property(e => e.IsRejectAcpt).HasComment("1 = Reject previously accepted SO line");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.ItemNoOrigId).HasColumnName("ItemNoOrig_id");

                entity.Property(e => e.LastModKoT).HasColumnType("date");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.LineTotal).HasColumnType("money");

                entity.Property(e => e.MemoLine)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.NsLineId).HasColumnName("NsLineID");

                entity.Property(e => e.ParentSoDId).HasColumnName("ParentSoD_id");

                entity.Property(e => e.PriceLevelId).HasColumnName("PriceLevel_id");

                entity.Property(e => e.QtyCancelled).HasComment("Cancelled by customer");

                entity.Property(e => e.QtyRejected).HasComment("Cancelled by BPM, for example Amazon Direct bulk PO cancel after accepted");

                entity.Property(e => e.QtyShipped3Pl).HasColumnName("QtyShipped3PL");

                entity.Property(e => e.RegPrice).HasColumnType("money");

                entity.Property(e => e.ShipCost).HasColumnType("money");

                entity.Property(e => e.ShipFromOrigId).HasColumnName("ShipFromOrig_id");

                entity.Property(e => e.ShipFromWhId).HasColumnName("ShipFromWh_id");

                entity.Property(e => e.ShipScac)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ShipSCAC");

                entity.Property(e => e.ShipToAfcId).HasColumnName("ShipToAFC_id");

                entity.Property(e => e.ShipViaId).HasColumnName("ShipVia_id");

                entity.Property(e => e.ShipWindowEnd).HasColumnType("date");

                entity.Property(e => e.ShipWindowStart).HasColumnType("date");

                entity.Property(e => e.SoDate).HasColumnType("date");

                entity.Property(e => e.SoStatusKoId).HasColumnName("SoStatusKo_id");

                entity.Property(e => e.SoStatusNsId).HasColumnName("SoStatusNs_id");

                entity.Property(e => e.SoTId).HasColumnName("SoT_id");

                entity.Property(e => e.TargetDate).HasColumnType("date");

                entity.Property(e => e.UnitPrice)
                    .HasColumnType("money")
                    .HasComment("UnitPrice = RegPrice - DiscAmt\\nNetSuite Rate");

                entity.Property(e => e.VatAmt).HasColumnType("money");

                entity.Property(e => e.WmtRouteNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.HasOne(d => d.AcptStatus)
                    .WithMany(p => p.SoDs)
                    .HasForeignKey(d => d.AcptStatusId)
                    .HasConstraintName("Fk_SoD_ItemAcptStatus");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.SoDItemNos)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_SoD_BpmItem");

                entity.HasOne(d => d.ItemNoOrig)
                    .WithMany(p => p.SoDItemNoOrigs)
                    .HasForeignKey(d => d.ItemNoOrigId)
                    .HasConstraintName("fk_SoD_BpmItem_0");

                entity.HasOne(d => d.ParentSoD)
                    .WithMany(p => p.InverseParentSoD)
                    .HasForeignKey(d => d.ParentSoDId)
                    .HasConstraintName("fk_SoD_SoD");

                entity.HasOne(d => d.PriceLevel)
                    .WithMany(p => p.SoDs)
                    .HasForeignKey(d => d.PriceLevelId)
                    .HasConstraintName("Fk_SoD_ItemPriceLevel");

                entity.HasOne(d => d.ShipFromOrig)
                    .WithMany(p => p.SoDShipFromOrigs)
                    .HasForeignKey(d => d.ShipFromOrigId)
                    .HasConstraintName("fk_SoD_BpmLocation_0");

                entity.HasOne(d => d.ShipFromWh)
                    .WithMany(p => p.SoDShipFromWhs)
                    .HasForeignKey(d => d.ShipFromWhId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_SoD_BpmLocation");

                entity.HasOne(d => d.ShipToAfc)
                    .WithMany(p => p.SoDs)
                    .HasForeignKey(d => d.ShipToAfcId)
                    .HasConstraintName("Fk_SoD_AdAFCID");

                entity.HasOne(d => d.ShipVia)
                    .WithMany(p => p.SoDs)
                    .HasForeignKey(d => d.ShipViaId)
                    .HasConstraintName("Fk_SoD_ShipVia");

                entity.HasOne(d => d.SoStatusKo)
                    .WithMany(p => p.SoDs)
                    .HasForeignKey(d => d.SoStatusKoId)
                    .HasConstraintName("Fk_SoD_SoStatusKo");

                entity.HasOne(d => d.SoStatusNs)
                    .WithMany(p => p.SoDs)
                    .HasForeignKey(d => d.SoStatusNsId)
                    .HasConstraintName("Fk_SoD_SoStatusNs");

                entity.HasOne(d => d.SoT)
                    .WithMany(p => p.SoDs)
                    .HasForeignKey(d => d.SoTId)
                    .HasConstraintName("Fk_SoD_SoT");
            });

            modelBuilder.Entity<SoDtempf9b5936b>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SoDTempf9b5936b", "ord");

                entity.Property(e => e.AcptStatusId).HasColumnName("AcptStatus_id");

                entity.Property(e => e.ActShipDate).HasColumnType("date");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.AmzBolNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ApplyDbst).HasColumnName("ApplyDBST");

                entity.Property(e => e.AutoBol).HasColumnName("AutoBOL");

                entity.Property(e => e.BackOrderDate).HasColumnType("date");

                entity.Property(e => e.CustItemId)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("CustItem_id");

                entity.Property(e => e.CustSku)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("CustSKU");

                entity.Property(e => e.DiscAmt).HasColumnType("money");

                entity.Property(e => e.DiscCode)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ExpShipDate).HasColumnType("date");

                entity.Property(e => e.FeeAmt).HasColumnType("money");

                entity.Property(e => e.IsMissing3Pl).HasColumnName("IsMissing3PL");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.ItemNoOrigId).HasColumnName("ItemNoOrig_id");

                entity.Property(e => e.LastModKoT).HasColumnType("date");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.LineTotal).HasColumnType("money");

                entity.Property(e => e.MemoLine)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.NsLineId).HasColumnName("NsLineID");

                entity.Property(e => e.ParentSoDId).HasColumnName("ParentSoD_id");

                entity.Property(e => e.PriceLevelId).HasColumnName("PriceLevel_id");

                entity.Property(e => e.QtyShipped3Pl).HasColumnName("QtyShipped3PL");

                entity.Property(e => e.RegPrice).HasColumnType("money");

                entity.Property(e => e.ShipCost).HasColumnType("money");

                entity.Property(e => e.ShipFromOrigId).HasColumnName("ShipFromOrig_id");

                entity.Property(e => e.ShipFromWhId).HasColumnName("ShipFromWh_id");

                entity.Property(e => e.ShipScac)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ShipSCAC");

                entity.Property(e => e.ShipToAfcId).HasColumnName("ShipToAFC_id");

                entity.Property(e => e.ShipViaId).HasColumnName("ShipVia_id");

                entity.Property(e => e.ShipWindowEnd).HasColumnType("date");

                entity.Property(e => e.ShipWindowStart).HasColumnType("date");

                entity.Property(e => e.SoDId).HasColumnName("SoD_id");

                entity.Property(e => e.SoDate).HasColumnType("date");

                entity.Property(e => e.SoStatusKoId).HasColumnName("SoStatusKo_id");

                entity.Property(e => e.SoStatusNsId).HasColumnName("SoStatusNs_id");

                entity.Property(e => e.SoTId).HasColumnName("SoT_id");

                entity.Property(e => e.TargetDate).HasColumnType("date");

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.Property(e => e.VatAmt).HasColumnType("money");

                entity.Property(e => e.WmtRouteNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SoError>(entity =>
            {
                entity.HasKey(e => e.ErrorId)
                    .HasName("PK__SoError__358565CAD345A5EA");

                entity.ToTable("SoError");

                entity.HasIndex(e => new { e.PoNo, e.CustSku }, "uq_PoNoCustSKU")
                    .IsUnique();

                entity.Property(e => e.ErrorId).HasColumnName("ErrorID");

                entity.Property(e => e.CeatedTime).HasColumnType("datetime");

                entity.Property(e => e.CustSku)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CustSKU");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.Detail)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ErrorCatId).HasColumnName("ErrorCatID");

                entity.Property(e => e.IsResolved).HasColumnName("isResolved");

                entity.Property(e => e.PoNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessId).HasColumnName("ProcessID");

                entity.Property(e => e.ResolvedTime)
                    .HasColumnType("datetime")
                    .HasColumnName("resolvedTime");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.SoErrors)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustomerErrorSO");

                entity.HasOne(d => d.ErrorCat)
                    .WithMany(p => p.SoErrors)
                    .HasForeignKey(d => d.ErrorCatId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ErrorCategory");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.SoErrors)
                    .HasForeignKey(d => d.ProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApiPoProcess");
            });

            modelBuilder.Entity<SoStatusKo>(entity =>
            {
                entity.ToTable("SoStatusKo", "ord");

                entity.Property(e => e.SoStatusKoId).HasColumnName("SoStatusKo_id");

                entity.Property(e => e.StatusKo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasComment("New,LockPicked,BackOrdered,Accepted,Cancelled,Picking,Picked,Shipping,Shipped,Billed,PartShipped,PartBilled,Closed");
            });

            modelBuilder.Entity<SoStatusN>(entity =>
            {
                entity.HasKey(e => e.SoStatusNsId)
                    .HasName("Pk_NsSoStatus_OrderStatus_id");

                entity.ToTable("SoStatusNs", "ord");

                entity.Property(e => e.SoStatusNsId).HasColumnName("SoStatusNs_id");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.StatusNs)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasComment("New,LockPicked,BackOrdered,Accepted,Cancelled,Picking,Picked,Shipping,Shipped,Billed,PartShipped,PartBilled,Closed");
            });

            modelBuilder.Entity<SoT>(entity =>
            {
                entity.ToTable("SoT", "ord");

                entity.HasIndex(e => e.SoDate, "Idx_SoT");

                entity.HasIndex(e => new { e.CustomerId, e.PoNo, e.SoNo }, "Unq_SoT")
                    .IsUnique();

                entity.HasIndex(e => e.NsIntId, "idx_SoT_0");

                entity.HasIndex(e => e.PoNo, "idx_SoT_1");

                entity.HasIndex(e => e.SoNo, "idx_SoT_2");

                entity.Property(e => e.SoTId).HasColumnName("SoT_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.Address1).HasMaxLength(64);

                entity.Property(e => e.Address2).HasMaxLength(64);

                entity.Property(e => e.Address3).HasMaxLength(64);

                entity.Property(e => e.City).HasMaxLength(64);

                entity.Property(e => e.Country).HasMaxLength(16);

                entity.Property(e => e.CustOrderTime).HasColumnType("datetime");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_id");

                entity.Property(e => e.Email)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ExpShipDate).HasColumnType("datetime");

                entity.Property(e => e.IoNo)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.Memo)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.NsSyncTime).HasColumnType("datetime");

                entity.Property(e => e.PhoneNo)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.PoNo)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.PoType)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ShipCode)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ShipScac)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("ShipSCAC");

                entity.Property(e => e.ShipSpeed)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToAfcGln)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("ShipToAFC_GLN");

                entity.Property(e => e.ShipToAfcId)
                    .HasColumnName("ShipToAFC_id")
                    .HasComment("Amazon - AdAFCID table AmazonFC_id\\nWalmart - Destination Code (4 digit numeric)");

                entity.Property(e => e.ShipToName).HasMaxLength(64);

                entity.Property(e => e.ShipWindowEnd).HasColumnType("datetime");

                entity.Property(e => e.ShipWindowStart).HasColumnType("date");

                entity.Property(e => e.SoDate).HasColumnType("date");

                entity.Property(e => e.SoNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.SoTotal).HasColumnType("money");

                entity.Property(e => e.Source)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.State).HasMaxLength(32);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Zip)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ZIP");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.SoTs)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_SoT_Customer");
            });

            modelBuilder.Entity<SodBol>(entity =>
            {
                entity.ToTable("Sod_Bol", "ord");

                entity.HasIndex(e => new { e.BolId, e.SoDId }, "Unq_Sod_Bol")
                    .IsUnique();

                entity.HasIndex(e => e.BolId, "idx_Sod_Bol_Bol_id");

                entity.HasIndex(e => e.SoDId, "idx_Sod_Bol_SoD_id");

                entity.Property(e => e.SodBolId).HasColumnName("Sod_Bol_id");

                entity.Property(e => e.ActPalQty).HasColumnType("money");

                entity.Property(e => e.BolId).HasColumnName("Bol_id");

                entity.Property(e => e.BolNo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.NsSyncFail).HasComment("Null - Valid\\n0 - Valid\\n1 - Create Fail\\n2 - Modify Fail\\n3 - Delete Fail");

                entity.Property(e => e.NsSyncTime).HasColumnType("datetime");

                entity.Property(e => e.PalletTypeId).HasColumnName("PalletType_id");

                entity.Property(e => e.SoDId).HasColumnName("SoD_id");

                entity.Property(e => e.SoDate).HasColumnType("date");

                entity.Property(e => e.StdPalQty).HasColumnType("money");

                entity.Property(e => e.TimeCreated).HasColumnType("datetime");

                entity.Property(e => e.VolumeCf)
                    .HasColumnType("money")
                    .HasColumnName("VolumeCF");

                entity.Property(e => e.WeightLb)
                    .HasColumnType("money")
                    .HasColumnName("WeightLB");

                entity.HasOne(d => d.Bol)
                    .WithMany(p => p.SodBols)
                    .HasForeignKey(d => d.BolId)
                    .HasConstraintName("Fk_Sod_BolN_AdBol");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.SodBols)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_Sod_BolN_BpmItem");

                entity.HasOne(d => d.PalletType)
                    .WithMany(p => p.SodBols)
                    .HasForeignKey(d => d.PalletTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_Sod_BolN_PalletType");

                entity.HasOne(d => d.SoD)
                    .WithMany(p => p.SodBols)
                    .HasForeignKey(d => d.SoDId)
                    .HasConstraintName("Fk_Sod_BolN_SoD");
            });

            modelBuilder.Entity<SodPt>(entity =>
            {
                entity.ToTable("Sod_PT", "ord");

                entity.HasIndex(e => new { e.NsPtNo, e.NsPtLineId, e.NsPickTxId, e.PickBinId }, "Unq_Sod_PT")
                    .IsUnique();

                entity.HasIndex(e => e.SoDId, "idx_Sod_PT_SoD_id");

                entity.Property(e => e.SodPtId).HasColumnName("Sod_PT_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.NsPickTxId).HasColumnName("NsPickTx_id");

                entity.Property(e => e.NsPtCompId).HasColumnName("NsPtComp_id");

                entity.Property(e => e.NsPtLineId).HasColumnName("NsPtLine_id");

                entity.Property(e => e.PickBinId).HasColumnName("PickBin_id");

                entity.Property(e => e.PtStatusId).HasColumnName("PtStatus_id");

                entity.Property(e => e.QtyPicked).HasColumnType("money");

                entity.Property(e => e.SoDId).HasColumnName("SoD_id");

                entity.Property(e => e.SoDate).HasColumnType("date");

                entity.Property(e => e.TimePlanned).HasColumnType("datetime");

                entity.Property(e => e.ToteNo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.SodPts)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_Sod_PT_BpmItem");

                entity.HasOne(d => d.NsPtNoNavigation)
                    .WithMany(p => p.SodPts)
                    .HasForeignKey(d => d.NsPtNo)
                    .HasConstraintName("Fk_Sod_PT_PickTas");

                entity.HasOne(d => d.PickBin)
                    .WithMany(p => p.SodPts)
                    .HasForeignKey(d => d.PickBinId)
                    .HasConstraintName("Fk_Sod_PT_MslBinNo");

                entity.HasOne(d => d.PtStatus)
                    .WithMany(p => p.SodPts)
                    .HasForeignKey(d => d.PtStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_Sod_PT_StatusPT");

                entity.HasOne(d => d.SoD)
                    .WithMany(p => p.SodPts)
                    .HasForeignKey(d => d.SoDId)
                    .HasConstraintName("Fk_Sod_PT_SoD");
            });

            modelBuilder.Entity<SpRecapChn>(entity =>
            {
                entity.ToTable("SpRecap_CHN");

                entity.Property(e => e.SpRecapChnId)
                    .ValueGeneratedNever()
                    .HasColumnName("SpRecap_CHN_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SpRecapDuty>(entity =>
            {
                entity.ToTable("SpRecap_Duty");

                entity.Property(e => e.SpRecapDutyId).HasColumnName("SpRecap_Duty_id");

                entity.Property(e => e.CountryFrId).HasColumnName("CountryFr_id");

                entity.Property(e => e.CountryToId).HasColumnName("CountryTo_id");

                entity.Property(e => e.DateFrom).HasColumnType("date");

                entity.Property(e => e.DateTo).HasColumnType("date");

                entity.Property(e => e.Duty).HasColumnType("money");

                entity.Property(e => e.Gsp)
                    .HasColumnType("money")
                    .HasColumnName("GSP");

                entity.Property(e => e.HtsCode)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Memo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Tariff).HasColumnType("money");

                entity.HasOne(d => d.CountryFr)
                    .WithMany(p => p.SpRecapDutyCountryFrs)
                    .HasForeignKey(d => d.CountryFrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_SpRecap_Duty_Country");

                entity.HasOne(d => d.CountryTo)
                    .WithMany(p => p.SpRecapDutyCountryTos)
                    .HasForeignKey(d => d.CountryToId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_SpRecap_Duty_Country_0");
            });

            modelBuilder.Entity<SpRecapOcf>(entity =>
            {
                entity.ToTable("SpRecap_OCF");

                entity.Property(e => e.SpRecapOcfId).HasColumnName("SpRecap_OCF_id");

                entity.Property(e => e.CountryFrId).HasColumnName("CountryFr_id");

                entity.Property(e => e.CountryToId).HasColumnName("CountryTo_id");

                entity.Property(e => e.DateFr).HasColumnType("date");

                entity.Property(e => e.DateTo).HasColumnType("date");

                entity.Property(e => e.OceanCost).HasColumnType("money");

                entity.HasOne(d => d.CountryFr)
                    .WithMany(p => p.SpRecapOcfCountryFrs)
                    .HasForeignKey(d => d.CountryFrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_SpRecap_OCF_Country");

                entity.HasOne(d => d.CountryTo)
                    .WithMany(p => p.SpRecapOcfCountryTos)
                    .HasForeignKey(d => d.CountryToId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_SpRecap_OCF_Country_0");
            });

            modelBuilder.Entity<SpRecapOpex>(entity =>
            {
                entity.ToTable("SpRecap_OPEX");

                entity.Property(e => e.SpRecapOpexId).HasColumnName("SpRecap_OPEX_id");

                entity.Property(e => e.DateFr).HasColumnType("date");

                entity.Property(e => e.DateTo).HasColumnType("date");

                entity.Property(e => e.OpexPercent).HasColumnType("money");
            });

            modelBuilder.Entity<SpRecapRo>(entity =>
            {
                entity.HasKey(e => e.SpRecapRosId)
                    .HasName("Pk_SpRecap_ROS");

                entity.ToTable("SpRecap_ROS");

                entity.Property(e => e.SpRecapRosId).HasColumnName("SpRecap_ROS_id");

                entity.Property(e => e.DateFr).HasColumnType("date");

                entity.Property(e => e.DateTo).HasColumnType("date");

                entity.Property(e => e.RosChannelId).HasColumnName("RosChannel_id");

                entity.Property(e => e.RosPercent).HasColumnType("money");

                entity.HasOne(d => d.RosChannel)
                    .WithMany(p => p.SpRecapRos)
                    .HasForeignKey(d => d.RosChannelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_SpRecap_ROS_SpRecap_CHN");
            });

            modelBuilder.Entity<SpcInvD>(entity =>
            {
                entity.ToTable("SpcInvD");

                entity.Property(e => e.SpcInvDId).HasColumnName("SpcInvD_id");

                entity.Property(e => e.InvTypeId).HasColumnName("InvType_id");

                entity.Property(e => e.NetCharge).HasColumnType("money");

                entity.Property(e => e.PayTypeId).HasColumnName("PayType_id");

                entity.Property(e => e.PoNo).HasMaxLength(50);

                entity.Property(e => e.Ref1)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Ref2)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Ref3)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceId).HasColumnName("Service_id");

                entity.Property(e => e.ShipDate).HasColumnType("date");

                entity.Property(e => e.ShipFrCity).HasMaxLength(250);

                entity.Property(e => e.ShipFrCompany).HasMaxLength(250);

                entity.Property(e => e.ShipFrName).HasMaxLength(250);

                entity.Property(e => e.ShipFrState).HasMaxLength(250);

                entity.Property(e => e.ShipFrZip).HasMaxLength(250);

                entity.Property(e => e.ShipToCity).HasMaxLength(250);

                entity.Property(e => e.ShipToCompany).HasMaxLength(250);

                entity.Property(e => e.ShipToCtryId).HasColumnName("ShipToCtry_id");

                entity.Property(e => e.ShipToName).HasMaxLength(250);

                entity.Property(e => e.ShipToState).HasMaxLength(250);

                entity.Property(e => e.ShipToZip).HasMaxLength(250);

                entity.Property(e => e.SoDId).HasColumnName("SoD_id");

                entity.Property(e => e.SoTId).HasColumnName("SoT_id");

                entity.Property(e => e.SpcInvTId).HasColumnName("SpcInvT_id");

                entity.Property(e => e.TrackingNo).HasMaxLength(50);

                entity.Property(e => e.Weight).HasColumnType("money");

                entity.Property(e => e.Zone).HasMaxLength(50);

                entity.HasOne(d => d.InvType)
                    .WithMany(p => p.SpcInvDs)
                    .HasForeignKey(d => d.InvTypeId)
                    .HasConstraintName("fk_SpcInvD_SpcInvType");

                entity.HasOne(d => d.PayType)
                    .WithMany(p => p.SpcInvDs)
                    .HasForeignKey(d => d.PayTypeId)
                    .HasConstraintName("fk_SpcInvD_SpcPayType");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.SpcInvDs)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("fk_SpcInvD_SpcService");

                entity.HasOne(d => d.ShipToCtry)
                    .WithMany(p => p.SpcInvDs)
                    .HasForeignKey(d => d.ShipToCtryId)
                    .HasConstraintName("fk_SpcInvD_Country");

                entity.HasOne(d => d.SoD)
                    .WithMany(p => p.SpcInvDs)
                    .HasForeignKey(d => d.SoDId)
                    .HasConstraintName("fk_SpcInvD_SoD");

                entity.HasOne(d => d.SoT)
                    .WithMany(p => p.SpcInvDs)
                    .HasForeignKey(d => d.SoTId)
                    .HasConstraintName("fk_SpcInvD_SoT");

                entity.HasOne(d => d.SpcInvT)
                    .WithMany(p => p.SpcInvDs)
                    .HasForeignKey(d => d.SpcInvTId)
                    .HasConstraintName("fk_SpcInvD_SpcInvT");
            });

            modelBuilder.Entity<SpcInvT>(entity =>
            {
                entity.ToTable("SpcInvT");

                entity.Property(e => e.SpcInvTId).HasColumnName("SpcInvT_id");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.CarrierId).HasColumnName("Carrier_id");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Carrier)
                    .WithMany(p => p.SpcInvTs)
                    .HasForeignKey(d => d.CarrierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_SpcInvT_ShipCarrier");
            });

            modelBuilder.Entity<SpcInvType>(entity =>
            {
                entity.HasKey(e => e.InvTypeId);

                entity.ToTable("SpcInvType");

                entity.Property(e => e.InvTypeId).HasColumnName("InvType_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<SpcPayType>(entity =>
            {
                entity.HasKey(e => e.PayTypeId);

                entity.ToTable("SpcPayType");

                entity.Property(e => e.PayTypeId).HasColumnName("PayType_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<SpcService>(entity =>
            {
                entity.HasKey(e => e.ServiceId);

                entity.ToTable("SpcService");

                entity.Property(e => e.ServiceId).HasColumnName("Service_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<StateDivision>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("State_Division");

                entity.Property(e => e.Division)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StateCode)
                    .IsRequired()
                    .HasMaxLength(2);
            });

            modelBuilder.Entity<StateZipCountry>(entity =>
            {
                entity.HasKey(e => e.LookupId)
                    .HasName("PK_CityStateZipCountry");

                entity.ToTable("StateZipCountry", "ord");

                entity.HasIndex(e => e.Zip, "IX_CityStateZipCountry")
                    .IsUnique();

                entity.Property(e => e.LookupId).HasColumnName("Lookup_id");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Zip)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ZIP");
            });

            modelBuilder.Entity<StatusAddr>(entity =>
            {
                entity.HasKey(e => e.AddrStatusId)
                    .HasName("Pk_AddrStatus");

                entity.ToTable("StatusAddr", "ord");

                entity.Property(e => e.AddrStatusId).HasColumnName("AddrStatus_id");

                entity.Property(e => e.AddrStatus)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<StatusIf>(entity =>
            {
                entity.HasKey(e => e.IfStatusId)
                    .HasName("Pk_NsIfStatus_IfStatus_id");

                entity.ToTable("StatusIF", "ord");

                entity.Property(e => e.IfStatusId).HasColumnName("IfStatus_id");

                entity.Property(e => e.IfStatus)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasComment("New, In-Progress, Shipped, Cancelled");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");
            });

            modelBuilder.Entity<StatusItemAcpt>(entity =>
            {
                entity.HasKey(e => e.AcptStatusId)
                    .HasName("Pk_NsItemAcptStatus_AcptStatus_id");

                entity.ToTable("StatusItemAcpt", "ord");

                entity.Property(e => e.AcptStatusId).HasColumnName("AcptStatus_id");

                entity.Property(e => e.ItAcptAbbr)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ItAcptStatus)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasComment("IA,IR");
            });

            modelBuilder.Entity<StatusOrder>(entity =>
            {
                entity.HasKey(e => e.OrderStatusId)
                    .HasName("Pk_OrderStatus");

                entity.ToTable("StatusOrder", "ord");

                entity.Property(e => e.OrderStatusId).HasColumnName("OrderStatus_id");

                entity.Property(e => e.OrderStatus)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<StatusPt>(entity =>
            {
                entity.HasKey(e => e.PtStatusId)
                    .HasName("Pk_PickTaskStatus_PtStatus_id");

                entity.ToTable("StatusPT", "ord");

                entity.Property(e => e.PtStatusId).HasColumnName("PtStatus_id");

                entity.Property(e => e.NsLineId).HasColumnName("NsLineID");

                entity.Property(e => e.NsTaskId).HasColumnName("NsTaskID");

                entity.Property(e => e.PtStatus)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasComment("Planned, In-Process, Completed, Submitted, Cancelled");
            });

            modelBuilder.Entity<StrategyType>(entity =>
            {
                entity.ToTable("StrategyType");

                entity.Property(e => e.StrategyTypeId).HasColumnName("StrategyType_id");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TableauIncoming>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Tableau_Incoming");

                entity.Property(e => e.Apd)
                    .HasColumnType("date")
                    .HasColumnName("APD");

                entity.Property(e => e.BoLno)
                    .HasMaxLength(64)
                    .HasColumnName("BoLNo");

                entity.Property(e => e.Category)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ContainerNo).HasMaxLength(64);

                entity.Property(e => e.CtLoc)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("CT_Loc");

                entity.Property(e => e.DateAvail).HasColumnType("date");

                entity.Property(e => e.DateEstUnload).HasColumnType("date");

                entity.Property(e => e.DateLfdEmpty).HasColumnType("date");

                entity.Property(e => e.DateLfdPort).HasColumnType("date");

                entity.Property(e => e.DatePrePull).HasColumnType("date");

                entity.Property(e => e.DateReceived).HasColumnType("date");

                entity.Property(e => e.DateReturned).HasColumnType("date");

                entity.Property(e => e.DestName)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.EtaB)
                    .HasColumnType("date")
                    .HasColumnName("ETA_B");

                entity.Property(e => e.EtdB)
                    .HasColumnType("date")
                    .HasColumnName("ETD_B");

                entity.Property(e => e.EtdC)
                    .HasColumnType("date")
                    .HasColumnName("ETD_C");

                entity.Property(e => e.FLoc)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("F_Loc");

                entity.Property(e => e.Ir)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IR#");

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.NsIbsNo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.OriginName)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.PoDate).HasColumnType("date");

                entity.Property(e => e.PoEpcd)
                    .HasColumnType("date")
                    .HasColumnName("PoEPCD");

                entity.Property(e => e.PoEta)
                    .HasColumnType("datetime")
                    .HasColumnName("PoETA");

                entity.Property(e => e.PoEtd)
                    .HasColumnType("date")
                    .HasColumnName("PoETD");

                entity.Property(e => e.PoLoc)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("PO_Loc");

                entity.Property(e => e.PoNo)
                    .IsRequired()
                    .HasMaxLength(32);

                entity.Property(e => e.Pud)
                    .HasColumnType("date")
                    .HasColumnName("PUD");

                entity.Property(e => e.RcvDate).HasColumnType("date");

                entity.Property(e => e.RcvNo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.ShipLineName)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Spo)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("SPO#");

                entity.Property(e => e.StatusPo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("StatusPO");

                entity.Property(e => e.UnitCost).HasColumnType("money");

                entity.Property(e => e.VendorName)
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TakeBack>(entity =>
            {
                entity.ToTable("TakeBack");

                entity.Property(e => e.TakeBackId).HasColumnName("TakeBack_id");

                entity.Property(e => e.DateCreated).HasColumnType("date");

                entity.Property(e => e.DatePicked).HasColumnType("date");

                entity.Property(e => e.DateToPick).HasColumnType("date");

                entity.Property(e => e.LastModKoT).HasColumnType("datetime");

                entity.Property(e => e.PickWdEnd).HasColumnType("date");

                entity.Property(e => e.PickWdStart)
                    .HasColumnType("date")
                    .HasComment("Customer Wanted to Pick");

                entity.Property(e => e.SoDId).HasColumnName("SoD_id");

                entity.Property(e => e.TakeBackerId).HasColumnName("TakeBacker_id");

                entity.Property(e => e.TbAppNo)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasComment("Appointment No from TakeBacker");

                entity.Property(e => e.TbCostAct).HasColumnType("money");

                entity.Property(e => e.TbCostEst).HasColumnType("money");

                entity.Property(e => e.TbInvNo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.TbItemId).HasColumnName("TbItem_id");

                entity.Property(e => e.TbStatusId).HasColumnName("TbStatus_id");

                entity.Property(e => e.TotalCostAct).HasColumnType("money");

                entity.Property(e => e.TotalCostEst).HasColumnType("money");

                entity.HasOne(d => d.SoD)
                    .WithMany(p => p.TakeBacks)
                    .HasForeignKey(d => d.SoDId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_TakeBack_SoD");

                entity.HasOne(d => d.TakeBacker)
                    .WithMany(p => p.TakeBacks)
                    .HasForeignKey(d => d.TakeBackerId)
                    .HasConstraintName("Fk_TakeBack_TakeBacker");

                entity.HasOne(d => d.TbItem)
                    .WithMany(p => p.TakeBacks)
                    .HasForeignKey(d => d.TbItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_TakeBack_TbItem");

                entity.HasOne(d => d.TbStatus)
                    .WithMany(p => p.TakeBacks)
                    .HasForeignKey(d => d.TbStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_TakeBack_TbStatus");
            });

            modelBuilder.Entity<TakeBacker>(entity =>
            {
                entity.ToTable("TakeBacker");

                entity.HasIndex(e => e.TbName, "Unq_TakeBacker")
                    .IsUnique();

                entity.Property(e => e.TakeBackerId).HasColumnName("TakeBacker_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.TbName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.WebSite)
                    .HasMaxLength(128)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TargetingType>(entity =>
            {
                entity.ToTable("TargetingType");

                entity.Property(e => e.TargetingTypeId).HasColumnName("TargetingType_id");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TbArea>(entity =>
            {
                entity.ToTable("TbArea");

                entity.Property(e => e.TbAreaId).HasColumnName("TbArea_id");

                entity.Property(e => e.TakeBackerId).HasColumnName("TakeBacker_id");

                entity.Property(e => e.TbAreaCode)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.TbAreaType)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.TakeBacker)
                    .WithMany(p => p.TbAreas)
                    .HasForeignKey(d => d.TakeBackerId)
                    .HasConstraintName("Fk_TkBkArea_TakeBacker");
            });

            modelBuilder.Entity<TbCost>(entity =>
            {
                entity.ToTable("TbCost");

                entity.Property(e => e.TbCostId).HasColumnName("TbCost_id");

                entity.Property(e => e.TakeBackerId).HasColumnName("TakeBacker_id");

                entity.Property(e => e.TbCostSet).HasColumnType("money");

                entity.Property(e => e.TbCostSingle).HasColumnType("money");

                entity.Property(e => e.TbCostSize)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.HasOne(d => d.TakeBacker)
                    .WithMany(p => p.TbCosts)
                    .HasForeignKey(d => d.TakeBackerId)
                    .HasConstraintName("Fk_TkBkCharge_TakeBacker");
            });

            modelBuilder.Entity<TbDetail>(entity =>
            {
                entity.ToTable("TbDetail");

                entity.Property(e => e.TbDetailId).HasColumnName("TbDetail_id");

                entity.Property(e => e.TakeBackId).HasColumnName("TakeBack_id");

                entity.Property(e => e.TbCostAct).HasColumnType("money");

                entity.Property(e => e.TbCostEst).HasColumnType("money");

                entity.Property(e => e.TbItemId).HasColumnName("TbItem_id");

                entity.HasOne(d => d.TakeBack)
                    .WithMany(p => p.TbDetails)
                    .HasForeignKey(d => d.TakeBackId)
                    .HasConstraintName("Fk_SoD_TakeBack_TakeBack");

                entity.HasOne(d => d.TbItem)
                    .WithMany(p => p.TbDetails)
                    .HasForeignKey(d => d.TbItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_SoD_TakeBack_ItemTakeBack");
            });

            modelBuilder.Entity<TbItem>(entity =>
            {
                entity.ToTable("TbItem");

                entity.Property(e => e.TbItemId).HasColumnName("TbItem_id");

                entity.Property(e => e.TbItemName)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.TbItemSize)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TbStatus>(entity =>
            {
                entity.ToTable("TbStatus");

                entity.Property(e => e.TbStatusId).HasColumnName("TbStatus_id");

                entity.Property(e => e.StatusTb)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Temp>(entity =>
            {
                entity.HasKey(e => e.ForecastReportId);

                entity.ToTable("Temp");

                entity.HasComment("Forecast Report");

                entity.Property(e => e.CreatedImportDate).HasColumnType("datetime");

                entity.Property(e => e.Creator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.FcTargetDate)
                    .HasColumnType("date")
                    .HasColumnName("FC_TargetDate");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ReportNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("date");
            });

            modelBuilder.Entity<Temp16col>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Temp16col");

                entity.Property(e => e.C01)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.C02)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.C03)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.C04)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.C05)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.C06)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.C07)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.C08)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.C09)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.C10)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.C11)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C12)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C13)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C14)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C15)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C16)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C17)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C18)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C19)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.C20)
                    .HasMaxLength(128)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempMark>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TempMark");

                entity.Property(e => e.C01)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.C02)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.C03)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.C04)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.C05)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.C06)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.C07)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.C08)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempMissingArDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TempMissingArDate");

                entity.Property(e => e.ArBat)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.ArDate).HasColumnType("date");

                entity.Property(e => e.InvNo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.PoNo)
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempMissingFedEx>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TempMissingFedEx");

                entity.Property(e => e.PoNo)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.SkiC)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.SkuP)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.TrkNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.TrkNo2)
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempPoCust>(entity =>
            {
                entity.HasKey(e => e.PcId)
                    .HasName("Pk_TempPoCust_PC_id");

                entity.ToTable("TempPoCust");

                entity.Property(e => e.PcId).HasColumnName("PC_id");

                entity.Property(e => e.CustName)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.PoNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Test>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("test", "Test");

                entity.Property(e => e.AddedDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("addedDateTime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Field1).HasColumnName("field1");

                entity.Property(e => e.Field2)
                    .HasMaxLength(50)
                    .HasColumnName("field2");

                entity.Property(e => e.Field3)
                    .HasMaxLength(50)
                    .HasColumnName("field3");

                entity.Property(e => e.Field4).HasColumnName("field4");

                entity.Property(e => e.Lastmod)
                    .HasColumnType("datetime")
                    .HasColumnName("lastmod")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<TestV>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("test_v");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.Item)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("ITEM")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(38, 4)")
                    .HasColumnName("qty");
            });

            modelBuilder.Entity<TimeFrame>(entity =>
            {
                entity.ToTable("TimeFrame");

                entity.HasIndex(e => e.TimeFrame1, "idx_TimeFrame");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.TimeFrame1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TimeFrame");
            });

            modelBuilder.Entity<ToBol>(entity =>
            {
                entity.ToTable("ToBol");

                entity.HasIndex(e => e.BoLno, "idx_ToBol");

                entity.Property(e => e.ToBolId).HasColumnName("ToBol_id");

                entity.Property(e => e.BoLno)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("BoLNo");
            });

            modelBuilder.Entity<ToContainer>(entity =>
            {
                entity.ToTable("ToContainer");

                entity.HasIndex(e => e.ContainerNo, "idx_ToContainer");

                entity.Property(e => e.ToContainerId).HasColumnName("ToContainer_id");

                entity.Property(e => e.ContainerNo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ToBolId).HasColumnName("ToBol_id");

                entity.HasOne(d => d.ToBol)
                    .WithMany(p => p.ToContainers)
                    .HasForeignKey(d => d.ToBolId)
                    .HasConstraintName("Fk_ToContainer_ToBol");
            });

            modelBuilder.Entity<ToD>(entity =>
            {
                entity.ToTable("ToD");

                entity.HasIndex(e => new { e.ToTId, e.LineNo }, "Unq_ToD")
                    .IsUnique();

                entity.HasIndex(e => e.ItemNoId, "idx_ToD");

                entity.HasIndex(e => e.PoDId, "idx_ToD_0");

                entity.Property(e => e.ToDId).HasColumnName("ToD_id");

                entity.Property(e => e.AddedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.CustSku)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.InvDateForPickPackCost).HasColumnType("date");

                entity.Property(e => e.InvDateForTransCost).HasColumnType("date");

                entity.Property(e => e.InvNoForPickPackCost)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InvNoForTransCost)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.PickPackCost).HasColumnType("money");

                entity.Property(e => e.PoDId).HasColumnName("PoD_id");

                entity.Property(e => e.ToTId).HasColumnName("ToT_id");

                entity.Property(e => e.TransportationCost).HasColumnType("money");

                entity.Property(e => e.UnitCost).HasColumnType("money");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ToDs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_InvTRoD_BpmItem");

                entity.HasOne(d => d.PoD)
                    .WithMany(p => p.ToDs)
                    .HasForeignKey(d => d.PoDId)
                    .HasConstraintName("Fk_ToD_PoD");

                entity.HasOne(d => d.ToT)
                    .WithMany(p => p.ToDs)
                    .HasForeignKey(d => d.ToTId)
                    .HasConstraintName("Fk_ToD_ToT");
            });

            modelBuilder.Entity<ToDoList>(entity =>
            {
                entity.HasKey(e => e.ToDoId)
                    .HasName("Pk_ToDo_ToDo_id");

                entity.ToTable("ToDoList");

                entity.HasIndex(e => e.OwenerId, "Idx_ToDoList_Owener_id");

                entity.HasIndex(e => e.RequesterId, "Idx_ToDoList_Requester_id");

                entity.Property(e => e.ToDoId).HasColumnName("ToDo_id");

                entity.Property(e => e.DateDue).HasColumnType("date");

                entity.Property(e => e.DateFinish).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.Note)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OwenerId).HasColumnName("Owener_id");

                entity.Property(e => e.Progress).HasDefaultValueSql("((0))");

                entity.Property(e => e.ReqDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_id");

                entity.Property(e => e.ToDoDetail)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.ToDoGroup)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ToDoTitle)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.HasOne(d => d.Owener)
                    .WithMany(p => p.ToDoListOweners)
                    .HasForeignKey(d => d.OwenerId)
                    .HasConstraintName("Fk_ToDoList_Employee_0");

                entity.HasOne(d => d.Requester)
                    .WithMany(p => p.ToDoListRequesters)
                    .HasForeignKey(d => d.RequesterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_ToDoList_Employee");
            });

            modelBuilder.Entity<ToFfd>(entity =>
            {
                entity.ToTable("ToFFD");

                entity.HasIndex(e => e.ToFftId, "idx_ToFFD");

                entity.HasIndex(e => e.ToDId, "idx_ToFFD_0");

                entity.Property(e => e.ToFfdId).HasColumnName("ToFFD_id");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.ToDId).HasColumnName("ToD_id");

                entity.Property(e => e.ToFftId).HasColumnName("ToFFT_id");

                entity.HasOne(d => d.ToD)
                    .WithMany(p => p.ToFfds)
                    .HasForeignKey(d => d.ToDId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ToFFD_ToD");

                entity.HasOne(d => d.ToFft)
                    .WithMany(p => p.ToFfds)
                    .HasForeignKey(d => d.ToFftId)
                    .HasConstraintName("fk_ToFFD_ToFFT");
            });

            modelBuilder.Entity<ToFft>(entity =>
            {
                entity.ToTable("ToFFT");

                entity.HasIndex(e => new { e.IfNo, e.ToTId }, "idx_ToFFT");

                entity.HasIndex(e => e.GlimpactTId, "idx_ToFFT_0");

                entity.HasIndex(e => e.ToTId, "idx_ToFFT_1");

                entity.HasIndex(e => e.IfNo, "idx_ToFFT_2");

                entity.Property(e => e.ToFftId).HasColumnName("ToFFT_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.GlimpactTId).HasColumnName("GLImpactT_id");

                entity.Property(e => e.IfNo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IfStatusId)
                    .HasColumnName("IfStatus_id")
                    .HasDefaultValueSql("((3))");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.Source)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ToTId).HasColumnName("ToT_id");

                entity.HasOne(d => d.GlimpactT)
                    .WithMany(p => p.ToFfts)
                    .HasForeignKey(d => d.GlimpactTId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ToFFT_GLImpactT");

                entity.HasOne(d => d.IfStatus)
                    .WithMany(p => p.ToFfts)
                    .HasForeignKey(d => d.IfStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ToFFT_StatusIF");

                entity.HasOne(d => d.ToT)
                    .WithMany(p => p.ToFfts)
                    .HasForeignKey(d => d.ToTId)
                    .HasConstraintName("fk_ToFFT_ToT");
            });

            modelBuilder.Entity<ToRcvD>(entity =>
            {
                entity.ToTable("ToRcvD");

                entity.HasIndex(e => e.ToRcvTId, "idx_ToRcvD");

                entity.HasIndex(e => e.ToDId, "idx_ToRcvD_0");

                entity.Property(e => e.ToRcvDId).HasColumnName("ToRcvD_id");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.ToDId).HasColumnName("ToD_id");

                entity.Property(e => e.ToRcvTId).HasColumnName("ToRcvT_id");

                entity.HasOne(d => d.ToD)
                    .WithMany(p => p.ToRcvDs)
                    .HasForeignKey(d => d.ToDId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ToRcvD_ToD");

                entity.HasOne(d => d.ToRcvT)
                    .WithMany(p => p.ToRcvDs)
                    .HasForeignKey(d => d.ToRcvTId)
                    .HasConstraintName("fk_ToRcvD_ToRcvT");
            });

            modelBuilder.Entity<ToRcvT>(entity =>
            {
                entity.ToTable("ToRcvT");

                entity.HasIndex(e => e.RcvNo, "idx_ToRcvT");

                entity.HasIndex(e => e.GlimpactTId, "idx_ToRcvT_0");

                entity.HasIndex(e => e.ToTId, "idx_ToRcvT_1");

                entity.HasIndex(e => e.NsIntId, "idx_ToRcvT_NsInt_id");

                entity.Property(e => e.ToRcvTId).HasColumnName("ToRcvT_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ExternalId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("External_id");

                entity.Property(e => e.GlimpactTId).HasColumnName("GLImpactT_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.RcvNo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Source)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ToTId).HasColumnName("ToT_id");

                entity.HasOne(d => d.GlimpactT)
                    .WithMany(p => p.ToRcvTs)
                    .HasForeignKey(d => d.GlimpactTId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ToRcvT_GLImpactT");

                entity.HasOne(d => d.ToT)
                    .WithMany(p => p.ToRcvTs)
                    .HasForeignKey(d => d.ToTId)
                    .HasConstraintName("fk_ToRcvT_ToT");
            });

            modelBuilder.Entity<ToStatus>(entity =>
            {
                entity.ToTable("ToStatus");

                entity.Property(e => e.ToStatusId).HasColumnName("ToStatus_id");

                entity.Property(e => e.StatusTo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("StatusTO");
            });

            modelBuilder.Entity<ToT>(entity =>
            {
                entity.ToTable("ToT");

                entity.HasIndex(e => new { e.NsToNo, e.TrsfNo, e.CustRef }, "idx_ToT");

                entity.HasIndex(e => new { e.BpmPo, e.NewSpo }, "idx_ToT_0");

                entity.HasIndex(e => new { e.ShipFrId, e.ShipToId }, "idx_ToT_1");

                entity.HasIndex(e => new { e.PoTId, e.ToContainerId }, "idx_ToT_2");

                entity.Property(e => e.ToTId).HasColumnName("ToT_id");

                entity.Property(e => e.AddedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.BpmPo)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("BPM_PO");

                entity.Property(e => e.CustRef)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Euld)
                    .HasColumnType("date")
                    .HasColumnName("EULD");

                entity.Property(e => e.ExternalId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("External_id");

                entity.Property(e => e.Ifno)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("IFNo");

                entity.Property(e => e.Memo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NewSpo)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("New_SPO");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.NsSyncTime).HasColumnType("datetime");

                entity.Property(e => e.NsToNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.OrderDate).HasColumnType("date");

                entity.Property(e => e.PoTId).HasColumnName("PoT_id");

                entity.Property(e => e.RecvDate).HasColumnType("date");

                entity.Property(e => e.RecvNo)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ShipEta)
                    .HasColumnType("date")
                    .HasColumnName("ShipETA");

                entity.Property(e => e.ShipEtd)
                    .HasColumnType("date")
                    .HasColumnName("ShipETD");

                entity.Property(e => e.ShipFrId).HasColumnName("ShipFr_id");

                entity.Property(e => e.ShipToId).HasColumnName("ShipTo_id");

                entity.Property(e => e.Source)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNo)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ToContainerId).HasColumnName("ToContainer_id");

                entity.Property(e => e.ToStatusId)
                    .HasColumnName("ToStatus_id")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TrsfNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.HasOne(d => d.PoT)
                    .WithMany(p => p.ToTs)
                    .HasForeignKey(d => d.PoTId)
                    .HasConstraintName("Fk_ToT_PoT_0");

                entity.HasOne(d => d.ShipFr)
                    .WithMany(p => p.ToTShipFrs)
                    .HasForeignKey(d => d.ShipFrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_ToT_BpmLocation");

                entity.HasOne(d => d.ShipTo)
                    .WithMany(p => p.ToTShipTos)
                    .HasForeignKey(d => d.ShipToId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_ToT_BpmLocation_0");

                entity.HasOne(d => d.ToContainer)
                    .WithMany(p => p.ToTs)
                    .HasForeignKey(d => d.ToContainerId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("Fk_ToT_ToContainer");

                entity.HasOne(d => d.ToStatus)
                    .WithMany(p => p.ToTs)
                    .HasForeignKey(d => d.ToStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_ToT_ToStatus");
            });

            modelBuilder.Entity<TplBegInventory>(entity =>
            {
                entity.HasKey(e => e.InvHistoryId)
                    .HasName("Pk_InventoryHistoryTPL");

                entity.ToTable("TplBegInventory");

                entity.Property(e => e.InvHistoryId).HasColumnName("InvHistory_id");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LocationDetailId).HasColumnName("LocationDetail_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.TplBegInventories)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InventoryHistoryTPL_KO_Itemno");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.TplBegInventories)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InventoryHistoryTPL_KO_Location");
            });

            modelBuilder.Entity<TplInvRptD>(entity =>
            {
                entity.ToTable("TplInvRptD");

                entity.Property(e => e.TplInvRptDId).HasColumnName("TplInvRptD_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.TplInvRptTId).HasColumnName("TplInvRptT_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.TplInvRptDs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_InvTplRptD_BpmItem");

                entity.HasOne(d => d.TplInvRptT)
                    .WithMany(p => p.TplInvRptDs)
                    .HasForeignKey(d => d.TplInvRptTId)
                    .HasConstraintName("fk_InvTplRptD_InvTplRptT");
            });

            modelBuilder.Entity<TplInvRptT>(entity =>
            {
                entity.ToTable("TplInvRptT");

                entity.HasComment("EDI 846 report from TPL");

                entity.Property(e => e.TplInvRptTId).HasColumnName("TplInvRptT_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.ReportId)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("ReportID");

                entity.Property(e => e.ReportTime).HasColumnType("datetime");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.TplInvRptTs)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_InventoryTPL_BpmLocation");
            });

            modelBuilder.Entity<TplinvoiceD>(entity =>
            {
                entity.ToTable("TPLInvoiceD", "ord");

                entity.Property(e => e.TplinvoiceDId).HasColumnName("TPLInvoiceD_id");

                entity.Property(e => e.InvoiceAmount).HasColumnType("money");

                entity.Property(e => e.InvoiceDate).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.OrderAmount).HasColumnType("money");

                entity.Property(e => e.PoNo)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.SoDate).HasColumnType("date");

                entity.Property(e => e.TplinvoiceTId).HasColumnName("TPLInvoiceT_id");

                entity.Property(e => e.TplinvoiceTypeId).HasColumnName("TPLInvoiceType_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.TplinvoiceDs)
                    .HasForeignKey(d => d.ItemNoId)
                    .HasConstraintName("Fk_TPLInvoiceD_BpmItem");

                entity.HasOne(d => d.TplinvoiceT)
                    .WithMany(p => p.TplinvoiceDs)
                    .HasForeignKey(d => d.TplinvoiceTId)
                    .HasConstraintName("Fk_TPLInvoiceD_TPLInvoiceT");

                entity.HasOne(d => d.TplinvoiceType)
                    .WithMany(p => p.TplinvoiceDs)
                    .HasForeignKey(d => d.TplinvoiceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_TPLInvoiceD_TPLInvoiceType");
            });

            modelBuilder.Entity<TplinvoiceRate>(entity =>
            {
                entity.ToTable("TPLInvoiceRate", "ord");

                entity.HasIndex(e => new { e.LocationId, e.TplinvoiceTypeId, e.ItemNoId }, "Unq_TPLInvoiceRate_TPLLocation_id")
                    .IsUnique();

                entity.Property(e => e.TplinvoiceRateId).HasColumnName("TPLInvoiceRate_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.Rate).HasColumnType("money");

                entity.Property(e => e.TplinvoiceTypeId).HasColumnName("TPLInvoiceType_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.TplinvoiceRates)
                    .HasForeignKey(d => d.ItemNoId)
                    .HasConstraintName("Fk_TPLInvoiceRate_BpmItem");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.TplinvoiceRates)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_TPLInvoiceRate_BpmLocation");

                entity.HasOne(d => d.TplinvoiceType)
                    .WithMany(p => p.TplinvoiceRates)
                    .HasForeignKey(d => d.TplinvoiceTypeId)
                    .HasConstraintName("Fk_TPLInvoiceRate_TPLInvoiceType");
            });

            modelBuilder.Entity<TplinvoiceT>(entity =>
            {
                entity.ToTable("TPLInvoiceT", "ord");

                entity.HasIndex(e => new { e.LocationId, e.InvoiceNo }, "Unq_TPLInvoiceT_Location_id")
                    .IsUnique();

                entity.Property(e => e.TplinvoiceTId).HasColumnName("TPLInvoiceT_id");

                entity.Property(e => e.InvoiceNo)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.TplinvoiceTs)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_TPLInvoiceT_BpmLocation");
            });

            modelBuilder.Entity<TplinvoiceType>(entity =>
            {
                entity.ToTable("TPLInvoiceType", "ord");

                entity.HasIndex(e => new { e.TypeName, e.LocationId }, "Unq_TPLInvoiceType_Type")
                    .IsUnique();

                entity.Property(e => e.TplinvoiceTypeId).HasColumnName("TPLInvoiceType_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.TplinvoiceTypes)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_TPLInvoiceType_BpmLocation");
            });

            modelBuilder.Entity<TrackingInfo>(entity =>
            {
                entity.ToTable("TrackingInfo", "ord");

                entity.Property(e => e.TrackingInfoId).HasColumnName("TrackingInfo_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.OrderLineId).HasColumnName("OrderLine_id");

                entity.Property(e => e.TrackingNumber).IsRequired();

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.TrackingInfos)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__TrackingI__Itemn__0EEE1503");

                entity.HasOne(d => d.OrderLine)
                    .WithMany(p => p.TrackingInfos)
                    .HasForeignKey(d => d.OrderLineId)
                    .HasConstraintName("OrderDetail_TrackingInfo_CASCADE");
            });

            modelBuilder.Entity<TransactionLocation>(entity =>
            {
                entity.ToTable("TransactionLocation");

                entity.Property(e => e.TransactionLocationId).HasColumnName("TransactionLocation_id");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TransactionReasonCode>(entity =>
            {
                entity.ToTable("TransactionReasonCode");

                entity.Property(e => e.TransactionReasonCodeId).HasColumnName("TransactionReasonCode_id");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TransactionType>(entity =>
            {
                entity.ToTable("TransactionType");

                entity.Property(e => e.TransactionTypeId).HasColumnName("TransactionType_id");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TranscError>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TranscError", "log");

                entity.Property(e => e.TranscNumber).HasMaxLength(50);

                entity.Property(e => e.TranscType).HasMaxLength(50);

                entity.Property(e => e.UniqId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Uniq_id");
            });

            modelBuilder.Entity<TranspCharge>(entity =>
            {
                entity.HasKey(e => e.ChargeId)
                    .HasName("Pk_TransporterCharge_Charge_id");

                entity.ToTable("TranspCharge");

                entity.Property(e => e.ChargeId).HasColumnName("Charge_id");

                entity.Property(e => e.DateFrom).HasColumnType("date");

                entity.Property(e => e.DateTo).HasColumnType("date");

                entity.Property(e => e.LatePerDay).HasColumnType("money");

                entity.Property(e => e.PrePull).HasColumnType("money");

                entity.Property(e => e.StoragePerDay).HasColumnType("money");

                entity.Property(e => e.TransporterId).HasColumnName("Transporter_id");

                entity.HasOne(d => d.Transporter)
                    .WithMany(p => p.TranspCharges)
                    .HasForeignKey(d => d.TransporterId)
                    .HasConstraintName("FK_TransporterCharge_Transporter");
            });

            modelBuilder.Entity<Transporter>(entity =>
            {
                entity.ToTable("Transporter");

                entity.Property(e => e.TransporterId).HasColumnName("Transporter_id");

                entity.Property(e => e.ChargeId).HasColumnName("Charge_id");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.TranspName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.HasOne(d => d.Charge)
                    .WithMany(p => p.Transporters)
                    .HasForeignKey(d => d.ChargeId)
                    .HasConstraintName("FK_Transporter_TransporterCharge");
            });

            modelBuilder.Entity<TutorialBranch>(entity =>
            {
                entity.HasKey(e => e.BranchId)
                    .HasName("Pk_Tbl_emp_id_0");

                entity.ToTable("Tutorial_Branch");

                entity.Property(e => e.BranchId)
                    .ValueGeneratedNever()
                    .HasColumnName("branch_id");

                entity.Property(e => e.BranchName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("branch_name");

                entity.Property(e => e.MgrId).HasColumnName("mgr_id");
            });

            modelBuilder.Entity<TutorialClient>(entity =>
            {
                entity.HasKey(e => e.ClientId)
                    .HasName("Pk_Tutorial_Client_client_id");

                entity.ToTable("Tutorial_Client");

                entity.Property(e => e.ClientId)
                    .ValueGeneratedNever()
                    .HasColumnName("client_id");

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.ClientName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("client_name");
            });

            modelBuilder.Entity<TutorialEmployee>(entity =>
            {
                entity.HasKey(e => e.EmpId)
                    .HasName("Pk_Tbl_emp_id");

                entity.ToTable("Tutorial_Employee");

                entity.Property(e => e.EmpId)
                    .ValueGeneratedNever()
                    .HasColumnName("emp_id");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("date")
                    .HasColumnName("birth_date");

                entity.Property(e => e.BranchId).HasColumnName("branch_id");

                entity.Property(e => e.Country)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("country");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("first_name");

                entity.Property(e => e.LastName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_name");

                entity.Property(e => e.SuperId).HasColumnName("super_id");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.TutorialEmployees)
                    .HasForeignKey(d => d.BranchId)
                    .HasConstraintName("Fk_Tutorial_Employee_Tutorial_Branch");
            });

            modelBuilder.Entity<TutorialWorksWith>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tutorial_Works_With");

                entity.Property(e => e.ClientId).HasColumnName("client_id");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("country");

                entity.Property(e => e.EmpId).HasColumnName("emp_id");
            });

            modelBuilder.Entity<Upsinvoice>(entity =>
            {
                entity.ToTable("UPSInvoice");

                entity.Property(e => e.UpsinvoiceId).HasColumnName("UPSInvoice_ID");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AmountDue)
                    .HasColumnType("money")
                    .HasColumnName("Amount_Due");

                entity.Property(e => e.BilledCharge)
                    .HasColumnType("money")
                    .HasColumnName("Billed_Charge");

                entity.Property(e => e.Channel).HasMaxLength(50);

                entity.Property(e => e.CustomerPo)
                    .HasMaxLength(50)
                    .HasColumnName("Customer_PO");

                entity.Property(e => e.CustomerSku)
                    .HasMaxLength(50)
                    .HasColumnName("Customer_SKU");

                entity.Property(e => e.IncentiveCredit)
                    .HasColumnType("money")
                    .HasColumnName("Incentive_Credit");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("date")
                    .HasColumnName("Invoice_Date");

                entity.Property(e => e.InvoiceDueDate)
                    .HasColumnType("date")
                    .HasColumnName("Invoice_Due_Date");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Invoice_Number");

                entity.Property(e => e.InvoiceSection)
                    .HasMaxLength(50)
                    .HasColumnName("Invoice_Section");

                entity.Property(e => e.KoOrderId)
                    .HasMaxLength(50)
                    .HasColumnName("KO_Order_ID");

                entity.Property(e => e.PickupDate)
                    .HasColumnType("date")
                    .HasColumnName("Pickup_Date");

                entity.Property(e => e.Ref1)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Ref2)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Ref3)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceLevel)
                    .HasMaxLength(100)
                    .HasColumnName("Service_Level");

                entity.Property(e => e.ServiceTypeId).HasColumnName("ServiceType_id");

                entity.Property(e => e.ShipFromCity).HasMaxLength(50);

                entity.Property(e => e.ShipFromCompany).HasMaxLength(50);

                entity.Property(e => e.ShipToCity).HasMaxLength(50);

                entity.Property(e => e.ShipToName).HasMaxLength(50);

                entity.Property(e => e.ShipToState).HasMaxLength(50);

                entity.Property(e => e.ShipToStreet).HasMaxLength(50);

                entity.Property(e => e.ShipToZipCode).HasMaxLength(20);

                entity.Property(e => e.SoDId).HasColumnName("SoD_id");

                entity.Property(e => e.TrackingNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Tracking_Number");

                entity.HasOne(d => d.SoD)
                    .WithMany(p => p.Upsinvoices)
                    .HasForeignKey(d => d.SoDId)
                    .HasConstraintName("fk_UPSInvoice_SoD");
            });

            modelBuilder.Entity<VAllInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_AllInvoices");

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.Customer)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Invdate)
                    .HasColumnType("date")
                    .HasColumnName("INVDATE");

                entity.Property(e => e.Invnumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("INVNUMBER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Item)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("ITEM")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Ordnumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("ORDNUMBER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Ponumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("PONUMBER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(19, 4)")
                    .HasColumnName("qty");

                entity.Property(e => e.Sales)
                    .HasColumnType("decimal(19, 3)")
                    .HasColumnName("sales");

                entity.Property(e => e.Shipvia)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("SHIPVIA")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Shpcity)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SHPCITY")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Shpstate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SHPSTATE")
                    .UseCollation("Latin1_General_CI_AS");
            });

            modelBuilder.Entity<VAllSageOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_AllSageOrders");

                entity.Property(e => e.Customer)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Item)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("ITEM")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Lastinvnum)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("LASTINVNUM")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Orddate)
                    .HasColumnType("date")
                    .HasColumnName("ORDDATE");

                entity.Property(e => e.Ordnumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("ORDNUMBER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Ponumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("PONUMBER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(19, 4)")
                    .HasColumnName("qty");

                entity.Property(e => e.Shpaddr1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SHPADDR1")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Shpcity)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SHPCITY")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Shpname)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SHPNAME")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Shpstate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SHPSTATE")
                    .UseCollation("Latin1_General_CI_AS");
            });

            modelBuilder.Entity<VAllSale>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_AllSales");

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.CdDesc)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CD_Desc")
                    .UseCollation("Latvian_BIN");

                entity.Property(e => e.Country)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY")
                    .UseCollation("Latvian_BIN");

                entity.Property(e => e.Customer)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER")
                    .UseCollation("Latvian_BIN");

                entity.Property(e => e.Invdate)
                    .HasColumnType("date")
                    .HasColumnName("INVDATE");

                entity.Property(e => e.Invnumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("INVNUMBER")
                    .UseCollation("Latvian_BIN");

                entity.Property(e => e.Item)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("ITEM")
                    .UseCollation("Latvian_BIN");

                entity.Property(e => e.Loc)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("LOC")
                    .UseCollation("Latvian_BIN");

                entity.Property(e => e.Ordnumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("ORDNUMBER")
                    .UseCollation("Latvian_BIN");

                entity.Property(e => e.Ponumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("PONUMBER")
                    .UseCollation("Latvian_BIN");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(20, 4)")
                    .HasColumnName("qty");

                entity.Property(e => e.Sales)
                    .HasColumnType("decimal(20, 3)")
                    .HasColumnName("sales");

                entity.Property(e => e.Shipvia)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("SHIPVIA")
                    .UseCollation("Latvian_BIN");

                entity.Property(e => e.Shpaddr1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SHPADDR1")
                    .UseCollation("Latvian_BIN");

                entity.Property(e => e.Shpcity)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SHPCITY")
                    .UseCollation("Latvian_BIN");

                entity.Property(e => e.Shpname)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SHPNAME")
                    .UseCollation("Latvian_BIN");

                entity.Property(e => e.Shpstate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SHPSTATE")
                    .UseCollation("Latvian_BIN");

                entity.Property(e => e.Shpzip)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SHPZIP")
                    .UseCollation("Latvian_BIN");
            });

            modelBuilder.Entity<VAllSalesZinu>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_AllSalesZinus");

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.CategoryZinus)
                    .HasMaxLength(50)
                    .HasColumnName("Category_Zinus");

                entity.Property(e => e.CdDesc)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CD_Desc")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Customer)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Invdate)
                    .HasColumnType("date")
                    .HasColumnName("INVDATE");

                entity.Property(e => e.Invnumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("INVNUMBER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Item)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("ITEM")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Loc)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("LOC")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.MarketPlaceNameZinus)
                    .HasMaxLength(50)
                    .HasColumnName("MarketPlace_name_Zinus");

                entity.Property(e => e.Ordnumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("ORDNUMBER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Ponumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("PONUMBER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(20, 4)")
                    .HasColumnName("qty");

                entity.Property(e => e.Sales)
                    .HasColumnType("decimal(20, 3)")
                    .HasColumnName("sales");

                entity.Property(e => e.Shipvia)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("SHIPVIA")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Shpaddr1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SHPADDR1")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Shpcity)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SHPCITY")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Shpname)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SHPNAME")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Shpstate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SHPSTATE")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Shpzip)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SHPZIP")
                    .UseCollation("Latin1_General_CI_AS");
            });

            modelBuilder.Entity<VAllSalesbyComponent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_AllSalesbyComponent");

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.CdDesc)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CD_Desc")
                    .UseCollation("Latvian_BIN");

                entity.Property(e => e.Customer)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER")
                    .UseCollation("Latvian_BIN");

                entity.Property(e => e.Invdate)
                    .HasColumnType("date")
                    .HasColumnName("INVDATE");

                entity.Property(e => e.Invnumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("INVNUMBER")
                    .UseCollation("Latvian_BIN");

                entity.Property(e => e.Item)
                    .HasMaxLength(50)
                    .HasColumnName("ITEM");

                entity.Property(e => e.Loc)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("LOC")
                    .UseCollation("Latvian_BIN");

                entity.Property(e => e.Ordnumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("ORDNUMBER")
                    .UseCollation("Latvian_BIN");

                entity.Property(e => e.Ponumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("PONUMBER")
                    .UseCollation("Latvian_BIN");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(31, 4)")
                    .HasColumnName("qty");

                entity.Property(e => e.Shipvia)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("SHIPVIA")
                    .UseCollation("Latvian_BIN");

                entity.Property(e => e.Shpcity)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SHPCITY")
                    .UseCollation("Latvian_BIN");

                entity.Property(e => e.Shpstate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SHPSTATE")
                    .UseCollation("Latvian_BIN");

                entity.Property(e => e.Shpzip)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SHPZIP")
                    .UseCollation("Latvian_BIN");
            });

            modelBuilder.Entity<VAmzdrostd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_amzdrostd");

                entity.Property(e => e.ExpectedShipDate).HasColumnType("date");

                entity.Property(e => e.InvQty)
                    .HasColumnType("decimal(38, 4)")
                    .HasColumnName("inv_qty");

                entity.Property(e => e.Itemno).HasMaxLength(50);

                entity.Property(e => e.OstdQty)
                    .HasColumnType("decimal(38, 4)")
                    .HasColumnName("ostd_qty");

                entity.Property(e => e.Ponumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("PONumber");

                entity.Property(e => e.TotalCost).HasColumnType("money");

                entity.Property(e => e.UnitCost).HasColumnType("money");

                entity.Property(e => e.VendorCode).HasMaxLength(50);
            });

            modelBuilder.Entity<VAmzobByComponent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_AMZOB_byComponent");

                entity.Property(e => e.Amzobqty).HasColumnName("AMZOBQty");

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Itemno).HasMaxLength(50);

                entity.Property(e => e.Openqty).HasColumnName("openqty");

                entity.Property(e => e.QtyAtAmz).HasColumnName("QtyAtAMZ");
            });

            modelBuilder.Entity<VAmzrankHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_AMZRankHistory");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Itemno).HasMaxLength(50);
            });

            modelBuilder.Entity<VAmzsellerOrderinfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_AMZSELLER_orderinfo");

                entity.Property(e => e.Address1).HasMaxLength(50);

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.CustomerPonumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Customer_PONumber");

                entity.Property(e => e.EndCustomerId).HasColumnName("EndCustomer_id");

                entity.Property(e => e.FullName).HasMaxLength(50);

                entity.Property(e => e.ItemnoId).HasColumnName("Itemno_id");
            });

            modelBuilder.Entity<VAmzvendorOstdInTransit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_AMZVendor_ostd_InTransit");

                entity.Property(e => e.AmzOstdQty)
                    .HasColumnType("decimal(38, 4)")
                    .HasColumnName("amz_ostd_qty");

                entity.Property(e => e.Itemno).HasMaxLength(50);

                entity.Property(e => e.Ponumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("PONUMBER")
                    .UseCollation("Latin1_General_CI_AS");
            });

            modelBuilder.Entity<VAmzwklyByComponent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_AMZWkly_byComponent");

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.Customer)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER");

                entity.Property(e => e.Item)
                    .HasMaxLength(50)
                    .HasColumnName("ITEM");

                entity.Property(e => e.MondayOfWeek).HasColumnType("date");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(38, 4)")
                    .HasColumnName("qty");
            });

            modelBuilder.Entity<VAsinAmzskuItemno>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_ASIN_AMZSKU_Itemno");

                entity.Property(e => e.AmzsellerSku)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("AMZSeller_SKU");

                entity.Property(e => e.Asin)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ASIN");

                entity.Property(e => e.Itemno).HasMaxLength(50);

                entity.Property(e => e.ItemnoId).HasColumnName("Itemno_id");
            });

            modelBuilder.Entity<VBom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BOM");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.Child)
                    .HasMaxLength(50)
                    .HasColumnName("child");

                entity.Property(e => e.ChildId).HasColumnName("child_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.Parent)
                    .HasMaxLength(50)
                    .HasColumnName("parent");

                entity.Property(e => e.ParentId).HasColumnName("parent_id");
            });

            modelBuilder.Entity<VBomTransposed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BOM_transposed");

                entity.Property(e => e.Child1)
                    .HasMaxLength(50)
                    .HasColumnName("child_1");

                entity.Property(e => e.Child2)
                    .HasMaxLength(50)
                    .HasColumnName("child_2");

                entity.Property(e => e.Child3)
                    .HasMaxLength(50)
                    .HasColumnName("child_3");

                entity.Property(e => e.Child4)
                    .HasMaxLength(50)
                    .HasColumnName("child_4");

                entity.Property(e => e.Parent)
                    .HasMaxLength(50)
                    .HasColumnName("parent");
            });

            modelBuilder.Entity<VCarrierAccount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_CarrierAccount");

                entity.Property(e => e.BillAccNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CarrierAcctId).HasColumnName("CarrierAcct_id");

                entity.Property(e => e.CarrierName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Carrier_name");

                entity.Property(e => e.MarketPlaceName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("MarketPlace_name");

                entity.Property(e => e.ShipAccNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShipFromLocation)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VCog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_COGS");

                entity.Property(e => e.Cat)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CAT")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Customer)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Exticost)
                    .HasColumnType("decimal(19, 3)")
                    .HasColumnName("EXTICOST");

                entity.Property(e => e.Invdate)
                    .HasColumnType("date")
                    .HasColumnName("INVDATE");

                entity.Property(e => e.Item)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("ITEM")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Ponumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("PONUMBER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Qtyshipped)
                    .HasColumnType("decimal(19, 4)")
                    .HasColumnName("QTYSHIPPED");
            });

            modelBuilder.Entity<VCreditDebitTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_CreditDebitTable");

                entity.Property(e => e.Adjtype)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ADJTYPE");

                entity.Property(e => e.Cdamt)
                    .HasColumnType("decimal(19, 3)")
                    .HasColumnName("CDAMT");

                entity.Property(e => e.Crdnumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("CRDNUMBER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Customer)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Desc)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DESC")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Invdate)
                    .HasColumnType("date")
                    .HasColumnName("INVDATE");

                entity.Property(e => e.Invnumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("INVNUMBER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Item)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("ITEM")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Location)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Ordnumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("ORDNUMBER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Ponumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("PONUMBER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Qtyrt)
                    .HasColumnType("decimal(19, 4)")
                    .HasColumnName("QTYRT");

                entity.Property(e => e.Retdate)
                    .HasColumnType("decimal(9, 0)")
                    .HasColumnName("RETDATE");
            });

            modelBuilder.Entity<VCustomerPo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_CustomerPO");

                entity.Property(e => e.ExpectedShipDate).HasColumnType("date");

                entity.Property(e => e.Itemno).HasMaxLength(50);

                entity.Property(e => e.LastModDateTime).HasColumnType("datetime");

                entity.Property(e => e.Ponumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("PONumber");

                entity.Property(e => e.ShipWindowEnd).HasColumnType("date");

                entity.Property(e => e.ShipWindowStart).HasColumnType("date");

                entity.Property(e => e.TotalCost).HasColumnType("money");

                entity.Property(e => e.UnitCost).HasColumnType("money");

                entity.Property(e => e.VendorCode).HasMaxLength(50);
            });

            modelBuilder.Entity<VFedexInvoiceSumm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_FedexInvoiceSumm");

                entity.Property(e => e.ChargeDesc).HasMaxLength(50);

                entity.Property(e => e.Max)
                    .HasColumnType("money")
                    .HasColumnName("max");

                entity.Property(e => e.Mean)
                    .HasColumnType("money")
                    .HasColumnName("mean");

                entity.Property(e => e.Min)
                    .HasColumnType("money")
                    .HasColumnName("min");

                entity.Property(e => e.OrigCustRefItem)
                    .HasMaxLength(50)
                    .HasColumnName("Orig_cust_ref_item");

                entity.Property(e => e.Std).HasColumnName("std");
            });

            modelBuilder.Entity<VForecastAllSale>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_ForecastAllSales");

                entity.Property(e => e.Customer)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Invdate)
                    .HasColumnType("date")
                    .HasColumnName("INVDATE");

                entity.Property(e => e.Invuniq)
                    .HasColumnType("decimal(19, 0)")
                    .HasColumnName("INVUNIQ");

                entity.Property(e => e.Item)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("ITEM")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.ItemnoId).HasColumnName("Itemno_id");

                entity.Property(e => e.Loc)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("LOC")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.MarketPlaceId).HasColumnName("MarketPlace_id");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(20, 4)")
                    .HasColumnName("qty");
            });

            modelBuilder.Entity<VForecasting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_forecasting");

                entity.Property(e => e.AddedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DateFuture).HasColumnType("datetime");

                entity.Property(e => e.Itemno)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VForecastinginvt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_forecastinginvt");

                entity.Property(e => e.AddedDateTime).HasColumnType("datetime");

                entity.Property(e => e.DateFuture).HasColumnType("datetime");

                entity.Property(e => e.Itemno)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VGetStoredProc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_GetStoredProc");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.IsMsShipped).HasColumnName("is_ms_shipped");

                entity.Property(e => e.IsPublished).HasColumnName("is_published");

                entity.Property(e => e.IsSchemaPublished).HasColumnName("is_schema_published");

                entity.Property(e => e.ModifyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("modify_date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("name");

                entity.Property(e => e.ObjectId).HasColumnName("object_id");

                entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");

                entity.Property(e => e.PrincipalId).HasColumnName("principal_id");

                entity.Property(e => e.SchemaId).HasColumnName("schema_id");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("type")
                    .IsFixedLength(true)
                    .UseCollation("Latin1_General_CI_AS_KS_WS");

                entity.Property(e => e.TypeDesc)
                    .HasMaxLength(60)
                    .HasColumnName("type_desc")
                    .UseCollation("Latin1_General_CI_AS_KS_WS");
            });

            modelBuilder.Entity<VInventoryHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_InventoryHistory");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Itemno).HasMaxLength(50);

                entity.Property(e => e.Location).HasMaxLength(50);
            });

            modelBuilder.Entity<VKoalapo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_KOALAPO");

                entity.Property(e => e.ContainerId).HasColumnName("Container_id");

                entity.Property(e => e.ItemnoId).HasColumnName("Itemno_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.PoEtd)
                    .HasColumnType("date")
                    .HasColumnName("PO_ETD");

                entity.Property(e => e.PolineId).HasColumnName("POLine_id");

                entity.Property(e => e.Ponumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("PONUMBER");

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.Property(e => e.Vendor)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VKoalapoCont>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_KOALAPO_cont");

                entity.Property(e => e.BolEta)
                    .HasColumnType("date")
                    .HasColumnName("BOL_ETA");

                entity.Property(e => e.BolEtd)
                    .HasColumnType("date")
                    .HasColumnName("BOL_ETD");

                entity.Property(e => e.Etdsage)
                    .HasColumnType("date")
                    .HasColumnName("ETDSage");

                entity.Property(e => e.Itemno)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Ponumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("PONUMBER");

                entity.Property(e => e.Vendor)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VMarketFulfilledInvt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_MarketFulfilled_invt");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Itemno).HasMaxLength(50);

                entity.Property(e => e.MarketPlaceName)
                    .HasMaxLength(50)
                    .HasColumnName("MarketPlace_name");
            });

            modelBuilder.Entity<VOpenPo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_openPO");

                entity.Property(e => e.Etd)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ETD")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Itemno)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNO")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Location)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("location")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Oqoutstand)
                    .HasColumnType("decimal(19, 4)")
                    .HasColumnName("OQOUTSTAND");

                entity.Property(e => e.Ponumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("PONUMBER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Vdcode)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("VDCODE")
                    .UseCollation("Latin1_General_CI_AS");
            });

            modelBuilder.Entity<VOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Orders");

                entity.Property(e => e.Address1).HasMaxLength(200);

                entity.Property(e => e.Address2).HasMaxLength(200);

                entity.Property(e => e.Address3).HasMaxLength(200);

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.CustSku)
                    .HasMaxLength(50)
                    .HasColumnName("custSKU");

                entity.Property(e => e.CustomerIolnumber)
                    .HasMaxLength(50)
                    .HasColumnName("Customer_IOLNumber");

                entity.Property(e => e.CustomerIonumber)
                    .HasMaxLength(50)
                    .HasColumnName("Customer_IONumber");

                entity.Property(e => e.CustomerPonumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Customer_PONumber");

                entity.Property(e => e.FullName).HasMaxLength(100);

                entity.Property(e => e.Itemno).HasMaxLength(50);

                entity.Property(e => e.Location).HasMaxLength(50);

                entity.Property(e => e.MarketPlaceName)
                    .HasMaxLength(50)
                    .HasColumnName("MarketPlace_name");

                entity.Property(e => e.MasterTrackNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiscFeeAmt).HasColumnType("money");

                entity.Property(e => e.Note).HasMaxLength(600);

                entity.Property(e => e.OddlastModDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("ODDLastModDateTime");

                entity.Property(e => e.OdlastModDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("ODLastModDateTime");

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.OrderStatus).HasMaxLength(50);

                entity.Property(e => e.PhoneNumber).HasMaxLength(50);

                entity.Property(e => e.PriceAmt).HasColumnType("money");

                entity.Property(e => e.SageInvNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SageSoNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShipViaCode).HasMaxLength(50);

                entity.Property(e => e.ShipWindowEnd).HasColumnType("datetime");

                entity.Property(e => e.ShipWindowStart).HasColumnType("datetime");

                entity.Property(e => e.State).HasMaxLength(50);

                entity.Property(e => e.TaxAmt).HasColumnType("money");

                entity.Property(e => e.TimeAccepted).HasColumnType("datetime");

                entity.Property(e => e.TimeAsnReported).HasColumnType("datetime");

                entity.Property(e => e.TimeKoCreated).HasColumnType("datetime");

                entity.Property(e => e.TimeshipRequested).HasColumnType("datetime");

                entity.Property(e => e.Zip)
                    .HasMaxLength(50)
                    .HasColumnName("ZIP");
            });

            modelBuilder.Entity<VPoEtdEtum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_PO_ETD_ETA");

                entity.Property(e => e.BolEta)
                    .HasColumnType("date")
                    .HasColumnName("BOL_ETA");

                entity.Property(e => e.BolEtd)
                    .HasColumnType("date")
                    .HasColumnName("BOL_ETD");

                entity.Property(e => e.Itemno)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNO")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.KoEtd)
                    .HasColumnType("date")
                    .HasColumnName("KO_ETD");

                entity.Property(e => e.Location)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("location")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Oqoutstand)
                    .HasColumnType("decimal(19, 4)")
                    .HasColumnName("OQOUTSTAND");

                entity.Property(e => e.Ponumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("PONUMBER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.SageEta)
                    .HasColumnType("date")
                    .HasColumnName("Sage_ETA");

                entity.Property(e => e.SageEtd)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Sage_ETD")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Vdcode)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("VDCODE")
                    .UseCollation("Latin1_General_CI_AS");
            });

            modelBuilder.Entity<VPostatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_POstatus");

                entity.Property(e => e.Audtdate)
                    .HasColumnType("decimal(9, 0)")
                    .HasColumnName("AUDTDATE");

                entity.Property(e => e.Audttime)
                    .HasColumnType("decimal(9, 0)")
                    .HasColumnName("AUDTTIME");

                entity.Property(e => e.Date)
                    .HasColumnType("decimal(9, 0)")
                    .HasColumnName("DATE");

                entity.Property(e => e.Etd)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ETD")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Itemno)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNO")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Location)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("location")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Oqordered)
                    .HasColumnType("decimal(19, 4)")
                    .HasColumnName("OQORDERED");

                entity.Property(e => e.Oqoutstand)
                    .HasColumnType("decimal(19, 4)")
                    .HasColumnName("OQOUTSTAND");

                entity.Property(e => e.Ponumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("PONUMBER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Porhseq)
                    .HasColumnType("decimal(19, 0)")
                    .HasColumnName("PORHSEQ");

                entity.Property(e => e.Porlrev)
                    .HasColumnType("decimal(19, 0)")
                    .HasColumnName("PORLREV");

                entity.Property(e => e.Shptoloc)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("SHPTOLOC")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Unitcost)
                    .HasColumnType("decimal(19, 6)")
                    .HasColumnName("UNITCOST");

                entity.Property(e => e.Vdcode)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("VDCODE")
                    .UseCollation("Latin1_General_CI_AS");
            });

            modelBuilder.Entity<VReceivedPo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_receivedPO");

                entity.Property(e => e.Dtarrival)
                    .HasColumnType("date")
                    .HasColumnName("DTARRIVAL");

                entity.Property(e => e.Itemno)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNO")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Loc)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("loc")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Ponumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("PONUMBER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Postdate)
                    .HasColumnType("date")
                    .HasColumnName("POSTDATE");

                entity.Property(e => e.Qtyrecvd)
                    .HasColumnType("decimal(19, 4)")
                    .HasColumnName("qtyrecvd");

                entity.Property(e => e.Vdcode)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("VDCODE")
                    .UseCollation("Latin1_General_CI_AS");
            });

            modelBuilder.Entity<VRetailPriceHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_RetailPriceHistory");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Itemno).HasMaxLength(50);

                entity.Property(e => e.MarketPlaceName)
                    .HasMaxLength(50)
                    .HasColumnName("MarketPlace_name");

                entity.Property(e => e.SellerName).HasMaxLength(50);
            });

            modelBuilder.Entity<VSageCost12wk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_SageCost_12wk");

                entity.Property(e => e.Avgcost)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("avgcost");

                entity.Property(e => e.Item)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("ITEM")
                    .IsFixedLength(true)
                    .UseCollation("Latin1_General_CI_AS");
            });

            modelBuilder.Entity<VSageInvtNow>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_SageInvtNow");

                entity.Property(e => e.Itemno)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNO")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Loc)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("LOC")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Qtyonhand)
                    .HasColumnType("decimal(19, 4)")
                    .HasColumnName("QTYONHAND");
            });

            modelBuilder.Entity<VSageSales12wk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_SageSales_12wk");

                entity.Property(e => e.Avgsales)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("avgsales");

                entity.Property(e => e.Customer)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Item)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("ITEM")
                    .UseCollation("Latin1_General_CI_AS");
            });

            modelBuilder.Entity<VSalesTax>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_SalesTax");

                entity.Property(e => e.Customer)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Desc)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DESC")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Invdate)
                    .HasColumnType("date")
                    .HasColumnName("INVDATE");

                entity.Property(e => e.Invnumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("INVNUMBER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Loc)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("LOC")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Ordnumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("ORDNUMBER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Ponumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("PONUMBER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Sales)
                    .HasColumnType("decimal(19, 3)")
                    .HasColumnName("sales");
            });

            modelBuilder.Entity<VStarship>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Starship");

                entity.Property(e => e.AccountNumber).HasMaxLength(50);

                entity.Property(e => e.CarrierInterfaceId)
                    .HasMaxLength(3)
                    .HasColumnName("CarrierInterfaceID");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.ItemnoId).HasColumnName("Itemno_id");

                entity.Property(e => e.MasterTrackingId)
                    .HasMaxLength(50)
                    .HasColumnName("MasterTrackingID");

                entity.Property(e => e.OrderNumber).HasMaxLength(30);

                entity.Property(e => e.Ponumber)
                    .HasMaxLength(75)
                    .HasColumnName("PONumber");

                entity.Property(e => e.TrackingNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<VStarshipAddr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_starship_addr");

                entity.Property(e => e.Address1).HasMaxLength(75);

                entity.Property(e => e.Address2).HasMaxLength(75);

                entity.Property(e => e.City).HasMaxLength(30);

                entity.Property(e => e.CountryCode).HasMaxLength(3);

                entity.Property(e => e.Name).HasMaxLength(75);

                entity.Property(e => e.OrderNumber).HasMaxLength(30);

                entity.Property(e => e.PostalCode).HasMaxLength(15);

                entity.Property(e => e.StateProvinceCode).HasMaxLength(3);
            });

            modelBuilder.Entity<VTblAllSalesbyComp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_tbl_AllSalesbyComp");

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.CdDesc)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CD_Desc")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Customer)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Invdate)
                    .HasColumnType("date")
                    .HasColumnName("INVDATE");

                entity.Property(e => e.Invnumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("INVNUMBER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Item)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("ITEM")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Loc)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("LOC")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.MondayOfWeek)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.Ordnumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("ORDNUMBER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Ponumber)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("PONUMBER")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(20, 4)")
                    .HasColumnName("qty");

                entity.Property(e => e.Sales)
                    .HasColumnType("decimal(20, 3)")
                    .HasColumnName("sales");

                entity.Property(e => e.Shipvia)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("SHIPVIA")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Shpcity)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SHPCITY")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Shpstate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SHPSTATE")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Shpzip)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SHPZIP")
                    .UseCollation("Latin1_General_CI_AS");
            });

            modelBuilder.Entity<VTracking>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Trackings");

                entity.Property(e => e.CustSku)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("custSKU");

                entity.Property(e => e.CustomerIolnumber)
                    .HasMaxLength(50)
                    .HasColumnName("Customer_IOLNumber");

                entity.Property(e => e.CustomerPonumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Customer_PONumber");

                entity.Property(e => e.Itemno)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MarketPlaceName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("MarketPlace_name");

                entity.Property(e => e.Note).HasMaxLength(600);

                entity.Property(e => e.OrderId).HasColumnName("Order_id");

                entity.Property(e => e.PriceAmt).HasColumnType("money");

                entity.Property(e => e.ShipFrom)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShippedItem)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TimeShipped).HasColumnType("datetime");

                entity.Property(e => e.TrackingNumber).IsRequired();
            });

            modelBuilder.Entity<VTransfer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_transfer");

                entity.Property(e => e.Audtdate)
                    .HasColumnType("decimal(9, 0)")
                    .HasColumnName("AUDTDATE");

                entity.Property(e => e.Fromloc)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("FROMLOC")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Itemno)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNO")
                    .UseCollation("Latin1_General_CI_AS");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(19, 4)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.Toloc)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("TOLOC")
                    .UseCollation("Latin1_General_CI_AS");
            });

            modelBuilder.Entity<Vend2WhLt>(entity =>
            {
                entity.HasKey(e => e.V2wltId)
                    .HasName("Pk_Vend2LocLT_V2W-id");

                entity.ToTable("Vend2WhLT");

                entity.Property(e => e.V2wltId).HasColumnName("V2WLT_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_id");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.Vend2WhLts)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_Vend2WhLT_BpmLocation");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.Vend2WhLts)
                    .HasForeignKey(d => d.VendorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_Vend2WhLT_Vendor");
            });

            modelBuilder.Entity<VendCategory>(entity =>
            {
                entity.HasKey(e => e.VendCatId)
                    .HasName("Pk_VendorCategory_VCat_id");

                entity.ToTable("VendCategory");

                entity.Property(e => e.VendCatId)
                    .HasColumnName("VendCat_id")
                    .HasComment("NetSuite Internal ID");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Vendor>(entity =>
            {
                entity.ToTable("Vendor");

                entity.Property(e => e.VendorId)
                    .ValueGeneratedNever()
                    .HasColumnName("Vendor_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.BillAddr1).HasMaxLength(255);

                entity.Property(e => e.BillAddr2).HasMaxLength(255);

                entity.Property(e => e.BillAddr3).HasMaxLength(255);

                entity.Property(e => e.BillAddress).HasMaxLength(255);

                entity.Property(e => e.BillAddressee)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.BillCity).HasMaxLength(64);

                entity.Property(e => e.BillCountry)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.BillState).HasMaxLength(64);

                entity.Property(e => e.BillZip)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("BillZIP");

                entity.Property(e => e.Country)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.DfPortOrigId).HasColumnName("DfPortOrig_id");

                entity.Property(e => e.Email)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.PrimaryContact)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.SageName)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Terms)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.VendCatId).HasColumnName("VendCat_id");

                entity.Property(e => e.VendorName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.HasOne(d => d.DfPortOrig)
                    .WithMany(p => p.Vendors)
                    .HasForeignKey(d => d.DfPortOrigId)
                    .HasConstraintName("Fk_Vendor_PortOrigin");

                entity.HasOne(d => d.VendCat)
                    .WithMany(p => p.Vendors)
                    .HasForeignKey(d => d.VendCatId)
                    .HasConstraintName("Fk_Vendor_VendCategory");
            });

            modelBuilder.Entity<VendorAllocationMethod>(entity =>
            {
                entity.ToTable("VendorAllocationMethod");

                entity.Property(e => e.VendorAllocationMethodId).HasColumnName("VendorAllocationMethod_id");

                entity.Property(e => e.Method)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VendorBillD>(entity =>
            {
                entity.ToTable("VendorBillD");

                entity.Property(e => e.VendorBillDId).HasColumnName("VendorBillD_id");

                entity.Property(e => e.AccountId).HasColumnName("Account_id");

                entity.Property(e => e.ActivityId).HasColumnName("Activity_id");

                entity.Property(e => e.AmountAllocation).HasColumnType("money");

                entity.Property(e => e.AmountInvoice).HasColumnType("money");

                entity.Property(e => e.Bolno)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("BOLNo");

                entity.Property(e => e.ContainerNo)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasComment("Invoice memo");

                entity.Property(e => e.ExpenseCategoryId).HasColumnName("ExpenseCategory_id");

                entity.Property(e => e.LineId).HasColumnName("Line_id");

                entity.Property(e => e.Memo)
                    .HasMaxLength(255)
                    .HasComment("NetSuite Memo");

                entity.Property(e => e.VendorBillTId).HasColumnName("VendorBillT_id");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.VendorBillDs)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_VendorBillD_GlAccount");

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.VendorBillDs)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_VendorBillD_BillActivity");

                entity.HasOne(d => d.ExpenseCategory)
                    .WithMany(p => p.VendorBillDs)
                    .HasForeignKey(d => d.ExpenseCategoryId)
                    .HasConstraintName("fk_VendorBillD_NsExpenseCategory");

                entity.HasOne(d => d.VendorBillT)
                    .WithMany(p => p.VendorBillDs)
                    .HasForeignKey(d => d.VendorBillTId)
                    .HasConstraintName("fk_VendorBillD_VendorBillT");
            });

            modelBuilder.Entity<VendorBillT>(entity =>
            {
                entity.ToTable("VendorBillT");

                entity.HasIndex(e => e.CreatedBillId, "idx_VendorBillT_CreatedBill_id");

                entity.HasIndex(e => e.Date, "idx_VendorBillT_Date");

                entity.HasIndex(e => e.ExternalId, "idx_VendorBillT_External_id");

                entity.HasIndex(e => e.NsIntId, "idx_VendorBillT_NsInt_id");

                entity.HasIndex(e => e.TypeId, "idx_VendorBillT_Type_id");

                entity.Property(e => e.VendorBillTId).HasColumnName("VendorBillT_id");

                entity.Property(e => e.AccountId).HasColumnName("Account_id");

                entity.Property(e => e.AddedEmployeeId).HasColumnName("AddedEmployee_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.CreatedBillId).HasColumnName("CreatedBill_id");

                entity.Property(e => e.CurrencyId).HasColumnName("Currency_id");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DueDate).HasColumnType("date");

                entity.Property(e => e.ExternalId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("External_id");

                entity.Property(e => e.InvNo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.IsOnlyKoala).HasComment("Only koala side data");

                entity.Property(e => e.Memo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.OrderTypeId)
                    .HasColumnName("OrderType_id")
                    .HasComment("Purchases Order, Transfer Order");

                entity.Property(e => e.Source)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TypeId)
                    .HasColumnName("Type_id")
                    .HasComment("Vendor Bill\nVendor Bil Credit");

                entity.Property(e => e.VendorId).HasColumnName("Vendor_id");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.VendorBillTs)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("fk_VendorBillT_GlAccount");

                entity.HasOne(d => d.AddedEmployee)
                    .WithMany(p => p.VendorBillTs)
                    .HasForeignKey(d => d.AddedEmployeeId)
                    .HasConstraintName("fk_VendorBillT_Employee");

                entity.HasOne(d => d.CreatedBill)
                    .WithMany(p => p.InverseCreatedBill)
                    .HasForeignKey(d => d.CreatedBillId)
                    .HasConstraintName("fk_VendorBillT_VendorBillT");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.VendorBillTs)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("fk_VendorBillT_NsCurrency");

                entity.HasOne(d => d.OrderType)
                    .WithMany(p => p.VendorBillTOrderTypes)
                    .HasForeignKey(d => d.OrderTypeId)
                    .HasConstraintName("fk_VendorBillT_NsRecordType_0");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.VendorBillTTypes)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_VendorBillT_NsRecordType");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.VendorBillTs)
                    .HasForeignKey(d => d.VendorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_VendorBillT_Vendor");
            });

            modelBuilder.Entity<VendorReturnD>(entity =>
            {
                entity.ToTable("VendorReturnD");

                entity.HasIndex(e => e.ItemNoId, "idx_VendorReturnD_ItemNo_id");

                entity.HasIndex(e => e.LocationId, "idx_VendorReturnD_Location_id");

                entity.HasIndex(e => e.NsIntId, "idx_VendorReturnD_NsInt_id");

                entity.HasIndex(e => e.PoBillDId, "idx_VendorReturnD_PoBillD_id");

                entity.HasIndex(e => e.PoDId, "idx_VendorReturnD_PoD_id");

                entity.HasIndex(e => e.VendorReturnTId, "idx_VendorReturnD_VendorReturnT_id");

                entity.Property(e => e.VendorReturnDId).HasColumnName("VendorReturnD_id");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LineId).HasColumnName("Line_Id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.PoBillDId).HasColumnName("PoBillD_id");

                entity.Property(e => e.PoDId).HasColumnName("PoD_id");

                entity.Property(e => e.Rate).HasColumnType("money");

                entity.Property(e => e.VendorReturnTId).HasColumnName("VendorReturnT_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.VendorReturnDs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_VendorReturnD_BpmItem");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.VendorReturnDs)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_VendorReturnD_BpmLocation");

                entity.HasOne(d => d.PoBillD)
                    .WithMany(p => p.VendorReturnDs)
                    .HasForeignKey(d => d.PoBillDId)
                    .HasConstraintName("fk_VendorReturnD_PoBillD");

                entity.HasOne(d => d.PoD)
                    .WithMany(p => p.VendorReturnDs)
                    .HasForeignKey(d => d.PoDId)
                    .HasConstraintName("fk_VendorReturnD_PoD");

                entity.HasOne(d => d.VendorReturnT)
                    .WithMany(p => p.VendorReturnDs)
                    .HasForeignKey(d => d.VendorReturnTId)
                    .HasConstraintName("fk_VendorReturnD_VendorReturnT");
            });

            modelBuilder.Entity<VendorReturnT>(entity =>
            {
                entity.ToTable("VendorReturnT");

                entity.HasIndex(e => e.DocNo, "idx_VendorReturnT_DocNo");

                entity.HasIndex(e => e.NsIntId, "idx_VendorReturnT_NsInt_id");

                entity.HasIndex(e => e.PoBillTId, "idx_VendorReturnT_PoBillT_id");

                entity.HasIndex(e => e.PoTId, "idx_VendorReturnT_PoT_id");

                entity.HasIndex(e => e.VrstatusId, "idx_VendorReturnT_VRStatus_id");

                entity.Property(e => e.VendorReturnTId).HasColumnName("VendorReturnT_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Memo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NsIntId).HasColumnName("NsInt_id");

                entity.Property(e => e.PoBillTId).HasColumnName("PoBillT_id");

                entity.Property(e => e.PoTId).HasColumnName("PoT_id");

                entity.Property(e => e.VrstatusId).HasColumnName("VRStatus_id");

                entity.HasOne(d => d.PoBillT)
                    .WithMany(p => p.VendorReturnTs)
                    .HasForeignKey(d => d.PoBillTId)
                    .HasConstraintName("fk_VendorReturnT_PoBillT");

                entity.HasOne(d => d.PoT)
                    .WithMany(p => p.VendorReturnTs)
                    .HasForeignKey(d => d.PoTId)
                    .HasConstraintName("fk_VendorReturnT_PoT");

                entity.HasOne(d => d.Vrstatus)
                    .WithMany(p => p.VendorReturnTs)
                    .HasForeignKey(d => d.VrstatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_VendorReturnT_VRStatus");
            });

            modelBuilder.Entity<Vrstatus>(entity =>
            {
                entity.ToTable("VRStatus");

                entity.HasComment("Vendor Return Status");

                entity.Property(e => e.VrstatusId).HasColumnName("VRStatus_id");

                entity.Property(e => e.Stauts)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WarehouseBin>(entity =>
            {
                entity.HasKey(e => e.BinId)
                    .HasName("Pk_WarehouseZone_WhouseZone_id");

                entity.ToTable("WarehouseBin", "wms");

                entity.Property(e => e.BinId).HasColumnName("Bin_id");

                entity.Property(e => e.BinNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.WarehouseBins)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WarehouseZone_KO_Location");
            });

            modelBuilder.Entity<WayPoTk>(entity =>
            {
                entity.HasKey(e => e.StatusId)
                    .HasName("Pk_WayPoTkS_Status_id");

                entity.ToTable("WayPoTkS");

                entity.Property(e => e.StatusId).HasColumnName("Status_id");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WayPoTkD>(entity =>
            {
                entity.HasKey(e => e.TickedDId)
                    .HasName("Pk_WayPoTkD_TickedD_id");

                entity.ToTable("WayPoTkD");

                entity.Property(e => e.TickedDId).HasColumnName("TickedD_id");

                entity.Property(e => e.LastModT).HasColumnType("date");

                entity.Property(e => e.PoDId).HasColumnName("PoD_id");

                entity.Property(e => e.TicketId).HasColumnName("Ticket_id");

                entity.HasOne(d => d.PoD)
                    .WithMany(p => p.WayPoTkDs)
                    .HasForeignKey(d => d.PoDId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_WayPoTkD_PoD");

                entity.HasOne(d => d.Ticket)
                    .WithMany(p => p.WayPoTkDs)
                    .HasForeignKey(d => d.TicketId)
                    .HasConstraintName("Fk_WayPoTkD_WayPoTkT");
            });

            modelBuilder.Entity<WayPoTkN>(entity =>
            {
                entity.HasKey(e => e.TkNoteId)
                    .HasName("Pk_WayTkNote_TkNote_id");

                entity.ToTable("WayPoTkN");

                entity.Property(e => e.TkNoteId).HasColumnName("TkNote_id");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasMaxLength(2047)
                    .IsUnicode(false);

                entity.Property(e => e.TicketDId).HasColumnName("TicketD_id");

                entity.HasOne(d => d.TicketD)
                    .WithMany(p => p.WayPoTkNs)
                    .HasForeignKey(d => d.TicketDId)
                    .HasConstraintName("Fk_WayPoTkN_WayPoTkD");
            });

            modelBuilder.Entity<WayPoTkT>(entity =>
            {
                entity.HasKey(e => e.TicketId)
                    .HasName("Pk_WayPoTickT_Ticket_id");

                entity.ToTable("WayPoTkT");

                entity.HasIndex(e => e.TicketNo, "Unq_WayPoTkT")
                    .IsUnique();

                entity.Property(e => e.TicketId).HasColumnName("Ticket_id");

                entity.Property(e => e.AddedDate).HasColumnType("date");

                entity.Property(e => e.StatusId).HasColumnName("Status_id");

                entity.Property(e => e.TicketNo)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.WayPoTkTs)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_WayPoTkT_WayPoTkS");
            });

            modelBuilder.Entity<WayfPpid>(entity =>
            {
                entity.ToTable("WayfPPID");

                entity.Property(e => e.WayfPpidId).HasColumnName("WayfPPID_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.ColorPpid2).HasColumnName("ColorPPID2");

                entity.Property(e => e.IcrId).HasColumnName("ICR_id");

                entity.Property(e => e.SizePpid1).HasColumnName("SizePPID1");

                entity.HasOne(d => d.Icr)
                    .WithMany(p => p.WayfPpids)
                    .HasForeignKey(d => d.IcrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_WayfPPID_MkICR");
            });

            modelBuilder.Entity<WayfairDeduction>(entity =>
            {
                entity.ToTable("WayfairDeduction");

                entity.Property(e => e.DeductionId)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.DeductionLink)
                    .HasMaxLength(85)
                    .IsUnicode(false);

                entity.Property(e => e.DisputeReason)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.PartNoOrdered)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.PartNoOrderedMkIcrid).HasColumnName("PartNoOrderedMkICRId");

                entity.Property(e => e.Ponumber)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("PONumber");

                entity.Property(e => e.ProblemReported)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCostAmnt).HasColumnType("money");

                entity.Property(e => e.Resources)
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.SettlementDate).HasColumnType("date");

                entity.Property(e => e.ShippingCostAmnt).HasColumnType("money");

                entity.Property(e => e.TotalDeductionAmnt).HasColumnType("money");

                entity.Property(e => e.VattaxCostAmnt)
                    .HasColumnType("money")
                    .HasColumnName("VATTaxCostAmnt");

                entity.HasOne(d => d.DeductionType)
                    .WithMany(p => p.WayfairDeductions)
                    .HasForeignKey(d => d.DeductionTypeId)
                    .HasConstraintName("FK_WayfairDeduction_WayfairDeductionType");

                entity.HasOne(d => d.PartNoOrderedMkIcr)
                    .WithMany(p => p.WayfairDeductions)
                    .HasForeignKey(d => d.PartNoOrderedMkIcrid)
                    .HasConstraintName("FK_WayfairDeduction_MkICR");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.WayfairDeductions)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_WayfairDeduction_WayfairDeductionStatus");
            });

            modelBuilder.Entity<WayfairDeductionStatus>(entity =>
            {
                entity.HasKey(e => e.DeductionStatusId);

                entity.ToTable("WayfairDeductionStatus");

                entity.Property(e => e.DeductionStatusId).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WayfairDeductionType>(entity =>
            {
                entity.HasKey(e => e.DeductionTypeId);

                entity.ToTable("WayfairDeductionType");

                entity.Property(e => e.DeductionTypeId).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WayfairProductReview>(entity =>
            {
                entity.HasKey(e => e.ReviewNumber);

                entity.ToTable("Wayfair_Product_Review");

                entity.Property(e => e.ReviewNumber).HasColumnName("Review_Number");

                entity.Property(e => e.CustomerInfo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Customer_info");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Review)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.SellerUnqId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Seller_UNQ_id");
            });

            modelBuilder.Entity<WfadsClassType>(entity =>
            {
                entity.HasKey(e => e.ClassTypeId)
                    .HasName("pk_WFADsClassType");

                entity.ToTable("WFADsClassType");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassType_id");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WfadsDatePeriodType>(entity =>
            {
                entity.HasKey(e => e.PeriodTypeId)
                    .HasName("pk_WFADsDatePeriodType");

                entity.ToTable("WFADsDatePeriodType");

                entity.Property(e => e.PeriodTypeId).HasColumnName("PeriodType_id");

                entity.Property(e => e.Type)
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WfadsKeyMatchType>(entity =>
            {
                entity.HasKey(e => e.MatchTypeId)
                    .HasName("pk_WFADsKeyMatchType");

                entity.ToTable("WFADsKeyMatchType");

                entity.Property(e => e.MatchTypeId).HasColumnName("MatchType_id");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WfadsProgramType>(entity =>
            {
                entity.HasKey(e => e.ProgramTypeId)
                    .HasName("pk_WFADsProgramType");

                entity.ToTable("WFADsProgramType");

                entity.Property(e => e.ProgramTypeId).HasColumnName("ProgramType_id");

                entity.Property(e => e.Description)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WfadsReportD>(entity =>
            {
                entity.HasKey(e => e.ReportDId)
                    .HasName("pk_WFADsReportD");

                entity.ToTable("WFADsReportD");

                entity.Property(e => e.ReportDId).HasColumnName("ReportD_id");

                entity.Property(e => e.ClassTypeId).HasColumnName("ClassType_id");

                entity.Property(e => e.ClickThroughRate).HasColumnType("money");

                entity.Property(e => e.CostPerClick).HasColumnType("money");

                entity.Property(e => e.EffectiveCost).HasColumnType("money");

                entity.Property(e => e.KeywordId).HasColumnName("Keyword_id");

                entity.Property(e => e.ProductId).HasColumnName("Product_id");

                entity.Property(e => e.ReportTId).HasColumnName("ReportT_id");

                entity.Property(e => e.Spend).HasColumnType("money");

                entity.Property(e => e.StoreUrl)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.WctHaloId).HasColumnName("WCT_Halo_id");

                entity.Property(e => e.WctId).HasColumnName("WCT_id");

                entity.Property(e => e.WvtId).HasColumnName("WVT_id");

                entity.HasOne(d => d.ClassType)
                    .WithMany(p => p.WfadsReportDs)
                    .HasForeignKey(d => d.ClassTypeId)
                    .HasConstraintName("fk_WFADsReportD_WFADsClassType");

                entity.HasOne(d => d.Keyword)
                    .WithMany(p => p.WfadsReportDs)
                    .HasForeignKey(d => d.KeywordId)
                    .HasConstraintName("fk_WFADsReportD_WFADsReportD_Keyword");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.WfadsReportDs)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_WFADsReportD_WFADsReportD_Product");

                entity.HasOne(d => d.ReportT)
                    .WithMany(p => p.WfadsReportDs)
                    .HasForeignKey(d => d.ReportTId)
                    .HasConstraintName("fk_WFADsReportD_WFADsReportT");

                entity.HasOne(d => d.WctHalo)
                    .WithMany(p => p.WfadsReportDWctHalos)
                    .HasForeignKey(d => d.WctHaloId)
                    .HasConstraintName("fk_WFADsReportD_WFADsReportD_WT_1");

                entity.HasOne(d => d.Wct)
                    .WithMany(p => p.WfadsReportDWcts)
                    .HasForeignKey(d => d.WctId)
                    .HasConstraintName("fk_WFADsReportD_WFADsReportD_WT_0");

                entity.HasOne(d => d.Wvt)
                    .WithMany(p => p.WfadsReportDWvts)
                    .HasForeignKey(d => d.WvtId)
                    .HasConstraintName("fk_WFADsReportD_WFADsReportD_WT");
            });

            modelBuilder.Entity<WfadsReportDKeyword>(entity =>
            {
                entity.HasKey(e => e.KeywordId)
                    .HasName("pk_WFADsReportD_Keyword");

                entity.ToTable("WFADsReportD_Keyword");

                entity.Property(e => e.KeywordId).HasColumnName("Keyword_id");

                entity.Property(e => e.MatchTypeId)
                    .HasColumnName("MatchType_id")
                    .HasComment("keyword_match_type");

                entity.Property(e => e.MaxBid)
                    .HasColumnType("money")
                    .HasColumnName("Max_bid")
                    .HasComment("keyword_max_bid");

                entity.Property(e => e.Value)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.HasOne(d => d.MatchType)
                    .WithMany(p => p.WfadsReportDKeywords)
                    .HasForeignKey(d => d.MatchTypeId)
                    .HasConstraintName("fk_WFADsReportD_Keyword_WFADsKeyMatchType");
            });

            modelBuilder.Entity<WfadsReportDProduct>(entity =>
            {
                entity.HasKey(e => e.ProductId)
                    .HasName("pk_WFADsProduct");

                entity.ToTable("WFADsReportD_Product");

                entity.Property(e => e.ProductId).HasColumnName("Product_id");

                entity.Property(e => e.MasterSkuId).HasColumnName("MasterSKU_id");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.MasterSku)
                    .WithMany(p => p.WfadsReportDProducts)
                    .HasForeignKey(d => d.MasterSkuId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_WFADsReportD_Product_MarketMasterSKU");
            });

            modelBuilder.Entity<WfadsReportDWt>(entity =>
            {
                entity.HasKey(e => e.WtId)
                    .HasName("pk_WFADsReportD_Halo");

                entity.ToTable("WFADsReportD_WT");

                entity.Property(e => e.WtId).HasColumnName("WT_id");

                entity.Property(e => e.AttributedOrders)
                    .HasColumnType("money")
                    .HasComment("attributed_orders_window_click_through_Day_14");

                entity.Property(e => e.AttributedRetailSales)
                    .HasColumnType("money")
                    .HasComment("attributed_retail_sales_window_click_through_USD_Day_14");

                entity.Property(e => e.AttributedUnits)
                    .HasColumnType("money")
                    .HasComment("attributed_units_window_click_through_Day_14");

                entity.Property(e => e.AttributedWholesaleCost)
                    .HasColumnType("money")
                    .HasComment("attributed_wholesale_cost_window_click_through_USD_Day_14");

                entity.Property(e => e.CostPerAttributedOrder)
                    .HasColumnType("money")
                    .HasComment("cost_per_attributed_order_window_click_through_USD_Day_14");

                entity.Property(e => e.RetailRoas)
                    .HasColumnType("money")
                    .HasComment("retail_roas_window_click_through_Day_14");

                entity.Property(e => e.WholesaleCostRoas)
                    .HasColumnType("money")
                    .HasComment("wholesale_cost_roas_window_click_through_Day_14");
            });

            modelBuilder.Entity<WfadsReportT>(entity =>
            {
                entity.HasKey(e => e.ReportTId)
                    .HasName("pk_WFADsReportT");

                entity.ToTable("WFADsReportT");

                entity.Property(e => e.ReportTId).HasColumnName("ReportT_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.CampaignEndDate).HasColumnType("date");

                entity.Property(e => e.CampaignId).HasColumnName("Campaign_id");

                entity.Property(e => e.CampaignName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.CampaignStartDate).HasColumnType("date");

                entity.Property(e => e.DailyCap).HasColumnType("money");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.LifetimeBudget).HasColumnType("money");

                entity.Property(e => e.PeriodTypeId).HasColumnName("PeriodType_id");

                entity.Property(e => e.ProgramTypeId).HasColumnName("ProgramType_id");

                entity.Property(e => e.ReportTypeId).HasColumnName("ReportType_id");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.TargetingTypeId).HasColumnName("TargetingType_id");

                entity.HasOne(d => d.PeriodType)
                    .WithMany(p => p.WfadsReportTs)
                    .HasForeignKey(d => d.PeriodTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_WFADsReportT_WFADsDatePeriodType");

                entity.HasOne(d => d.ProgramType)
                    .WithMany(p => p.WfadsReportTs)
                    .HasForeignKey(d => d.ProgramTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_WFADsReportT_WFADsProgramType");

                entity.HasOne(d => d.ReportType)
                    .WithMany(p => p.WfadsReportTs)
                    .HasForeignKey(d => d.ReportTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_WFADsReportT_WFADsReportType");

                entity.HasOne(d => d.TargetingType)
                    .WithMany(p => p.WfadsReportTs)
                    .HasForeignKey(d => d.TargetingTypeId)
                    .HasConstraintName("fk_WFADsReportT_WFADsTargetingType");
            });

            modelBuilder.Entity<WfadsReportType>(entity =>
            {
                entity.HasKey(e => e.ReportTypeId)
                    .HasName("pk_WFADsReportType");

                entity.ToTable("WFADsReportType");

                entity.Property(e => e.ReportTypeId).HasColumnName("ReportType_id");

                entity.Property(e => e.Description)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WfadsTargetingType>(entity =>
            {
                entity.HasKey(e => e.TargetingTypeId)
                    .HasName("pk_WFADsTargetingType");

                entity.ToTable("WFADsTargetingType");

                entity.Property(e => e.TargetingTypeId).HasColumnName("TargetingType_id");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WfsChildShipmentId>(entity =>
            {
                entity.HasKey(e => e.ChildId)
                    .HasName("pk_WFS_Child_ShipmentId");

                entity.ToTable("WFS_Child_ShipmentId");

                entity.HasIndex(e => e.ShipmentId, "idx_WFS_Child_ShipmentId");

                entity.Property(e => e.ChildId).HasColumnName("Child_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.ParentId).HasColumnName("Parent_id");

                entity.Property(e => e.ShipmentId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Shipment_id");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.WfsChildShipmentIds)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_WFS_Child_ShipmentId_WFS_Parent_ShipmetId");
            });

            modelBuilder.Entity<WfsInventory>(entity =>
            {
                entity.HasKey(e => e.InvId)
                    .HasName("pk_WfsInventory");

                entity.ToTable("WfsInventory");

                entity.HasIndex(e => new { e.RptDate, e.CustSku }, "idx_WfsInventory");

                entity.Property(e => e.InvId).HasColumnName("Inv_id");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CustSku)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CustSKU");

                entity.Property(e => e.DailSales).HasColumnType("money");

                entity.Property(e => e.DailyUnitsSold).HasColumnType("decimal(4, 1)");

                entity.Property(e => e.Gtin)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("GTIN");

                entity.Property(e => e.IcrId).HasColumnName("ICR_id");

                entity.Property(e => e.MellowItemName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Mellow_ItemName");

                entity.Property(e => e.OosDate).HasColumnType("date");

                entity.Property(e => e.RptDate)
                    .HasColumnType("date")
                    .HasColumnName("Rpt_Date");

                entity.Property(e => e.Status)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.WmtItemId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("WmtItem_id");

                entity.HasOne(d => d.Icr)
                    .WithMany(p => p.WfsInventories)
                    .HasForeignKey(d => d.IcrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_WfsInventory_MkICR");
            });

            modelBuilder.Entity<WfsInvtHist>(entity =>
            {
                entity.HasKey(e => e.InvtLogHisId)
                    .HasName("pk_WfsInvtHist");

                entity.ToTable("WfsInvtHist");

                entity.HasIndex(e => e.TransactionId, "idx_WfsInvtHist");

                entity.Property(e => e.InvtLogHisId).HasColumnName("InvtLogHis_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.FcId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FcName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvtLogId).HasColumnName("InvtLog_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Transaction_id");

                entity.Property(e => e.TransactionLocationId).HasColumnName("TransactionLocation_id");

                entity.Property(e => e.TransactionReasonCodeId).HasColumnName("TransactionReasonCode_id");

                entity.Property(e => e.TransactionReasonDesc).HasMaxLength(100);

                entity.Property(e => e.TransactionTime).HasColumnType("datetime");

                entity.Property(e => e.TransactionTypeId).HasColumnName("TransactionType_id");

                entity.HasOne(d => d.InvtLog)
                    .WithMany(p => p.WfsInvtHists)
                    .HasForeignKey(d => d.InvtLogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_WfsInvtHist_WfsInvtLog");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.WfsInvtHists)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("fk_WfsInvtHist_BpmLocation");

                entity.HasOne(d => d.TransactionLocation)
                    .WithMany(p => p.WfsInvtHists)
                    .HasForeignKey(d => d.TransactionLocationId)
                    .HasConstraintName("fk_WfsInvtHist_TransactionLocation");

                entity.HasOne(d => d.TransactionReasonCode)
                    .WithMany(p => p.WfsInvtHists)
                    .HasForeignKey(d => d.TransactionReasonCodeId)
                    .HasConstraintName("fk_WfsInvtHist_TransactionReasonCode");

                entity.HasOne(d => d.TransactionType)
                    .WithMany(p => p.WfsInvtHists)
                    .HasForeignKey(d => d.TransactionTypeId)
                    .HasConstraintName("fk_WfsInvtHist_TransactionType");
            });

            modelBuilder.Entity<WfsInvtLog>(entity =>
            {
                entity.HasKey(e => e.InvtLogId)
                    .HasName("pk_WfsInvtLog");

                entity.ToTable("WfsInvtLog");

                entity.Property(e => e.InvtLogId).HasColumnName("InvtLog_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.MkIcrId).HasColumnName("MkICR_id");

                entity.HasOne(d => d.MkIcr)
                    .WithMany(p => p.WfsInvtLogs)
                    .HasForeignKey(d => d.MkIcrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_WfsInvtLog_MkICR");
            });

            modelBuilder.Entity<WfsParentShipmetId>(entity =>
            {
                entity.HasKey(e => e.ParentId)
                    .HasName("pk_WFS_Parent_ShipmetId");

                entity.ToTable("WFS_Parent_ShipmetId");

                entity.HasIndex(e => e.ShipmentId, "idx_WFS_Parent_ShipmetId");

                entity.Property(e => e.ParentId).HasColumnName("Parent_id");

                entity.Property(e => e.AddedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(sysdatetime())");

                entity.Property(e => e.IsSplited).HasColumnName("isSplited");

                entity.Property(e => e.ShipmentId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Shipment_id");
            });

            modelBuilder.Entity<WhTote>(entity =>
            {
                entity.ToTable("WhTote", "wms");

                entity.HasIndex(e => e.ToteNo, "idx_WhTote_ToteNo");

                entity.Property(e => e.WhToteId).HasColumnName("WhTote_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.TimeAdded).HasColumnType("datetime");

                entity.Property(e => e.ToteNo)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.WhTotes)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_WhTote_BpmLocation");
            });

            modelBuilder.Entity<WhinvDescrCategory>(entity =>
            {
                entity.ToTable("WHInvDescrCategory");

                entity.Property(e => e.WhinvDescrCategoryId).HasColumnName("WHInvDescrCategoryId");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WhinvDetailCategory>(entity =>
            {
                entity.ToTable("WHInvDetailCategory");

                entity.Property(e => e.WhinvDetailCategoryId).HasColumnName("WHInvDetailCategoryId");

                entity.Property(e => e.CategoryDescription)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Whinvoice>(entity =>
            {
                entity.ToTable("WHInvoice");

                entity.Property(e => e.WhinvoiceId).HasColumnName("WHInvoiceId");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.Gldate)
                    .HasColumnType("date")
                    .HasColumnName("GLDate");

                entity.Property(e => e.InvoiceMonth).HasColumnType("date");

                entity.Property(e => e.InvoiceNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VendorMain)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.WhinvDescrCategoryId).HasColumnName("WHInvDescrCategoryId");

                entity.Property(e => e.WhinvDetailCategoryId).HasColumnName("WHInvDetailCategoryId");

                entity.Property(e => e.WhlocId).HasColumnName("WHLocId");

                entity.Property(e => e.Whlocation)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WHLocation");

                entity.HasOne(d => d.WhinvDescrCategory)
                    .WithMany(p => p.Whinvoices)
                    .HasForeignKey(d => d.WhinvDescrCategoryId)
                    .HasConstraintName("FK_WHInvoice_WHInvDescrCategory");

                entity.HasOne(d => d.WhinvDetailCategory)
                    .WithMany(p => p.Whinvoices)
                    .HasForeignKey(d => d.WhinvDetailCategoryId)
                    .HasConstraintName("FK_WHInvoice_WHInvDetailCategory");
            });

            modelBuilder.Entity<Whperformance>(entity =>
            {
                entity.ToTable("WHPerformance");

                entity.Property(e => e.WhperformanceId).HasColumnName("WHPerformanceId");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Freight).HasColumnType("money");

                entity.Property(e => e.HcfullTime).HasColumnName("HCFullTime");

                entity.Property(e => e.HcpartTime).HasColumnName("HCPartTime");

                entity.Property(e => e.Hctemp).HasColumnName("HCTemp");

                entity.Property(e => e.InboundExpense).HasColumnType("money");

                entity.Property(e => e.InvoiceMonth).HasColumnType("date");

                entity.Property(e => e.Is3Pl).HasColumnName("Is3PL");

                entity.Property(e => e.Is3Pltotal).HasColumnName("Is3PLTotal");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDateTime).HasColumnType("datetime");

                entity.Property(e => e.OfcfreightExpense)
                    .HasColumnType("money")
                    .HasColumnName("OFCFreightExpense");

                entity.Property(e => e.OtherExpense).HasColumnType("money");

                entity.Property(e => e.OutboundExpense).HasColumnType("money");

                entity.Property(e => e.PayrollFullTime).HasColumnType("money");

                entity.Property(e => e.PayrollTax).HasColumnType("money");

                entity.Property(e => e.PayrollTemp).HasColumnType("money");

                entity.Property(e => e.RentEquip).HasColumnType("money");

                entity.Property(e => e.RentTrailer).HasColumnType("money");

                entity.Property(e => e.RentWarehouse).HasColumnType("money");

                entity.Property(e => e.StorageExpense).HasColumnType("money");

                entity.Property(e => e.Supply).HasColumnType("money");

                entity.Property(e => e.Tax).HasColumnType("money");

                entity.Property(e => e.TotalExpense).HasColumnType("money");

                entity.Property(e => e.Utility).HasColumnType("money");
            });

            modelBuilder.Entity<WithdrawalStatus>(entity =>
            {
                entity.HasKey(e => e.StatusId)
                    .HasName("pk_WithdrawnStatus");

                entity.ToTable("WithdrawalStatus");

                entity.HasIndex(e => e.Type, "idx_WithdrawalStatus");

                entity.Property(e => e.StatusId).HasColumnName("Status_id");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WmsAdjust>(entity =>
            {
                entity.HasKey(e => e.AdjustId)
                    .HasName("Pk_Adjust_Adjust_id");

                entity.ToTable("WmsAdjust", "wms");

                entity.Property(e => e.AdjustId).HasColumnName("Adjust_id");

                entity.Property(e => e.AdjustNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AdjusterId).HasColumnName("Adjuster_id");

                entity.Property(e => e.ApproverId).HasColumnName("Approver_id");

                entity.Property(e => e.DateTime).HasColumnType("datetime");

                entity.HasOne(d => d.Adjuster)
                    .WithMany(p => p.WmsAdjustAdjusters)
                    .HasForeignKey(d => d.AdjusterId)
                    .HasConstraintName("FK_WmsAdjust_Employee");

                entity.HasOne(d => d.Approver)
                    .WithMany(p => p.WmsAdjustApprovers)
                    .HasForeignKey(d => d.ApproverId)
                    .HasConstraintName("FK_WmsAdjust_Employee1");
            });

            modelBuilder.Entity<WmsAdjustDetail>(entity =>
            {
                entity.HasKey(e => e.AdjustDetailId)
                    .HasName("Pk_AdjustDetail_AdjustDetail_id");

                entity.ToTable("WmsAdjustDetail", "wms");

                entity.Property(e => e.AdjustDetailId).HasColumnName("AdjustDetail_id");

                entity.Property(e => e.AdjustId).HasColumnName("Adjust_id");

                entity.Property(e => e.BinId).HasColumnName("Bin_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.Note)
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.HasOne(d => d.Adjust)
                    .WithMany(p => p.WmsAdjustDetails)
                    .HasForeignKey(d => d.AdjustId)
                    .HasConstraintName("FK_WmsAdjustDetail_WmsAdjust");

                entity.HasOne(d => d.Bin)
                    .WithMany(p => p.WmsAdjustDetails)
                    .HasForeignKey(d => d.BinId)
                    .HasConstraintName("FK_WmsAdjustDetail_WarehouseBin");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.WmsAdjustDetails)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WmsAdjustDetail_KO_Itemno");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.WmsAdjustDetails)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WmsAdjustDetail_KO_Location");
            });

            modelBuilder.Entity<WmsCycleCount>(entity =>
            {
                entity.HasKey(e => e.CycleCountId)
                    .HasName("Pk_CycleCount_CycleCound_id");

                entity.ToTable("WmsCycleCount", "wms");

                entity.Property(e => e.CycleCountId).HasColumnName("CycleCount_id");

                entity.Property(e => e.BinId).HasColumnName("Bin_id");

                entity.Property(e => e.CounterId).HasColumnName("Counter_id");

                entity.Property(e => e.DateTime).HasColumnType("datetime");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.Property(e => e.Note)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PoNo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.HasOne(d => d.Bin)
                    .WithMany(p => p.WmsCycleCounts)
                    .HasForeignKey(d => d.BinId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CycleCount_WarehouseBin");

                entity.HasOne(d => d.Counter)
                    .WithMany(p => p.WmsCycleCounts)
                    .HasForeignKey(d => d.CounterId)
                    .HasConstraintName("FK_WmsCycleCount_Employee");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.WmsCycleCounts)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WmsCycleCount_KO_Itemno");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.WmsCycleCounts)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("FK_CycleCount_KO_Location");
            });

            modelBuilder.Entity<WmsCycleCountPlan>(entity =>
            {
                entity.HasKey(e => e.CycleCountPlanId)
                    .HasName("Pk_WmsCycleCountPlan_CycleCountPlan_id");

                entity.ToTable("WmsCycleCountPlan", "wms");

                entity.Property(e => e.CycleCountPlanId).HasColumnName("CycleCountPlan_id");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.Note)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WhouseId).HasColumnName("Whouse_id");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.WmsCycleCountPlans)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WmsCycleCountPlan_KO_Itemno");

                entity.HasOne(d => d.Whouse)
                    .WithMany(p => p.WmsCycleCountPlans)
                    .HasForeignKey(d => d.WhouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WmsCycleCountPlan_KO_Location");
            });

            modelBuilder.Entity<WmsInventoryQoH>(entity =>
            {
                entity.HasKey(e => e.BegInvId)
                    .HasName("Pk_BegInventory_BegInv_id");

                entity.ToTable("WmsInventoryQoH", "wms");

                entity.Property(e => e.BegInvId).HasColumnName("BegInv_id");

                entity.Property(e => e.BinId).HasColumnName("Bin_id");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.LastModDateTime).HasColumnType("datetime");

                entity.Property(e => e.LocationId).HasColumnName("Location_id");

                entity.HasOne(d => d.Bin)
                    .WithMany(p => p.WmsInventoryQoHs)
                    .HasForeignKey(d => d.BinId)
                    .HasConstraintName("FK_WmsBegInventory_WarehouseBin");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.WmsInventoryQoHs)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BegInventory_KO_Itemno");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.WmsInventoryQoHs)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BegInventory_KO_Location");
            });

            modelBuilder.Entity<WmsMetric>(entity =>
            {
                entity.HasKey(e => e.InvtMetricId)
                    .HasName("PK__WmsMetri__16D9CE0014FBBDEE");

                entity.ToTable("WmsMetric", "wms");

                entity.Property(e => e.InvtMetricId).HasColumnName("InvtMetric_id");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");
            });

            modelBuilder.Entity<WmsPoDetail>(entity =>
            {
                entity.HasKey(e => e.PolineZoneId)
                    .HasName("Pk_InBoundDetail_IbDetail_id");

                entity.ToTable("WmsPoDetail", "wms");

                entity.Property(e => e.PolineZoneId).HasColumnName("POLineZone_id");

                entity.Property(e => e.BinId).HasColumnName("Bin_id");

                entity.Property(e => e.DateTime).HasColumnType("datetime");

                entity.Property(e => e.PolineId).HasColumnName("POLine_id");

                entity.HasOne(d => d.Bin)
                    .WithMany(p => p.WmsPoDetails)
                    .HasForeignKey(d => d.BinId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InBoundDetail_WarehouseZone");
            });

            modelBuilder.Entity<WmsRmaDetail>(entity =>
            {
                entity.HasKey(e => e.RmaLineZoneId)
                    .HasName("Pk_RmaDetail_RmaDetail_id");

                entity.ToTable("WmsRmaDetail", "wms");

                entity.Property(e => e.RmaLineZoneId).HasColumnName("RmaLineZone_id");

                entity.Property(e => e.BinId).HasColumnName("Bin_id");

                entity.Property(e => e.DateTime).HasColumnType("datetime");

                entity.Property(e => e.RmaLineId).HasColumnName("RmaLine_id");

                entity.HasOne(d => d.Bin)
                    .WithMany(p => p.WmsRmaDetails)
                    .HasForeignKey(d => d.BinId)
                    .HasConstraintName("FK_RmaDetail_WarehouseZone");

                entity.HasOne(d => d.RmaLine)
                    .WithMany(p => p.WmsRmaDetails)
                    .HasForeignKey(d => d.RmaLineId)
                    .HasConstraintName("FK_RmaDetail_RmaDetail");
            });

            modelBuilder.Entity<WmsSoDetail>(entity =>
            {
                entity.HasKey(e => e.OrderLineZoneId)
                    .HasName("Pk_OutBoundDetail_ObDetail_id");

                entity.ToTable("WmsSoDetail", "wms");

                entity.Property(e => e.OrderLineZoneId).HasColumnName("OrderLineZone_id");

                entity.Property(e => e.BinId).HasColumnName("Bin_id");

                entity.Property(e => e.DateTime).HasColumnType("datetime");

                entity.Property(e => e.OrderLineId).HasColumnName("OrderLine_id");

                entity.HasOne(d => d.Bin)
                    .WithMany(p => p.WmsSoDetails)
                    .HasForeignKey(d => d.BinId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OutBoundDetail_WarehouseZone");

                entity.HasOne(d => d.OrderLine)
                    .WithMany(p => p.WmsSoDetails)
                    .HasForeignKey(d => d.OrderLineId)
                    .HasConstraintName("FK_SalesDetail_OrderDetail");
            });

            modelBuilder.Entity<WmsTransfer>(entity =>
            {
                entity.HasKey(e => e.TransferId)
                    .HasName("Pk_Transfer_Transfer_id");

                entity.ToTable("WmsTransfer", "wms");

                entity.Property(e => e.TransferId).HasColumnName("Transfer_id");

                entity.Property(e => e.BpmPoNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FromLocationId).HasColumnName("FromLocation_id");

                entity.Property(e => e.ReceiverId).HasColumnName("Receiver_id");

                entity.Property(e => e.RequesterId).HasColumnName("Requester_id");

                entity.Property(e => e.SpoNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TimeEta)
                    .HasColumnType("datetime")
                    .HasColumnName("TimeETA");

                entity.Property(e => e.TimeOrdered).HasColumnType("datetime");

                entity.Property(e => e.ToLocationId).HasColumnName("ToLocation_id");

                entity.Property(e => e.TransferNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.FromLocation)
                    .WithMany(p => p.WmsTransferFromLocations)
                    .HasForeignKey(d => d.FromLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Transfer_KO_Location");

                entity.HasOne(d => d.Receiver)
                    .WithMany(p => p.WmsTransferReceivers)
                    .HasForeignKey(d => d.ReceiverId)
                    .HasConstraintName("FK_WmsTransfer_Employee1");

                entity.HasOne(d => d.Requester)
                    .WithMany(p => p.WmsTransferRequesters)
                    .HasForeignKey(d => d.RequesterId)
                    .HasConstraintName("FK_WmsTransfer_Employee");

                entity.HasOne(d => d.ToLocation)
                    .WithMany(p => p.WmsTransferToLocations)
                    .HasForeignKey(d => d.ToLocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Transfer_KO_Location1");
            });

            modelBuilder.Entity<WmsTransferDetail>(entity =>
            {
                entity.HasKey(e => e.TransferLineId)
                    .HasName("Pk_WmsTransferDetail_TrasferLine_id");

                entity.ToTable("WmsTransferDetail", "wms");

                entity.Property(e => e.TransferLineId).HasColumnName("TransferLine_id");

                entity.Property(e => e.ContainerNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FromBinId).HasColumnName("FromBin_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.Note)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SageTrNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TimeReceived).HasColumnType("datetime");

                entity.Property(e => e.ToBinId).HasColumnName("ToBin_id");

                entity.Property(e => e.TransferId).HasColumnName("Transfer_id");

                entity.HasOne(d => d.FromBin)
                    .WithMany(p => p.WmsTransferDetailFromBins)
                    .HasForeignKey(d => d.FromBinId)
                    .HasConstraintName("FK_WmsTransferDetail_WarehouseBin");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.WmsTransferDetails)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WmsTrsfDetail_KO_Itemno");

                entity.HasOne(d => d.ToBin)
                    .WithMany(p => p.WmsTransferDetailToBins)
                    .HasForeignKey(d => d.ToBinId)
                    .HasConstraintName("FK_WmsTransferDetail_WarehouseBin1");

                entity.HasOne(d => d.Transfer)
                    .WithMany(p => p.WmsTransferDetails)
                    .HasForeignKey(d => d.TransferId)
                    .HasConstraintName("FK_WmsTrsfDetail_WmsTransfer");
            });

            modelBuilder.Entity<WmtBulkCarrier>(entity =>
            {
                entity.ToTable("WmtBulkCarrier", "ord");

                entity.HasIndex(e => e.Scac, "Unq_WmtBulkCarrier")
                    .IsUnique();

                entity.Property(e => e.WmtBulkCarrierId).HasColumnName("WmtBulkCarrier_id");

                entity.Property(e => e.AddedTime).HasColumnType("datetime");

                entity.Property(e => e.Carrier)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Scac)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("SCAC");
            });

            modelBuilder.Entity<WmtCarrier>(entity =>
            {
                entity.HasKey(e => e.WmtCarId)
                    .HasName("Pk_WmtCarrier_WmtCar_id");

                entity.ToTable("WmtCarrier", "edi");

                entity.Property(e => e.WmtCarId).HasColumnName("WmtCar_id");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CarDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CarIdApi)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("CarID_API");

                entity.Property(e => e.CarIdEdi)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("CarID_EDI");

                entity.Property(e => e.CarrierId).HasColumnName("Carrier_id");

                entity.Property(e => e.LastModTime).HasColumnType("datetime");

                entity.Property(e => e.ShipViaId).HasColumnName("ShipVia_id");
            });

            modelBuilder.Entity<WmtCarrierApi>(entity =>
            {
                entity.HasKey(e => e.CarrierId)
                    .HasName("PK__WmtCarri__CB820559D1A148F9");

                entity.ToTable("WmtCarrier_API", "ord");

                entity.Property(e => e.CarrierName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShipViaId).HasColumnName("ShipVia_Id");

                entity.HasOne(d => d.ShipVia)
                    .WithMany(p => p.WmtCarrierApis)
                    .HasForeignKey(d => d.ShipViaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WmtCarrierShipvia");
            });

            modelBuilder.Entity<Wmtlisting>(entity =>
            {
                entity.HasKey(e => e.ListingId);

                entity.ToTable("WMTListing");

                entity.Property(e => e.ListingId).HasColumnName("Listing_id");

                entity.Property(e => e.WmtItemId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("WMT_Item_id");

                entity.Property(e => e.WmtSku)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("WMT_SKU");

                entity.HasOne(d => d.WmtItem)
                    .WithMany(p => p.Wmtlistings)
                    .HasForeignKey(d => d.WmtItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WMTListing_KO_WMTProduct");
            });

            modelBuilder.Entity<WyfItemConversion>(entity =>
            {
                entity.HasKey(e => e.WyfSkuId);

                entity.ToTable("WyfItemConversion");

                entity.Property(e => e.WyfSkuId).HasColumnName("wyf_SKU_id");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.WyfSkuname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Wyf_SKUname");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.WyfItemConversions)
                    .HasForeignKey(d => d.ItemNoId)
                    .HasConstraintName("FK_WyfItemConversion_KO_Itemno");
            });

            modelBuilder.Entity<WyfrPricCstStckRepDetail>(entity =>
            {
                entity.HasKey(e => e.RepDetailId);

                entity.ToTable("WyfrPricCstStckRepDetail");

                entity.Property(e => e.B2cdiscount)
                    .HasColumnType("money")
                    .HasColumnName("B2CDiscount");

                entity.Property(e => e.BaseCost).HasColumnType("money");

                entity.Property(e => e.BrandType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cgmarkdown)
                    .HasColumnType("money")
                    .HasColumnName("CGMarkdown");

                entity.Property(e => e.ClassName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplaySku)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DisplaySKU");

                entity.Property(e => e.IcrId).HasColumnName("ICR_id");

                entity.Property(e => e.IncidentAndReturnCost).HasColumnType("money");

                entity.Property(e => e.IsCg)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IsCG");

                entity.Property(e => e.IsInExclusivityProgram)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.MfrPartNo)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.OtherHandlingCost).HasColumnType("money");

                entity.Property(e => e.ProductAllowanceCost).HasColumnType("money");

                entity.Property(e => e.ProductStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Rebate).HasColumnType("money");

                entity.Property(e => e.ReportWeekDate).HasColumnType("date");

                entity.Property(e => e.RetailPrice).HasColumnType("money");

                entity.Property(e => e.RetailPriceNet).HasColumnType("money");

                entity.Property(e => e.ShipClass)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ShipOtherCost).HasColumnType("money");

                entity.Property(e => e.ShipOutboundCost).HasColumnType("money");

                entity.Property(e => e.SkufromWayfair)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SKUfromWayfair");

                entity.Property(e => e.SkulaunchMonth)
                    .HasColumnType("date")
                    .HasColumnName("SKULaunchMonth");

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SupplierID");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierPartNo)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.TaxAndDuties).HasColumnType("money");

                entity.Property(e => e.TotalCost).HasColumnType("money");

                entity.Property(e => e.WholesaleCost).HasColumnType("money");

                entity.Property(e => e.Wsclast12Months)
                    .HasColumnType("money")
                    .HasColumnName("WSCLast12Months");

                entity.Property(e => e.Wsclast90Days)
                    .HasColumnType("money")
                    .HasColumnName("WSCLast90Days");

                entity.Property(e => e.WscmrktCmpttvnssPercentile).HasColumnName("WSCMrktCmpttvnssPercentile");

                entity.HasOne(d => d.Icr)
                    .WithMany(p => p.WyfrPricCstStckRepDetails)
                    .HasForeignKey(d => d.IcrId)
                    .HasConstraintName("FK_WyfrPricCstStckRepDetail_MkICR");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.WyfrPricCstStckRepDetails)
                    .HasForeignKey(d => d.ItemNoId)
                    .HasConstraintName("FK_WyfrPricCstStckRepDetail_BpmItem");

                entity.HasOne(d => d.WyfrPricCstStckRep)
                    .WithMany(p => p.WyfrPricCstStckRepDetails)
                    .HasForeignKey(d => d.WyfrPricCstStckRepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WyfrPricCstStckRepDetail_WyfrPricCstStckReport");
            });

            modelBuilder.Entity<WyfrPricCstStckReport>(entity =>
            {
                entity.HasKey(e => e.WyfrPricCstStckRepId);

                entity.ToTable("WyfrPricCstStckReport");

                entity.Property(e => e.BrandCatalog)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.ReportWeekDate).HasColumnType("date");

                entity.Property(e => e.StartDate).HasColumnType("date");
            });

            modelBuilder.Entity<ZinusCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ZinusCategory");

                entity.Property(e => e.ItemNo)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ZinusCategory1)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("ZinusCategory");
            });

            modelBuilder.Entity<ZinusCust>(entity =>
            {
                entity.ToTable("ZinusCust");

                entity.Property(e => e.ZinusCustId).HasColumnName("ZinusCust_id");

                entity.Property(e => e.Area)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.BpNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CompCode)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CompName)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.CustName)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.G1Code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("G1_Code");

                entity.Property(e => e.G1Name)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("G1_Name");

                entity.Property(e => e.G1Order).HasColumnName("G1_Order");

                entity.Property(e => e.G2Code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("G2_Code");

                entity.Property(e => e.G2Name)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("G2_Name");

                entity.Property(e => e.G2Order).HasColumnName("G2_Order");

                entity.Property(e => e.G3Code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("G3_Code");

                entity.Property(e => e.G3Name)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("G3_Name");

                entity.Property(e => e.G3Order).HasColumnName("G3_Order");
            });

            modelBuilder.Entity<ZinusLoc>(entity =>
            {
                entity.ToTable("ZinusLoc");

                entity.Property(e => e.ZinusLocId).HasColumnName("ZinusLoc_id");

                entity.Property(e => e.ZinusName)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZinusSku>(entity =>
            {
                entity.ToTable("ZinusSKU");

                entity.HasIndex(e => e.Customer, "idx_ZinusSKU_Customer");

                entity.HasIndex(e => e.IsMasterSku, "idx_ZinusSKU_IsMasterSKU");

                entity.HasIndex(e => e.ItemNoId, "idx_ZinusSKU_ItemNo_id");

                entity.HasIndex(e => e.ZinusSku1, "idx_ZinusSKU_ZinusSKU");

                entity.Property(e => e.ZinusSkuId).HasColumnName("ZinusSKU_id");

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.IsMasterSku).HasColumnName("IsMasterSKU");

                entity.Property(e => e.ItemNoId).HasColumnName("ItemNo_id");

                entity.Property(e => e.ZinusSku1)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("ZinusSKU");

                entity.HasOne(d => d.ItemNo)
                    .WithMany(p => p.ZinusSkus)
                    .HasForeignKey(d => d.ItemNoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ZinusSKU_BpmItem");
            });

            modelBuilder.Entity<ZipToLocation>(entity =>
            {
                entity.ToTable("ZipToLocation", "ord");

                entity.HasIndex(e => e.ZipCode, "Unq_ZipToLocation")
                    .IsUnique();

                entity.Property(e => e.ZipToLocationId).HasColumnName("ZipToLocation_id");

                entity.Property(e => e.Latitude).HasColumnType("money");

                entity.Property(e => e.Longitude).HasColumnType("money");
            });

            modelBuilder.HasSequence<int>("EdiMyIcNo");

            modelBuilder.HasSequence<int>("sq_Interchange_Control_Number", "edi").HasMin(1);

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
