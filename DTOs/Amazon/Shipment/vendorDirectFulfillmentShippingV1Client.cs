//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

using Newtonsoft.Json;

namespace Chameleon.DTOs.Amazon.Shipment
{
    /// <summary>Packing slip information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class PackingSlip
    {
        /// <summary>Purchase order number of the shipment that the packing slip is for.</summary>
        [Newtonsoft.Json.JsonProperty("purchaseOrderNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z0-9]+$")]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>A Base64encoded string of the packing slip PDF.</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Content { get; set; }

        /// <summary>The format of the file such as PDF, JPEG etc.</summary>
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PackingSlipContentType? ContentType { get; set; }


    }

    /// <summary>A list of packing slips.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class PackingSlipList
    {
        [Newtonsoft.Json.JsonProperty("pagination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pagination Pagination { get; set; }

        [Newtonsoft.Json.JsonProperty("packingSlips", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PackingSlip> PackingSlips { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class GetPackingSlipListResponse
    {
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackingSlipList Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class GetPackingSlipResponse
    {
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackingSlip Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class SubmitShippingLabelsRequest
    {
        [Newtonsoft.Json.JsonProperty("shippingLabelRequests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShippingLabelRequest> ShippingLabelRequests { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class ShippingLabelRequest
    {
        /// <summary>Purchase order number of the order for which to create a shipping label.</summary>
        [Newtonsoft.Json.JsonProperty("purchaseOrderNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z0-9]+$")]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>ID of the selling party or vendor.</summary>
        [Newtonsoft.Json.JsonProperty("sellingParty", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyIdentification SellingParty { get; set; } = new PartyIdentification();

        /// <summary>Warehouse code of vendor.</summary>
        [Newtonsoft.Json.JsonProperty("shipFromParty", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyIdentification ShipFromParty { get; set; } = new PartyIdentification();

        /// <summary>A list of the packages in this shipment.</summary>
        [Newtonsoft.Json.JsonProperty("containers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Container> Containers { get; set; }


    }

    /// <summary>Details of the item being shipped.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class Item
    {
        /// <summary>Item Sequence Number for the item. This must be the same value as sent in order for a given item.</summary>
        [Newtonsoft.Json.JsonProperty("itemSequenceNumber", Required = Newtonsoft.Json.Required.Always)]
        public int ItemSequenceNumber { get; set; }

        /// <summary>Buyer's Standard Identification Number (ASIN) of an item. Either buyerProductIdentifier or vendorProductIdentifier is required.</summary>
        [Newtonsoft.Json.JsonProperty("buyerProductIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuyerProductIdentifier { get; set; }

        /// <summary>The vendor selected product identification of the item. Should be the same as was sent in the purchase order, like SKU Number.</summary>
        [Newtonsoft.Json.JsonProperty("vendorProductIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorProductIdentifier { get; set; }

        /// <summary>Total item quantity shipped in this shipment.</summary>
        [Newtonsoft.Json.JsonProperty("shippedQuantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ItemQuantity ShippedQuantity { get; set; } = new ItemQuantity();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class PackedItem
    {
        /// <summary>Item Sequence Number for the item. This must be the same value as sent in the order for a given item.</summary>
        [Newtonsoft.Json.JsonProperty("itemSequenceNumber", Required = Newtonsoft.Json.Required.Always)]
        public int ItemSequenceNumber { get; set; }

        /// <summary>Buyer's Standard Identification Number (ASIN) of an item. Either buyerProductIdentifier or vendorProductIdentifier is required.</summary>
        [Newtonsoft.Json.JsonProperty("buyerProductIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuyerProductIdentifier { get; set; }

        /// <summary>The vendor selected product identification of the item. Should be the same as was sent in the Purchase Order, like SKU Number.</summary>
        [Newtonsoft.Json.JsonProperty("vendorProductIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorProductIdentifier { get; set; }

        /// <summary>Total item quantity packed in the container.</summary>
        [Newtonsoft.Json.JsonProperty("packedQuantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ItemQuantity PackedQuantity { get; set; } = new ItemQuantity();


    }

    /// <summary>Details of the package being shipped.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class Package
    {
        /// <summary>Package identifier for the package. The first package will be 001, the second 002, and so on. This number is used as a reference to refer to this package from the pallet level.</summary>
        [Newtonsoft.Json.JsonProperty("packageIdentifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PackageIdentifier { get; set; }

        /// <summary>This is required to be provided for every package in the small parcel shipments.</summary>
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingNumber { get; set; }

        /// <summary>Carrier manifest Id (Applicable for LTL shipments).</summary>
        [Newtonsoft.Json.JsonProperty("manifestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManifestId { get; set; }

        /// <summary>Carrier manifest Date (Applicable for LTL shipments).</summary>
        [Newtonsoft.Json.JsonProperty("manifestDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ManifestDate { get; set; }

        /// <summary>Shipment method.</summary>
        [Newtonsoft.Json.JsonProperty("shipMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Weight Weight { get; set; } = new Weight();

        [Newtonsoft.Json.JsonProperty("dimensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimensions Dimensions { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class PartyIdentification
    {
        /// <summary>Assigned Identification for the party.</summary>
        [Newtonsoft.Json.JsonProperty("partyId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PartyId { get; set; }

        /// <summary>Identification of the party by address.</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }

        /// <summary>Tax registration details of the entity.</summary>
        [Newtonsoft.Json.JsonProperty("taxRegistrationDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TaxRegistrationDetails> TaxRegistrationDetails { get; set; }


    }

    /// <summary>Details about a shipment.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class ShipmentDetails
    {
        /// <summary>This field indicates the date of the departure of the shipment from vendor's location. Vendors are requested to send ASNs within 30 minutes of departure from their warehouse/distribution center or at least 6 hours prior to the appointment time at the Amazon destination warehouse, whichever is sooner. Shipped date mentioned in the Shipment Confirmation should not be in the future.</summary>
        [Newtonsoft.Json.JsonProperty("shippedDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ShippedDate { get; set; }

        /// <summary>Indicate the shipment status.</summary>
        [Newtonsoft.Json.JsonProperty("shipmentStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipmentDetailsShipmentStatus ShipmentStatus { get; set; }

        /// <summary>Provide the priority of the shipment.</summary>
        [Newtonsoft.Json.JsonProperty("isPriorityShipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPriorityShipment { get; set; }

        /// <summary>The vendor order number is a unique identifier generated by a vendor for their reference.</summary>
        [Newtonsoft.Json.JsonProperty("vendorOrderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VendorOrderNumber { get; set; }

        /// <summary>Date on which the shipment is expected to reach the buyer's warehouse. It needs to be an estimate based on the average transit time between the ship-from location and the destination. The exact appointment time will be provided by buyer and is potentially not known when creating the shipment confirmation.</summary>
        [Newtonsoft.Json.JsonProperty("estimatedDeliveryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EstimatedDeliveryDate { get; set; }


    }

    /// <summary>Details for the shipment status update given by the vendor for the specific package.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class StatusUpdateDetails
    {
        /// <summary>This is required to be provided for every package and should match with the trackingNumber sent for the shipment confirmation.</summary>
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TrackingNumber { get; set; }

        /// <summary>Indicates the shipment status code of the package that provides transportation information for Amazon tracking systems and ultimately for the final customer.</summary>
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StatusCode { get; set; }

        /// <summary>Provides a reason code for the status of the package that will provide additional information about the transportation status.</summary>
        [Newtonsoft.Json.JsonProperty("reasonCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReasonCode { get; set; }

        /// <summary>The date and time when the shipment status was updated. This field is expected to be in ISO-8601 date/time format, with UTC time zone or UTC offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.</summary>
        [Newtonsoft.Json.JsonProperty("statusDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StatusDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("statusLocationAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Address StatusLocationAddress { get; set; } = new Address();

        [Newtonsoft.Json.JsonProperty("shipmentSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentSchedule ShipmentSchedule { get; set; }


    }

    /// <summary>Tax registration details of the entity.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class TaxRegistrationDetails
    {
        /// <summary>Tax registration type for the entity.</summary>
        [Newtonsoft.Json.JsonProperty("taxRegistrationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaxRegistrationDetailsTaxRegistrationType? TaxRegistrationType { get; set; }

        /// <summary>Tax registration number for the party. For example, VAT ID.</summary>
        [Newtonsoft.Json.JsonProperty("taxRegistrationNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TaxRegistrationNumber { get; set; }

        /// <summary>Address associated with the tax registration number.</summary>
        [Newtonsoft.Json.JsonProperty("taxRegistrationAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address TaxRegistrationAddress { get; set; }

        /// <summary>Tax registration message that can be used for additional tax related details.</summary>
        [Newtonsoft.Json.JsonProperty("taxRegistrationMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxRegistrationMessages { get; set; }


    }

    /// <summary>Address of the party.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class Address
    {
        /// <summary>The name of the person, business or institution at that address.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>First line of the address.</summary>
        [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AddressLine1 { get; set; }

        /// <summary>Additional street address information, if required.</summary>
        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine2 { get; set; }

        /// <summary>Additional street address information, if required.</summary>
        [Newtonsoft.Json.JsonProperty("addressLine3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine3 { get; set; }

        /// <summary>The city where the person, business or institution is located.</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>The county where person, business or institution is located.</summary>
        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string County { get; set; }

        /// <summary>The district where person, business or institution is located.</summary>
        [Newtonsoft.Json.JsonProperty("district", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string District { get; set; }

        /// <summary>The state or region where person, business or institution is located.</summary>
        [Newtonsoft.Json.JsonProperty("stateOrRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateOrRegion { get; set; }

        /// <summary>The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.</summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        /// <summary>The two digit country code in ISO 3166-1 alpha-2 format.</summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryCode { get; set; }

        /// <summary>The phone number of the person, business or institution located at that address.</summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }


    }

    /// <summary>Physical dimensional measurements of a container.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class Dimensions
    {
        /// <summary>The length of the container.</summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Length { get; set; }

        /// <summary>The width of the container.</summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Width { get; set; }

        /// <summary>The height of the container.</summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Height { get; set; }

        /// <summary>The unit of measure for dimensions.</summary>
        [Newtonsoft.Json.JsonProperty("unitOfMeasure", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DimensionsUnitOfMeasure UnitOfMeasure { get; set; }


    }

    /// <summary>The weight.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class Weight
    {
        /// <summary>The unit of measurement.</summary>
        [Newtonsoft.Json.JsonProperty("unitOfMeasure", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WeightUnitOfMeasure UnitOfMeasure { get; set; }

        /// <summary>The measurement value.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }


    }

    /// <summary>Details of item quantity.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class ItemQuantity
    {
        /// <summary>Quantity of units shipped for a specific item at a shipment level. If the item is present only in certain packages or pallets within the shipment, please provide this at the appropriate package or pallet level.</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public int Amount { get; set; }

        /// <summary>Unit of measure for the shipped quantity.</summary>
        [Newtonsoft.Json.JsonProperty("unitOfMeasure", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UnitOfMeasure { get; set; }


    }

    /// <summary>The response schema for the submitShipmentConfirmations operation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class SubmitShipmentConfirmationsResponse
    {
        /// <summary>The response payload for the submitShipmentConfirmations operation.</summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransactionReference Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }


    }

    /// <summary>The response schema for the submitShipmentStatusUpdates operation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class SubmitShipmentStatusUpdatesResponse
    {
        /// <summary>The response payload for the submitShipmentStatusUpdates operation.</summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransactionReference Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }


    }

    /// <summary>The response schema for the getShippingLabels operation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class GetShippingLabelListResponse
    {
        /// <summary>List of ship labels.</summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingLabelList Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }


    }

    /// <summary>The response schema for the getShippingLabel operation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class GetShippingLabelResponse
    {
        /// <summary>The payload for the getShippingLabel operation.</summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingLabel Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class ShippingLabelList
    {
        [Newtonsoft.Json.JsonProperty("pagination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pagination Pagination { get; set; }

        [Newtonsoft.Json.JsonProperty("shippingLabels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShippingLabel> ShippingLabels { get; set; }


    }

    /// <summary>Details of the shipment label.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class LabelData
    {
        /// <summary>Identifier for the package. The first package will be 001, the second 002, and so on. This number is used as a reference to refer to this package from the pallet level.</summary>
        [Newtonsoft.Json.JsonProperty("packageIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PackageIdentifier { get; set; }

        /// <summary>Package tracking identifier from the shipping carrier.</summary>
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingNumber { get; set; }

        /// <summary>Ship method to be used for shipping the order. Amazon defines Ship Method Codes indicating shipping carrier and shipment service level. Ship Method Codes are case and format sensitive. The same ship method code should returned on the shipment confirmation. Note that the Ship Method Codes are vendor specific and will be provided to each vendor during the implementation.</summary>
        [Newtonsoft.Json.JsonProperty("shipMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipMethod { get; set; }

        /// <summary>Shipping method name for internal reference.</summary>
        [Newtonsoft.Json.JsonProperty("shipMethodName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipMethodName { get; set; }

        /// <summary>This field will contain the Base64encoded string of the shipment label content.</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Content { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class ShippingLabel
    {
        /// <summary>This field will contain the Purchase Order Number for this order.</summary>
        [Newtonsoft.Json.JsonProperty("purchaseOrderNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z0-9]+$")]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>ID of the selling party or vendor.</summary>
        [Newtonsoft.Json.JsonProperty("sellingParty", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyIdentification SellingParty { get; set; } = new PartyIdentification();

        /// <summary>Warehouse code of vendor.</summary>
        [Newtonsoft.Json.JsonProperty("shipFromParty", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyIdentification ShipFromParty { get; set; } = new PartyIdentification();

        /// <summary>Format of the label.</summary>
        [Newtonsoft.Json.JsonProperty("labelFormat", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShippingLabelLabelFormat LabelFormat { get; set; }

        /// <summary>Provides the details of the packages in this shipment.</summary>
        [Newtonsoft.Json.JsonProperty("labelData", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<LabelData> LabelData { get; set; } = new System.Collections.ObjectModel.Collection<LabelData>();


    }

    /// <summary>The response schema for the submitShippingLabelRequest operation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class SubmitShippingLabelsResponse
    {
        /// <summary>The response payload for the submitShippingLabelRequest operation.</summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransactionReference Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class SubmitShipmentConfirmationsRequest
    {
        [Newtonsoft.Json.JsonProperty("shipmentConfirmations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShipmentConfirmation> ShipmentConfirmations { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class ShipmentConfirmation
    {
        /// <summary>Purchase order number corresponding to the shipment.</summary>
        [Newtonsoft.Json.JsonProperty("purchaseOrderNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z0-9]+$")]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>Shipment information.</summary>
        [Newtonsoft.Json.JsonProperty("shipmentDetails", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ShipmentDetails ShipmentDetails { get; set; } = new ShipmentDetails();

        /// <summary>ID of the selling party or vendor.</summary>
        [Newtonsoft.Json.JsonProperty("sellingParty", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyIdentification SellingParty { get; set; } = new PartyIdentification();

        /// <summary>Warehouse code of vendor.</summary>
        [Newtonsoft.Json.JsonProperty("shipFromParty", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyIdentification ShipFromParty { get; set; } = new PartyIdentification();

        /// <summary>Provide the details of the items in this shipment. If any of the item details field is common at a package or a pallet level, then provide them at the corresponding package.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Item> Items { get; set; } = new System.Collections.ObjectModel.Collection<Item>();

        /// <summary>Provide the details of the items in this shipment. If any of the item details field is common at a package or a pallet level, then provide them at the corresponding package.</summary>
        [Newtonsoft.Json.JsonProperty("containers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Container> Containers { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class SubmitShipmentStatusUpdatesRequest
    {
        [Newtonsoft.Json.JsonProperty("shipmentStatusUpdates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<ShipmentStatusUpdate> ShipmentStatusUpdates { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class ShipmentStatusUpdate
    {
        /// <summary>Purchase order number of the shipment for which to update the shipment status.</summary>
        [Newtonsoft.Json.JsonProperty("purchaseOrderNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z0-9]+$")]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>ID of the selling party or vendor.</summary>
        [Newtonsoft.Json.JsonProperty("sellingParty", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyIdentification SellingParty { get; set; } = new PartyIdentification();

        /// <summary>Warehouse code of vendor.</summary>
        [Newtonsoft.Json.JsonProperty("shipFromParty", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyIdentification ShipFromParty { get; set; } = new PartyIdentification();

        /// <summary>Provide the details about the status of the shipment at that particular point of time.</summary>
        [Newtonsoft.Json.JsonProperty("statusUpdateDetails", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StatusUpdateDetails StatusUpdateDetails { get; set; } = new StatusUpdateDetails();


    }

    /// <summary>The response schema for the getCustomerInvoices operation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class GetCustomerInvoicesResponse
    {
        /// <summary>List of customer invoices.</summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerInvoiceList Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }


    }

    /// <summary>The response schema for the getCustomerInvoice operation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class GetCustomerInvoiceResponse
    {
        /// <summary>The payload for the getCustomerInvoice operation.</summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerInvoice Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorList Errors { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class CustomerInvoiceList
    {
        [Newtonsoft.Json.JsonProperty("pagination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pagination Pagination { get; set; }

        [Newtonsoft.Json.JsonProperty("customerInvoices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerInvoice> CustomerInvoices { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class Pagination
    {
        /// <summary>A generated string used to pass information to your next request. If NextToken is returned, pass the value of NextToken to the next request. If NextToken is not returned, there are no more order items to return.</summary>
        [Newtonsoft.Json.JsonProperty("nextToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextToken { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class CustomerInvoice
    {
        /// <summary>The purchase order number for this order.</summary>
        [Newtonsoft.Json.JsonProperty("purchaseOrderNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z0-9]+$")]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>The Base64encoded customer invoice.</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Content { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class TransactionReference
    {
        /// <summary>GUID to identify this transaction. This value can be used with the Transaction Status API to return the status of this transaction.</summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }


    }

    /// <summary>A list of error responses returned when a request is unsuccessful.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class ErrorList : System.Collections.ObjectModel.Collection<Error>
    {

    }

    /// <summary>Error response returned when the request is unsuccessful.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class Error
    {
        /// <summary>An error code that identifies the type of error that occurred.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        /// <summary>A message that describes the error condition.</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>Additional details that can help the caller understand or fix the issue.</summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class Container
    {
        /// <summary>The type of container.</summary>
        [Newtonsoft.Json.JsonProperty("containerType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContainerType ContainerType { get; set; }

        /// <summary>The container identifier.</summary>
        [Newtonsoft.Json.JsonProperty("containerIdentifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContainerIdentifier { get; set; }

        /// <summary>The tracking number.</summary>
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingNumber { get; set; }

        /// <summary>The manifest identifier.</summary>
        [Newtonsoft.Json.JsonProperty("manifestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManifestId { get; set; }

        /// <summary>The date of the manifest.</summary>
        [Newtonsoft.Json.JsonProperty("manifestDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManifestDate { get; set; }

        /// <summary>The shipment method.</summary>
        [Newtonsoft.Json.JsonProperty("shipMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipMethod { get; set; }

        /// <summary>SCAC code required for NA VOC vendors only.</summary>
        [Newtonsoft.Json.JsonProperty("scacCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScacCode { get; set; }

        /// <summary>Carrier required for EU VOC vendors only.</summary>
        [Newtonsoft.Json.JsonProperty("carrier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Carrier { get; set; }

        /// <summary>An integer that must be submitted for multi-box shipments only, where one item may come in separate packages.</summary>
        [Newtonsoft.Json.JsonProperty("containerSequenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContainerSequenceNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("dimensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimensions Dimensions { get; set; }

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight Weight { get; set; }

        /// <summary>A list of packed items.</summary>
        [Newtonsoft.Json.JsonProperty("packedItems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PackedItem> PackedItems { get; set; } = new System.Collections.ObjectModel.Collection<PackedItem>();


    }

    /// <summary>Sort ASC or DESC by order creation date.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortOrder
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>Sort ASC or DESC by order creation date.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortOrder2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    /// <summary>Sort ASC or DESC by packing slip creation date.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortOrder3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PackingSlipContentType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"application/pdf")]
        Application_pdf = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShipmentDetailsShipmentStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPED")]
        SHIPPED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOOR_DENIAL")]
        FLOOR_DENIAL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public class ShipmentSchedule
    {
        /// <summary>Date on which the shipment is expected to reach the customer delivery location. This field is expected to be in ISO-8601 date/time format, with UTC time zone or UTC offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.</summary>
        [Newtonsoft.Json.JsonProperty("estimatedDeliveryDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EstimatedDeliveryDateTime { get; set; }

        /// <summary>This field indicates the date and time at the start of the appointment window scheduled to deliver the shipment. This field is expected to be in ISO-8601 date/time format, with UTC time zone or UTC offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.</summary>
        [Newtonsoft.Json.JsonProperty("apptWindowStartDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ApptWindowStartDateTime { get; set; }

        /// <summary>This field indicates the date and time at the end of the appointment window scheduled to deliver the shipment. This field is expected to be in ISO-8601 date/time format, with UTC time zone or UTC offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.</summary>
        [Newtonsoft.Json.JsonProperty("apptWindowEndDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ApptWindowEndDateTime { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TaxRegistrationDetailsTaxRegistrationType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"VAT")]
        VAT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GST")]
        GST = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DimensionsUnitOfMeasure
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IN")]
        IN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum WeightUnitOfMeasure
    {
        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LB")]
        LB = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShippingLabelLabelFormat
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PNG")]
        PNG = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ZPL")]
        ZPL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ContainerType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"carton")]
        Carton = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"pallet")]
        Pallet = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108