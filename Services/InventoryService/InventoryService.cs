using Chameleon.DTOs.Inventory;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoMapper;
using System.Security.Claims;
using Chameleon.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using EFCore.BulkExtensions;
using System.Text.RegularExpressions;
using System.Diagnostics;
using Org.BouncyCastle.Ocsp;
using System.Security.Cryptography;
using System.Net.Mail;
using System.Net;
using Chameleon.Services.UtilityService;
using Chameleon.DTOs.Utility;
using System.Globalization;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using RestSharp.Extensions;
using System.Collections.Concurrent;
using System.Collections;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Chameleon.DTOs.Amazon.Shipment;
using System.IO;
using System.Web.WebPages;

namespace Chameleon.Services.InventoryService
{
  public class InventoryService : IInventoryService
  {
    private readonly KOALAContext _kc;
    private readonly IMapper _mapper;
    private readonly IHttpContextAccessor _httpContextAccessor;
    private readonly int itemStatus, obsoleteStatus, itemType;
    private readonly IUtilityService _utilService;
    private class InvQty
    {
      public int ItemNoId { get; set; }
      public string ItemName { get; set; }
      public int QtyOnAvail { get; set; }
    }

    public class ItemSoldQty
    {
      public int ItemNoId { get; set; }
      public int SumQty { get; set; }
    }

    public class StagePO
    {
      public int LocId { get; set; }
      public int TotalQtyOrdered { get; set; }
      public int ItemNoId { get; set; }
    }

    public class ItemNoIdSku
    {
      public int ItemNoId { get; set; }
      public string ItemName { get; set; }
      public long InvFeedsReportItemId { get; set; }
    }

    public class BackOrderedQty
    {
      public int LocId { get; set; }
      public int? TotalQtyOrdered { get; set; }
    }

    public class NetsuiteIdInfo
    {
      public int ItemNoId { get; set; }
      public bool isCooMaster { get; set; }
    }
    //private class EmailAddr
    //{
    //  public string LoginID { get; set; }
    //}

    public InventoryService(IMapper mapper, KOALAContext kc, IHttpContextAccessor httpContextAccessor, IUtilityService utilityService)
    {
      _kc = kc;
      _mapper = mapper;
      _httpContextAccessor = httpContextAccessor;
      _utilService = utilityService;
      itemStatus = 12;
      obsoleteStatus = 6;
      itemType = 2;

    }


    // Get a single inventory item by ItemNoId
    // By Brian Yi on 04/23/2021
    public async Task<GetInventoryItemDTO> GetInventoryItem(int? id)
    {
      BpmItem bpmItem = await _kc.BpmItems
        .FirstOrDefaultAsync(bi => bi.ItemNoId == id);
      GetInventoryItemDTO serviceResponse = new GetInventoryItemDTO();
      InvRealTime invRealTimeItem = await _kc.InvRealTimes
        .Include(irt => irt.Location)
        .Include(irt => irt.ItemNo)
        .FirstOrDefaultAsync(irt => irt.ItemNoId == id);

      if (invRealTimeItem != null)
      {
        serviceResponse = new GetInventoryItemDTO()
        {
          InventoryItemId = invRealTimeItem.InvRealTimeId,
          NsIntId = (int)bpmItem.NsIntId,
          ItemNoId = invRealTimeItem.ItemNoId,
          ItemName = invRealTimeItem.ItemNo.ItemName,
          QtyOnHand = invRealTimeItem.QtyOnHand,
          QtyAvail = invRealTimeItem.QtyAvail,
          LocName = invRealTimeItem.Location.LocName,
          TimeStamp = invRealTimeItem.TimeRecord
        };
      }
      else
      {
        serviceResponse = new GetInventoryItemDTO()
        {
          InventoryItemId = -1,
          NsIntId = (int)bpmItem.NsIntId,
          ItemNoId = bpmItem.ItemNoId,
          ItemName = bpmItem.ItemName,
          QtyOnHand = 0,
          QtyAvail = 0,
          LocName = "",
          LocId = 0,
          TimeStamp = DateTime.Today
        };
      }
      return serviceResponse;
    }

    // Get a single inventory item by ItemNoId
    // By Brian Yi on 05/21/2021
    public async Task<GetMainslBancInvItemDetailDTO> GetMainslBANCInventoryItem(long id)
    {
      int bancLocId = 4, mainslLocId = 25, swcaftId = 54, bascId = 62, zinusTracyId = 57, zinusChsId = 108, qtyOnAvMainsl = 0, qtyOnHndMainsl = 0, qtyOnAvBanc = 0, qtyOnHndBanc = 0, qtyOnAvBasc = 0, qtyOnHndBasc = 0,
        qtyStagePOModBanc = 0, qtyStagePOModBasc = 0, qtyStagePOModSwcaft = 0, qtyStagePOModMainsl = 0, qtyStagePOOrigBanc = 0, qtyStagePOOrigBasc = 0, qtyStagePOOrigSwcaft = 0, qtyStagePOOrigMainsl = 0,
        qtyOnAvZinusTracy = 0, qtyOnHndZinusTracy = 0, qtyStagePOModZinusTracy = 0, qtyStagePOOrigZinusTracy = 0, qtyOnAvZinusChs = 0, qtyOnHndZinusChs = 0, qtyStagePOModZinusChs = 0, qtyStagePOOrigZinusChs = 0; // qtyOnAvSwcaft = 0, qtyOnHndSwcaft = 0, 
      bool generalRule = true;
      InvFeedsItem invFeedsItem = await _kc.InvFeedsItems
        .Include(x => x.ItemNo)
        .Include(x => x.InvFeedsItemLocQties)
        .FirstOrDefaultAsync(ifi => ifi.InvFeedsItemId == id);

      foreach (InvFeedsItemLocQty ilq in invFeedsItem.InvFeedsItemLocQties)
      {
        if (ilq.ItemLocId == bancLocId) // Get BANC Qty
        {
          qtyOnAvBanc = (int)(ilq.QtyAvail.HasValue ? ilq.QtyAvail : 0);
          qtyOnHndBanc = (int)(ilq.QtyOnHand.HasValue ? ilq.QtyOnHand : 0);
          qtyStagePOModBanc = (int)(ilq.StagePoqtyModified.HasValue ? ilq.StagePoqtyModified : 0);
          qtyStagePOOrigBanc = (int)(ilq.StagePoqtyOrig.HasValue ? ilq.StagePoqtyOrig : 0);
        }
        else if (ilq.ItemLocId == mainslLocId) // Get Mainsl Qty
        {
          qtyOnAvMainsl = (int)(ilq.QtyAvail.HasValue ? ilq.QtyAvail : 0);
          qtyOnHndMainsl = (int)(ilq.QtyOnHand.HasValue ? ilq.QtyOnHand : 0);
          qtyStagePOModMainsl = (int)(ilq.StagePoqtyModified.HasValue ? ilq.StagePoqtyModified : 0);
          qtyStagePOOrigMainsl = (int)(ilq.StagePoqtyOrig.HasValue ? ilq.StagePoqtyOrig : 0);
        }
        else if (ilq.ItemLocId == bascId) // Get Basc Qty
        {
          qtyOnAvBasc = (int)(ilq.QtyAvail.HasValue ? ilq.QtyAvail : 0);
          qtyOnHndBasc = (int)(ilq.QtyOnHand.HasValue ? ilq.QtyOnHand : 0);
          qtyStagePOModBasc = (int)(ilq.StagePoqtyModified.HasValue ? ilq.StagePoqtyModified : 0);
          qtyStagePOOrigBasc = (int)(ilq.StagePoqtyOrig.HasValue ? ilq.StagePoqtyOrig : 0);
        }
        else if (ilq.ItemLocId == zinusTracyId) // Get ZINUS Tracy Qty
        {
          qtyOnAvZinusTracy = (int)(ilq.QtyAvail.HasValue ? ilq.QtyAvail : 0);
          qtyOnHndZinusTracy = (int)(ilq.QtyOnHand.HasValue ? ilq.QtyOnHand : 0);
          qtyStagePOModZinusTracy = (int)(ilq.StagePoqtyModified.HasValue ? ilq.StagePoqtyModified : 0);
          qtyStagePOOrigZinusTracy = (int)(ilq.StagePoqtyOrig.HasValue ? ilq.StagePoqtyOrig : 0);
        }
        else if (ilq.ItemLocId == zinusChsId) // Get ZINUS Chs Qty
        {
          qtyOnAvZinusChs = (int)(ilq.QtyAvail.HasValue ? ilq.QtyAvail : 0);
          qtyOnHndZinusChs = (int)(ilq.QtyOnHand.HasValue ? ilq.QtyOnHand : 0);
          qtyStagePOModZinusChs = (int)(ilq.StagePoqtyModified.HasValue ? ilq.StagePoqtyModified : 0);
          qtyStagePOOrigZinusChs = (int)(ilq.StagePoqtyOrig.HasValue ? ilq.StagePoqtyOrig : 0);
        }/*
        else if (ilq.ItemLocId == swcaftId) // Get Swcaft Qty
        {
          qtyOnAvSwcaft = (int)(ilq.QtyAvail.HasValue ? ilq.QtyAvail : 0);
          qtyOnHndSwcaft = (int)(ilq.QtyOnHand.HasValue ? ilq.QtyOnHand : 0);
          qtyStagePOModSwcaft = (int)(ilq.StagePoqtyModified.HasValue ? ilq.StagePoqtyModified : 0);
          qtyStagePOOrigSwcaft = (int)(ilq.StagePoqtyOrig.HasValue ? ilq.StagePoqtyOrig : 0);
        }*/
      }

      GetMainslBancInvItemDetailDTO serviceResponse = new GetMainslBancInvItemDetailDTO()
      {
        AmzSKUSpecific = false,
        BPMSKUSpecific = false,
        eBaySKUSpecific = false,
        HouzzSKUSpecific = false,
        MellowSKUSpecific = false,
        OstSKUSpecific = false,
        WlmrtSKUSpecific = false,
        WyfrSKUSpecific = false,
        HomeDepotSKUSpecific = false,
        TargetSKUSpecific = false
      };

      GetMainslBancInvItemDTO invItemDetail = new GetMainslBancInvItemDTO()
      {
        InventoryItemId = invFeedsItem.InvFeedsItemId,
        ItemNoId = (int)invFeedsItem.ItemNoId,
        ItemName = invFeedsItem.ItemNo.ItemName,
        Remark = (bool)invFeedsItem.IsSet ? "Set" : "",
        QtyOnHandMainsl = qtyOnHndMainsl,
        QtyAvailMainsl = qtyOnAvMainsl,
        QtyOnHandBanc = qtyOnHndBanc,
        QtyAvailBanc = qtyOnAvBanc,
        QtyOnHandBasc = qtyOnHndBasc,
        QtyAvailBasc = qtyOnAvBasc,
        QtyOnHandZinusTracy = qtyOnHndZinusTracy,
        QtyAvailZinusTracy = qtyOnAvZinusTracy,
        QtyOnHandZinusChs = qtyOnHndZinusChs,
        QtyAvailZinusChs = qtyOnAvZinusChs,
        //QtyOnHandSwcaft = qtyOnHndSwcaft,
        //QtyAvailSwcaft = qtyOnAvSwcaft,
        StagePOOrigBanc = qtyStagePOModBanc,
        StagePOOrigBasc = qtyStagePOOrigBasc,
        StagePOOrigMainsl = qtyStagePOOrigMainsl,
        StagePOOrigSwcaft = qtyStagePOOrigSwcaft,
        StagePOModBanc = qtyStagePOModBanc,
        StagePOModBasc = qtyStagePOModBasc,
        StagePOModMainsl = qtyStagePOModMainsl,
        StagePOModSwcaft = qtyStagePOModSwcaft,
        StagePOOrigZinusTracy = qtyStagePOOrigZinusTracy,
        StagePOOrigZinusChs = qtyStagePOOrigZinusChs,
        StagePOModZinusTracy = qtyStagePOModZinusTracy,
        StagePOModZinusChs = qtyStagePOModZinusChs
      };

      List<InvFeedsRemark> invFeedsRemarks = await _kc.InvFeedsRemarks
        .Include(ifr => ifr.InvFeedsRmrkCtgry)
        .Where(ifr => (int)ifr.ItemNoId == (int)invItemDetail.ItemNoId)
        .ToListAsync();

      List<InvFeedsRmrkCtgry> invFeedsRmrkCtgries = await _kc.InvFeedsRmrkCtgries
        .Where(i => i.IsActivated == true)
        .ToListAsync();

      List<InvFeedsRemarkCategory> invFeedsRemarkCategories = invFeedsRmrkCtgries.Select(i =>
      new InvFeedsRemarkCategory()
      {
        categoryId = i.InvFeedsRmrkCtgryId,
        categoryName = i.CategoryName,
        isActivatedOnThisSKU = false
      }).ToList();

      // For "Set" item
      InvFeedsRemarkCategory forSetItem = new InvFeedsRemarkCategory()
      {
        categoryId = -1,
        categoryName = "Set",
        isActivatedOnThisSKU = (bool)invFeedsItem.IsSet
      };
      invFeedsRemarkCategories.Add(forSetItem);
      foreach (InvFeedsRemark tmpDto in invFeedsRemarks)
      {
        InvFeedsRemarkCategory tmpCat = invFeedsRemarkCategories.Find(i => i.categoryId == tmpDto.InvFeedsRmrkCtgryId);
        if (tmpCat != null) { tmpCat.isActivatedOnThisSKU = (bool)tmpDto.IsActivated; }
      }
      serviceResponse.remarkList = invFeedsRemarkCategories; // Done with Remark!

      if ((invFeedsRemarks != null) && (invFeedsRemarks.Count != 0))
      {
        foreach (InvFeedsRemark tmpIfr in invFeedsRemarks)
        {
          if (invItemDetail.Remark == "") invItemDetail.Remark = tmpIfr.InvFeedsRmrkCtgry.CategoryName;
          else invItemDetail.Remark = invItemDetail.Remark + ", " + tmpIfr.InvFeedsRmrkCtgry.CategoryName;
        }
      }

      InvFeedsRuleSku invFeedsRuleSkus = await _kc.InvFeedsRuleSkus
        .Include(ifrs => ifrs.InvFeedsRuleSkumkts)
        .Where(ifrs => ifrs.ItemNoId == invItemDetail.ItemNoId)
        .FirstOrDefaultAsync();

      if (invFeedsRuleSkus != null)
        if (invFeedsRuleSkus.InvFeedsRuleSkumkts.Count > 0) generalRule = false;

      List<InvFeedsRule> invFeedsRules = await _kc.InvFeedsRules
        .Where(ifr => ifr.IsActivated == true)
        .ToListAsync();
      int customerId = 0;
      if (invFeedsRuleSkus != null)
      {
        serviceResponse.DoNotFeedFromMainsl = (invFeedsRuleSkus.DoNotFeedFromMainsl != null ? (bool)invFeedsRuleSkus.DoNotFeedFromMainsl : false);
        serviceResponse.DoNotFeedFromBanc = (invFeedsRuleSkus.DoNotFeedFromBanc != null ? (bool)invFeedsRuleSkus.DoNotFeedFromBanc : false);
        serviceResponse.DoNotFeedFromSwcaft = (invFeedsRuleSkus.DoNotFeedFromSwcaft != null ? (bool)invFeedsRuleSkus.DoNotFeedFromSwcaft : false);
        serviceResponse.DoNotFeedFromBasc = (invFeedsRuleSkus.DoNotFeedFromBasc != null ? (bool)invFeedsRuleSkus.DoNotFeedFromBasc : false);
        foreach (InvFeedsRuleSkumkt tmpSkuRule in invFeedsRuleSkus.InvFeedsRuleSkumkts)
        {
          switch (tmpSkuRule.CustomerId)
          {
            case 5: // Amazon Drop Ship
              customerId = 5;
              serviceResponse.AmzSKUSpecific = (tmpSkuRule.CustomRuleForRatioZeroOut != null ? (bool)tmpSkuRule.CustomRuleForRatioZeroOut : false);
              serviceResponse.AmzDoNotFeed = (tmpSkuRule.DoNotFeedToHere.HasValue ? (bool)tmpSkuRule.DoNotFeedToHere : false);
              serviceResponse.AmzCustPercentage =
              (tmpSkuRule.CustomFixedPercentage.HasValue ? (int)tmpSkuRule.CustomFixedPercentage : (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).CustomFeedRatio);
              serviceResponse.AmzCustZeroOutAt =
              (tmpSkuRule.CustomZeroOutAt.HasValue ? (int)tmpSkuRule.CustomZeroOutAt : (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).ZeroOutAt);
              break;
            case 9: // BPM Website
              customerId = 9;
              serviceResponse.BPMSKUSpecific = (tmpSkuRule.CustomRuleForRatioZeroOut != null ? (bool)tmpSkuRule.CustomRuleForRatioZeroOut : false);
              serviceResponse.BPMDoNotFeed = (tmpSkuRule.DoNotFeedToHere.HasValue ? (bool)tmpSkuRule.DoNotFeedToHere : false);
              serviceResponse.BPMCustPercentage =
              (tmpSkuRule.CustomFixedPercentage.HasValue ? (int)tmpSkuRule.CustomFixedPercentage : (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).CustomFeedRatio);
              serviceResponse.BPMCustZeroOutAt =
              (tmpSkuRule.CustomZeroOutAt.HasValue ? (int)tmpSkuRule.CustomZeroOutAt : (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).ZeroOutAt);
              break;
            case 12: // eBay
              customerId = 12;
              serviceResponse.eBaySKUSpecific = (tmpSkuRule.CustomRuleForRatioZeroOut != null ? (bool)tmpSkuRule.CustomRuleForRatioZeroOut : false);
              serviceResponse.eBayDoNotFeed = (tmpSkuRule.DoNotFeedToHere.HasValue ? (bool)tmpSkuRule.DoNotFeedToHere : false);
              serviceResponse.eBayCustPercentage =
              (tmpSkuRule.CustomFixedPercentage.HasValue ? (int)tmpSkuRule.CustomFixedPercentage : (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).CustomFeedRatio);
              serviceResponse.eBayCustZeroOutAt =
              (tmpSkuRule.CustomZeroOutAt.HasValue ? (int)tmpSkuRule.CustomZeroOutAt : (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).ZeroOutAt);
              break;
            case 14: // Houzz Drop Ship 
              customerId = 14;
              serviceResponse.HouzzSKUSpecific = (tmpSkuRule.CustomRuleForRatioZeroOut != null ? (bool)tmpSkuRule.CustomRuleForRatioZeroOut : false);
              serviceResponse.HouzzDoNotFeed = (tmpSkuRule.DoNotFeedToHere.HasValue ? (bool)tmpSkuRule.DoNotFeedToHere : false);
              serviceResponse.HouzzCustPercentage =
              (tmpSkuRule.CustomFixedPercentage.HasValue ? (int)tmpSkuRule.CustomFixedPercentage : (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).CustomFeedRatio);
              serviceResponse.HouzzCustZeroOutAt =
              (tmpSkuRule.CustomZeroOutAt.HasValue ? (int)tmpSkuRule.CustomZeroOutAt : (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).ZeroOutAt);
              break;
            case 18: // Mellow Website
              customerId = 18;
              serviceResponse.MellowSKUSpecific = (tmpSkuRule.CustomRuleForRatioZeroOut != null ? (bool)tmpSkuRule.CustomRuleForRatioZeroOut : false);
              serviceResponse.MellowDoNotFeed = (tmpSkuRule.DoNotFeedToHere.HasValue ? (bool)tmpSkuRule.DoNotFeedToHere : false);
              serviceResponse.MellowCustPercentage =
              (tmpSkuRule.CustomFixedPercentage.HasValue ? (int)tmpSkuRule.CustomFixedPercentage : (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).CustomFeedRatio);
              serviceResponse.MellowCustZeroOutAt =
              (tmpSkuRule.CustomZeroOutAt.HasValue ? (int)tmpSkuRule.CustomZeroOutAt : (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).ZeroOutAt);
              break;
            case 21: // Overstock Drop Ship
              customerId = 21;
              serviceResponse.OstSKUSpecific = (tmpSkuRule.CustomRuleForRatioZeroOut != null ? (bool)tmpSkuRule.CustomRuleForRatioZeroOut : false);
              serviceResponse.OstDoNotFeed = (tmpSkuRule.DoNotFeedToHere.HasValue ? (bool)tmpSkuRule.DoNotFeedToHere : false);
              serviceResponse.OstCustPercentage =
              (tmpSkuRule.CustomFixedPercentage.HasValue ? (int)tmpSkuRule.CustomFixedPercentage : (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).CustomFeedRatio);
              serviceResponse.OstCustZeroOutAt =
              (tmpSkuRule.CustomZeroOutAt.HasValue ? (int)tmpSkuRule.CustomZeroOutAt : (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).ZeroOutAt);
              break;
            case 26: // Walmart DSV
              customerId = 26;
              serviceResponse.WlmrtSKUSpecific = (tmpSkuRule.CustomRuleForRatioZeroOut != null ? (bool)tmpSkuRule.CustomRuleForRatioZeroOut : false);
              serviceResponse.WlmrtDoNotFeed = (tmpSkuRule.DoNotFeedToHere.HasValue ? (bool)tmpSkuRule.DoNotFeedToHere : false);
              serviceResponse.WlmrtCustPercentage =
              (tmpSkuRule.CustomFixedPercentage.HasValue ? (int)tmpSkuRule.CustomFixedPercentage : (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).CustomFeedRatio);
              serviceResponse.WlmrtCustZeroOutAt =
              (tmpSkuRule.CustomZeroOutAt.HasValue ? (int)tmpSkuRule.CustomZeroOutAt : (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).ZeroOutAt);
              break;
            case 29: // Wayfair Drop Ship
              customerId = 29;
              serviceResponse.WyfrSKUSpecific = (tmpSkuRule.CustomRuleForRatioZeroOut != null ? (bool)tmpSkuRule.CustomRuleForRatioZeroOut : false);
              serviceResponse.WyfrDoNotFeed = (tmpSkuRule.DoNotFeedToHere.HasValue ? (bool)tmpSkuRule.DoNotFeedToHere : false);
              serviceResponse.WyfrCustPercentage =
              (tmpSkuRule.CustomFixedPercentage.HasValue ? (int)tmpSkuRule.CustomFixedPercentage : (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).CustomFeedRatio);
              serviceResponse.WyfrCustZeroOutAt =
              (tmpSkuRule.CustomZeroOutAt.HasValue ? (int)tmpSkuRule.CustomZeroOutAt : (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).ZeroOutAt);
              break;
            case 40: // Home Depot
              customerId = 40;
              serviceResponse.HomeDepotSKUSpecific = (tmpSkuRule.CustomRuleForRatioZeroOut != null ? (bool)tmpSkuRule.CustomRuleForRatioZeroOut : false);
              serviceResponse.HomeDepotDoNotFeed = (tmpSkuRule.DoNotFeedToHere.HasValue ? (bool)tmpSkuRule.DoNotFeedToHere : false);
              serviceResponse.HomeDepotCustPercentage =
              (tmpSkuRule.CustomFixedPercentage.HasValue ? (int)tmpSkuRule.CustomFixedPercentage : (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).CustomFeedRatio);
              serviceResponse.HomeDepotCustZeroOutAt =
              (tmpSkuRule.CustomZeroOutAt.HasValue ? (int)tmpSkuRule.CustomZeroOutAt : (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).ZeroOutAt);
              break;
            case 51: // Target
              customerId = 51;
              serviceResponse.TargetSKUSpecific = (tmpSkuRule.CustomRuleForRatioZeroOut != null ? (bool)tmpSkuRule.CustomRuleForRatioZeroOut : false);
              serviceResponse.TargetDoNotFeed = (tmpSkuRule.DoNotFeedToHere.HasValue ? (bool)tmpSkuRule.DoNotFeedToHere : false);
              serviceResponse.TargetCustPercentage =
              (tmpSkuRule.CustomFixedPercentage.HasValue ? (int)tmpSkuRule.CustomFixedPercentage : (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).CustomFeedRatio);
              serviceResponse.TargetCustZeroOutAt =
              (tmpSkuRule.CustomZeroOutAt.HasValue ? (int)tmpSkuRule.CustomZeroOutAt : (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).ZeroOutAt);
              break;
          }
        }
      }
      else
      {
        serviceResponse.DoNotFeedFromMainsl = false;
        serviceResponse.DoNotFeedFromBanc = false;
        serviceResponse.DoNotFeedFromBasc = false;
        serviceResponse.DoNotFeedFromSwcaft = false;
        customerId = 5; // Amazon Drop Ship
        serviceResponse.AmzSKUSpecific = false;
        serviceResponse.AmzDoNotFeed = false;
        serviceResponse.AmzCustPercentage = (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).CustomFeedRatio;
        serviceResponse.AmzCustZeroOutAt = (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).ZeroOutAt;
        customerId = 9; // BPM Website
        serviceResponse.BPMSKUSpecific = false;
        serviceResponse.BPMDoNotFeed = false;
        serviceResponse.BPMCustPercentage = (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).CustomFeedRatio;
        serviceResponse.BPMCustZeroOutAt = (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).ZeroOutAt;
        customerId = 12; // eBay
        serviceResponse.eBaySKUSpecific = false;
        serviceResponse.eBayDoNotFeed = false;
        serviceResponse.eBayCustPercentage = (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).CustomFeedRatio;
        serviceResponse.eBayCustZeroOutAt = (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).ZeroOutAt;
        customerId = 14; // Houzz Drop Ship 
        serviceResponse.HouzzSKUSpecific = false;
        serviceResponse.HouzzDoNotFeed = false;
        serviceResponse.HouzzCustPercentage = (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).CustomFeedRatio;
        serviceResponse.HouzzCustZeroOutAt = (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).ZeroOutAt;
        customerId = 18; // Mellow Website
        serviceResponse.MellowSKUSpecific = false;
        serviceResponse.MellowDoNotFeed = false;
        serviceResponse.MellowCustPercentage = (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).CustomFeedRatio;
        serviceResponse.MellowCustZeroOutAt = (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).ZeroOutAt;
        customerId = 21; // Overstock Drop Ship
        serviceResponse.OstSKUSpecific = false;
        serviceResponse.OstDoNotFeed = false;
        serviceResponse.OstCustPercentage = (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).CustomFeedRatio;
        serviceResponse.OstCustZeroOutAt = (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).ZeroOutAt;
        customerId = 26;  // Walmart DSV
        serviceResponse.WlmrtSKUSpecific = false;
        serviceResponse.WlmrtDoNotFeed = false;
        serviceResponse.WlmrtCustPercentage = (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).CustomFeedRatio;
        serviceResponse.WlmrtCustZeroOutAt = (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).ZeroOutAt;
        customerId = 29; // Wayfair Drop Ship
        serviceResponse.WyfrSKUSpecific = false;
        serviceResponse.WyfrDoNotFeed = false;
        serviceResponse.WyfrCustPercentage = (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).CustomFeedRatio;
        serviceResponse.WyfrCustZeroOutAt = (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).ZeroOutAt;
        customerId = 40;  // Home Depot
        serviceResponse.HomeDepotSKUSpecific = false;
        serviceResponse.HomeDepotDoNotFeed = false;
        serviceResponse.HomeDepotCustPercentage = (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).CustomFeedRatio;
        serviceResponse.HomeDepotCustZeroOutAt = (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).ZeroOutAt;
        customerId = 51; // Target
        serviceResponse.TargetSKUSpecific = false;
        serviceResponse.TargetDoNotFeed = false;
        serviceResponse.TargetCustPercentage = (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).CustomFeedRatio;
        serviceResponse.TargetCustZeroOutAt = (int)invFeedsRules.FindLast(ifr => ifr.CustomerId == customerId).ZeroOutAt;
      }
      serviceResponse.AmzCustPercentageTxt = (serviceResponse.AmzCustPercentage > 0 ? serviceResponse.AmzCustPercentage.ToString() + "%" : "None");
      serviceResponse.BPMCustPercentageTxt = (serviceResponse.BPMCustPercentage > 0 ? serviceResponse.BPMCustPercentage.ToString() + "%" : "None");
      serviceResponse.eBayCustPercentageTxt = (serviceResponse.eBayCustPercentage > 0 ? serviceResponse.eBayCustPercentage.ToString() + "%" : "None");
      serviceResponse.HouzzCustPercentageTxt = (serviceResponse.HouzzCustPercentage > 0 ? serviceResponse.HouzzCustPercentage.ToString() + "%" : "None");
      serviceResponse.MellowCustPercentageTxt = (serviceResponse.MellowCustPercentage > 0 ? serviceResponse.MellowCustPercentage.ToString() + "%" : "None");
      serviceResponse.OstCustPercentageTxt = (serviceResponse.OstCustPercentage > 0 ? serviceResponse.OstCustPercentage.ToString() + "%" : "None");
      serviceResponse.WlmrtCustPercentageTxt = (serviceResponse.WlmrtCustPercentage > 0 ? serviceResponse.WlmrtCustPercentage.ToString() + "%" : "None");
      serviceResponse.WyfrCustPercentageTxt = (serviceResponse.WyfrCustPercentage > 0 ? serviceResponse.WyfrCustPercentage.ToString() + "%" : "None");
      serviceResponse.HomeDepotCustPercentageTxt = (serviceResponse.HomeDepotCustPercentage > 0 ? serviceResponse.HomeDepotCustPercentage.ToString() + "%" : "None");
      serviceResponse.TargetCustPercentageTxt = (serviceResponse.TargetCustPercentage > 0 ? serviceResponse.TargetCustPercentage.ToString() + "%" : "None");

      // You gotta finish this one
      if (generalRule) { serviceResponse.remark = "This item followed general feeding rules."; serviceResponse.doesThisSKUhasSpecificRules = true; }
      else { serviceResponse.remark = "This item followed its specific feeding rules."; serviceResponse.doesThisSKUhasSpecificRules = false; }

      serviceResponse.GetMainslBancInvItemDTO = invItemDetail;

      // If all warehouses are not allowed to feed
      if (serviceResponse.DoNotFeedFromBanc && serviceResponse.DoNotFeedFromMainsl && serviceResponse.DoNotFeedFromBasc && serviceResponse.DoNotFeedFromSwcaft) serviceResponse.DoNotFeedFromAll = true;
      return serviceResponse;
    }

    // Get a inventory list for Mainsl & Banc only
    // Just need a date for checking the inventory on that date
    // By Brian Yi on 04/28/2021
    public async Task<List<GetMainslBancInvItemDTO>> GetMainslBancInv(int empId, DateTime today)
    {
      //today = await GetLatestDateTimeOfInvRealTimeTable(today);

      //List<GetMainslBancInvItemDTO> serviceResponse = new List<GetMainslBancInvItemDTO>();
      //(DateTime)x.CreatedTime).Date.CompareTo(DateTime.Now) == 0
      List<InvFeedsCurrentStatus> invFeedsCurrentStatuses = new List<InvFeedsCurrentStatus>();
      List<GetMainslBancInvItemDTO> serviceResponse = new List<GetMainslBancInvItemDTO>();
      RealTimeInvUpdate realTimeInvUpdate = await _kc.RealTimeInvUpdates
        .Where(i => ((DateTime)i.CreatedTime).Date.CompareTo(today) == 0)
        .OrderByDescending(i => i.CreatedTime)
        .Include(i => i.RealTimeInvUpdDetails)
        .FirstOrDefaultAsync();
      if (realTimeInvUpdate == null) return serviceResponse;

      InvFeedsReport invFeedsReport = await _kc.InvFeedsReports
        .Where(i => ((DateTime)i.CreatedDate).Date.CompareTo(today) == 0)
        .OrderByDescending(i => i.CreatedDate)
        .FirstOrDefaultAsync();
      invFeedsCurrentStatuses = await _kc.InvFeedsCurrentStatuses
          .Where(i => i.RealTimeInvUpdateId == realTimeInvUpdate.RealTimeInvUpdateId)
          .ToListAsync();

      if (invFeedsReport != null)
      {
        //serviceResponse = await LoadAllMainslBancInvFromDB(invFeedsReport);
        serviceResponse = await LoadAllWarehousesInvFromDB(invFeedsReport);
        if (invFeedsCurrentStatuses.Any() != true)
        { await SaveCurrentWarehousesStatus(realTimeInvUpdate.RealTimeInvUpdateId, serviceResponse); }
        return serviceResponse;
      }
      //serviceResponse = await GetUpdatedMainslBancInv(empId, today);
      serviceResponse = await GetUpdatedAllWarehousesInv(empId, today, 0);
      if (invFeedsCurrentStatuses.Any() != true)
      { await SaveCurrentWarehousesStatus(realTimeInvUpdate.RealTimeInvUpdateId, serviceResponse); }
      return serviceResponse;
    }

    // Get Target Inventory Feeds
    // By Brian Yi on 06/??/2022
    public async Task<List<TargetEDIFeedDTO>> GetTargetInvFeeds(DateTime today)
    {
      int targetMarketID = 341;
      List<TargetEDIFeedDTO> serviceResponse = new List<TargetEDIFeedDTO>();
      DateTime beforeDate = new DateTime(today.AddDays(-1).Year, today.AddDays(-1).Month, today.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(today.AddDays(1).Year, today.AddDays(1).Month, today.AddDays(1).Day, 0, 0, 0);
      InvFeedsReport invFeedsReport = await _kc.InvFeedsReports
        .Where(i => (DateTime)i.CreatedDate > beforeDate && (DateTime)i.CreatedDate < afterDate && i.HasSentToEdi == false)
        .OrderByDescending(i => i.CreatedDate)
        .FirstOrDefaultAsync();
      if (invFeedsReport == null) return serviceResponse;

      List<InvFeedsRepTableDetail> invFeedsRepTableDetails = await _kc.InvFeedsRepTableDetails
        .Where(i => i.InvFeedsReportId == invFeedsReport.InvFeedsReportId)
        .ToListAsync();

      List<MkIcr> targetIcrs = await _kc.MkIcrs
        .Where(icrs => icrs.MarketId == targetMarketID && icrs.IsInvFeed == true)
        .Include(icr => icr.ItemNo)
        .ToListAsync();

      InvFeedsRepTableDetail tmpRepTableDetail = new InvFeedsRepTableDetail();
      serviceResponse = targetIcrs.Select(ei =>
        new TargetEDIFeedDTO()
        {
          itemNoId = ei.ItemNoId,
          mainslQty = 0,
          //swcaftQty = 0,
          //bancQty = 0,
          //bascQty = 0,
          //prsmCastQty = 0,
          zinusTracyQty = 0,
          zinusChsQty = 0,
          sku = ei.ItemNo.ItemName,
          customerSku = ei.CustSku,
          customerUpc = ei.CustUpc
        }).ToList();


      foreach (TargetEDIFeedDTO tmpDto in serviceResponse)
      {
        tmpRepTableDetail = invFeedsRepTableDetails.Where(x => x.ItemNoId == tmpDto.itemNoId).FirstOrDefault();
        if (tmpRepTableDetail != null)
        {
          tmpDto.mainslQty = (int)tmpRepTableDetail.TargetQtyMainSl;
          //tmpDto.swcaftQty = (int)tmpRepTableDetail.TargetQtySwcaft;
          //tmpDto.bancQty = (int)tmpRepTableDetail.TargetQtyBanc;
          //tmpDto.bascQty = (int)tmpRepTableDetail.TargetQtyBasc;
          //tmpDto.prsmCastQty = (int)tmpRepTableDetail.TargetQtyPrismCast;
          tmpDto.zinusTracyQty = (int)tmpRepTableDetail.TargetQtyZinusTracy;
          tmpDto.zinusChsQty = (int)tmpRepTableDetail.TargetQtyZinusChs;
        }
      }


      return serviceResponse;
    }

    public async Task<List<TargetEDIPastFeedDTO>> GetTargetPastInvFeeds(DateTime historyDate)
    {
      int targetID = 51;//, bancId = 4, mainslId = 25, swcaftId = 54, bascId = 62;
      List<TargetEDIPastFeedDTO> serviceResponse = new List<TargetEDIPastFeedDTO>();
      List<MkInvFeedT> mkInvFeedTs = await _kc.MkInvFeedTs
        .Where(m => m.CustomerId == targetID)
        .Include(m => m.EmpSent)
        .Include(m => m.Location)
        .ToListAsync();
      TargetEDIPastFeedDTO tmpFeedDTO = new TargetEDIPastFeedDTO();
      try
      {
        serviceResponse = mkInvFeedTs.Select(t =>
      new TargetEDIPastFeedDTO()
      {
        Warehouse = (t.Location.LocName != null ? t.Location.LocName : ""),
        SentBy = (t.EmpSent != null ? t.EmpSent.LoginId : ""),
        TimeSent = (t.TimeSent != null ? ((DateTime)t.TimeSent).ToString("MM/dd/yyyy hh:mm") : "-"),
        FeedDate = (t.FeedDate != null ? ((DateTime)t.FeedDate).ToString("MM/dd/yyyy") : "-")
      }).ToList();
        /*
        foreach(MkInvFeedT t in mkInvFeedTs)
        {
          tmpFeedDTO = new TargetEDIPastFeedDTO
          {
            Warehouse = (t.Location.LocName != null ? t.Location.LocName : ""),
            SentBy = (t.EmpSent != null ? t.EmpSent.LoginId : ""),
            TimeSent = (t.TimeSent != null ? ((DateTime)t.TimeSent).ToString("MM/dd/yyyy hh:mm") : "-"),
            FeedDate = (t.FeedDate != null ? ((DateTime)t.FeedDate).ToString("MM/dd/yyyy") : "-")
          };
        }*/
        //foreach(TargetEDIPastFeedDTO tmpDto in )
      }
      catch (Exception ex)
      {
        Console.WriteLine(ex);
        //JsonResult jsonReturn = Json(ex);
        //return jsonReturn;
      }
      return serviceResponse;
    }


    // Get Updated BANC & Mainsl Inventory
    // By Brian Yi on 06/17/2021
    public async Task<List<GetMainslBancInvItemDTO>> GetUpdatedMainslBancInv(int empId, DateTime today)
    {
      List<GetMainslBancInvItemDTO> serviceResponse = new List<GetMainslBancInvItemDTO>();
      //DateTime today = DateTime.Now;

      DateTime beforeDate = new DateTime(today.AddDays(-1).Year, today.AddDays(-1).Month, today.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(today.AddDays(1).Year, today.AddDays(1).Month, today.AddDays(1).Day, 0, 0, 0);

      RealTimeInvUpdate realTimeInvUpdate = await _kc.RealTimeInvUpdates
       .Where(ifr => (DateTime)ifr.CreatedTime > beforeDate && (DateTime)ifr.CreatedTime < afterDate)
       .OrderByDescending(i => i.CreatedTime)
       .Include(i => i.RealTimeInvUpdDetails)
       .FirstOrDefaultAsync();

      if (realTimeInvUpdate == null) return null;

      //List<RealTimeInvUpdDetail> realTimeInvUpdDetailList = realTimeInvUpdate.RealTimeInvUpdDetails
      //.Where(irt => irt.LocationId == 4 || irt.LocationId == 25)
      //.ToList();
      List<RealTimeInvUpdDetail> realTimeInvUpdDetailList = await _kc.RealTimeInvUpdDetails
        .Where(i => i.RealTimeInvUpdateId == realTimeInvUpdate.RealTimeInvUpdateId)
        .Where(i => i.LocationId == 4 || i.LocationId == 25)
        .Include(i => i.ItemNo).Include(i => i.Location)
        .ToListAsync();

      // ItemNoId in NetSuite
      List<int> itemNoIdFromNetSuite = realTimeInvUpdDetailList
        .Select(i => i.ItemNoId)
        .Distinct()
        .ToList();

      // Getting remarks for items
      List<InvFeedsRemark> invFeedsRemarks = await _kc.InvFeedsRemarks
        .Where(i => i.IsActivated == true)
        .Include(i => i.InvFeedsRmrkCtgry)
        .ToListAsync();

      // BOM
      List<Bom> qryBOMset = await _kc.Boms
        .Include(qbs => qbs.ParentItem)
        .Where(qbs => qbs.ParentItem.ItemStatusId <= itemStatus)
        .OrderBy(qbs => qbs.NsIntId)
        .Distinct()
        .ToListAsync();

      List<int?> bomNSID = await _kc.Boms
        .Select(b => b.NsIntId)
        .Distinct()
        .ToListAsync();

      var bulkConfig = new BulkConfig()
      {
        SetOutputIdentity = true,
        PreserveInsertOrder = true
      };

      InvFeedsReport newReport = await _kc.InvFeedsReports
        .Where(i => ((DateTime)i.CreatedDate).Date.CompareTo(today) == 0)
        .Include(i => i.InvFeedsItems)
        .FirstOrDefaultAsync();

      if (newReport == null)
      {
        newReport = new InvFeedsReport()
        {
          CreatedDate = DateTime.Now,
          IsApproved = false,
          CreatedBy = empId,
          HasSentToEdi = false,
          RealTimeInvUpdateId = realTimeInvUpdate.RealTimeInvUpdateId
        };
        await _kc.InvFeedsReports.AddAsync(newReport);
        await _kc.SaveChangesAsync();
      }

      List<InvFeedsItem> invFeedsItemsForLook = newReport.InvFeedsItems.ToList();

      serviceResponse = itemNoIdFromNetSuite.Select(idi =>
      new GetMainslBancInvItemDTO()
      {
        ItemNoId = idi,
        beforeBOMQtyAvailMainsl = 0,
        beforeBOMQtyAvailBanc = 0,
        QtyAvailBanc = 0,
        QtyOnHandBanc = 0,
        QtyAvailMainsl = 0,
        QtyOnHandMainsl = 0,
        Remark = "",
        isSet = false,
        isChildSet = false
      }).ToList();

      List<InvFeedsItem> invFeedsItemList = new List<InvFeedsItem>();
      List<InvFeedsItemLocQty> invFeedsItemLocQtyList = new List<InvFeedsItemLocQty>();

      int index = 0;
      InvFeedsItem invFeedsItem = new InvFeedsItem();
      InvFeedsItemLocQty invFeedsItemLocQty = new InvFeedsItemLocQty();
      bool removeThis = false;
      //DateTime dateTimeForSet = new DateTime();
      while (index < serviceResponse.Count)
      {
        removeThis = true;
        // Get MainSL & BANC
        List<RealTimeInvUpdDetail> tmpModelList = realTimeInvUpdDetailList.FindAll(x => x.ItemNoId == serviceResponse[index].ItemNoId);
        foreach (RealTimeInvUpdDetail tmpModel in tmpModelList)
        {
          if ((tmpModel != null) && (tmpModel.ItemNo.ItemName != ""))
          {
            // Need to fix!!!!
            invFeedsItem = invFeedsItemList
              .Where(i => i.ItemNoId == tmpModel.ItemNoId)
              .FirstOrDefault();

            //InvFeedsItem invFeedsItem = await _kc.InvFeedsItems
            // .Where(x => ((DateTime)x.CreatedTime).Date.CompareTo(DateTime.Now) == 0 && x.ItemNoId == tmpModel.ItemNoId)
            // .FirstOrDefaultAsync();
            if (invFeedsItem == null)
            {
              //dateTimeForSet = tmpModel.TimeRecord;
              invFeedsItem = new InvFeedsItem
              {
                InvFeedsReportId = newReport.InvFeedsReportId,
                ItemNoId = tmpModel.ItemNoId,
                IsSet = false
              };
              invFeedsItemList.Add(invFeedsItem);
              //await _kc.InvFeedsItems.AddAsync(invFeedsItem);
              //await _kc.SaveChangesAsync();
            }
            invFeedsItemLocQty = new InvFeedsItemLocQty
            {
              InvFeedsItem = invFeedsItem,
              InvFeedsItemId = invFeedsItem.InvFeedsItemId, // Give it a relationship.
              ItemLocId = tmpModel.LocationId,
              QtyAvail = tmpModel.QtyAvail,
              QtyOnHand = tmpModel.QtyOnHand
            };
            invFeedsItemLocQtyList.Add(invFeedsItemLocQty);
            serviceResponse[index].ItemName = tmpModel.ItemNo.ItemName;
            if (tmpModel.LocationId == 4) //BANC
            {
              serviceResponse[index].QtyAvailBanc = (int)tmpModel.QtyAvail;
              serviceResponse[index].QtyOnHandBanc = (int)tmpModel.QtyOnHand;
              serviceResponse[index].InvBANCItemId = (int)tmpModel.RealTimeInvUpdDetailId;
            }
            else if (tmpModel.LocationId == 25) //Mainsl
            {
              serviceResponse[index].QtyAvailMainsl = (int)tmpModel.QtyAvail;
              serviceResponse[index].QtyOnHandMainsl = (int)tmpModel.QtyOnHand;
              serviceResponse[index].InvMainslItemId = (int)tmpModel.RealTimeInvUpdDetailId;
            }
            List<InvFeedsRemark> tmpRemarks = invFeedsRemarks
              .Where(i => i.ItemNoId == tmpModel.ItemNoId)
              .ToList();
            if (tmpRemarks != null)
            {
              foreach (InvFeedsRemark tmpRemark in tmpRemarks)
              {
                if (serviceResponse[index].Remark == "") serviceResponse[index].Remark = tmpRemark.InvFeedsRmrkCtgry.CategoryName;
                else serviceResponse[index].Remark = serviceResponse[index].Remark + ", " + tmpRemark.InvFeedsRmrkCtgry.CategoryName;
              }
            }
            else
            {
              serviceResponse[index].Remark = "";
            }
            serviceResponse[index].InventoryItemId = invFeedsItem.InvFeedsItemId;
          }
          else
          {
            if (removeThis == true)
            {
              serviceResponse.RemoveAt(index);
              removeThis = false;
            }
          }
        }
        index++;
      }
      _kc.BulkInsert(invFeedsItemList, bulkConfig);


      // Making BOM
      index = 0;
      int qtyLimit = 10;
      int invMainsl = 25, invBanc = 4;
      GetMainslBancInvItemDTO newItem;
      //InvFeedsItem invFeedsItem = new InvFeedsItem();
      Bom tmpBom = new Bom();
      //InvFeedsItemLocQty invFeedsItemLocQty = new InvFeedsItemLocQty();
      List<Bom> childList = new List<Bom>();
      InvFeedsItem tmpInvFeedsItem = new InvFeedsItem();
      List<InvFeedsItemLocQty> tmpLocQtyList = new List<InvFeedsItemLocQty>();
      GetMainslBancInvItemDTO tmpInvDTO = new GetMainslBancInvItemDTO();

      foreach (int tmpBomId in bomNSID)
      {
        tmpBom = qryBOMset.FindLast(qbs => qbs.NsIntId == tmpBomId);
        if (tmpBom != null)
        {
          //invFeedsItem = new InvFeedsItem();
          newItem = await GetBOM(tmpBom, qtyLimit, serviceResponse, invFeedsItemList, invFeedsRemarks);
          //newItem = null;
          if (newItem != null)
          {
            // Re-calculate stock
            childList = qryBOMset.FindAll(q => q.NsIntId == tmpBom.NsIntId);
            foreach (Bom tmpBomModel in childList)
            {
              // Need to Fix here
              tmpInvDTO = serviceResponse.FindLast(s => s.ItemNoId == tmpBomModel.ChildItemId);
              tmpInvFeedsItem = invFeedsItemList
                .FindLast(i => i.ItemNoId == tmpBomModel.ChildItemId);
              tmpLocQtyList = invFeedsItemLocQtyList.FindAll(i => i.InvFeedsItem.InvFeedsItemId == tmpInvFeedsItem.InvFeedsItemId);
              foreach (InvFeedsItemLocQty tmpLocQty in tmpLocQtyList)
              {
                if (tmpLocQty.ItemLocId == invBanc)
                {
                  if (tmpInvDTO.QtyAvailBanc != tmpLocQty.QtyAvail) tmpLocQty.QtyAvail = tmpInvDTO.QtyAvailBanc;
                }
                else if (tmpLocQty.ItemLocId == invMainsl)
                {
                  if (tmpInvDTO.QtyAvailMainsl != tmpLocQty.QtyAvail) tmpLocQty.QtyAvail = tmpInvDTO.QtyAvailMainsl;
                }

              }
            }


            // Adding to inventory item list
            newItem.CreatedTime = DateTime.Now;
            invFeedsItem = new InvFeedsItem
            {
              InvFeedsReportId = newReport.InvFeedsReportId,
              ItemNoId = newItem.ItemNoId,
              IsSet = true
            };

            await _kc.InvFeedsItems.AddAsync(invFeedsItem);
            await _kc.SaveChangesAsync();
            invFeedsItemList.Add(invFeedsItem);
            newItem.InventoryItemId = invFeedsItem.InvFeedsItemId;
            serviceResponse.Add(newItem);
            if (newItem.QtyAvailBanc != 0)
            {
              invFeedsItemLocQty = new InvFeedsItemLocQty
              {
                InvFeedsItem = invFeedsItem,
                InvFeedsItemId = invFeedsItem.InvFeedsItemId, // Give it a relationship.
                ItemLocId = invBanc,
                QtyAvail = newItem.QtyAvailBanc
              };
              invFeedsItemLocQtyList.Add(invFeedsItemLocQty);
            }
            if (newItem.QtyAvailMainsl != 0)
            {
              invFeedsItemLocQty = new InvFeedsItemLocQty
              {
                InvFeedsItem = invFeedsItem,
                InvFeedsItemId = invFeedsItem.InvFeedsItemId, // Give it a relationship.
                ItemLocId = invMainsl,
                QtyAvail = newItem.QtyAvailMainsl
              };
              invFeedsItemLocQtyList.Add(invFeedsItemLocQty);
            }
          }
        }
      }
      // End of BOM

      GetMainslBancInvItemDTO tmpResultDTO = new GetMainslBancInvItemDTO();
      foreach (InvFeedsItemLocQty tmpDTO in invFeedsItemLocQtyList)
      {
        tmpDTO.InvFeedsItemId = tmpDTO.InvFeedsItem.InvFeedsItemId;
        /*
        tmpResultDTO = serviceResponse.FindLast(s => s.ItemNoId == tmpDTO.InvFeedsItem.ItemNoId);
        if(tmpResultDTO.isChildSet == true && tmpResultDTO.isSet != true)
        {
          if(tmpDTO.ItemLocId == invBanc) 
          {
            tmpDTO.QtyAvail = tmpResultDTO.QtyAvailBanc;
          }
          else if(tmpDTO.ItemLocId == invMainsl) 
          {
            tmpDTO.QtyAvail = tmpResultDTO.QtyAvailMainsl;
          }
        }*/
      }
      InvFeedsItem tmpItem = new InvFeedsItem();
      foreach (GetMainslBancInvItemDTO tmpDTO in serviceResponse)
      {
        tmpItem = invFeedsItemList.FindLast(i => i.ItemNoId == tmpDTO.ItemNoId);
        if (tmpItem != null)
        {
          if ((tmpDTO.InventoryItemId != tmpItem.InvFeedsItemId) && (tmpDTO.InventoryItemId == 0))
            tmpDTO.InventoryItemId = tmpItem.InvFeedsItemId;
        }
        else tmpDTO.InventoryItemId = -1;

      }
      // _kc.BulkInsert(invFeedsItemList, bulkConfig);
      _kc.BulkInsert(invFeedsItemLocQtyList);



      return serviceResponse;
    }

    // Get Updated SW-CAFT, BANC & Mainsl Inventory
    // By Brian Yi on 06/17/2021
    // Modified on 04/28/2022
    // Modified on 02/24/2023 for adding Left Over Indicators
    // Modified on 3/5/2024 for adding two ZINUS warehouses (Tracy & CHS)
    // Modified on 3/28/2024 for removing Smart Warehousng (SWCAFT)
    // Modified on 4/22/2024 for removing Prism Warehouses
    public async Task<List<GetMainslBancInvItemDTO>> GetUpdatedAllWarehousesInv(int empId, DateTime today, int sel)
    {
      List<GetMainslBancInvItemDTO> serviceResponse = new List<GetMainslBancInvItemDTO>();
      InventoryConfig inventoryConfig = await _kc.InventoryConfigs
        .Where(i => i.InventoryConfigId == 1)
        .FirstOrDefaultAsync();
      //DateTime today = DateTime.Now;

      DateTime beforeDate = new DateTime(today.AddDays(-1).Year, today.AddDays(-1).Month, today.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(today.AddDays(1).Year, today.AddDays(1).Month, today.AddDays(1).Day, 0, 0, 0);

      RealTimeInvUpdate realTimeInvUpdate = await _kc.RealTimeInvUpdates
       .Where(ifr => (DateTime)ifr.CreatedTime > beforeDate && (DateTime)ifr.CreatedTime < afterDate)
       .OrderByDescending(i => i.CreatedTime)
       .Include(i => i.RealTimeInvUpdDetails)
       .FirstOrDefaultAsync();

      if (realTimeInvUpdate == null) return null;

      const int invMainsl = 25, invZinusTracy = 57, invZinusChs = 108; //invBanc = 4, invBasc = 62, invSwcaft = 54,  invPrismCast = 51, invPrismCalt = 67,
      int tmpStagePOBanc = 0, tmpStagePOBasc = 0, tmpStagePOMainsl = 0, tmpStagePOZinusTracy = 0, tmpStagePOZinusChs = 0; //  tmpStagePOSwcaft = 0, tmpStagePOPrismCast = 0,tmpStagePOPrismCalt = 0, 
      int tmpStagePOBanc60 = 0, tmpStagePOBasc60 = 0, tmpStagePOMainsl60 = 0, tmpStagePOZinusTracy60 = 0, tmpStagePOZinusChs60 = 0; // tmpStagePOSwcaft60 = 0, tmpStagePOPrismCast60 = 0, tmpStagePOPrismCalt60 = 0,
      int tmpStagePOBanc90 = 0, tmpStagePOBasc90 = 0, tmpStagePOMainsl90 = 0, tmpStagePOZinusTracy90 = 0, tmpStagePOZinusChs90 = 0; // tmpStagePOSwcaft90 = 0, tmpStagePOPrismCast90 = 0, tmpStagePOPrismCalt90 = 0,
      //List<RealTimeInvUpdDetail> realTimeInvUpdDetailList = realTimeInvUpdate.RealTimeInvUpdDetails
      //.Where(irt => irt.LocationId == 4 || irt.LocationId == 25)
      //.ToList();
      List<RealTimeInvUpdDetail> realTimeInvUpdDetailList = await _kc.RealTimeInvUpdDetails
        .Where(i => i.RealTimeInvUpdateId == realTimeInvUpdate.RealTimeInvUpdateId)
        .Where(i => i.LocationId == invMainsl || i.LocationId == invZinusTracy || i.LocationId == invZinusChs) //i.LocationId == invBanc || i.LocationId == invBasc || || i.LocationId == invSwcaft || i.LocationId == invPrismCast || i.LocationId == invPrismCalt 
        .Include(i => i.ItemNo).Include(i => i.Location)
        .ToListAsync();

      // ItemNoId in NetSuite
      List<int> itemNoIdFromNetSuite = realTimeInvUpdDetailList
        .Select(i => i.ItemNoId)
        .Distinct()
        .ToList();

      List<int> cooMasters = _kc.ItemTrkCoOs
        .Select(i => i.ItemNoId)
        .Distinct()
        .ToList();

      List<int> itemNoIdCombinedList = itemNoIdFromNetSuite.Union(cooMasters).ToList();
      //List<NetsuiteIdInfo> itemNoIdFromNS = 

      // Getting remarks for items
      List<InvFeedsRemark> invFeedsRemarks = await _kc.InvFeedsRemarks
        .Where(i => i.IsActivated == true)
        .Include(i => i.InvFeedsRmrkCtgry)
        .ToListAsync();

      // BOM
      List<Bom> qryBOMset = await _kc.Boms
        .Include(qbs => qbs.ParentItem)
        .Where(qbs => qbs.ParentItem.ItemStatusId <= itemStatus && qbs.ParentItem.ItemTypeId <= itemType && qbs.ParentItem.IsFeedable == true)
        .OrderBy(qbs => qbs.NsIntId)
        .Distinct()
        .ToListAsync();

      List<int?> bomNSID = await _kc.Boms
        .Select(b => b.NsIntId)
        .Distinct()
        .ToListAsync();

      List<BpmItem> bpmItems = await _kc.BpmItems
        .Where(b => b.ItemStatusId <= itemStatus && b.ItemTypeId <= itemType && b.IsFeedable == true)
        .ToListAsync();

      var bulkConfig = new BulkConfig()
      {
        SetOutputIdentity = true,
        PreserveInsertOrder = true
      };

      InvFeedsReport newReport = await _kc.InvFeedsReports
        .Where(i => ((DateTime)i.CreatedDate).Date.CompareTo(today) == 0)
        .Include(i => i.InvFeedsItems)
        .FirstOrDefaultAsync();

      if (newReport == null)
      {
        newReport = new InvFeedsReport()
        {
          CreatedDate = DateTime.Now,
          IsApproved = false,
          CreatedBy = empId,
          RealTimeInvUpdateId = realTimeInvUpdate.RealTimeInvUpdateId
        };
        await _kc.InvFeedsReports.AddAsync(newReport);
        await _kc.SaveChangesAsync();
      }

      List<InvFeedsItem> invFeedsItemsForLook = newReport.InvFeedsItems.ToList();

      serviceResponse = itemNoIdCombinedList.Select(idi =>
      new GetMainslBancInvItemDTO()
      {
        ItemNoId = idi,
        beforeBOMQtyAvailMainsl = 0,
        beforeBOMQtyAvailBanc = 0,
        QtyAvailBanc = 0,
        QtyOnHandBanc = 0,
        QtyAvailMainsl = 0,
        QtyOnHandMainsl = 0,
        QtyAvailSwcaft = 0,
        QtyOnHandSwcaft = 0,
        QtyAvailBasc = 0,
        QtyOnHandBasc = 0,
        QtyOnHandPrismCast = 0,
        QtyAvailPrismCast = 0,
        QtyOnHandPrismCalt = 0,
        QtyAvailPrismCalt = 0,
        QtyOnHandZinusTracy = 0,
        QtyAvailZinusTracy = 0,
        QtyOnHandZinusChs = 0,
        QtyAvailZinusChs = 0,
        StagePOOrigBanc = 0,
        StagePOOrigBasc = 0,
        StagePOOrigMainsl = 0,
        StagePOOrigSwcaft = 0,
        StagePOOrigPrismCast = 0,
        StagePOOrigPrismCalt = 0,
        StagePOOrigZinusTracy = 0,
        StagePOOrigZinusChs = 0,
        StagePOOrigBanc60 = 0,
        StagePOOrigBasc60 = 0,
        StagePOOrigMainsl60 = 0,
        StagePOOrigSwcaft60 = 0,
        StagePOOrigPrismCast60 = 0,
        StagePOOrigPrismCalt60 = 0,
        StagePOOrigZinusTracy60 = 0,
        StagePOOrigZinusChs60 = 0,
        StagePOOrigBanc90 = 0,
        StagePOOrigBasc90 = 0,
        StagePOOrigMainsl90 = 0,
        StagePOOrigSwcaft90 = 0,
        StagePOOrigPrismCast90 = 0,
        StagePOOrigPrismCalt90 = 0,
        StagePOOrigZinusTracy90 = 0,
        StagePOOrigZinusChs90 = 0,
        StagePOModBanc = 0,
        StagePOModBasc = 0,
        StagePOModMainsl = 0,
        StagePOModSwcaft = 0,
        StagePOModPrismCast = 0,
        StagePOModPrismCalt = 0,
        StagePOModZinusTracy = 0,
        StagePOModZinusChs = 0,
        Remark = "",
        isSet = false,
        isChildSet = false,
        isCooMaster = false
      }).ToList();

      List<InvFeedsItem> invFeedsItemList = new List<InvFeedsItem>();
      List<InvFeedsItemLocQty> invFeedsItemLocQtyList = new List<InvFeedsItemLocQty>();

      int index = 0, tmpStagePOQty = 0, tmpStagePOQty90 = 0;
      bool isStagePOQtyMainsl = false, isStagePOQtyZinusTracy = false, isStagePOQtyZinusChs = false; //isStagePOQtySwcaft = false, isStagePOQtyPrismCast = false, isStagePOQtyPrismCalt = false, isStagePOQtyBanc = false, isStagePOQtyBasc = false, 
      InvFeedsItem invFeedsItem = new InvFeedsItem();
      InvFeedsItemLocQty invFeedsItemLocQty = new InvFeedsItemLocQty();
      bool removeThis = false;
      BpmItem tmpBpmItem = new BpmItem();
      //DateTime dateTimeForSet = new DateTime();
      // Testing!!!!
      //sel = 0;

      while (index < serviceResponse.Count)
      {
        removeThis = true;
        // Get MainSL & BANC
        List<RealTimeInvUpdDetail> tmpModelList = realTimeInvUpdDetailList.FindAll(x => x.ItemNoId == serviceResponse[index].ItemNoId);
        List<Task<int>> calSumofBackOrders = new List<Task<int>>();
        tmpBpmItem = bpmItems.Where(b => b.ItemNoId == serviceResponse[index].ItemNoId).FirstOrDefault();
        if (tmpBpmItem == null) // Need to fix here!!!!!
        { goto SkipNextSku; }
        if (sel == 1)
        {
          /*
          calSumofBackOrders.Add(calculateStageBackOrderSUM(invBanc, 60, serviceResponse[index].ItemNoId));
          calSumofBackOrders.Add(calculateStageBackOrderSUM(invBasc, 60, serviceResponse[index].ItemNoId));
          calSumofBackOrders.Add(calculateStageBackOrderSUM(invMainsl, 60, serviceResponse[index].ItemNoId));
          calSumofBackOrders.Add(calculateStageBackOrderSUM(invSwcaft, 60, serviceResponse[index].ItemNoId));
          calSumofBackOrders.Add(calculateStageBackOrderSUM(invPrismCast, 60, serviceResponse[index].ItemNoId));
          calSumofBackOrders.Add(calculateStageBackOrderSUM(invPrismCalt, 60, serviceResponse[index].ItemNoId));

          calSumofBackOrders.Add(calculateStageBackOrderSUM(invBanc, 90, serviceResponse[index].ItemNoId));
          calSumofBackOrders.Add(calculateStageBackOrderSUM(invBasc, 90, serviceResponse[index].ItemNoId));
          calSumofBackOrders.Add(calculateStageBackOrderSUM(invMainsl, 90, serviceResponse[index].ItemNoId));
          calSumofBackOrders.Add(calculateStageBackOrderSUM(invSwcaft, 90, serviceResponse[index].ItemNoId));
          calSumofBackOrders.Add(calculateStageBackOrderSUM(invPrismCast, 90, serviceResponse[index].ItemNoId));
          calSumofBackOrders.Add(calculateStageBackOrderSUM(invPrismCalt, 90, serviceResponse[index].ItemNoId));

          await Task.WhenAll(calSumofBackOrders);
          tmpStagePOBanc = await calSumofBackOrders[0];
          tmpStagePOBasc = await calSumofBackOrders[1];
          tmpStagePOMainsl = await calSumofBackOrders[2];
          tmpStagePOSwcaft = await calSumofBackOrders[3];
          tmpStagePOPrismCast = await calSumofBackOrders[4];
          tmpStagePOPrismCalt = await calSumofBackOrders[5];

          tmpStagePOBanc60 = await calSumofBackOrders[0];
          tmpStagePOBasc60 = await calSumofBackOrders[1];
          tmpStagePOMainsl60 = await calSumofBackOrders[2];
          tmpStagePOSwcaft60 = await calSumofBackOrders[3];
          tmpStagePOPrismCast60 = await calSumofBackOrders[4];
          tmpStagePOPrismCalt60 = await calSumofBackOrders[5];

          tmpStagePOBanc90 = await calSumofBackOrders[6];
          tmpStagePOBasc90 = await calSumofBackOrders[7];
          tmpStagePOMainsl90 = await calSumofBackOrders[8];
          tmpStagePOSwcaft90 = await calSumofBackOrders[9];
          tmpStagePOPrismCast90 = await calSumofBackOrders[10];
          tmpStagePOPrismCalt90 = await calSumofBackOrders[11];
          */



          List<int> locIds = new List<int>();// { 4, 25, 51, 54, 62, 67 };
          //locIds.Add(invBanc);
          //locIds.Add(invBasc);
          locIds.Add(invMainsl);
          //locIds.Add(invSwcaft);
          //locIds.Add(invPrismCast);
          //locIds.Add(invPrismCalt);
          locIds.Add(invZinusTracy);
          locIds.Add(invZinusChs);
          List<BackOrderedQty> backOrderedQty60List = await revCalculateStageBackOrderSUM(locIds, 60, serviceResponse[index].ItemNoId);

          //tmpStagePOBanc = (int)(backOrderedQty60List.Where(a => a.LocId == invBanc).Count() > 0 ?
          //backOrderedQty60List.Where(a => a.LocId == invBanc).FirstOrDefault().TotalQtyOrdered : 0);//await calSumofBackOrders[0];
          //tmpStagePOBasc = (int)(backOrderedQty60List.Where(a => a.LocId == invBasc).Count() > 0 ?
          //backOrderedQty60List.Where(a => a.LocId == invBasc).FirstOrDefault().TotalQtyOrdered : 0);
          tmpStagePOMainsl = (int)(backOrderedQty60List.Where(a => a.LocId == invMainsl).Count() > 0 ?
            backOrderedQty60List.Where(a => a.LocId == invMainsl).FirstOrDefault().TotalQtyOrdered : 0);
          // tmpStagePOSwcaft = (int)(backOrderedQty60List.Where(a => a.LocId == invSwcaft).Count() > 0 ?
          //   backOrderedQty60List.Where(a => a.LocId == invSwcaft).FirstOrDefault().TotalQtyOrdered : 0);
          //  tmpStagePOPrismCast = (int)(backOrderedQty60List.Where(a => a.LocId == invPrismCast).Count() > 0 ?
          //  backOrderedQty60List.Where(a => a.LocId == invPrismCast).FirstOrDefault().TotalQtyOrdered : 0);
          //tmpStagePOPrismCalt = (int)(backOrderedQty60List.Where(a => a.LocId == invPrismCalt).Count() > 0 ?
          // backOrderedQty60List.Where(a => a.LocId == invPrismCalt).FirstOrDefault().TotalQtyOrdered : 0);
          tmpStagePOZinusTracy = (int)(backOrderedQty60List.Where(a => a.LocId == invZinusTracy).Count() > 0 ?
            backOrderedQty60List.Where(a => a.LocId == invZinusTracy).FirstOrDefault().TotalQtyOrdered : 0);
          tmpStagePOZinusChs = (int)(backOrderedQty60List.Where(a => a.LocId == invZinusChs).Count() > 0 ?
            backOrderedQty60List.Where(a => a.LocId == invZinusChs).FirstOrDefault().TotalQtyOrdered : 0);

          tmpStagePOBanc60 = tmpStagePOBanc;
          tmpStagePOBasc60 = tmpStagePOBasc;
          tmpStagePOMainsl60 = tmpStagePOMainsl;
          //tmpStagePOSwcaft60 = tmpStagePOSwcaft;
          //tmpStagePOPrismCast60 = tmpStagePOPrismCast;
          //tmpStagePOPrismCalt60 = tmpStagePOPrismCalt;
          tmpStagePOZinusTracy60 = tmpStagePOZinusTracy;
          tmpStagePOZinusChs60 = tmpStagePOZinusChs;


          List<BackOrderedQty> backOrderedQty90List = await revCalculateStageBackOrderSUM(locIds, 90, serviceResponse[index].ItemNoId);

          //tmpStagePOBanc90 = (int)(backOrderedQty90List.Where(a => a.LocId == invBanc).Count() > 0 ?
          //backOrderedQty90List.Where(a => a.LocId == invBanc).FirstOrDefault().TotalQtyOrdered : 0);//await calSumofBackOrders[0];
          //tmpStagePOBasc90 = (int)(backOrderedQty90List.Where(a => a.LocId == invBasc).Count() > 0 ?
          //backOrderedQty90List.Where(a => a.LocId == invBasc).FirstOrDefault().TotalQtyOrdered : 0);
          tmpStagePOMainsl90 = (int)(backOrderedQty90List.Where(a => a.LocId == invMainsl).Count() > 0 ?
            backOrderedQty90List.Where(a => a.LocId == invMainsl).FirstOrDefault().TotalQtyOrdered : 0);
          //tmpStagePOSwcaft90 = (int)(backOrderedQty90List.Where(a => a.LocId == invSwcaft).Count() > 0 ?
          //  backOrderedQty90List.Where(a => a.LocId == invSwcaft).FirstOrDefault().TotalQtyOrdered : 0);
          //tmpStagePOPrismCast90 = (int)(backOrderedQty90List.Where(a => a.LocId == invPrismCast).Count() > 0 ?
          //  backOrderedQty90List.Where(a => a.LocId == invPrismCast).FirstOrDefault().TotalQtyOrdered : 0);
          //tmpStagePOPrismCalt90 = (int)(backOrderedQty90List.Where(a => a.LocId == invPrismCalt).Count() > 0 ?
          //  backOrderedQty90List.Where(a => a.LocId == invPrismCalt).FirstOrDefault().TotalQtyOrdered : 0);
          tmpStagePOZinusTracy90 = (int)(backOrderedQty90List.Where(a => a.LocId == invZinusTracy).Count() > 0 ?
            backOrderedQty90List.Where(a => a.LocId == invZinusTracy).FirstOrDefault().TotalQtyOrdered : 0);
          tmpStagePOZinusChs90 = (int)(backOrderedQty90List.Where(a => a.LocId == invZinusChs).Count() > 0 ?
            backOrderedQty90List.Where(a => a.LocId == invZinusChs).FirstOrDefault().TotalQtyOrdered : 0);

        }
        else if (sel == 2)
        {
          /*
          calSumofBackOrders.Add(taskCalculateStageBackOrderSUM(invBanc, 60, serviceResponse[index].ItemNoId, tmpStagePOBanc));
          calSumofBackOrders.Add(taskCalculateStageBackOrderSUM(invBasc, 60, serviceResponse[index].ItemNoId, tmpStagePOBasc));
          calSumofBackOrders.Add(taskCalculateStageBackOrderSUM(invMainsl, 60, serviceResponse[index].ItemNoId, tmpStagePOMainsl));
          calSumofBackOrders.Add(taskCalculateStageBackOrderSUM(invSwcaft, 60, serviceResponse[index].ItemNoId, tmpStagePOSwcaft));
          calSumofBackOrders.Add(taskCalculateStageBackOrderSUM(invPrismCast, 60, serviceResponse[index].ItemNoId, tmpStagePOPrismCast));
          calSumofBackOrders.Add(taskCalculateStageBackOrderSUM(invPrismCalt, 60, serviceResponse[index].ItemNoId, tmpStagePOPrismCalt));

          await Task.WhenAll(calSumofBackOrders);
          tmpStagePOBanc = await calSumofBackOrders[0];
          tmpStagePOBasc = await calSumofBackOrders[1];
          tmpStagePOMainsl = await calSumofBackOrders[2];
          tmpStagePOSwcaft = await calSumofBackOrders[3];
          tmpStagePOPrismCast = await calSumofBackOrders[4];
          tmpStagePOPrismCalt = await calSumofBackOrders[5];

          tmpStagePOBanc60 = await calSumofBackOrders[0];
          tmpStagePOBasc60 = await calSumofBackOrders[1];
          tmpStagePOMainsl60 = await calSumofBackOrders[2];
          tmpStagePOSwcaft60 = await calSumofBackOrders[3];
          tmpStagePOPrismCast60 = await calSumofBackOrders[4];
          tmpStagePOPrismCalt60 = await calSumofBackOrders[5];
          */

          List<int> locIds = new List<int>();// { 4, 25, 51, 54, 62, 67 };
          //locIds.Add(invBanc);
          //locIds.Add(invBasc);
          locIds.Add(invMainsl);
          //locIds.Add(invSwcaft);
          //locIds.Add(invPrismCast);
          //locIds.Add(invPrismCalt);
          locIds.Add(invZinusTracy);
          locIds.Add(invZinusChs);
          List<BackOrderedQty> backOrderedQtyList = await revCalculateStageBackOrderSUM(locIds, 60, serviceResponse[index].ItemNoId);

          //tmpStagePOBanc = (int)(backOrderedQtyList.Where(a => a.LocId == invBanc).Count() > 0 ?
          //backOrderedQtyList.Where(a => a.LocId == invBanc).FirstOrDefault().TotalQtyOrdered : 0);//await calSumofBackOrders[0];
          //tmpStagePOBasc = (int)(backOrderedQtyList.Where(a => a.LocId == invBasc).Count() > 0 ?
          //backOrderedQtyList.Where(a => a.LocId == invBasc).FirstOrDefault().TotalQtyOrdered : 0);
          tmpStagePOMainsl = (int)(backOrderedQtyList.Where(a => a.LocId == invMainsl).Count() > 0 ?
            backOrderedQtyList.Where(a => a.LocId == invMainsl).FirstOrDefault().TotalQtyOrdered : 0);
          //tmpStagePOSwcaft = (int)(backOrderedQtyList.Where(a => a.LocId == invSwcaft).Count() > 0 ?
          //  backOrderedQtyList.Where(a => a.LocId == invSwcaft).FirstOrDefault().TotalQtyOrdered : 0);
          // tmpStagePOPrismCast = (int)(backOrderedQtyList.Where(a => a.LocId == invPrismCast).Count() > 0 ?
          //   backOrderedQtyList.Where(a => a.LocId == invPrismCast).FirstOrDefault().TotalQtyOrdered : 0);
          //tmpStagePOPrismCalt = (int)(backOrderedQtyList.Where(a => a.LocId == invPrismCalt).Count() > 0 ?
          //  backOrderedQtyList.Where(a => a.LocId == invPrismCalt).FirstOrDefault().TotalQtyOrdered : 0);
          tmpStagePOZinusTracy = (int)(backOrderedQtyList.Where(a => a.LocId == invZinusTracy).Count() > 0 ?
            backOrderedQtyList.Where(a => a.LocId == invZinusTracy).FirstOrDefault().TotalQtyOrdered : 0);
          tmpStagePOZinusChs = (int)(backOrderedQtyList.Where(a => a.LocId == invZinusChs).Count() > 0 ?
            backOrderedQtyList.Where(a => a.LocId == invZinusChs).FirstOrDefault().TotalQtyOrdered : 0);

          tmpStagePOBanc60 = tmpStagePOBanc;
          tmpStagePOBasc60 = tmpStagePOBasc;
          tmpStagePOMainsl60 = tmpStagePOMainsl;
          //tmpStagePOSwcaft60 = tmpStagePOSwcaft;
          //tmpStagePOPrismCast60 = tmpStagePOPrismCast;
          //tmpStagePOPrismCalt60 = tmpStagePOPrismCalt;
          tmpStagePOZinusTracy60 = tmpStagePOZinusTracy;
          tmpStagePOZinusChs60 = tmpStagePOZinusChs;

        }
        else if (sel == 3)
        {
          /*          calSumofBackOrders.Add(taskCalculateStageBackOrderSUM(invBanc, 60, serviceResponse[index].ItemNoId, tmpStagePOBanc));
                    calSumofBackOrders.Add(taskCalculateStageBackOrderSUM(invBasc, 60, serviceResponse[index].ItemNoId, tmpStagePOBasc));
                    calSumofBackOrders.Add(taskCalculateStageBackOrderSUM(invMainsl, 60, serviceResponse[index].ItemNoId, tmpStagePOMainsl));
                    calSumofBackOrders.Add(taskCalculateStageBackOrderSUM(invSwcaft, 60, serviceResponse[index].ItemNoId, tmpStagePOSwcaft));
          */

          //calculateStageBackOrderSUM

          /*
          calSumofBackOrders.Add(taskCalculateStageBackOrderSUM(invBanc, 90, serviceResponse[index].ItemNoId, tmpStagePOBanc90));
          calSumofBackOrders.Add(taskCalculateStageBackOrderSUM(invBasc, 90, serviceResponse[index].ItemNoId, tmpStagePOBasc90));
          calSumofBackOrders.Add(taskCalculateStageBackOrderSUM(invMainsl, 90, serviceResponse[index].ItemNoId, tmpStagePOMainsl90));
          calSumofBackOrders.Add(taskCalculateStageBackOrderSUM(invSwcaft, 90, serviceResponse[index].ItemNoId, tmpStagePOSwcaft90));
          calSumofBackOrders.Add(taskCalculateStageBackOrderSUM(invPrismCast, 90, serviceResponse[index].ItemNoId, tmpStagePOPrismCast));
          calSumofBackOrders.Add(taskCalculateStageBackOrderSUM(invPrismCalt, 90, serviceResponse[index].ItemNoId, tmpStagePOPrismCalt));

          await Task.WhenAll(calSumofBackOrders);
          tmpStagePOBanc = await calSumofBackOrders[0];
          tmpStagePOBasc = await calSumofBackOrders[1];
          tmpStagePOMainsl = await calSumofBackOrders[2];
          tmpStagePOSwcaft = await calSumofBackOrders[3];
          tmpStagePOPrismCast = await calSumofBackOrders[4];
          tmpStagePOPrismCalt = await calSumofBackOrders[5];

          tmpStagePOBanc90 = await calSumofBackOrders[0];
          tmpStagePOBasc90 = await calSumofBackOrders[1];
          tmpStagePOMainsl90 = await calSumofBackOrders[2];
          tmpStagePOSwcaft90 = await calSumofBackOrders[3];
          tmpStagePOPrismCast90 = await calSumofBackOrders[4];
          tmpStagePOPrismCalt90 = await calSumofBackOrders[5];
          */

          List<int> locIds = new List<int>();// { 4, 25, 51, 54, 62, 67 };
          //locIds.Add(invBanc);
          //locIds.Add(invBasc);
          locIds.Add(invMainsl);
          //locIds.Add(invSwcaft);
          //locIds.Add(invPrismCast);
          //locIds.Add(invPrismCalt);
          locIds.Add(invZinusTracy);
          locIds.Add(invZinusChs);
          List<BackOrderedQty> backOrderedQtyList = await revCalculateStageBackOrderSUM(locIds, 90, serviceResponse[index].ItemNoId);

          //tmpStagePOBanc = (int)(backOrderedQtyList.Where(a => a.LocId == invBanc).Count() > 0 ?
          //backOrderedQtyList.Where(a => a.LocId == invBanc).FirstOrDefault().TotalQtyOrdered : 0);//await calSumofBackOrders[0];
          //tmpStagePOBasc = (int)(backOrderedQtyList.Where(a => a.LocId == invBasc).Count() > 0 ?
          //backOrderedQtyList.Where(a => a.LocId == invBasc).FirstOrDefault().TotalQtyOrdered : 0);
          tmpStagePOMainsl = (int)(backOrderedQtyList.Where(a => a.LocId == invMainsl).Count() > 0 ?
            backOrderedQtyList.Where(a => a.LocId == invMainsl).FirstOrDefault().TotalQtyOrdered : 0);
          // tmpStagePOSwcaft = (int)(backOrderedQtyList.Where(a => a.LocId == invSwcaft).Count() > 0 ?
          //   backOrderedQtyList.Where(a => a.LocId == invSwcaft).FirstOrDefault().TotalQtyOrdered : 0);
          //tmpStagePOPrismCast = (int)(backOrderedQtyList.Where(a => a.LocId == invPrismCast).Count() > 0 ?
          //backOrderedQtyList.Where(a => a.LocId == invPrismCast).FirstOrDefault().TotalQtyOrdered : 0);
          //tmpStagePOPrismCalt = (int)(backOrderedQtyList.Where(a => a.LocId == invPrismCalt).Count() > 0 ?
          // backOrderedQtyList.Where(a => a.LocId == invPrismCalt).FirstOrDefault().TotalQtyOrdered : 0);
          tmpStagePOZinusTracy = (int)(backOrderedQtyList.Where(a => a.LocId == invZinusTracy).Count() > 0 ?
            backOrderedQtyList.Where(a => a.LocId == invZinusTracy).FirstOrDefault().TotalQtyOrdered : 0);
          tmpStagePOZinusChs = (int)(backOrderedQtyList.Where(a => a.LocId == invZinusChs).Count() > 0 ?
            backOrderedQtyList.Where(a => a.LocId == invZinusChs).FirstOrDefault().TotalQtyOrdered : 0);

          tmpStagePOBanc90 = tmpStagePOBanc;
          tmpStagePOBasc90 = tmpStagePOBasc;
          tmpStagePOMainsl90 = tmpStagePOMainsl;
          //tmpStagePOSwcaft90 = tmpStagePOSwcaft;
          //tmpStagePOPrismCast90 = tmpStagePOPrismCast;
          //tmpStagePOPrismCalt90 = tmpStagePOPrismCalt;
          tmpStagePOZinusTracy90 = tmpStagePOZinusTracy;
          tmpStagePOZinusChs90 = tmpStagePOZinusChs;
        }
        else if (sel == 0)
        {
          /*
          List<int> locIds = new List<int>();// { 4, 25, 51, 54, 62, 67 };
          locIds.Add(invBanc);
          locIds.Add(invBasc);
          locIds.Add(invMainsl);
          locIds.Add(invSwcaft);
          locIds.Add(invPrismCast);
          locIds.Add(invPrismCalt);

          List<BackOrderedQty> backOrderedQty60List = await revCalculateStageBackOrderSUM(locIds, 60, serviceResponse[index].ItemNoId);

          tmpStagePOBanc = (int)(backOrderedQty60List.FindIndex(a => a.LocId == invBanc) > 0 ?
            backOrderedQty60List.Where(a => a.LocId == invBanc).FirstOrDefault().TotalQtyOrdered : 0);//await calSumofBackOrders[0];
          tmpStagePOBasc = (int)(backOrderedQty60List.Where(a => a.LocId == invBasc).Count() > 0 ?
            backOrderedQty60List.Where(a => a.LocId == invBasc).FirstOrDefault().TotalQtyOrdered : 0);
          tmpStagePOMainsl = (int)(backOrderedQty60List.Where(a => a.LocId == invMainsl).Count() > 0 ?
            backOrderedQty60List.Where(a => a.LocId == invMainsl).FirstOrDefault().TotalQtyOrdered : 0);
          tmpStagePOSwcaft = (int)(backOrderedQty60List.Where(a => a.LocId == invSwcaft).Count() > 0 ?
            backOrderedQty60List.Where(a => a.LocId == invSwcaft).FirstOrDefault().TotalQtyOrdered : 0);
          tmpStagePOPrismCast = (int)(backOrderedQty60List.Where(a => a.LocId == invPrismCast).Count() > 0 ?
            backOrderedQty60List.Where(a => a.LocId == invPrismCast).FirstOrDefault().TotalQtyOrdered : 0);
          tmpStagePOPrismCalt = (int)(backOrderedQty60List.Where(a => a.LocId == invPrismCalt).Count() > 0 ?
            backOrderedQty60List.Where(a => a.LocId == invPrismCalt).FirstOrDefault().TotalQtyOrdered : 0);

          tmpStagePOBanc60 = tmpStagePOBanc;
          tmpStagePOBasc60 = tmpStagePOBasc;
          tmpStagePOMainsl60 = tmpStagePOMainsl;
          tmpStagePOSwcaft60 = tmpStagePOSwcaft;
          tmpStagePOPrismCast60 = tmpStagePOPrismCast;
          tmpStagePOPrismCalt60 = tmpStagePOPrismCalt;
          */
          /*
          List<BackOrderedQty> backOrderedQty90List = await revCalculateStageBackOrderSUM(locIds, 90, serviceResponse[index].ItemNoId);

          tmpStagePOBanc90 = (int)(backOrderedQty90List.FindIndex(a => a.LocId == invBanc) > 0 ?
            backOrderedQty90List.Where(a => a.LocId == invBanc).FirstOrDefault().TotalQtyOrdered : 0);//await calSumofBackOrders[0];
          tmpStagePOBasc90 = (int)(backOrderedQty90List.FindIndex(a => a.LocId == invBasc) > 0 ?
            backOrderedQty90List.Where(a => a.LocId == invBasc).FirstOrDefault().TotalQtyOrdered : 0);
          tmpStagePOMainsl90 = (int)(backOrderedQty90List.FindIndex(a => a.LocId == invMainsl) > 0 ?
            backOrderedQty90List.Where(a => a.LocId == invMainsl).FirstOrDefault().TotalQtyOrdered : 0);
          tmpStagePOSwcaft90 = (int)(backOrderedQty90List.FindIndex(a => a.LocId == invSwcaft) > 0 ?
            backOrderedQty90List.Where(a => a.LocId == invSwcaft).FirstOrDefault().TotalQtyOrdered : 0);
          tmpStagePOPrismCast90 = (int)(backOrderedQty90List.FindIndex(a => a.LocId == invPrismCast) > 0 ?
            backOrderedQty90List.Where(a => a.LocId == invPrismCast).FirstOrDefault().TotalQtyOrdered : 0);
          tmpStagePOPrismCalt90 = (int)(backOrderedQty90List.FindIndex(a => a.LocId == invPrismCalt) > 0 ?
            backOrderedQty90List.Where(a => a.LocId == invPrismCalt).FirstOrDefault().TotalQtyOrdered : 0);
          */
        }
        /*
        if (tmpBpmItem.CheckBackOrderLeadTimeBancid == 2)
        {
          if (sel != 3) { serviceResponse[index].StagePOModBanc = tmpStagePOBanc; }
          else { serviceResponse[index].StagePOModBanc = tmpStagePOBanc90; }
        }
        else if (tmpBpmItem.CheckBackOrderLeadTimeBancid == 3)
        {
          if (sel != 2) { serviceResponse[index].StagePOModBanc = tmpStagePOBanc90; }
          else { serviceResponse[index].StagePOModBanc = tmpStagePOBanc; }
        }
        else { serviceResponse[index].StagePOModBanc = tmpStagePOBanc; }

        if (tmpBpmItem.CheckBackOrderLeadTimeBascid == 2)
        {
          if (sel != 3) { serviceResponse[index].StagePOModBasc = tmpStagePOBasc; }
          else { serviceResponse[index].StagePOModBasc = tmpStagePOBasc90; }
        }
        else if (tmpBpmItem.CheckBackOrderLeadTimeBascid == 3)
        {
          if (sel != 2) { serviceResponse[index].StagePOModBasc = tmpStagePOBasc90; }
          else { serviceResponse[index].StagePOModBasc = tmpStagePOBasc; }
        }
        else { serviceResponse[index].StagePOModBasc = tmpStagePOBasc; }
        */

        if (tmpBpmItem.CheckBackOrderLeadTimeMainSlid == 2)
        {
          if (sel != 3) { serviceResponse[index].StagePOModMainsl = tmpStagePOMainsl; }
          else { serviceResponse[index].StagePOModMainsl = tmpStagePOMainsl90; }
        }
        else if (tmpBpmItem.CheckBackOrderLeadTimeMainSlid == 3)
        {
          if (sel != 2) { serviceResponse[index].StagePOModMainsl = tmpStagePOMainsl90; }
          else { serviceResponse[index].StagePOModMainsl = tmpStagePOMainsl; }
        }
        else { serviceResponse[index].StagePOModMainsl = tmpStagePOMainsl; }

        /*
        if (tmpBpmItem.CheckBackOrderLeadTimeSwcaftid == 2)
        {
          if (sel != 3) { serviceResponse[index].StagePOModSwcaft = tmpStagePOSwcaft; }
          else { serviceResponse[index].StagePOModSwcaft = tmpStagePOSwcaft90; }
        }
        else if (tmpBpmItem.CheckBackOrderLeadTimeSwcaftid == 3)
        {
          if (sel != 2) { serviceResponse[index].StagePOModSwcaft = tmpStagePOSwcaft90; }
          else { serviceResponse[index].StagePOModSwcaft = tmpStagePOSwcaft; }
        }
        else { serviceResponse[index].StagePOModSwcaft = tmpStagePOSwcaft; }
        */
        // Added
        /*
        if (tmpBpmItem.CheckBackOrderLeadTimePrsmStcktnId == 2)
        {
          if (sel != 3) { serviceResponse[index].StagePOModPrismCast = tmpStagePOPrismCast; }
          else { serviceResponse[index].StagePOModPrismCast = tmpStagePOPrismCast90; }
        }
        else if (tmpBpmItem.CheckBackOrderLeadTimePrsmStcktnId == 3)
        {
          if (sel != 2) { serviceResponse[index].StagePOModPrismCast = tmpStagePOPrismCast90; }
          else { serviceResponse[index].StagePOModPrismCast = tmpStagePOPrismCast; }
        }
        else { serviceResponse[index].StagePOModPrismCast = tmpStagePOPrismCast; }

        if (tmpBpmItem.CheckBackOrderLeadTimePrsmLthrpId == 2)
        {
          if (sel != 3) { serviceResponse[index].StagePOModPrismCalt = tmpStagePOPrismCalt; }
          else { serviceResponse[index].StagePOModPrismCalt = tmpStagePOPrismCalt90; }
        }
        else if (tmpBpmItem.CheckBackOrderLeadTimePrsmLthrpId == 3)
        {
          if (sel != 2) { serviceResponse[index].StagePOModPrismCalt = tmpStagePOPrismCalt90; }
          else { serviceResponse[index].StagePOModPrismCalt = tmpStagePOPrismCalt; }
        }
        else { serviceResponse[index].StagePOModPrismCalt = tmpStagePOPrismCalt; }*/
        // Added on 3/13/2024 by Brian Yi
        // ZINUS-Tracy
        if (tmpBpmItem.CheckBackOrderLeadTimeZnsTracyId == 2)
        {
          if (sel != 3) { serviceResponse[index].StagePOModZinusTracy = tmpStagePOZinusTracy; }
          else { serviceResponse[index].StagePOModZinusTracy = tmpStagePOZinusTracy90; }
        }
        else if (tmpBpmItem.CheckBackOrderLeadTimeZnsTracyId == 3)
        {
          if (sel != 2) { serviceResponse[index].StagePOModZinusTracy = tmpStagePOZinusTracy90; }
          else { serviceResponse[index].StagePOModZinusTracy = tmpStagePOZinusTracy; }
        }
        else { serviceResponse[index].StagePOModZinusTracy = tmpStagePOZinusTracy; }

        // ZINUS-CHS
        if (tmpBpmItem.CheckBackOrderLeadTimeZnsChsId == 2)
        {
          if (sel != 3) { serviceResponse[index].StagePOModZinusChs = tmpStagePOZinusChs; }
          else { serviceResponse[index].StagePOModZinusChs = tmpStagePOZinusChs90; }
        }
        else if (tmpBpmItem.CheckBackOrderLeadTimeZnsChsId == 3)
        {
          if (sel != 2) { serviceResponse[index].StagePOModZinusChs = tmpStagePOZinusChs90; }
          else { serviceResponse[index].StagePOModZinusChs = tmpStagePOZinusChs; }
        }
        else { serviceResponse[index].StagePOModZinusChs = tmpStagePOZinusChs; }

        //serviceResponse[index].StagePOOrigBanc = tmpStagePOBanc;
        //serviceResponse[index].StagePOOrigBasc = tmpStagePOBasc;
        serviceResponse[index].StagePOOrigMainsl = tmpStagePOMainsl;
        //serviceResponse[index].StagePOOrigSwcaft = tmpStagePOSwcaft;
        //serviceResponse[index].StagePOOrigPrismCast = tmpStagePOPrismCast;
        //serviceResponse[index].StagePOOrigPrismCalt = tmpStagePOPrismCalt;
        serviceResponse[index].StagePOOrigZinusTracy = tmpStagePOZinusTracy;
        serviceResponse[index].StagePOOrigZinusChs = tmpStagePOZinusChs;
        //serviceResponse[index].StagePOOrigBanc60 = tmpStagePOBanc60;
        //serviceResponse[index].StagePOOrigBasc60 = tmpStagePOBasc60;
        serviceResponse[index].StagePOOrigMainsl60 = tmpStagePOMainsl60;
        //serviceResponse[index].StagePOOrigSwcaft60 = tmpStagePOSwcaft60;
        //serviceResponse[index].StagePOOrigPrismCast60 = tmpStagePOPrismCast60;
        //serviceResponse[index].StagePOOrigPrismCalt60 = tmpStagePOPrismCalt60;
        serviceResponse[index].StagePOOrigZinusTracy60 = tmpStagePOZinusTracy60;
        serviceResponse[index].StagePOOrigZinusChs60 = tmpStagePOZinusChs60;
        //serviceResponse[index].StagePOOrigBanc90 = tmpStagePOBanc90;
        //serviceResponse[index].StagePOOrigBasc90 = tmpStagePOBasc90;
        serviceResponse[index].StagePOOrigMainsl90 = tmpStagePOMainsl90;
        //serviceResponse[index].StagePOOrigSwcaft90 = tmpStagePOSwcaft90;
        //serviceResponse[index].StagePOOrigPrismCast90 = tmpStagePOPrismCast90;
        //serviceResponse[index].StagePOOrigPrismCalt90 = tmpStagePOPrismCalt90;
        serviceResponse[index].StagePOOrigZinusTracy90 = tmpStagePOZinusTracy90;
        serviceResponse[index].StagePOOrigZinusChs90 = tmpStagePOZinusChs90;
        //if (tmpStagePOBanc > 0) { isStagePOQtyBanc = true; };
        //if (tmpStagePOBasc > 0) { isStagePOQtyBasc = true; };
        if (tmpStagePOMainsl > 0) { isStagePOQtyMainsl = true; };
        //if (tmpStagePOSwcaft > 0) { isStagePOQtySwcaft = true; };
        //if (tmpStagePOPrismCast > 0) { isStagePOQtyPrismCast = true; };
        //if (tmpStagePOPrismCalt > 0) { isStagePOQtyPrismCalt = true; };
        if (tmpStagePOZinusTracy > 0) { isStagePOQtyZinusTracy = true; };
        if (tmpStagePOZinusChs > 0) { isStagePOQtyZinusChs = true; };
        // Need to add the logic for Stage PO & Back Order Qty
        invFeedsItem = invFeedsItemList
          .Where(i => i.ItemNoId == serviceResponse[index].ItemNoId)
          .FirstOrDefault();
        if (invFeedsItem == null)
        {
          //dateTimeForSet = tmpModel.TimeRecord;

          invFeedsItem = new InvFeedsItem
          {
            InvFeedsReportId = newReport.InvFeedsReportId,
            ItemNoId = serviceResponse[index].ItemNoId,
            IsSet = false
          };
          invFeedsItemList.Add(invFeedsItem);
          //await _kc.InvFeedsItems.AddAsync(invFeedsItem);
          //await _kc.SaveChangesAsync();
        }
        //isStagePOQtyBanc = false;
        //isStagePOQtyBasc = false;
        isStagePOQtyMainsl = false;
        //isStagePOQtySwcaft = false;
        //isStagePOQtyPrismCast = false;
        //isStagePOQtyPrismCalt = false;
        isStagePOQtyZinusTracy = false;
        isStagePOQtyZinusChs = false;
        //foreach (RealTimeInvUpdDetail tmpModel in tmpModelList)
        Parallel.ForEach(tmpModelList, tmpModel =>
        {
          if ((tmpModel != null) && (tmpModel.ItemNo.ItemName != ""))
          {
            // Need to fix!!!!

            //InvFeedsItem invFeedsItem = await _kc.InvFeedsItems
            // .Where(x => ((DateTime)x.CreatedTime).Date.CompareTo(DateTime.Now) == 0 && x.ItemNoId == tmpModel.ItemNoId)
            // .FirstOrDefaultAsync();

            //if (tmpModel.ItemNoId == 1613)
            //{ Console.Write("Here!"); }
            tmpStagePOQty = 0;
            switch (tmpModel.LocationId)
            {
              /*case invBanc:
                tmpStagePOQty = tmpStagePOBanc;
                tmpStagePOQty90 = tmpStagePOBanc90;
                isStagePOQtyBanc = true;
                break;
              case invBasc:
                tmpStagePOQty = tmpStagePOBasc;
                tmpStagePOQty90 = tmpStagePOBasc90;
                isStagePOQtyBasc = true;
                break;*/
              case invMainsl:
                tmpStagePOQty = tmpStagePOMainsl;
                tmpStagePOQty90 = tmpStagePOMainsl90;
                isStagePOQtyMainsl = true;
                break;
              /*case invSwcaft:
                tmpStagePOQty = tmpStagePOSwcaft;
                tmpStagePOQty90 = tmpStagePOSwcaft90;
                isStagePOQtySwcaft = true;
                break;*/
              /*case invPrismCast:
                tmpStagePOQty = tmpStagePOPrismCast;
                tmpStagePOQty90 = tmpStagePOPrismCast90;
                isStagePOQtyPrismCast = true;
                break;
              case invPrismCalt:
                tmpStagePOQty = tmpStagePOPrismCalt;
                tmpStagePOQty90 = tmpStagePOPrismCalt90;
                isStagePOQtyPrismCalt = true;
                break;*/
              case invZinusTracy:
                tmpStagePOQty = tmpStagePOZinusTracy;
                tmpStagePOQty90 = tmpStagePOZinusTracy90;
                isStagePOQtyZinusTracy = true;
                break;
              case invZinusChs:
                tmpStagePOQty = tmpStagePOZinusChs;
                tmpStagePOQty90 = tmpStagePOZinusChs90;
                isStagePOQtyZinusChs = true;
                break;
              default:
                tmpStagePOQty = 0;
                break;
            }

            invFeedsItemLocQty = new InvFeedsItemLocQty
            {
              InvFeedsItem = invFeedsItem,
              InvFeedsItemId = invFeedsItem.InvFeedsItemId, // Give it a relationship.
              ItemLocId = tmpModel.LocationId,
              QtyAvail = tmpModel.QtyAvail,
              QtyOnHand = tmpModel.QtyOnHand,
              StagePoqtyOrig = tmpStagePOQty,
              StagePoqtyModified = tmpStagePOQty,
              StagePoqty60 = tmpStagePOQty,
              StagePoqty90 = tmpStagePOQty90
            };
            invFeedsItemLocQtyList.Add(invFeedsItemLocQty);
            serviceResponse[index].ItemName = tmpModel.ItemNo.ItemName;
            /*if (tmpModel.LocationId == invBanc) //BANC
            {
              if (inventoryConfig.ZeroOutBufferBanc > (int)tmpModel.QtyAvail)
              { if (tmpBpmItem.LeftOverBancassgndMktId < 0 || tmpBpmItem.LeftOverBancassgndMktId.HasValue == false) tmpBpmItem.LeftOverBancassgndMktId = 0; }
              else { tmpBpmItem.LeftOverBancassgndMktId = -1; }
              serviceResponse[index].QtyAvailBanc = (int)tmpModel.QtyAvail;
              serviceResponse[index].QtyOnHandBanc = (int)tmpModel.QtyOnHand;
              serviceResponse[index].InvBANCItemId = (int)tmpModel.RealTimeInvUpdDetailId;
            }
            else*/
            if (tmpModel.LocationId == invMainsl) //Mainsl
            {
              if (inventoryConfig.ZeroOutBufferMainSl > (int)tmpModel.QtyAvail)
              { if (tmpBpmItem.LeftOverMainSlassgndMktId < 0 || tmpBpmItem.LeftOverMainSlassgndMktId.HasValue == false) tmpBpmItem.LeftOverMainSlassgndMktId = 0; }
              else { tmpBpmItem.LeftOverMainSlassgndMktId = -1; }
              serviceResponse[index].QtyAvailMainsl = (int)tmpModel.QtyAvail;
              serviceResponse[index].QtyOnHandMainsl = (int)tmpModel.QtyOnHand;
              serviceResponse[index].InvMainslItemId = (int)tmpModel.RealTimeInvUpdDetailId;
            }/*
            else if (tmpModel.LocationId == invSwcaft) //SW-CAFT
            {
              if (inventoryConfig.ZeroOutBufferSwcaft > (int)tmpModel.QtyAvail)
              { if (tmpBpmItem.LeftOverSwcaftassgndMktId < 0 || tmpBpmItem.LeftOverSwcaftassgndMktId.HasValue == false) tmpBpmItem.LeftOverSwcaftassgndMktId = 0; }
              else { tmpBpmItem.LeftOverSwcaftassgndMktId = -1; }
              serviceResponse[index].QtyAvailSwcaft = (int)tmpModel.QtyAvail;
              serviceResponse[index].QtyOnHandSwcaft = (int)tmpModel.QtyOnHand;
              serviceResponse[index].InvSwcaftItemId = (int)tmpModel.RealTimeInvUpdDetailId;
            }*/
            /*else if (tmpModel.LocationId == invBasc) //BASC
            {
              if (inventoryConfig.ZeroOutBufferBasc > (int)tmpModel.QtyAvail)
              { if (tmpBpmItem.LeftOverBascassgndMktId < 0 || tmpBpmItem.LeftOverBascassgndMktId.HasValue == false) tmpBpmItem.LeftOverBascassgndMktId = 0; }
              else { tmpBpmItem.LeftOverBascassgndMktId = -1; }
              serviceResponse[index].QtyAvailBasc = (int)tmpModel.QtyAvail;
              serviceResponse[index].QtyOnHandBasc = (int)tmpModel.QtyOnHand;
              serviceResponse[index].InvBASCItemId = (int)tmpModel.RealTimeInvUpdDetailId;
            }*//*
            else if (tmpModel.LocationId == invPrismCast) //Prism Stockton
            {
              if (inventoryConfig.ZeroOutBufferBasc > (int)tmpModel.QtyAvail)
              { if (tmpBpmItem.LeftOverPrsmStcktnAssgndMktId < 0 || tmpBpmItem.LeftOverPrsmStcktnAssgndMktId.HasValue == false) tmpBpmItem.LeftOverPrsmStcktnAssgndMktId = 0; }
              else { tmpBpmItem.LeftOverPrsmStcktnAssgndMktId = -1; }
              serviceResponse[index].QtyAvailPrismCast = (int)tmpModel.QtyAvail;
              serviceResponse[index].QtyOnHandPrismCast = (int)tmpModel.QtyOnHand;
              serviceResponse[index].InvPrismCastItemId = (int)tmpModel.RealTimeInvUpdDetailId;
            }
            else if (tmpModel.LocationId == invPrismCast) //Prism Lathrop
            {
              if (inventoryConfig.ZeroOutBufferBasc > (int)tmpModel.QtyAvail)
              { if (tmpBpmItem.LeftOverPrsmLthrpAssgndMktId < 0 || tmpBpmItem.LeftOverPrsmLthrpAssgndMktId.HasValue == false) tmpBpmItem.LeftOverPrsmLthrpAssgndMktId = 0; }
              else { tmpBpmItem.LeftOverPrsmLthrpAssgndMktId = -1; }
              serviceResponse[index].QtyAvailPrismCalt = (int)tmpModel.QtyAvail;
              serviceResponse[index].QtyOnHandPrismCalt = (int)tmpModel.QtyOnHand;
              serviceResponse[index].InvPrismCaltItemId = (int)tmpModel.RealTimeInvUpdDetailId;
            }*/
            else if (tmpModel.LocationId == invZinusTracy) // Zinus Tracy
            {
              if (inventoryConfig.ZeroOutBufferBasc > (int)tmpModel.QtyAvail)
              { if (tmpBpmItem.LeftOverZnsTracyAssgndMktId < 0 || tmpBpmItem.LeftOverZnsTracyAssgndMktId.HasValue == false) tmpBpmItem.LeftOverZnsTracyAssgndMktId = 0; }
              else { tmpBpmItem.LeftOverZnsTracyAssgndMktId = -1; }
              serviceResponse[index].QtyAvailZinusTracy = (int)tmpModel.QtyAvail;
              serviceResponse[index].QtyOnHandZinusTracy = (int)tmpModel.QtyOnHand;
              serviceResponse[index].InvZinusTracyItemId = (int)tmpModel.RealTimeInvUpdDetailId;
            }
            else if (tmpModel.LocationId == invZinusChs) // Zinus CHS
            {
              if (inventoryConfig.ZeroOutBufferBasc > (int)tmpModel.QtyAvail)
              { if (tmpBpmItem.LeftOverZnsChsAssgndMktId < 0 || tmpBpmItem.LeftOverZnsChsAssgndMktId.HasValue == false) tmpBpmItem.LeftOverZnsChsAssgndMktId = 0; }
              else { tmpBpmItem.LeftOverZnsChsAssgndMktId = -1; }
              serviceResponse[index].QtyAvailZinusChs = (int)tmpModel.QtyAvail;
              serviceResponse[index].QtyOnHandZinusChs = (int)tmpModel.QtyOnHand;
              serviceResponse[index].InvZinusChsItemId = (int)tmpModel.RealTimeInvUpdDetailId;
            }
            List<InvFeedsRemark> tmpRemarks = invFeedsRemarks
              .Where(i => i.ItemNoId == tmpModel.ItemNoId)
              .ToList();
            if (tmpRemarks != null)
            {
              foreach (InvFeedsRemark tmpRemark in tmpRemarks)
              {
                if (serviceResponse[index].Remark == "") serviceResponse[index].Remark = tmpRemark.InvFeedsRmrkCtgry.CategoryName;
                else serviceResponse[index].Remark = serviceResponse[index].Remark + ", " + tmpRemark.InvFeedsRmrkCtgry.CategoryName;
              }
            }
            else
            {
              serviceResponse[index].Remark = "";
            }
            serviceResponse[index].InventoryItemId = invFeedsItem.InvFeedsItemId;
          }
          else
          {
            if (removeThis == true)
            {
              serviceResponse.RemoveAt(index);
              removeThis = false;
            }
          }
        });
        // Need to Add here
        /*if (serviceResponse[index].StagePOModBanc > 0 && isStagePOQtyBanc == false)
        {
          invFeedsItemLocQty = new InvFeedsItemLocQty
          {
            InvFeedsItem = invFeedsItem,
            InvFeedsItemId = invFeedsItem.InvFeedsItemId, // Give it a relationship.
            ItemLocId = invBanc,
            QtyAvail = 0,
            QtyOnHand = 0,
            StagePoqtyOrig = tmpStagePOBanc,
            StagePoqtyModified = tmpStagePOBanc,
            StagePoqty60 = tmpStagePOBanc,
            StagePoqty90 = tmpStagePOBanc90
          };

        }
        invFeedsItemLocQtyList.Add(invFeedsItemLocQty);*/
        /*if (serviceResponse[index].StagePOModBasc > 0 && isStagePOQtyBasc == false)
        {
          invFeedsItemLocQty = new InvFeedsItemLocQty
          {
            InvFeedsItem = invFeedsItem,
            InvFeedsItemId = invFeedsItem.InvFeedsItemId, // Give it a relationship.
            ItemLocId = invBasc,
            QtyAvail = 0,
            QtyOnHand = 0,
            StagePoqtyOrig = tmpStagePOBasc,
            StagePoqtyModified = tmpStagePOBasc,
            StagePoqty60 = tmpStagePOBasc,
            StagePoqty90 = tmpStagePOBasc90
          };
        }
        invFeedsItemLocQtyList.Add(invFeedsItemLocQty);*/
        if (serviceResponse[index].StagePOModMainsl > 0 && isStagePOQtyMainsl == false)
        {
          invFeedsItemLocQty = new InvFeedsItemLocQty
          {
            InvFeedsItem = invFeedsItem,
            InvFeedsItemId = invFeedsItem.InvFeedsItemId, // Give it a relationship.
            ItemLocId = invMainsl,
            QtyAvail = 0,
            QtyOnHand = 0,
            StagePoqtyOrig = tmpStagePOMainsl,
            StagePoqtyModified = tmpStagePOMainsl,
            StagePoqty60 = tmpStagePOMainsl,
            StagePoqty90 = tmpStagePOMainsl90
          };
        }
        invFeedsItemLocQtyList.Add(invFeedsItemLocQty);/*
        if (serviceResponse[index].StagePOModSwcaft > 0 && isStagePOQtySwcaft == false)
        {
          invFeedsItemLocQty = new InvFeedsItemLocQty
          {
            InvFeedsItem = invFeedsItem,
            InvFeedsItemId = invFeedsItem.InvFeedsItemId, // Give it a relationship.
            ItemLocId = invSwcaft,
            QtyAvail = 0,
            QtyOnHand = 0,
            StagePoqtyOrig = tmpStagePOSwcaft,
            StagePoqtyModified = tmpStagePOSwcaft,
            StagePoqty60 = tmpStagePOSwcaft,
            StagePoqty90 = tmpStagePOSwcaft90
          };

        }
        invFeedsItemLocQtyList.Add(invFeedsItemLocQty);*/
        /*
        if (serviceResponse[index].StagePOModPrismCast > 0 && isStagePOQtyPrismCast == false)
        {
          invFeedsItemLocQty = new InvFeedsItemLocQty
          {
            InvFeedsItem = invFeedsItem,
            InvFeedsItemId = invFeedsItem.InvFeedsItemId, // Give it a relationship.
            ItemLocId = invPrismCast,
            QtyAvail = 0,
            QtyOnHand = 0,
            StagePoqtyOrig = tmpStagePOPrismCast,
            StagePoqtyModified = tmpStagePOPrismCast,
            StagePoqty60 = tmpStagePOPrismCast,
            StagePoqty90 = tmpStagePOPrismCast90
          };

        }
        invFeedsItemLocQtyList.Add(invFeedsItemLocQty);
        if (serviceResponse[index].StagePOModPrismCalt > 0 && isStagePOQtyPrismCalt == false)
        {
          invFeedsItemLocQty = new InvFeedsItemLocQty
          {
            InvFeedsItem = invFeedsItem,
            InvFeedsItemId = invFeedsItem.InvFeedsItemId, // Give it a relationship.
            ItemLocId = invPrismCalt,
            QtyAvail = 0,
            QtyOnHand = 0,
            StagePoqtyOrig = tmpStagePOPrismCalt,
            StagePoqtyModified = tmpStagePOPrismCalt,
            StagePoqty60 = tmpStagePOPrismCalt,
            StagePoqty90 = tmpStagePOPrismCalt90
          };

        }
        invFeedsItemLocQtyList.Add(invFeedsItemLocQty);*/
        if (serviceResponse[index].StagePOModZinusTracy > 0 && isStagePOQtyZinusTracy == false)
        {
          invFeedsItemLocQty = new InvFeedsItemLocQty
          {
            InvFeedsItem = invFeedsItem,
            InvFeedsItemId = invFeedsItem.InvFeedsItemId, // Give it a relationship.
            ItemLocId = invZinusTracy,
            QtyAvail = 0,
            QtyOnHand = 0,
            StagePoqtyOrig = tmpStagePOZinusTracy,
            StagePoqtyModified = tmpStagePOZinusTracy,
            StagePoqty60 = tmpStagePOZinusTracy,
            StagePoqty90 = tmpStagePOZinusTracy90
          };

        }
        invFeedsItemLocQtyList.Add(invFeedsItemLocQty);
        if (serviceResponse[index].StagePOModZinusChs > 0 && isStagePOQtyZinusChs == false)
        {
          invFeedsItemLocQty = new InvFeedsItemLocQty
          {
            InvFeedsItem = invFeedsItem,
            InvFeedsItemId = invFeedsItem.InvFeedsItemId, // Give it a relationship.
            ItemLocId = invZinusChs,
            QtyAvail = 0,
            QtyOnHand = 0,
            StagePoqtyOrig = tmpStagePOZinusChs,
            StagePoqtyModified = tmpStagePOZinusChs,
            StagePoqty60 = tmpStagePOZinusChs,
            StagePoqty90 = tmpStagePOZinusChs90
          };

        }
        invFeedsItemLocQtyList.Add(invFeedsItemLocQty);
      SkipNextSku:
        index++;
      }
      _kc.BulkUpdate(bpmItems);
      _kc.BulkInsert(invFeedsItemList, bulkConfig);


      // Making BOM
      // Skip Making Sets
      if (sel != 0)
      {
        if (inventoryConfig.IsActivatedSets == false)
        { goto SkipMakingSets; }
      }
      index = 0;
      int qtyLimit = 10;
      GetMainslBancInvItemDTO newItem;
      Bom tmpBom = new Bom();
      List<Bom> childList = new List<Bom>();
      InvFeedsItem tmpInvFeedsItem = new InvFeedsItem();
      List<InvFeedsItemLocQty> tmpLocQtyList = new List<InvFeedsItemLocQty>();
      GetMainslBancInvItemDTO tmpInvDTO = new GetMainslBancInvItemDTO();

      foreach (int tmpBomId in bomNSID)
      {
        tmpBom = qryBOMset.FindLast(qbs => qbs.NsIntId == tmpBomId);

        if (tmpBom != null && tmpBom.ParentItem.IsFeedable == true)
        {
          //invFeedsItem = new InvFeedsItem();
          newItem = await GetBOM(tmpBom, qtyLimit, serviceResponse, invFeedsItemList, invFeedsRemarks);
          //newItem = null;
          if (newItem != null)
          {
            // Re-calculate stock
            childList = qryBOMset.FindAll(q => q.NsIntId == tmpBom.NsIntId);
            foreach (Bom tmpBomModel in childList)
            //Parallel.ForEach(childList, tmpBomModel =>
            {
              // Need to Fix here
              tmpInvDTO = serviceResponse.FindLast(s => s.ItemNoId == tmpBomModel.ChildItemId);
              tmpInvFeedsItem = invFeedsItemList
                .Where(i => i.ItemNoId == tmpBomModel.ChildItemId).FirstOrDefault();
              tmpLocQtyList = new List<InvFeedsItemLocQty>();
              if (tmpInvFeedsItem != null)
              {
                tmpLocQtyList = invFeedsItemLocQtyList.Where(i => i.InvFeedsItem.InvFeedsItemId == tmpInvFeedsItem.InvFeedsItemId).ToList();
              }
              //foreach (InvFeedsItemLocQty tmpLocQty in tmpLocQtyList)
              // if (tmpLocQtyList.Any() == true) {
              Parallel.ForEach(tmpLocQtyList, tmpLocQty =>
              {
                /*if (tmpLocQty.ItemLocId == invBanc)
                {
                  if (tmpInvDTO != null && tmpInvDTO.QtyAvailBanc != tmpLocQty.QtyAvail) tmpLocQty.QtyAvail = tmpInvDTO.QtyAvailBanc;
                }
                else*/
                if (tmpLocQty.ItemLocId == invMainsl)
                {
                  if (tmpInvDTO != null && tmpInvDTO.QtyAvailMainsl != tmpLocQty.QtyAvail) tmpLocQty.QtyAvail = tmpInvDTO.QtyAvailMainsl;
                }/*
                else if (tmpLocQty.ItemLocId == invSwcaft)
                {
                  if (tmpInvDTO != null && tmpInvDTO.QtyAvailSwcaft != tmpLocQty.QtyAvail) tmpLocQty.QtyAvail = tmpInvDTO.QtyAvailSwcaft;
                }*/
                /*else if (tmpLocQty.ItemLocId == invBasc)
                {
                  if (tmpInvDTO != null && tmpInvDTO.QtyAvailBasc != tmpLocQty.QtyAvail) tmpLocQty.QtyAvail = tmpInvDTO.QtyAvailBasc;
                }*//*
                else if (tmpLocQty.ItemLocId == invPrismCast)
                {
                  if (tmpInvDTO != null && tmpInvDTO.QtyAvailPrismCast != tmpLocQty.QtyAvail) tmpLocQty.QtyAvail = tmpInvDTO.QtyAvailPrismCast;
                }
                else if (tmpLocQty.ItemLocId == invPrismCalt)
                {
                  if (tmpInvDTO != null && tmpInvDTO.QtyAvailPrismCalt != tmpLocQty.QtyAvail) tmpLocQty.QtyAvail = tmpInvDTO.QtyAvailPrismCalt;
                }*/
                else if (tmpLocQty.ItemLocId == invZinusTracy)
                {
                  if (tmpInvDTO != null && tmpInvDTO.QtyAvailZinusTracy != tmpLocQty.QtyAvail) tmpLocQty.QtyAvail = tmpInvDTO.QtyAvailZinusTracy;
                }
                else if (tmpLocQty.ItemLocId == invZinusChs)
                {
                  if (tmpInvDTO != null && tmpInvDTO.QtyAvailZinusChs != tmpLocQty.QtyAvail) tmpLocQty.QtyAvail = tmpInvDTO.QtyAvailZinusChs;
                }
              }
              );
              //});
            }


            // Adding to inventory item list
            newItem.CreatedTime = DateTime.Now;
            invFeedsItem = new InvFeedsItem
            {
              InvFeedsReportId = newReport.InvFeedsReportId,
              ItemNoId = newItem.ItemNoId,
              IsSet = true
            };

            await _kc.InvFeedsItems.AddAsync(invFeedsItem);
            await _kc.SaveChangesAsync();
            invFeedsItemList.Add(invFeedsItem);
            newItem.InventoryItemId = invFeedsItem.InvFeedsItemId;
            serviceResponse.Add(newItem);
            /*if (newItem.QtyAvailBanc != 0)
            {
              invFeedsItemLocQty = new InvFeedsItemLocQty
              {
                InvFeedsItem = invFeedsItem,
                InvFeedsItemId = invFeedsItem.InvFeedsItemId, // Give it a relationship.
                ItemLocId = invBanc,
                QtyAvail = newItem.QtyAvailBanc
              };
              invFeedsItemLocQtyList.Add(invFeedsItemLocQty);
            }
            if (newItem.QtyAvailBasc != 0)
            {
              invFeedsItemLocQty = new InvFeedsItemLocQty
              {
                InvFeedsItem = invFeedsItem,
                InvFeedsItemId = invFeedsItem.InvFeedsItemId, // Give it a relationship.
                ItemLocId = invBasc,
                QtyAvail = newItem.QtyAvailBasc
              };
              invFeedsItemLocQtyList.Add(invFeedsItemLocQty);
            }
             */
            if (newItem.QtyAvailMainsl != 0)
            {
              invFeedsItemLocQty = new InvFeedsItemLocQty
              {
                InvFeedsItem = invFeedsItem,
                InvFeedsItemId = invFeedsItem.InvFeedsItemId, // Give it a relationship.
                ItemLocId = invMainsl,
                QtyAvail = newItem.QtyAvailMainsl
              };
              invFeedsItemLocQtyList.Add(invFeedsItemLocQty);
            }
            /*
            if (newItem.QtyAvailSwcaft != 0)
            {
              invFeedsItemLocQty = new InvFeedsItemLocQty
              {
                InvFeedsItem = invFeedsItem,
                InvFeedsItemId = invFeedsItem.InvFeedsItemId, // Give it a relationship.
                ItemLocId = invSwcaft,
                QtyAvail = newItem.QtyAvailSwcaft
              };
              invFeedsItemLocQtyList.Add(invFeedsItemLocQty);
            }*/
            /*
            if (newItem.QtyAvailPrismCast != 0)
            {
              invFeedsItemLocQty = new InvFeedsItemLocQty
              {
                InvFeedsItem = invFeedsItem,
                InvFeedsItemId = invFeedsItem.InvFeedsItemId, // Give it a relationship.
                ItemLocId = invPrismCast,
                QtyAvail = newItem.QtyAvailPrismCast
              };
              invFeedsItemLocQtyList.Add(invFeedsItemLocQty);
            }
            if (newItem.QtyAvailPrismCalt != 0)
            {
              invFeedsItemLocQty = new InvFeedsItemLocQty
              {
                InvFeedsItem = invFeedsItem,
                InvFeedsItemId = invFeedsItem.InvFeedsItemId, // Give it a relationship.
                ItemLocId = invPrismCalt,
                QtyAvail = newItem.QtyAvailPrismCalt
              };
              invFeedsItemLocQtyList.Add(invFeedsItemLocQty);
            }*/

            if (newItem.QtyAvailZinusTracy != 0)
            {
              invFeedsItemLocQty = new InvFeedsItemLocQty
              {
                InvFeedsItem = invFeedsItem,
                InvFeedsItemId = invFeedsItem.InvFeedsItemId, // Give it a relationship.
                ItemLocId = invZinusTracy,
                QtyAvail = newItem.QtyAvailZinusTracy
              };
              invFeedsItemLocQtyList.Add(invFeedsItemLocQty);
            }
            if (newItem.QtyAvailZinusChs != 0)
            {
              invFeedsItemLocQty = new InvFeedsItemLocQty
              {
                InvFeedsItem = invFeedsItem,
                InvFeedsItemId = invFeedsItem.InvFeedsItemId, // Give it a relationship.
                ItemLocId = invZinusChs,
                QtyAvail = newItem.QtyAvailZinusChs
              };
              invFeedsItemLocQtyList.Add(invFeedsItemLocQty);
            }

          }
        }
      }
    //Skipping Sets
    SkipMakingSets:
      GetMainslBancInvItemDTO tmpResultDTO = new GetMainslBancInvItemDTO();
      //foreach (InvFeedsItemLocQty tmpDTO in invFeedsItemLocQtyList)
      Parallel.ForEach(invFeedsItemLocQtyList, tmpDTO =>
      {
        tmpDTO.InvFeedsItemId = tmpDTO.InvFeedsItem.InvFeedsItemId;
        /*
        tmpResultDTO = serviceResponse.FindLast(s => s.ItemNoId == tmpDTO.InvFeedsItem.ItemNoId);
        if(tmpResultDTO.isChildSet == true && tmpResultDTO.isSet != true)
        {
          if(tmpDTO.ItemLocId == invBanc) 
          {
            tmpDTO.QtyAvail = tmpResultDTO.QtyAvailBanc;
          }
          else if(tmpDTO.ItemLocId == invMainsl) 
          {
            tmpDTO.QtyAvail = tmpResultDTO.QtyAvailMainsl;
          }
        }*/
      });
      InvFeedsItem tmpItem = new InvFeedsItem();
      //foreach (GetMainslBancInvItemDTO tmpDTO in serviceResponse)
      Parallel.ForEach(serviceResponse, tmpDTO =>
      {
        tmpItem = invFeedsItemList.FindLast(i => i.ItemNoId == tmpDTO.ItemNoId);
        if (tmpItem != null && tmpItem.InvFeedsItemLocQties.Count != 0)
        {
          if ((tmpDTO.InventoryItemId != tmpItem.InvFeedsItemId) && (tmpDTO.InventoryItemId == 0))
            tmpDTO.InventoryItemId = tmpItem.InvFeedsItemId;
        }
        else tmpDTO.InventoryItemId = -1;

      });
      // _kc.BulkInsert(invFeedsItemList, bulkConfig);
      _kc.BulkInsert(invFeedsItemLocQtyList);

      return serviceResponse;
    }

    // By Brian Yi on 05/31/2021
    public async Task<GetMainslBancInvItemDTO> GetBOM(Bom setItem, int qtyLimit, List<GetMainslBancInvItemDTO> resInvItems, List<InvFeedsItem> invFeedsItemList, List<InvFeedsRemark> invFeedsRemarks)
    {
      InventoryConfig inventoryConfig = await _kc.InventoryConfigs
        .Where(i => i.InventoryConfigId == 1)
        .FirstOrDefaultAsync();

      //double bomRatio = 0.1;
      double bomRatio = (double)inventoryConfig.SetBomratio * 0.01;
      // int Banc = 4, Mainsl = 25;
      GetMainslBancInvItemDTO result = new GetMainslBancInvItemDTO()
      {
        ItemNoId = setItem.ParentItemId,
        ItemName = setItem.ParentItem.ItemName,
        QtyOnHandMainsl = 0,
        QtyAvailMainsl = 0,
        QtyOnHandBanc = 0,
        QtyAvailBanc = 0,
        QtyOnHandBasc = 0,
        QtyAvailBasc = 0,
        QtyOnHandSwcaft = 0,
        QtyAvailSwcaft = 0,
        QtyOnHandPrismCast = 0,
        QtyAvailPrismCast = 0,
        QtyOnHandPrismCalt = 0,
        QtyAvailPrismCalt = 0,
        QtyOnHandZinusTracy = 0,
        QtyAvailZinusTracy = 0,
        QtyOnHandZinusChs = 0,
        QtyAvailZinusChs = 0,
        StagePOOrigBanc = 0,
        StagePOOrigBasc = 0,
        StagePOOrigMainsl = 0,
        StagePOOrigSwcaft = 0,
        StagePOOrigPrismCast = 0,
        StagePOOrigPrismCalt = 0,
        StagePOOrigZinusTracy = 0,
        StagePOOrigZinusChs = 0,
        StagePOModBanc = 0,
        StagePOModBasc = 0,
        StagePOModMainsl = 0,
        StagePOModSwcaft = 0,
        StagePOModPrismCast = 0,
        StagePOModPrismCalt = 0,
        StagePOModZinusTracy = 0,
        StagePOModZinusChs = 0,
        StagePOOrigBanc60 = 0,
        StagePOOrigBasc60 = 0,
        StagePOOrigMainsl60 = 0,
        StagePOOrigSwcaft60 = 0,
        StagePOOrigPrismCast60 = 0,
        StagePOOrigPrismCalt60 = 0,
        StagePOOrigZinusTracy60 = 0,
        StagePOOrigZinusChs60 = 0,
        StagePOOrigBanc90 = 0,
        StagePOOrigBasc90 = 0,
        StagePOOrigMainsl90 = 0,
        StagePOOrigSwcaft90 = 0,
        StagePOOrigPrismCast90 = 0,
        StagePOOrigPrismCalt90 = 0,
        StagePOOrigZinusTracy90 = 0,
        StagePOOrigZinusChs90 = 0,
        beforeBOMQtyAvailMainsl = 0,
        beforeBOMQtyAvailBanc = 0,
        isSet = true,
        isChildSet = false,
        Remark = "Set"
      };

      // for parent or child
      List<GetMainslBancInvItemDTO> tmpDtoList = new List<GetMainslBancInvItemDTO>();
      //ConcurrentBag<GetMainslBancInvItemDTO> tmpDtoList = new ConcurrentBag<GetMainslBancInvItemDTO>();
      GetMainslBancInvItemDTO tmpInvItemDTO = new GetMainslBancInvItemDTO();
      InvFeedsItem tmpInvFeedsItem = new InvFeedsItem();

      // HERE
      List<Bom> setBomList = await _kc.Boms
        .Where(sbl => sbl.ParentItemId == setItem.ParentItemId)
        .ToListAsync();

      List<InvFeedsRemark> invFeedsRemarkList = new List<InvFeedsRemark>();
      InvFeedsRemark tmpRemark = new InvFeedsRemark();
      List<Bom> setBomTmpList = new List<Bom>();
      //foreach (Bom tmpBom in setBomList)
      Parallel.ForEach(setBomList, tmpBom =>
      {
        tmpRemark = invFeedsRemarks.Find(i => i.ItemNoId == tmpBom.ChildItemId);
        if (tmpRemark != null) invFeedsRemarkList.Add(tmpRemark);
      });
      if (invFeedsRemarkList != null)
      {
        int index = 0;
        while (index < invFeedsRemarkList.Count)
        {
          tmpRemark = invFeedsRemarks.Find(i => i.ItemNoId == setItem.ParentItemId

            && i.InvFeedsRmrkCtgryId == invFeedsRemarkList[index].InvFeedsRmrkCtgryId);
          if (tmpRemark != null) invFeedsRemarkList.RemoveAt(index);
          else index++;
        }
        if (invFeedsRemarkList != null)
        {
          //foreach (InvFeedsRemark tmpifr in invFeedsRemarkList) 
          Parallel.ForEach(invFeedsRemarkList, tmpifr =>
          { tmpifr.ItemNoId = setItem.ParentItemId; });
          _kc.BulkInsert(invFeedsRemarkList);
          invFeedsRemarks.AddRange(invFeedsRemarkList);
        }
      }
      invFeedsRemarkList = invFeedsRemarks.FindAll(i => i.ItemNoId == setItem.ParentItemId);

      //foreach (InvFeedsRemark tmpifr in invFeedsRemarkList)
      Parallel.ForEach(invFeedsRemarkList, tmpifr =>
      {
        if (result.Remark == "") result.Remark = tmpifr.InvFeedsRmrkCtgry.CategoryName;
        else result.Remark = result.Remark + ", " + tmpifr.InvFeedsRmrkCtgry.CategoryName;
      });

      // Checking warehouse stock
      // Need to fix this!!!!!!
      // swcaftCnt = 0, lowestSwcaftQty = 0, prsmStktnCnt = 0, prsmLthrCnt = 0, lowestPrsmStktnQty = 0, lowestPrsmLthrQty = 0, 
      int bancCnt = 0, mainslCnt = 0, bascCnt = 0, zinusTracyCnt = 0, zinusChsCnt = 0,
        lowestBancQty = 0, lowestMainslQty = 0, lowestBascQty = 0, lowestZinusTracyQty = 0, lowestZinusChsQty = 0, tmpStock = 0;
      Bom tmpModel = new Bom();
      for (int i = 0; i < setBomList.Count; i++)
      //Parallel.For(0, setBomList.Count, i =>
      {
        tmpModel = setBomList[i];
        // if (tmpModel.ParentItemId == 475)
        //{ Console.WriteLine("Hell");}
        tmpInvItemDTO = resInvItems.FindLast(iv => iv.ItemNoId == tmpModel.ChildItemId);
        //if (tmpInvItemDTO == null)
        //{ return; }

        // return null;
        /*if (tmpInvItemDTO != null && tmpInvItemDTO.QtyAvailBanc >= qtyLimit)
        {
          bancCnt++;
          if (i == 0) { lowestBancQty = GetChildQty(tmpInvItemDTO.QtyAvailBanc, bomRatio) / tmpModel.KittingQty; }
          else
          {
            tmpStock = GetChildQty(tmpInvItemDTO.QtyAvailBanc, bomRatio) / tmpModel.KittingQty;
            lowestBancQty = (tmpStock < lowestBancQty ? tmpStock : lowestBancQty);
          }
        }*/
        if (tmpInvItemDTO != null && tmpInvItemDTO.QtyAvailMainsl >= qtyLimit)
        {
          mainslCnt++;
          if (i == 0) { lowestMainslQty = GetChildQty(tmpInvItemDTO.QtyAvailMainsl, bomRatio) / tmpModel.KittingQty; }
          else
          {
            tmpStock = GetChildQty(tmpInvItemDTO.QtyAvailMainsl, bomRatio) / tmpModel.KittingQty;
            lowestMainslQty = (tmpStock < lowestMainslQty ? tmpStock : lowestMainslQty);
          }
        }/*
        if (tmpInvItemDTO != null && tmpInvItemDTO.QtyAvailSwcaft >= qtyLimit)
        {
          swcaftCnt++;
          if (i == 0) { lowestSwcaftQty = GetChildQty(tmpInvItemDTO.QtyAvailSwcaft, bomRatio) / tmpModel.KittingQty; }
          else
          {
            tmpStock = GetChildQty(tmpInvItemDTO.QtyAvailSwcaft, bomRatio) / tmpModel.KittingQty;
            lowestSwcaftQty = (tmpStock < lowestSwcaftQty ? tmpStock : lowestSwcaftQty);
          }
        }*/
        /*if (tmpInvItemDTO != null && tmpInvItemDTO.QtyAvailBasc >= qtyLimit)
        {
          bascCnt++;
          if (i == 0) { lowestBascQty = GetChildQty(tmpInvItemDTO.QtyAvailBasc, bomRatio) / tmpModel.KittingQty; }
          else
          {
            tmpStock = GetChildQty(tmpInvItemDTO.QtyAvailBasc, bomRatio) / tmpModel.KittingQty;
            lowestBascQty = (tmpStock < lowestBascQty ? tmpStock : lowestBascQty);
          }
        }*//*
        if (tmpInvItemDTO != null && tmpInvItemDTO.QtyAvailPrismCast >= qtyLimit)
        {
          prsmStktnCnt++;
          if (i == 0) { lowestPrsmStktnQty = GetChildQty(tmpInvItemDTO.QtyAvailPrismCast, bomRatio) / tmpModel.KittingQty; }
          else
          {
            tmpStock = GetChildQty(tmpInvItemDTO.QtyAvailPrismCast, bomRatio) / tmpModel.KittingQty;
            lowestPrsmStktnQty = (tmpStock < lowestPrsmStktnQty ? tmpStock : lowestPrsmStktnQty);
          }
        }
        if (tmpInvItemDTO != null && tmpInvItemDTO.QtyAvailPrismCalt >= qtyLimit)
        {
          prsmLthrCnt++;
          if (i == 0) { lowestPrsmLthrQty = GetChildQty(tmpInvItemDTO.QtyAvailPrismCalt, bomRatio) / tmpModel.KittingQty; }
          else
          {
            tmpStock = GetChildQty(tmpInvItemDTO.QtyAvailPrismCalt, bomRatio) / tmpModel.KittingQty;
            lowestPrsmLthrQty = (tmpStock < lowestPrsmLthrQty ? tmpStock : lowestPrsmLthrQty);
          }
        }*/
        if (tmpInvItemDTO != null && tmpInvItemDTO.QtyAvailZinusTracy >= qtyLimit)
        {
          zinusTracyCnt++;
          if (i == 0) { lowestZinusTracyQty = GetChildQty(tmpInvItemDTO.QtyAvailZinusTracy, bomRatio) / tmpModel.KittingQty; }
          else
          {
            tmpStock = GetChildQty(tmpInvItemDTO.QtyAvailZinusTracy, bomRatio) / tmpModel.KittingQty;
            lowestZinusTracyQty = (tmpStock < lowestZinusTracyQty ? tmpStock : lowestZinusTracyQty);
          }
        }
        if (tmpInvItemDTO != null && tmpInvItemDTO.QtyAvailZinusChs >= qtyLimit)
        {
          zinusChsCnt++;
          if (i == 0) { lowestZinusChsQty = GetChildQty(tmpInvItemDTO.QtyAvailZinusChs, bomRatio) / tmpModel.KittingQty; }
          else
          {
            tmpStock = GetChildQty(tmpInvItemDTO.QtyAvailZinusChs, bomRatio) / tmpModel.KittingQty;
            lowestZinusChsQty = (tmpStock < lowestZinusChsQty ? tmpStock : lowestZinusChsQty);
          }
        }
        //});
      }
      // Cannot make into set, then return null
      //  && swcaftCnt < setBomList.Count && prsmStktnCnt < setBomList.Count && prsmLthrCnt < setBomList.Count && 
      if (bancCnt < setBomList.Count && mainslCnt < setBomList.Count && bascCnt < setBomList.Count &&
        zinusTracyCnt < setBomList.Count && zinusChsCnt < setBomList.Count)
      { return null; }

      int stock = 0; //childQty = 0, 
      //foreach (Bom tmpBomModel in setBomList)
      Parallel.ForEach(setBomList, tmpBomModel =>
      {
        tmpInvItemDTO = resInvItems.FindLast(iv => iv.ItemNoId == tmpBomModel.ChildItemId);
        /*if (bancCnt == setBomList.Count && tmpInvItemDTO != null) // For BANC
        {
          //if (tmpInvItemDTO.ItemNoId == 1243)
          //{ Console.WriteLine("Hell");}
          //childQty = GetChildQty(tmpInvItemDTO.QtyAvailBanc, bomRatio);
          if (tmpBomModel.KittingQty > 1) { stock = lowestBancQty * tmpBomModel.KittingQty; }
          else { stock = lowestBancQty; }

          tmpInvItemDTO.QtyAvailBanc = tmpInvItemDTO.QtyAvailBanc - stock;
          tmpInvItemDTO.isChildSet = true;

          result.QtyAvailBanc = stock;
          //if (childQty > result.QtyAvailBanc) result.QtyAvailBanc = childQty;
        }*/
        if (mainslCnt == setBomList.Count && tmpInvItemDTO != null) // For Mainsl
        {
          //childQty = GetChildQty(tmpInvItemDTO.QtyAvailMainsl, bomRatio);
          if (tmpBomModel.KittingQty > 1) { stock = lowestMainslQty * tmpBomModel.KittingQty; }
          else { stock = lowestMainslQty; }

          tmpInvItemDTO.QtyAvailMainsl = tmpInvItemDTO.QtyAvailMainsl - stock;
          tmpInvItemDTO.isChildSet = true;
          result.QtyAvailMainsl = stock;
          //if (childQty > result.QtyAvailMainsl) result.QtyAvailMainsl = childQty;
        }
        //else return null; // Just Banc & Mainsl
        /*
        if (swcaftCnt == setBomList.Count && tmpInvItemDTO != null) // For Mainsl
        {
          //childQty = GetChildQty(tmpInvItemDTO.QtyAvailMainsl, bomRatio);
          if (tmpBomModel.KittingQty > 1) { stock = lowestSwcaftQty * tmpBomModel.KittingQty; }
          else { stock = lowestSwcaftQty; }

          tmpInvItemDTO.QtyAvailSwcaft = tmpInvItemDTO.QtyAvailSwcaft - stock;
          tmpInvItemDTO.isChildSet = true;
          result.QtyAvailSwcaft = stock;
          //if (childQty > result.QtyAvailMainsl) result.QtyAvailMainsl = childQty;
        }*/

        /*if (bascCnt == setBomList.Count && tmpInvItemDTO != null) // For Mainsl
        {
          //childQty = GetChildQty(tmpInvItemDTO.QtyAvailMainsl, bomRatio);
          if (tmpBomModel.KittingQty > 1) { stock = lowestBascQty * tmpBomModel.KittingQty; }
          else { stock = lowestBascQty; }

          tmpInvItemDTO.QtyAvailBasc = tmpInvItemDTO.QtyAvailBasc - stock;
          tmpInvItemDTO.isChildSet = true;
          result.QtyAvailBasc = stock;
          //if (childQty > result.QtyAvailMainsl) result.QtyAvailMainsl = childQty;
        }*/
        /*
        if (prsmStktnCnt == setBomList.Count && tmpInvItemDTO != null) // For Mainsl
        {
          //childQty = GetChildQty(tmpInvItemDTO.QtyAvailMainsl, bomRatio);
          if (tmpBomModel.KittingQty > 1) { stock = lowestPrsmStktnQty * tmpBomModel.KittingQty; }
          else { stock = lowestPrsmStktnQty; }

          tmpInvItemDTO.QtyAvailPrismCast = tmpInvItemDTO.QtyAvailPrismCast - stock;
          tmpInvItemDTO.isChildSet = true;
          result.QtyAvailPrismCast = stock;
          //if (childQty > result.QtyAvailMainsl) result.QtyAvailMainsl = childQty;
        }

        if (prsmLthrCnt == setBomList.Count && tmpInvItemDTO != null) // For Mainsl
        {
          //childQty = GetChildQty(tmpInvItemDTO.QtyAvailMainsl, bomRatio);
          if (tmpBomModel.KittingQty > 1) { stock = lowestPrsmLthrQty * tmpBomModel.KittingQty; }
          else { stock = lowestPrsmLthrQty; }

          tmpInvItemDTO.QtyAvailPrismCalt = tmpInvItemDTO.QtyAvailPrismCalt - stock;
          tmpInvItemDTO.isChildSet = true;
          result.QtyAvailPrismCalt = stock;
          //if (childQty > result.QtyAvailMainsl) result.QtyAvailMainsl = childQty;
        }
        */
        if (zinusTracyCnt == setBomList.Count && tmpInvItemDTO != null) // For Mainsl
        {
          //childQty = GetChildQty(tmpInvItemDTO.QtyAvailMainsl, bomRatio);
          if (tmpBomModel.KittingQty > 1) { stock = lowestZinusTracyQty * tmpBomModel.KittingQty; }
          else { stock = lowestZinusTracyQty; }

          tmpInvItemDTO.QtyAvailZinusTracy = tmpInvItemDTO.QtyAvailZinusTracy - stock;
          tmpInvItemDTO.isChildSet = true;
          result.QtyAvailZinusTracy = stock;
          //if (childQty > result.QtyAvailMainsl) result.QtyAvailMainsl = childQty;
        }

        if (zinusChsCnt == setBomList.Count && tmpInvItemDTO != null) // For Mainsl
        {
          //childQty = GetChildQty(tmpInvItemDTO.QtyAvailMainsl, bomRatio);
          if (tmpBomModel.KittingQty > 1) { stock = lowestZinusChsQty * tmpBomModel.KittingQty; }
          else { stock = lowestZinusChsQty; }

          tmpInvItemDTO.QtyAvailZinusChs = tmpInvItemDTO.QtyAvailZinusChs - stock;
          tmpInvItemDTO.isChildSet = true;
          result.QtyAvailZinusChs = stock;
          //if (childQty > result.QtyAvailMainsl) result.QtyAvailMainsl = childQty;
        }

      });

      return result;
    }

    public int GetChildQty(int stockQty, double bomRatio)
    {
      return (stockQty % 10 == 0 ? stockQty / 10 : (int)Math.Ceiling((double)stockQty * bomRatio - 1));
    }

    // By Brian Yi on 05/20/2021
    // Not using anymore; Depreciated
    public async Task<List<GetMainslBancInvItemDTO>> GetAdvInv(DateTime today)
    {
      return null;
      /*
      // For test
      string strDate = "May 10, 2021";
      today = DateTime.Parse(strDate);

      today = await GetLatestDateTimeOfInvRealTimeTable(today);

      //List<GetMainslBancInvItemDTO> serviceResponse = new List<GetMainslBancInvItemDTO>();

      // Get all items from real-time(?) inventory
      List<InvRealTime> qryInvRealTime = await _kc.InvRealTimes
        .Include(irt => irt.ItemNo)
        .Include(irt => irt.Location)
        .Where(irt => irt.TimeRecord.CompareTo(today) == 0)
        .Where(irt => irt.LocationId == 4 || irt.LocationId == 25)
        .ToListAsync();

      // Get items in NetSuite
      List<int> itemNoIdFromNetSuite = qryInvRealTime
        .Select(irt => irt.ItemNoId)
        .Distinct()
        .ToList();

      // Loading Notes And Rules for items
      List<NotesAndRule> qryNotesAndRules = await _kc.NotesAndRules
        .Include(nr => nr.NoteCategoryNavigation)
        .Where(nr => nr.IsActivated == true)
        .ToListAsync();

      List<GetMainslBancInvItemDTO> serviceResponse = itemNoIdFromNetSuite.Select(idi =>
      new GetMainslBancInvItemDTO()
      {
        ItemNoId = idi
      }).ToList();

      // List<InvFeedsItem> invFeedsItemList = new List<InvFeedsItem>();
      List<InvFeedsItemLocQty> invFeedsItemLocQtyList = new List<InvFeedsItemLocQty>();

      int index = 0;
      while (index < serviceResponse.Count)
      {
        InvRealTime tmpModel = qryInvRealTime.Find(x => x.ItemNoId == serviceResponse[index].ItemNoId);
        if ((tmpModel != null) && (tmpModel.ItemNo.ItemName != ""))
        {
          // Need to fix
          InvFeedsItem invFeedsItem = await _kc.InvFeedsItems
            .Where(x => ((DateTime)x.CreatedTime).Date.CompareTo(DateTime.Now) == 0 && x.ItemNoId == tmpModel.ItemNoId)
            .FirstOrDefaultAsync();

          if (invFeedsItem == null)
          {
            invFeedsItem = new InvFeedsItem
            {
              ItemNoId = tmpModel.ItemNoId,
            };
            //invFeedsItemList.Add(invFeedsItem);
            await _kc.InvFeedsItems.AddAsync(invFeedsItem);
            await _kc.SaveChangesAsync();
          }
          InvFeedsItemLocQty invFeedsItemLocQty = new InvFeedsItemLocQty
          {
            InvFeedsItemId = invFeedsItem.InvFeedsItemId, // Give it a relationship.
            ItemLocId = tmpModel.LocationId,
            QtyAvail = tmpModel.QtyAvail,
            QtyOnHand = tmpModel.QtyOnHand
          };
          invFeedsItemLocQtyList.Add(invFeedsItemLocQty);
          serviceResponse[index].ItemName = tmpModel.ItemNo.ItemName;
          if (tmpModel.LocationId == 4) //BANC
          {
            serviceResponse[index].QtyAvailBanc = tmpModel.QtyAvail;
            serviceResponse[index].QtyOnHandBanc = tmpModel.QtyOnHand;
            serviceResponse[index].InvBANCItemId = tmpModel.InvRealTimeId;
          }
          else if (tmpModel.LocationId == 25) //Mainsl
          {
            serviceResponse[index].QtyAvailMainsl = tmpModel.QtyAvail;
            serviceResponse[index].QtyOnHandMainsl = tmpModel.QtyOnHand;
            serviceResponse[index].InvMainslItemId = tmpModel.InvRealTimeId;
          }
          NotesAndRule tmpNaR = qryNotesAndRules.Find(x => x.ItemNoId == serviceResponse[index].ItemNoId);
          if (tmpNaR != null)
          {
            serviceResponse[index].Remark = tmpNaR.RemarkNavigation.RemarkCategory;
          }
          else
          {
            serviceResponse[index].Remark = "";
          }
          serviceResponse[index].InventoryItemId = invFeedsItem.InvFeedsItemId;
          index++;
        }
        else
        {
          serviceResponse.RemoveAt(index);
        }
      }
      //_kc.BulkInsert(invFeedsItemList);
      _kc.BulkInsert(invFeedsItemLocQtyList);
      return serviceResponse;
      */
    }

    // Including BOM(set)
    // Not using; Depreciated
    public async Task<List<GetMainslBancInvItemDTO>> GetAllMainslBancInv(DateTime today)
    {
      return null;
      // For test
      // string strDate = "May 10, 2021";
      //today = DateTime.Parse(strDate);

      //today = await GetLatestDateTimeOfInvRealTimeTable(today);
      // Need to fix!!!
      /*
      InvFeedsItem tmpItem = await _kc.InvFeedsItems
        .OrderByDescending(x => x.UsedDataDateTime)
        .FirstOrDefaultAsync();
      List<GetMainslBancInvItemDTO> serviceResponse = new List<GetMainslBancInvItemDTO>();
      if (today.Date.CompareTo(tmpItem.UsedDataDateTime.Value.Date) == 0)
      { // Just load today's data from db
        serviceResponse = await LoadAllMainslBancInvFromDB(today);
      }
      else if ((today.Date.CompareTo(tmpItem.UsedDataDateTime.Value.Date) != 0) && (today.Hour < 16))
      { // Need to load yesterday's data from db bc'today' is not 4:00PM over yet
        serviceResponse = await LoadAllMainslBancInvFromDB(today.AddDays(-1));
      }
      else
      {// Need to create data 
        serviceResponse = await CreateAllMainslBancInvItems(today);
      }

      return serviceResponse;*/
    }


    // ??
    public async Task<List<GetMainslBancInvItemDTO>> LoadAllMainslBancInvFromDB(InvFeedsReport invFeedsReport)
    {

      List<GetMainslBancInvItemDTO> serviceResponse = new List<GetMainslBancInvItemDTO>();
      List<InvFeedsItem> invFeedsItems = await _kc.InvFeedsItems
        .Where(i => i.InvFeedsReportId == invFeedsReport.InvFeedsReportId)
        .Include(i => i.InvFeedsItemLocQties)
        .Include(i => i.ItemNo)
        .ToListAsync();
      /*
      foreach (InvFeedsItem tmpDto in invFeedsItems)
      {
        GetMainslBancInvItemDTO tmpItem =new GetMainslBancInvItemDTO() { };
          
          
            tmpItem.InventoryItemId = tmpDto.InvFeedsItemId;
            tmpItem.ItemNoId = (int)tmpDto.ItemNoId;
            tmpItem.ItemName = tmpDto.ItemNo.ItemName;
            tmpItem.QtyOnHandMainsl = (tmpDto.InvFeedsItemLocQties.Where(x => x.ItemLocId == 25).FirstOrDefault() != null ? (int)tmpDto.InvFeedsItemLocQties.Where(x => x.ItemLocId == 25).FirstOrDefault().QtyOnHand : 0);
            tmpItem.QtyAvailMainsl = (tmpDto.InvFeedsItemLocQties.Where(x => x.ItemLocId == 25).FirstOrDefault() != null ? (int)tmpDto.InvFeedsItemLocQties.Where(x => x.ItemLocId == 25).FirstOrDefault().QtyAvail : 0);
            tmpItem.QtyOnHandBanc = (tmpDto.InvFeedsItemLocQties.Where(x => x.ItemLocId == 4).FirstOrDefault() != null ? (int)tmpDto.InvFeedsItemLocQties.Where(x => x.ItemLocId == 4).FirstOrDefault().QtyOnHand : 0);
            tmpItem.QtyAvailBanc = (tmpDto.InvFeedsItemLocQties.Where(x => x.ItemLocId == 4).FirstOrDefault() != null ? (int)tmpDto.InvFeedsItemLocQties.Where(x => x.ItemLocId == 4).FirstOrDefault().QtyAvail : 0);
            tmpItem.InvBANCItemId = 0;
            tmpItem.InvMainslItemId = 0;
            tmpItem.CreatedTime = (invFeedsReport.CreatedDate != null ? (DateTime)invFeedsReport.CreatedDate : DateTime.Now);
            tmpItem.Remark = (tmpDto.IsSet != null ? (tmpDto.IsSet == true ? "Set" : "") : "");
          

      }*/


      serviceResponse = invFeedsItems.Select(ifr =>
       new GetMainslBancInvItemDTO()
       {
         InventoryItemId = ifr.InvFeedsItemId,
         ItemNoId = (int)ifr.ItemNoId,
         ItemName = ifr.ItemNo.ItemName,
         QtyOnHandMainsl = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == 25).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == 25).FirstOrDefault().QtyOnHand != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == 25).FirstOrDefault().QtyOnHand : 0) : 0),
         QtyAvailMainsl = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == 25).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == 25).FirstOrDefault().QtyAvail != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == 25).FirstOrDefault().QtyAvail : 0) : 0),
         QtyOnHandBanc = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == 4).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == 4).FirstOrDefault().QtyOnHand != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == 4).FirstOrDefault().QtyOnHand : 0) : 0),
         QtyAvailBanc = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == 4).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == 4).FirstOrDefault().QtyAvail != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == 4).FirstOrDefault().QtyAvail : 0) : 0),
         InvBANCItemId = 0,
         InvMainslItemId = 0,
         CreatedTime = (invFeedsReport.CreatedDate != null ? (DateTime)invFeedsReport.CreatedDate : DateTime.Now),
         Remark = (ifr.IsSet != null ? (ifr.IsSet == true ? "Set" : "") : "")
       }).ToList();

      // Adding remarks
      List<InvFeedsRemark> invFeedsRemarks = await _kc.InvFeedsRemarks
        .Where(i => i.IsActivated == true)
        .Include(i => i.InvFeedsRmrkCtgry)
        .ToListAsync();

      foreach (InvFeedsRemark tmpDto in invFeedsRemarks)
      {
        GetMainslBancInvItemDTO tmpItem = serviceResponse.Find(i => i.ItemNoId == tmpDto.ItemNoId);
        if (tmpItem != null)
        {
          if (tmpItem.Remark == "") tmpItem.Remark = tmpDto.InvFeedsRmrkCtgry.CategoryName;
          else tmpItem.Remark = tmpItem.Remark + ", " + tmpDto.InvFeedsRmrkCtgry.CategoryName;
        }
      }

      return serviceResponse;
    }

    // Load all stock in warehouses
    // By Brian Yi on 11/16/2021
    // Modified on 4/22/2024 by Brian Yi for removing Swcaft, Prism Cast, Prism Calt
    public async Task<List<GetMainslBancInvItemDTO>> LoadAllWarehousesInvFromDB(InvFeedsReport invFeedsReport)
    {

      List<GetMainslBancInvItemDTO> serviceResponse = new List<GetMainslBancInvItemDTO>();
      List<InvFeedsItem> invFeedsItems = await _kc.InvFeedsItems
        .Where(i => i.InvFeedsReportId == invFeedsReport.InvFeedsReportId)
        .Include(i => i.InvFeedsItemLocQties)
        .Include(i => i.ItemNo)
        .ToListAsync();

      int invMainsl = 25, invZinusTracy = 57, invZinusChs = 108; //invSwcaft = 54, invPrismCast = 51, invPrismCalt = 67, invBanc = 4, invBasc = 62, 
      /*
      serviceResponse = invFeedsItems.Select(ifr =>
       new GetMainslBancInvItemDTO()
       {
         InventoryItemId = ifr.InvFeedsItemId,
         ItemNoId = (int)ifr.ItemNoId,
         ItemName = ifr.ItemNo.ItemName,
         QtyOnHandMainsl = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault().QtyOnHand != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault().QtyOnHand : 0) : 0),
         QtyAvailMainsl = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault().QtyAvail != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault().QtyAvail : 0) : 0),
         QtyOnHandBanc = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault().QtyOnHand != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault().QtyOnHand : 0) : 0),
         QtyAvailBanc = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault().QtyAvail != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault().QtyAvail : 0) : 0),
         QtyOnHandSwcaft = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault().QtyOnHand != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault().QtyOnHand : 0) : 0),
         QtyAvailSwcaft = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault().QtyAvail != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault().QtyAvail : 0) : 0),
         QtyOnHandBasc = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault().QtyOnHand != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault().QtyOnHand : 0) : 0),
         QtyAvailBasc = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault().QtyAvail != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault().QtyAvail : 0) : 0),
         StagePOOrigBanc = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault().StagePoqtyOrig != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault().StagePoqtyOrig : 0) : 0),
         StagePOOrigBanc90 = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault().StagePoqty90 != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault().StagePoqty90 : 0) : 0),
         StagePOModBanc = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault().StagePoqtyModified != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault().StagePoqtyModified : 0) : 0),
         StagePOOrigBasc = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault().StagePoqtyOrig != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault().StagePoqtyOrig : 0) : 0),
         StagePOOrigBasc90 = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault().StagePoqty90 != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault().StagePoqty90 : 0) : 0),
         StagePOModBasc = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault().StagePoqtyModified != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault().StagePoqtyModified : 0) : 0),
         StagePOOrigMainsl = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault().StagePoqtyOrig != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault().StagePoqtyOrig : 0) : 0),
         StagePOOrigMainsl90 = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault().StagePoqty90 != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault().StagePoqty90 : 0) : 0),
         StagePOModMainsl = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault().StagePoqtyModified != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault().StagePoqtyModified : 0) : 0),
         StagePOOrigSwcaft = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault().StagePoqtyOrig != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault().StagePoqtyOrig : 0) : 0),
         StagePOOrigSwcaft90 = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault().StagePoqty90 != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault().StagePoqty90 : 0) : 0),
         StagePOModSwcaft = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault() != null ?
         (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault().StagePoqtyModified != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault().StagePoqtyModified : 0) : 0),
         InvBANCItemId = 0,
         InvMainslItemId = 0,
         CreatedTime = (invFeedsReport.CreatedDate != null ? (DateTime)invFeedsReport.CreatedDate : DateTime.Now),
         Remark = (ifr.IsSet != null ? (ifr.IsSet == true ? "Set" : "") : "")
       }).ToList();
      */
      serviceResponse = invFeedsItems.Select(ifr =>
      new GetMainslBancInvItemDTO()
      {
        InventoryItemId = ifr.InvFeedsItemId,
        ItemNoId = (int)ifr.ItemNoId,
        ItemName = ifr.ItemNo.ItemName,
        QtyOnHandMainsl = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault() != null ?
        (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault().QtyOnHand != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault().QtyOnHand : 0) : 0),
        QtyAvailMainsl = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault() != null ?
        (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault().QtyAvail != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault().QtyAvail : 0) : 0),
        //QtyOnHandBanc = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault().QtyOnHand != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault().QtyOnHand : 0) : 0),
        //QtyAvailBanc = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault().QtyAvail != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault().QtyAvail : 0) : 0),
        //QtyOnHandSwcaft = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault().QtyOnHand != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault().QtyOnHand : 0) : 0),
        //QtyAvailSwcaft = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault().QtyAvail != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault().QtyAvail : 0) : 0),
        //QtyOnHandBasc = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault().QtyOnHand != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault().QtyOnHand : 0) : 0),
        //QtyAvailBasc = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault().QtyAvail != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault().QtyAvail : 0) : 0),
        //QtyOnHandPrismCast = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCast).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCast).FirstOrDefault().QtyOnHand != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCast).FirstOrDefault().QtyOnHand : 0) : 0),
        //QtyAvailPrismCast = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCast).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCast).FirstOrDefault().QtyAvail != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCast).FirstOrDefault().QtyAvail : 0) : 0),
        //QtyOnHandPrismCalt = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCalt).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCalt).FirstOrDefault().QtyOnHand != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCalt).FirstOrDefault().QtyOnHand : 0) : 0),
        //QtyAvailPrismCalt = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCalt).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCalt).FirstOrDefault().QtyAvail != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCalt).FirstOrDefault().QtyAvail : 0) : 0),
        QtyOnHandZinusTracy = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusTracy).FirstOrDefault() != null ?
        (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusTracy).FirstOrDefault().QtyOnHand != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusTracy).FirstOrDefault().QtyOnHand : 0) : 0),
        QtyAvailZinusTracy = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusTracy).FirstOrDefault() != null ?
        (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusTracy).FirstOrDefault().QtyAvail != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusTracy).FirstOrDefault().QtyAvail : 0) : 0),
        QtyOnHandZinusChs = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusChs).FirstOrDefault() != null ?
        (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusChs).FirstOrDefault().QtyOnHand != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusChs).FirstOrDefault().QtyOnHand : 0) : 0),
        QtyAvailZinusChs = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusChs).FirstOrDefault() != null ?
        (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusChs).FirstOrDefault().QtyAvail != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusChs).FirstOrDefault().QtyAvail : 0) : 0),
        //StagePOOrigBanc60 = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault().StagePoqty60 != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault().StagePoqty60 : 0) : 0),
        //StagePOOrigBanc90 = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault().StagePoqty90 != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault().StagePoqty90 : 0) : 0),
        //StagePOModBanc = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault().StagePoqtyModified != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBanc).FirstOrDefault().StagePoqtyModified : 0) : 0),
        //StagePOOrigBasc60 = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault().StagePoqty60 != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault().StagePoqty60 : 0) : 0),
        //StagePOOrigBasc90 = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault().StagePoqty90 != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault().StagePoqty90 : 0) : 0),
        //StagePOModBasc = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault().StagePoqtyModified != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invBasc).FirstOrDefault().StagePoqtyModified : 0) : 0),
        StagePOOrigMainsl60 = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault() != null ?
        (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault().StagePoqty60 != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault().StagePoqty60 : 0) : 0),
        StagePOOrigMainsl90 = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault() != null ?
        (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault().StagePoqty90 != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault().StagePoqty90 : 0) : 0),
        StagePOModMainsl = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault() != null ?
        (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault().StagePoqtyModified != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invMainsl).FirstOrDefault().StagePoqtyModified : 0) : 0),
        //StagePOOrigSwcaft60 = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault().StagePoqty60 != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault().StagePoqty60 : 0) : 0),
        //StagePOOrigSwcaft90 = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault().StagePoqty90 != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault().StagePoqty90 : 0) : 0),
        //StagePOModSwcaft = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault().StagePoqtyModified != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invSwcaft).FirstOrDefault().StagePoqtyModified : 0) : 0),
        //StagePOOrigPrismCast60 = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCast).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCast).FirstOrDefault().StagePoqty60 != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCast).FirstOrDefault().StagePoqty60 : 0) : 0),
        //StagePOOrigPrismCast90 = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCast).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCast).FirstOrDefault().StagePoqty90 != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCast).FirstOrDefault().StagePoqty90 : 0) : 0),
        //StagePOOrigPrismCast = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCast).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCast).FirstOrDefault().StagePoqtyModified != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCast).FirstOrDefault().StagePoqtyModified : 0) : 0),
        //StagePOOrigPrismCalt60 = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCalt).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCalt).FirstOrDefault().StagePoqty60 != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCalt).FirstOrDefault().StagePoqty60 : 0) : 0),
        //StagePOOrigPrismCalt90 = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCalt).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCalt).FirstOrDefault().StagePoqty90 != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCalt).FirstOrDefault().StagePoqty90 : 0) : 0),
        //StagePOOrigPrismCalt = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCalt).FirstOrDefault() != null ?
        //(ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCalt).FirstOrDefault().StagePoqtyModified != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invPrismCalt).FirstOrDefault().StagePoqtyModified : 0) : 0),
        StagePOOrigZinusTracy60 = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusTracy).FirstOrDefault() != null ?
        (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusTracy).FirstOrDefault().StagePoqty60 != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusTracy).FirstOrDefault().StagePoqty60 : 0) : 0),
        StagePOOrigZinusTracy90 = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusTracy).FirstOrDefault() != null ?
        (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusTracy).FirstOrDefault().StagePoqty90 != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusTracy).FirstOrDefault().StagePoqty90 : 0) : 0),
        StagePOOrigZinusTracy = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusTracy).FirstOrDefault() != null ?
        (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusTracy).FirstOrDefault().StagePoqtyModified != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusTracy).FirstOrDefault().StagePoqtyModified : 0) : 0),
        StagePOOrigZinusChs60 = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusChs).FirstOrDefault() != null ?
        (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusChs).FirstOrDefault().StagePoqty60 != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusChs).FirstOrDefault().StagePoqty60 : 0) : 0),
        StagePOOrigZinusChs90 = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusChs).FirstOrDefault() != null ?
        (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusChs).FirstOrDefault().StagePoqty90 != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusChs).FirstOrDefault().StagePoqty90 : 0) : 0),
        StagePOOrigZinusChs = (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusChs).FirstOrDefault() != null ?
        (ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusChs).FirstOrDefault().StagePoqtyModified != null ? (int)ifr.InvFeedsItemLocQties.Where(x => x.ItemLocId == invZinusChs).FirstOrDefault().StagePoqtyModified : 0) : 0),
        InvBANCItemId = 0,
        InvMainslItemId = 0,
        CreatedTime = (invFeedsReport.CreatedDate != null ? (DateTime)invFeedsReport.CreatedDate : DateTime.Now),
        Remark = (ifr.IsSet != null ? (ifr.IsSet == true ? "Set" : "") : "")
      }).ToList();

      // Adding remarks
      List<InvFeedsRemark> invFeedsRemarks = await _kc.InvFeedsRemarks
        .Where(i => i.IsActivated == true)
        .Include(i => i.InvFeedsRmrkCtgry)
        .ToListAsync();

      foreach (InvFeedsRemark tmpDto in invFeedsRemarks)
      {
        GetMainslBancInvItemDTO tmpItem = serviceResponse.Find(i => i.ItemNoId == tmpDto.ItemNoId);
        if (tmpItem != null)
        {
          if (tmpItem.Remark == "") tmpItem.Remark = tmpDto.InvFeedsRmrkCtgry.CategoryName;
          else tmpItem.Remark = tmpItem.Remark + ", " + tmpDto.InvFeedsRmrkCtgry.CategoryName;
        }
      }
      foreach (GetMainslBancInvItemDTO tmpDto in serviceResponse)
      {
        if (tmpDto.QtyAvailPrismCalt > 0)
        { Console.WriteLine("Ere!"); }
        if (tmpDto.QtyAvailPrismCast > 0)
        { Console.WriteLine("Ere!"); }
      }

      return serviceResponse;
    }





    public async Task<List<GetMainslBancInvItemDTO>> CreateAllMainslBancInvItems(DateTime today)
    {
      List<GetMainslBancInvItemDTO> serviceResponse = new List<GetMainslBancInvItemDTO>();
      return serviceResponse;
    }

    // Update Inventory Item
    // By Brian Yi on 04/23/2021
    public async Task<ServiceResponse<GetInventoryItemDTO>> UpdateInventoryItem(UpdateInventoryItemDTO updateInventoryItem)
    {
      ServiceResponse<GetInventoryItemDTO> serviceResponse = new ServiceResponse<GetInventoryItemDTO>();
      try
      {
        BpmBegInventory bbi = await _kc.BpmBegInventories
          .FirstOrDefaultAsync(b => b.BegInvId == updateInventoryItem.InventoryItemId);
        if (bbi != null)
        {
          bbi.QtyAvail = updateInventoryItem.QtyAvail;
          bbi.QtyOnHand = updateInventoryItem.QtyOnHand;

          _kc.BpmBegInventories.Update(bbi);
          await _kc.SaveChangesAsync();

          serviceResponse.Data = new GetInventoryItemDTO()
          {
            InventoryItemId = bbi.BegInvId,
            ItemNoId = bbi.ItemNoId,
            ItemName = updateInventoryItem.ItemName,
            QtyOnHand = bbi.QtyOnHand,
            QtyAvail = (int)bbi.QtyAvail,
            LocName = updateInventoryItem.LocName
          };
        }
        else
        {
          serviceResponse.Success = false;
          serviceResponse.Message = "Inventory item not found.";
        }
      }
      catch (Exception ex)
      {
        serviceResponse.Success = false;
        serviceResponse.Message = ex.Message;
      }
      return serviceResponse;
    }

    // Get All Notes for Available Inventory(Mainsl & Banc Inventory)
    // Just pass Notes Category: that is 1
    // By Brian Yi on 05/07/2021
    public async Task<List<GetAvailableInventoryNotesDTO>> GetAllAvailableInventoryNotesRules(int noteCategory)
    {

      List<NotesAndRule> nar = await _kc.NotesAndRules
        .Include(nr => nr.CreatedByNavigation)
        .Include(nr => nr.LastModifiedByNavigation)
        .Where(nr => nr.NoteCategory == noteCategory)
        .ToListAsync();

      List<GetAvailableInventoryNotesDTO> serviceResponse = nar.Select(nr =>
       new GetAvailableInventoryNotesDTO()
       {
         NotesRulesId = nr.NotesAndRulesId,
         isActivated = (nr.IsActivated ?? false),
         CreatedBy = (nr.CreatedByNavigation != null ? nr.CreatedByNavigation.LoginId : ""),
         CreatedTime = (nr.CreatedTime.HasValue ? ((DateTime)nr.CreatedTime).ToString("MM/dd/yyyy h:mm") : "Not Available"),
         LastModifiedBy = (nr.LastModifiedByNavigation != null ? nr.LastModifiedByNavigation.LoginId : ""),
         LastModifiedTime = (nr.LastModifiedTime.HasValue ? ((DateTime)nr.LastModifiedTime).ToString("MM/dd/yyyy h:mm") : "Not Available"),
         NoteRule = nr.NoteRule,
         RemarkCategory = (nr.NoteCategoryNavigation != null ? nr.NoteCategoryNavigation.RemarkCategory : ""),
         NoteCategory = (int)nr.NoteCategory
       }
     ).ToList();
      return serviceResponse;
    }

    public async Task<List<GetInventoryFeedMarketRule>> GetAvailableInvFeedRules()
    {
      List<InvFeedsRule> ifr = await _kc.InvFeedsRules
        .Include(ifr => ifr.Customer)
        .Include(ifr => ifr.LastModifiedByNavigation)
        .Where(ifr => ifr.IsActivated == true)
        .ToListAsync();

      List<GetInventoryFeedMarketRule> serviceResponse = ifr.Select(fr =>
      new GetInventoryFeedMarketRule()
      {
        InvFeedRuleId = fr.InvFeedRuleId,
        CustomerId = (int)fr.CustomerId,
        CustomerName = fr.Customer.CustName,
        ZeroOutAt = (fr.ZeroOutAt != null ? (int)fr.ZeroOutAt : 0),
        CustomFeedRatio = (fr.CustomFeedRatio != null ? (int)fr.CustomFeedRatio : 0),
        CustomFeedRatioText = (fr.CustomFeedRatio > 0 ? (fr.CustomFeedRatio + "%") : "None"),
        IsActivated = (bool)fr.IsActivated,
        LastModifiedBy = (fr.LastModifiedByNavigation != null ? fr.LastModifiedByNavigation.EmployeeName : fr.LastModifiedByNavigation.LoginId),
        LastModifiedTime = (DateTime)(fr.LastModifiedTime.HasValue ? fr.LastModifiedTime.Value : DateTime.Now),
      }).ToList();

      return serviceResponse;
    }

    // Get a certain Note for Available Inventory(Mainsl & Banc Inventory)
    // Just pass id
    // By Brian Yi on 05/07/2021
    public async Task<GetAvailableInventoryNotesDTO> GetAvailableInventoryNotesRules(int id)
    {

      NotesAndRule nar = await _kc.NotesAndRules
        .Where(nr => nr.NotesAndRulesId == id)
        .Include(nr => nr.NoteCategoryNavigation)
        .Include(nr => nr.CreatedByNavigation)
        .Include(nr => nr.LastModifiedByNavigation)
        .FirstOrDefaultAsync();

      // From byte[] to long
      // This will be Datetime data type
      //long getDateLong = BitConverter.ToInt64(nar.LastModifiedTime, 0);

      GetAvailableInventoryNotesDTO serviceResponse = new GetAvailableInventoryNotesDTO
      {
        NotesRulesId = nar.NotesAndRulesId,
        isActivated = (nar.IsActivated ?? false),
        CreatedBy = (nar.CreatedByNavigation != null ? nar.CreatedByNavigation.LoginId : ""),
        CreatedTime = (nar.CreatedTime.HasValue ? ((DateTime)nar.CreatedTime).ToString("MM/dd/yyyy h:mm") : "Not Available"),
        LastModifiedBy = (nar.LastModifiedByNavigation != null ? nar.LastModifiedByNavigation.LoginId : ""),
        LastModifiedTime = (nar.LastModifiedTime.HasValue ? ((DateTime)nar.LastModifiedTime).ToString("MM/dd/yyyy h:mm") : "Not Available"),
        NoteRule = nar.NoteRule,
        RemarkCategory = (nar.NoteCategoryNavigation != null ? nar.NoteCategoryNavigation.RemarkCategory : ""),
        NoteCategory = (int)nar.NoteCategory
      };
      return serviceResponse;
    }

    public async Task<List<GetInventoryItemDTO>> GetAllInventory(DateTime today)
    {

      // For test
      string strDate = "May 10, 2021";
      today = DateTime.Parse(strDate);
      //var today = DateTime.Today;
      //ServiceResponse<List<GetInventoryItemDTO>> serviceResponse = new ServiceResponse<List<GetInventoryItemDTO>>();

      List<GetInventoryItemDTO> serviceResponse = new List<GetInventoryItemDTO>();

      List<BpmItem> qryItems = await _kc.BpmItems.ToListAsync();

      serviceResponse = qryItems.Select(bi =>
        new GetInventoryItemDTO()
        {
          ItemNoId = bi.ItemNoId,
          ItemName = bi.ItemName,
          InventoryItemId = -1,
          NsIntId = (int)((bi.NsIntId == null) ? -1 : bi.NsIntId)
        }
      ).ToList();

      List<InvRealTime> invRealTime = await GetRealTimeInventory(today);
      foreach (InvRealTime wDto in invRealTime)
      {
        GetInventoryItemDTO tmpDto = serviceResponse.Find(x => x.ItemNoId == wDto.ItemNoId && x.LocName == null);
        if (tmpDto != null)
        {
          tmpDto.InventoryItemId = wDto.InvRealTimeId;
          tmpDto.QtyOnHand = wDto.QtyOnHand;
          tmpDto.QtyAvail = wDto.QtyAvail;
          tmpDto.LocName = wDto.Location.LocName;
        }
        else
        {
          tmpDto = new GetInventoryItemDTO()
          {
            ItemNoId = wDto.ItemNoId,
            ItemName = wDto.ItemNo.ItemName,
            NsIntId = (int)((wDto.ItemNo.NsIntId == null) ? -1 : wDto.ItemNo.NsIntId),
            InventoryItemId = wDto.InvRealTimeId,
            QtyOnHand = wDto.QtyOnHand,
            QtyAvail = wDto.QtyAvail,
            LocName = wDto.Location.LocName
          };
          serviceResponse.Add(tmpDto);
        }
      }
      return serviceResponse;
    }

    // Get a list of Sales History of Inventory items
    // Need two dates: start date and end date(usually today)
    // By Brian Yi on 04/30/2021
    // NEED TO REVISE!!!!!
    public async Task<List<GetInvSalesHistoryListItemDTO>> GetInvSalesHist(DateTime startDate, DateTime endDate)
    {
      // For test purpose
      /*
      string strDate01 = "January 1, 2021";
      string strDate02 = "April 28, 2021";
      startDate = DateTime.Parse(strDate01);
      endDate = DateTime.Parse(strDate02);
      */

      List<GetInvSalesHistoryListItemDTO> serviceResponse = new List<GetInvSalesHistoryListItemDTO>();
      List<BpmItem> qryItems = await _kc.BpmItems.ToListAsync();
      List<GetInvSalesHistoryListItemDTO> invSalesHist = qryItems.Select(bi =>
        new GetInvSalesHistoryListItemDTO()
        {
          ItemNoId = bi.ItemNoId,
          ItemName = bi.ItemName,
          AmazonCustSKU = "",
          AmazonDropShip = 0,
          WayfairDropShip = 0,
          WayfairCustSKU = "",
          Walmart = 0,
          WalmartCustSKU = "",
          OverstockDropShip = 0,
          OverstockCustSKU = "",
          eBay = 0,
          eBayCustSKU = "",
          BPMWeb = 0,
          Houzz = 0,
          MellowWeb = 0,
          etcMarket = 0,
          totalSalesQty = 0
        }
      ).ToList();

      // 1: Amazon Canada; 2: Amazon Direct; 4: Amazon Direct Import; 6: Amazon FBA; 7: Amazon Seller; 
      // 27: Walmart Seller; 28: Wayfair CastleGage; 31: Test Customer; 34: Wayfair UK
      List<int> notTheseCust = new List<int> { 1, 2, 4, 6, 7, 27, 28, 31, 34 };
      // I know this is bad practice, but...
      // When you add 'notTheseCust' you need add below, also!
      // Overstock SKU!!!!!!!
      List<InvD> qryInvD = await _kc.InvDs
        .Include(id => id.InvT)
        .Include(id => id.SoD)
        .Where(id => id.SoDate >= startDate && id.SoDate <= endDate)
        .OrderBy(id => id.SoDate)
        .ToListAsync();
      NsIcr tmpItem = new NsIcr();
      // Make SUM()
      foreach (InvD wMod in qryInvD)
      {
        if (!notTheseCust.Exists(x => x.Equals(wMod.InvT.CustomerId)))
        {
          GetInvSalesHistoryListItemDTO tmpDto = invSalesHist.Find(x => x.ItemNoId == wMod.ItemNoId);
          if (tmpDto != null)
          {
            tmpDto.totalSalesQty += wMod.QtyInv;
            switch (wMod.InvT.CustomerId)
            {
              case 5: // Amazon Drop Ship
                tmpDto.AmazonDropShip += wMod.QtyInv;
                tmpDto.AmazonCustSKU = wMod.SoD.CustSku;
                break;
              case 9: // BPM Website
                tmpDto.BPMWeb += wMod.QtyInv;
                break;
              case 12: // eBay
                tmpDto.eBay += wMod.QtyInv;
                tmpDto.eBayCustSKU = wMod.SoD.CustSku;
                break;
              case 14: // Houzz Drop Ship
                tmpDto.Houzz += wMod.QtyInv;
                break;
              case 18: // Mellow Website
                tmpDto.MellowWeb += wMod.QtyInv;
                break;
              case 21: // Overstock Drop Ship
                tmpDto.OverstockDropShip += wMod.QtyInv;
                tmpItem = await _kc.NsIcrs.Where(n => n.ItemNoId == wMod.SoD.ItemNoId && n.CustSku.StartsWith("OS-")).FirstOrDefaultAsync();
                if (tmpItem != null) tmpDto.OverstockCustSKU = tmpItem.CustSku;//wMod.SoD.CustSku;
                else tmpDto.OverstockCustSKU = wMod.SoD.CustSku;
                break;
              case 26: // Walmart DSV
                tmpDto.Walmart += wMod.QtyInv; //
                tmpItem = await _kc.NsIcrs.Where(n => n.ItemNoId == wMod.SoD.ItemNoId && n.CustSku.StartsWith("WMT-")).FirstOrDefaultAsync();
                if (tmpItem != null) tmpDto.WalmartCustSKU = tmpItem.CustSku;//wMod.SoD.CustSku;
                else tmpDto.WalmartCustSKU = wMod.SoD.CustSku;
                //tmpDto.WalmartCustSKU = wMod.SoD.CustSku;
                break;
              case 29: // Wayfair Drop Ship
                tmpDto.WayfairDropShip += wMod.QtyInv;
                tmpDto.WayfairCustSKU = wMod.SoD.CustSku;
                break;
              default:
                tmpDto.etcMarket += wMod.QtyInv;
                break;
            }
          }
        }
      }
      serviceResponse = invSalesHist;

      return serviceResponse;
    }

    // Inventory Feeds; Old
    // Modified on 06/20/21
    public async Task<List<GetInventoryFeedsItemDTO>> GetInvAdvFeeds(DateTime startDate, DateTime endDate, DateTime today)
    {
      // This is new main feed
      // I am working here~~~!!!!
      // For test
      //string strDate01 = "January 1, 2021";
      //string strDate02 = "May 10, 2021";
      //startDate = DateTime.Parse(strDate01);
      //endDate = DateTime.Parse(strDate02);

      // Low Sales History Qty Check Up:
      int lowSalesHistoryQty = 20;
      // 1: Amazon Canada; 2: Amazon Direct; 4: Amazon Direct Import; 6: Amazon FBA; 7: Amazon Seller; 
      // 27: Walmart Seller; 28: Wayfair CastleGage; 31: Test Customer; 34: Wayfair UK
      List<int> notTheseCust = new List<int> { 1, 2, 4, 6, 7, 27, 28, 31, 34 };
      List<GetInventoryFeedsItemDTO> serviceResponse = new List<GetInventoryFeedsItemDTO>();

      // Get Latest Inventory (Feeds) Report
      // Try to get Today's report
      //

      DateTime beforeDate = new DateTime(today.AddDays(-1).Year, today.AddDays(-1).Month, today.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(today.AddDays(1).Year, today.AddDays(1).Month, today.AddDays(1).Day, 0, 0, 0);
      InvFeedsReport invFeedReport = await _kc.InvFeedsReports
        .Where(ifr => (DateTime)ifr.CreatedDate > beforeDate && (DateTime)ifr.CreatedDate < afterDate)
        .Include(x => x.InvFeedsItems)
        .OrderByDescending(x => x.CreatedDate)
        .FirstOrDefaultAsync();

      // If there is no today's report, return nothing.
      if (invFeedReport == null) return serviceResponse;

      // if not, then get latest one from table
      //if (invFeedReport == null) invFeedReport = await _kc.InvFeedsReports
      //    .Include(x => x.InvFeedsItems)
      //    .OrderBy(x => x.InvFeedsReportId)
      //    .LastAsync();
      List<InvFeedsItem> invFeedsItems = await _kc.InvFeedsItems
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .Include(i => i.InvFeedsItemLocQties)
        .ToListAsync();

      //List<InvRealTime> invRealTime = await GetRealTimeInventory(endDate);

      // ItemNoId in NetSuite
      List<int> itemNoIdFromNetSuite = invFeedsItems.Select(i => (int)i.ItemNoId).Distinct().ToList();

      // Loading the feeding market rules   
      List<InvFeedsRule> invFeedsRules = await _kc.InvFeedsRules
        .Where(ifr => ifr.IsActivated == true)
        .Include(ifr => ifr.Customer)
        .Include(ifr => ifr.LastModifiedByNavigation)
        .ToListAsync();

      // Loading the specific SKU feeding rules
      List<InvFeedsRuleSku> invFeedsRuleSKUs = await _kc.InvFeedsRuleSkus
        .Include(ifrs => ifrs.InvFeedsRuleSkumkts)
        .ToListAsync();

      serviceResponse = itemNoIdFromNetSuite.Select(idi =>
      new GetInventoryFeedsItemDTO()
      {
        ItemNoId = idi,
        ItemName = "",
        QtyAvailBanc = 0,
        QtyAvailMainsl = 0,
        QtyOnHandBanc = 0,
        QtyOnHandMainsl = 0,
        AmazonCustSKU = "",
        AmazonQtyBanc = 0,
        AmazonQtyMainsl = 0,
        AmazonPercentage = 0,
        WayfairCustSKU = "",
        WayfairQtyBanc = 0,
        WayfairQtyMainsl = 0,
        WayfairPercentage = 0,
        WalmartCustSKU = "",
        WalmartQtyBanc = 0,
        WalmartQtyMainsl = 0,
        WalmartPercentage = 0,
        OverstockCustSKU = "",
        OverstockQtyBanc = 0,
        OverstockQtyMainsl = 0,
        OverstockPercentage = 0,
        eBayCustSKU = "",
        eBayQtyBanc = 0,
        eBayQtyMainsl = 0,
        eBayPercentage = 0,
        BPMWebQtyBanc = 0,
        BPMWebQtyMainsl = 0,
        BPMWebPercentage = 0,
        MellowWebQtyBanc = 0,
        MellowWebQtyMainsl = 0,
        MellowWebPercentage = 0,
        HouzzQtyBanc = 0,
        HouzzQtyMainsl = 0,
        HouzzPercentage = 0,
        etcMarketQty = 0,
        etcMarketPercentage = 0,
        isCooMasterSku = true
      }).ToList();

      List<GetInvSalesHistoryListItemDTO> invSalesHistList = await this.GetInvSalesHist(startDate, endDate);
      int index = 0;

      while (index < serviceResponse.Count)
      {
        InvFeedsItem tmpModel = invFeedsItems.Find(x => x.ItemNoId == serviceResponse[index].ItemNoId);
        if (tmpModel != null)
        {
          foreach (InvFeedsItemLocQty tmpLocQty in tmpModel.InvFeedsItemLocQties)
          {
            // only from BANC(4) and Mainsl(25)
            /*if (tmpLocQty.ItemLocId == 4)
            {
              serviceResponse[index].ItemName = tmpModel.ItemNo.ItemName;
              serviceResponse[index].QtyAvailBanc = (int)(tmpLocQty.QtyAvail.HasValue ? tmpLocQty.QtyAvail : 0);
              serviceResponse[index].QtyOnHandBanc = (int)(tmpLocQty.QtyOnHand.HasValue ? tmpLocQty.QtyOnHand : 0);
            }
            else*/
            if (tmpLocQty.ItemLocId == 25)
            {
              serviceResponse[index].ItemName = tmpModel.ItemNo.ItemName;
              serviceResponse[index].QtyAvailMainsl = (int)(tmpLocQty.QtyAvail.HasValue ? tmpLocQty.QtyAvail : 0);
              serviceResponse[index].QtyOnHandMainsl = (int)(tmpLocQty.QtyOnHand.HasValue ? tmpLocQty.QtyOnHand : 0);
            }
          }
          // Need to Qty Check
          GetInvSalesHistoryListItemDTO tmpInvSalesDto = invSalesHistList.Find(x => x.ItemNoId == serviceResponse[index].ItemNoId);
          if (tmpInvSalesDto != null)
          {
            if (tmpInvSalesDto.totalSalesQty > lowSalesHistoryQty)
            {
              serviceResponse[index] = AutoCalcInvFeeds(serviceResponse[index], tmpInvSalesDto, invFeedsRules, invFeedsRuleSKUs);
            }
            else if (tmpInvSalesDto.totalSalesQty <= lowSalesHistoryQty) // Low Sales History or New SKU
            {
              serviceResponse[index] = AutoCalcInvFeedsForLowSalesHistory(serviceResponse[index], invFeedsRules, invFeedsRuleSKUs);
              serviceResponse[index].AmazonCustSKU = tmpInvSalesDto.AmazonCustSKU;
              serviceResponse[index].WayfairCustSKU = tmpInvSalesDto.WayfairCustSKU;
              serviceResponse[index].eBayCustSKU = tmpInvSalesDto.eBayCustSKU;
              serviceResponse[index].WalmartCustSKU = tmpInvSalesDto.WalmartCustSKU;
            }
          }
          index++;
        }
        else
        {
          serviceResponse.RemoveAt(index);
        }
      }
      bool result = await SaveInventoryFeeds(false, invFeedReport.InvFeedsReportId, serviceResponse);
      return serviceResponse;
    }

    public async Task<List<GetInventoryFeedsItemDTO>> RevGetInvAdvFeeds(DateTime startDate, DateTime endDate, DateTime today)
    {

      DateTime beforeDate = new DateTime(today.AddDays(-1).Year, today.AddDays(-1).Month, today.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(today.AddDays(1).Year, today.AddDays(1).Month, today.AddDays(1).Day, 0, 0, 0);

      InvFeedsReport invFeedReport = await _kc.InvFeedsReports
        .Where(ifr => (DateTime)ifr.CreatedDate > beforeDate && (DateTime)ifr.CreatedDate < afterDate)
        .Include(x => x.InvFeedsItems)
        .OrderByDescending(x => x.CreatedDate)
        .FirstOrDefaultAsync();

      List<GetInventoryFeedsItemDTO> serviceResponse = new List<GetInventoryFeedsItemDTO>();
      List<GetInventoryFeedsItemDTO> doubledSKUs = new List<GetInventoryFeedsItemDTO>(); // For same BPM SKU but doubled market SKU items

      // If there is no today's report, return nothing.
      if (invFeedReport == null) return serviceResponse;

      List<InvFeedsItem> invFeedsItems = await _kc.InvFeedsItems
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .Include(i => i.InvFeedsItemLocQties)
        .ToListAsync();

      List<InvFeedsAppliedRule> invFeedsAppliedRules = await _kc.InvFeedsAppliedRules.ToListAsync();

      // Only One in our DB
      InventoryConfig inventoryConfig = await _kc.InventoryConfigs
        .Where(i => i.InventoryConfigId == 1)
        .FirstOrDefaultAsync();


      List<BpmItem> bpmItems = await _kc.BpmItems
        .Where(bi => bi.ItemStatusId <= itemStatus && bi.ItemTypeId <= itemType && bi.IsFeedable == true)
        .Include(bi => bi.ItemStatus)
        .ToListAsync();


      // ItemNoId in NetSuite
      List<int> itemNoIdFromNetSuite = invFeedsItems.Select(i => (int)i.ItemNoId).Distinct().ToList();

      // Loading the feeding market rules   
      List<InvFeedsRule> invFeedsRules = await _kc.InvFeedsRules
        .Where(ifr => ifr.IsActivated == true)
        .Include(ifr => ifr.Customer)
        .Include(ifr => ifr.LastModifiedByNavigation)
        .ToListAsync();

      // Loading the specific SKU feeding rules
      List<InvFeedsRuleSku> invFeedsRuleSKUs = await _kc.InvFeedsRuleSkus
        .Include(ifrs => ifrs.InvFeedsRuleSkumkts)
        .ToListAsync();

      //serviceResponse = 

      serviceResponse = bpmItems.Select(bi =>
      new GetInventoryFeedsItemDTO()
      {
        ItemNoId = bi.ItemNoId,
        ItemStatus = bi.ItemStatus.StatusItem,
        ItemStatusId = (int)bi.ItemStatusId,
        ItemName = bi.ItemName,
        AppliedFeedingRuleNoBanc = 0,
        AppliedFeedingRuleTypeBanc = "",
        AppliedFeedingRuleNoMainsl = 0,
        AppliedFeedingRuleTypeMainsl = "",
        QtyAvailBanc = 0,
        QtyAvailMainsl = 0,
        QtyOnHandBanc = 0,
        QtyOnHandMainsl = 0,
        AmazonCustSKU = "",
        AmazonQtyBanc = 0,
        AmazonQtyMainsl = 0,
        AmazonPercentage = 0,
        WayfairCustSKU = "",
        WayfairQtyBanc = 0,
        WayfairQtyMainsl = 0,
        WayfairPercentage = 0,
        WalmartCustSKU = "",
        WalmartQtyBanc = 0,
        WalmartQtyMainsl = 0,
        WalmartPercentage = 0,
        OverstockCustSKU = "",
        OverstockQtyBanc = 0,
        OverstockQtyMainsl = 0,
        OverstockPercentage = 0,
        eBayCustSKU = "",
        eBayQtyBanc = 0,
        eBayQtyMainsl = 0,
        eBayPercentage = 0,
        BPMWebCustSKU = "",
        BPMWebQtyBanc = 0,
        BPMWebQtyMainsl = 0,
        BPMWebPercentage = 0,
        MellowWebCustSKU = "",
        MellowWebQtyBanc = 0,
        MellowWebQtyMainsl = 0,
        MellowWebPercentage = 0,
        HouzzCustSKU = "",
        HouzzQtyBanc = 0,
        HouzzQtyMainsl = 0,
        HouzzPercentage = 0,
        etcMarketQty = 0,
        etcMarketPercentage = 0,
        isCooMasterSku = (bool)bi.IsCoOmasterSku
      }).ToList();


      List<GetInvSalesHistoryListItemDTO> invSalesHistList = await this.GetInvSalesHist(startDate, endDate);
      int index = 0;
      InvFeedsItem invFeedsItem = new InvFeedsItem();
      BpmItem bpmItem = new BpmItem();
      List<NsIcr> nsIcrs = new List<NsIcr>();

      while (index < serviceResponse.Count)
      {
        invFeedsItem = invFeedsItems.Where(bi => bi.ItemNoId == serviceResponse[index].ItemNoId).FirstOrDefault();

        if (invFeedsItem != null)
        {
          // 1. Zero or Low Stock Rule; Rule No.: 6
          foreach (InvFeedsItemLocQty tmpLocQty in invFeedsItem.InvFeedsItemLocQties)
          {
            // only from BANC(4) and Mainsl(25)
            /*if (tmpLocQty.ItemLocId == 4)
            {
              serviceResponse[index].ItemName = invFeedsItem.ItemNo.ItemName;
              serviceResponse[index].QtyAvailBanc = (int)(tmpLocQty.QtyAvail.HasValue ? tmpLocQty.QtyAvail : 0);
              serviceResponse[index].QtyOnHandBanc = (int)(tmpLocQty.QtyOnHand.HasValue ? tmpLocQty.QtyOnHand : 0);
            }
            else*/
            if (tmpLocQty.ItemLocId == 25)
            {
              serviceResponse[index].ItemName = invFeedsItem.ItemNo.ItemName;
              serviceResponse[index].QtyAvailMainsl = (int)(tmpLocQty.QtyAvail.HasValue ? tmpLocQty.QtyAvail : 0);
              serviceResponse[index].QtyOnHandMainsl = (int)(tmpLocQty.QtyOnHand.HasValue ? tmpLocQty.QtyOnHand : 0);
            }
          }
          if (((serviceResponse[index].QtyAvailMainsl > inventoryConfig.ZeroOutBufferMainSl))
            //|| (serviceResponse[index].QtyAvailBanc > inventoryConfig.ZeroOutBufferBanc))
            || ((serviceResponse[index].QtyAvailMainsl > inventoryConfig.ZeroOutBufferMainSl)))
          // && (serviceResponse[index].QtyAvailBanc > inventoryConfig.ZeroOutBufferBanc)
          {
            // 2. Low Inventory Rule; Rule No.: 5


            // 3. Custom Rule - SKU Specific; Rule No.: 4
            // 4. Custom Rule - Market Specific; Rule No.: 3
            // 5. New Item or Low Sales History Data Rule; Rule No.: 2
            // 6. Sales History; Rule No.: 1

          }
          else if ((serviceResponse[index].QtyAvailMainsl <= inventoryConfig.ZeroOutBufferMainSl))
          // && (serviceResponse[index].QtyAvailBanc <= inventoryConfig.ZeroOutBufferBanc))
          {
            nsIcrs = await _kc.NsIcrs
            .Where(n => n.ItemNoId == invFeedsItem.ItemNoId && n.IsInvFeed > 0)
            .ToListAsync();
            if (nsIcrs != null) // if there is any active feeding SKU
            {
              //serviceResponse[index].AppliedFeedingRuleNoBanc = 6;//invFeedsAppliedRules
              //serviceResponse[index].AppliedFeedingRuleTypeBanc = invFeedsAppliedRules.Where(i => i.RuleNo == 6).FirstOrDefault().Description;
              serviceResponse[index].AppliedFeedingRuleNoMainsl = 6;//invFeedsAppliedRules
              serviceResponse[index].AppliedFeedingRuleTypeMainsl = invFeedsAppliedRules.Where(i => i.RuleNo == 6).FirstOrDefault().Description;

              foreach (NsIcr tmpIcr in nsIcrs)
              {
                updateEachMarketSKU(tmpIcr.CustomerId, tmpIcr.CustSku, serviceResponse[index]);
              }// End of foreach
              index++;
            }
            index++;
          }
          else
          {
            //something wrong!!!
            //Make it something
            index++;
          }
          index++;
        }
        else // No Stock
        {
          nsIcrs = await _kc.NsIcrs
            .Where(n => n.ItemNoId == invFeedsItem.ItemNoId && n.IsInvFeed > 0)
            .ToListAsync();
          if (nsIcrs != null) // if there is any active feeding SKU
          {
            //serviceResponse[index].AppliedFeedingRuleNoBanc = 0;//invFeedsAppliedRules
            //serviceResponse[index].AppliedFeedingRuleTypeBanc = invFeedsAppliedRules.Where(i => i.RuleNo == 0).FirstOrDefault().Description;
            serviceResponse[index].AppliedFeedingRuleNoMainsl = 0;//invFeedsAppliedRules
            serviceResponse[index].AppliedFeedingRuleTypeMainsl = invFeedsAppliedRules.Where(i => i.RuleNo == 0).FirstOrDefault().Description;

            foreach (NsIcr tmpIcr in nsIcrs)
            {
              updateEachMarketSKU(tmpIcr.CustomerId, tmpIcr.CustSku, serviceResponse[index]);
            }// End of foreach
            index++;
          }
          else // If not, just remove from the list
          {
            serviceResponse.RemoveAt(index);
          }

        } // End of checking stock

      }// End of while

      return serviceResponse;
    }

    public void updateEachMarketSKU(int customerId, string custSku, GetInventoryFeedsItemDTO invFeedsItem)
    {
      if (customerId == 5) // For Amazon
      { invFeedsItem.AmazonCustSKU = custSku; }

      if (customerId == 9) // For BPM
      { invFeedsItem.BPMWebCustSKU = custSku; }

      if (customerId == 12) // For eBay
      { invFeedsItem.eBayCustSKU = custSku; }

      if (customerId == 14) // For Houzz
      { invFeedsItem.HouzzCustSKU = custSku; }

      if (customerId == 18) // For Mellow Web
      { invFeedsItem.MellowWebCustSKU = custSku; }

      if (customerId == 21) // For Overstock
      { invFeedsItem.OverstockCustSKU = custSku; }

      if (customerId == 26) // For Walmart
      { invFeedsItem.WalmartCustSKU = custSku; }

      if (customerId == 29) // For Wayfair
      { invFeedsItem.WayfairCustSKU = custSku; }

      if (customerId == 40) // For HomeDepot
      { invFeedsItem.HomeDepotCustSKU = custSku; }

    }

    //For Market ID
    // By Brian Yi on 06/17/2022
    public void updateEachMarketSKUByMarketID(int marketId, string custSku, GetInventoryFeedsItemDTO invFeedsItem)
    {
      if (marketId == 1) // For Amazon
      { invFeedsItem.AmazonCustSKU = custSku; }

      if (marketId == 3) // For BPM
      { invFeedsItem.BPMWebCustSKU = custSku; }

      if (marketId == 5) // For eBay
      { invFeedsItem.eBayCustSKU = custSku; }

      if (marketId == 7) // For Houzz
      { invFeedsItem.HouzzCustSKU = custSku; }

      if (marketId == 10) // For Mellow Web
      { invFeedsItem.MellowWebCustSKU = custSku; }

      if (marketId == 12) // For Overstock
      { invFeedsItem.OverstockCustSKU = custSku; }

      if (marketId == 16) // For Walmart
      { invFeedsItem.WalmartCustSKU = custSku; }

      if (marketId == 4) // For Wayfair
      { invFeedsItem.WayfairCustSKU = custSku; }

      if (marketId == 21) // For HomeDepot
      { invFeedsItem.HomeDepotCustSKU = custSku; }

    }


    // Get Inventory Feeds Item Detail
    // Created by Brian Yi on 09/07/2021
    public async Task<GetInventoryFeedsItemDTO> GetInvFeedsDetail(DateTime today, int itemNoId)
    {
      int mainslId = 25, zinusTracyId = 57, zinusChsId = 108; //bancId = 4, bascId = 62, swcaftId = 54, 
      int tmpQtyAvailMainsl = 0, tmpQtyOnHandMainsl = 0, tmpQtyAvailZinusTracy = 0, tmpQtyOnHandZinusTracy = 0, tmpQtyAvailZinusChs = 0, tmpQtyOnHandZinusChs = 0; //tmpQtyAvailBanc = 0, tmpQtyOnHandBanc = 0, tmpQtyAvailSwcaft = 0, tmpQtyOnHandSwcaft = 0, tmpQtyAvailBasc = 0, tmpQtyOnHandBasc = 0,
      string tmpFeedingRuleForBanc = "", tmpFeedingRuleForMainsl = "";

      DateTime beforeDate = new DateTime(today.AddDays(-1).Year, today.AddDays(-1).Month, today.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(today.AddDays(1).Year, today.AddDays(1).Month, today.AddDays(1).Day, 0, 0, 0);

      GetInventoryFeedsItemDTO serviceResponse = new GetInventoryFeedsItemDTO();

      BpmItem tmpItem = await _kc.BpmItems
            .Where(bi => bi.ItemNoId == itemNoId)
            .Include(bi => bi.ItemStatus)
            .FirstOrDefaultAsync();

      InvFeedsReport invFeedReport = await _kc.InvFeedsReports
        .Where(ifr => (DateTime)ifr.CreatedDate > beforeDate && (DateTime)ifr.CreatedDate < afterDate)
        .Include(x => x.InvFeedsItems)
        .OrderByDescending(x => x.CreatedDate)
        .FirstOrDefaultAsync();
      //.LastOrDefaultAsync();

      serviceResponse = new GetInventoryFeedsItemDTO()
      {
        InvFeedsReportItemId = 0,
        ItemNoId = itemNoId,
        ItemStatus = tmpItem.ItemStatus.StatusItem,
        ItemName = tmpItem.ItemName,
        AppliedFeedingRuleNoBanc = 0,
        AppliedFeedingRuleTypeBanc = "",
        AppliedFeedingRuleNoMainsl = 0,
        AppliedFeedingRuleTypeMainsl = "",
        AppliedFeedingRuleNoZinusTracy = 0,
        AppliedFeedingRuleTypeZinusTracy = "",
        AppliedFeedingRuleNoZinusChs = 0,
        AppliedFeedingRuleTypeZinusChs = "",
        //AppliedFeedingRuleNoSWCAFT = 0,
        //AppliedFeedingRuleTypeSWCAFT = "",
        AppliedFeedingRuleNoBasc = 0,
        AppliedFeedingRuleTypeBasc = "",
        //QtyAvailBanc = tmpQtyAvailBanc,
        QtyAvailMainsl = tmpQtyAvailMainsl,
        //QtyOnHandBanc = tmpQtyOnHandBanc,
        QtyOnHandMainsl = tmpQtyOnHandMainsl,
        QtyAvailZinusTracy = tmpQtyAvailZinusTracy,
        QtyAvailZinusChs = tmpQtyAvailZinusChs,
        QtyOnHandZinusTracy = tmpQtyOnHandZinusTracy,
        QtyOnHandZinusChs = tmpQtyOnHandZinusChs,
        //QtyAvailSWCAFT = tmpQtyAvailSwcaft,
        //QtyAvailBasc = tmpQtyAvailBasc,
        //QtyOnHandSWCAFT = tmpQtyOnHandSwcaft,
        //QtyOnHandBasc = tmpQtyOnHandBasc,
        BancFeedable = true,
        MainslFeedable = true,
        QtyAvailAmzInv = 0,
        AmazonCustSKU = "",
        AmazonQtyBanc = 0,
        AmazonQtyMainsl = 0,
        //AmazonQtySWCAFT = 0,
        AmazonQtyBasc = 0,
        AmazonPercentage = 0,
        AmazonBancPercentage = 0,
        AmazonMainslPercentage = 0,
        //AmazonSWCAFTPercentage = 0,
        AmazonBascPercentage = 0,
        AmazonFeedable = false,
        AmazonDupCount = 0,
        WayfairCustSKU = "",
        WayfairQtyBanc = 0,
        WayfairQtyMainsl = 0,
        //WayfairQtySWCAFT = 0,
        WayfairQtyBasc = 0,
        WayfairPercentage = 0,
        WayfairBancPercentage = 0,
        WayfairMainslPercentage = 0,
        //WayfairSWCAFTPercentage = 0,
        WayfairBascPercentage = 0,
        WayfairFeedable = false,
        WayfairDupCount = 0,
        WalmartCustSKU = "",
        WalmartQtyBanc = 0,
        WalmartQtyMainsl = 0,
        //WalmartQtySWCAFT = 0,
        WalmartQtyBasc = 0,
        WalmartPercentage = 0,
        WalmartBancPercentage = 0,
        WalmartMainslPercentage = 0,
        //WalmartSWCAFTPercentage = 0,
        WalmartBascPercentage = 0,
        WalmartFeedable = false,
        WalmartDupCount = 0,
        OverstockCustSKU = "",
        OverstockQtyBanc = 0,
        OverstockQtyMainsl = 0,
        //OverstockQtySWCAFT = 0,
        OverstockQtyBasc = 0,
        OverstockPercentage = 0,
        OverstockBancPercentage = 0,
        OverstockMainslPercentage = 0,
        //OverstockSWCAFTPercentage = 0,
        OverstockBascPercentage = 0,
        OverstockFeedable = false,
        OverstockDupCount = 0,
        eBayCustSKU = "",
        eBayQtyBanc = 0,
        eBayQtyMainsl = 0,
        //eBayQtySWCAFT = 0,
        eBayQtyBasc = 0,
        eBayPercentage = 0,
        eBayBancPercentage = 0,
        eBayMainslPercentage = 0,
        //eBaySWCAFTPercentage = 0,
        eBayBascPercentage = 0,
        eBayFeedable = false,
        eBayDupCount = 0,
        BPMWebCustSKU = "",
        BPMWebQtyBanc = 0,
        BPMWebQtyMainsl = 0,
        //BPMWebQtySWCAFT = 0,
        BPMWebQtyBasc = 0,
        BPMWebPercentage = 0,
        BPMWebBancPercentage = 0,
        BPMWebMainslPercentage = 0,
        //BPMWebSWCAFTPercentage = 0,
        BPMWebBascPercentage = 0,
        BPMFeedable = false,
        BPMDupCount = 0,
        MellowWebCustSKU = "",
        MellowWebQtyBanc = 0,
        MellowWebQtyMainsl = 0,
        //MellowWebQtySWCAFT = 0,
        MellowWebQtyBasc = 0,
        MellowWebPercentage = 0,
        MellowWebBancPercentage = 0,
        MellowWebMainslPercentage = 0,
        //MellowWebSWCAFTPercentage = 0,
        MellowWebBascPercentage = 0,
        MellowFeedable = false,
        MellowDupCount = 0,
        HouzzCustSKU = "",
        HouzzQtyBanc = 0,
        HouzzQtyMainsl = 0,
        //HouzzQtySWCAFT = 0,
        HouzzQtyBasc = 0,
        HouzzPercentage = 0,
        HouzzBancPercentage = 0,
        HouzzMainslPercentage = 0,
        //HouzzSWCAFTPercentage = 0,
        HouzzBascPercentage = 0,
        HouzzFeedable = false,
        HouzzDupCount = 1,
        HomeDepotCustSKU = "",
        HomeDepotQtyBanc = 0,
        HomeDepotQtyMainsl = 0,
        //HomeDepotQtySWCAFT = 0,
        HomeDepotQtyBasc = 0,
        HomeDepotPercentage = 0,
        HomeDepotBancPercentage = 0,
        HomeDepotMainslPercentage = 0,
        //HomeDepotSWCAFTPercentage = 0,
        HomeDepotBascPercentage = 0,
        HomeDepotFeedable = false,
        HomeDepotDupCount = 0,
        TargetCustSKU = "",
        TargetQtyBanc = 0,
        TargetQtyMainsl = 0,
        //TargetQtySWCAFT = 0,
        TargetQtyBasc = 0,
        TargetPercentage = 0,
        TargetBancPercentage = 0,
        TargetMainslPercentage = 0,
        //TargetSWCAFTPercentage = 0,
        TargetBascPercentage = 0,
        TargetFeedable = false,
        TargetDupCount = 0,
        etcMarketQty = 0,
        etcMarketPercentage = 0,
        totalStagePOQtyBanc = 0,
        totalStagePOQtyMainsl = 0,
        totalStagePOQtyBasc = 0,
        totalStagePOQtyZinusTracy = 0,
        totalStagePOQtyZinusChs = 0
        //totalStagePOQtySWCAFT = 0,
        //isCooMasterSku = tmpItem.IsMasterSku

      };

      // If there is no today's report, return nothing.
      if (invFeedReport == null) return serviceResponse;

      InvFeedsReportItem invFeedsReportItem = await _kc.InvFeedsReportItems
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId && i.ItemNoId == itemNoId)
        .Include(i => i.ItemNo)
        .FirstOrDefaultAsync();

      InvFeedsItem invFeedsItem = await _kc.InvFeedsItems
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId && i.ItemNoId == itemNoId)
        .Include(i => i.InvFeedsItemLocQties)
        .FirstOrDefaultAsync();

      if (invFeedsItem == null) return serviceResponse;

      InvFeedsRepTableDetail invFeedsRepTableDetail = await _kc.InvFeedsRepTableDetails
        .Where(i => i.InvFeedsReportItemId == invFeedsReportItem.InvFeedsReportItemId)
        .FirstOrDefaultAsync();

      serviceResponse.QtyAvailAmzInv = (int)invFeedsRepTableDetail.QtyAvailAmazon;

      //serviceResponse.totalStagePOQtyBanc = (int)invFeedsRepTableDetail.TotalStagePoqtyBanc;
      //serviceResponse.totalStagePOQtyBasc = (int)invFeedsRepTableDetail.TotalStagePoqtyBasc;
      serviceResponse.totalStagePOQtyMainsl = (int)invFeedsRepTableDetail.TotalStagePoqtyMainSl;
      serviceResponse.totalStagePOQtyZinusTracy = (int)invFeedsRepTableDetail.TotalStagePoqtyZinusTracy;
      serviceResponse.totalStagePOQtyZinusChs = (int)invFeedsRepTableDetail.TotalStagePoqtyZinusChs;
      //serviceResponse.totalStagePOQtySWCAFT = (int)invFeedsRepTableDetail.TotalStagePoqtySwcaft;

      serviceResponse.InvFeedsReportItemId = invFeedsReportItem.InvFeedsReportItemId;

      List<InvFeedsRepItemDetail> invFeedsRepItemDetails = await _kc.InvFeedsRepItemDetails
        .Where(i => i.InvFeedsReportItemId == invFeedsReportItem.InvFeedsReportItemId)
        .ToListAsync();

      //List<InvFeedsAppliedRule> invFeedsAppliedRules = await _kc.InvFeedsAppliedRules
      // .ToListAsync();

      //intmpFeedsItemLocQties = loadFeedsItems.FindLast(x => x.ItemNoId == tmpDto.ItemNoId).InvFeedsItemLocQties.ToList();

      if (invFeedsItem.InvFeedsItemLocQties != null)
      {
        foreach (InvFeedsItemLocQty tmpLoc in invFeedsItem.InvFeedsItemLocQties)
        {
          /*if (tmpLoc.ItemLocId == bancId) { tmpQtyAvailBanc = (int)tmpLoc.QtyAvail; tmpQtyOnHandBanc = (tmpLoc.QtyOnHand.HasValue ? (int)tmpLoc.QtyOnHand : 0); }
          else*/
          if (tmpLoc.ItemLocId == mainslId) { tmpQtyAvailMainsl = (int)tmpLoc.QtyAvail; tmpQtyOnHandMainsl = (tmpLoc.QtyOnHand.HasValue ? (int)tmpLoc.QtyOnHand : 0); }
          //else if (tmpLoc.ItemLocId == swcaftId) { tmpQtyAvailSwcaft = (int)tmpLoc.QtyAvail; tmpQtyOnHandSwcaft = (tmpLoc.QtyOnHand.HasValue ? (int)tmpLoc.QtyOnHand : 0); }
          else /*if (tmpLoc.ItemLocId == bascId) { tmpQtyAvailBasc = (int)tmpLoc.QtyAvail; tmpQtyOnHandBasc = (tmpLoc.QtyOnHand.HasValue ? (int)tmpLoc.QtyOnHand : 0); }
          else*/ if (tmpLoc.ItemLocId == zinusTracyId) { tmpQtyAvailZinusTracy = (int)tmpLoc.QtyAvail; tmpQtyOnHandZinusTracy = (tmpLoc.QtyOnHand.HasValue ? (int)tmpLoc.QtyOnHand : 0); }
          else if (tmpLoc.ItemLocId == zinusChsId) { tmpQtyAvailZinusChs = (int)tmpLoc.QtyAvail; tmpQtyOnHandZinusChs = (tmpLoc.QtyOnHand.HasValue ? (int)tmpLoc.QtyOnHand : 0); }
        }
      }
      //serviceResponse.QtyAvailBanc = tmpQtyAvailBanc;
      //serviceResponse.QtyOnHandBanc = tmpQtyOnHandBanc;
      serviceResponse.QtyAvailMainsl = tmpQtyAvailMainsl;
      serviceResponse.QtyOnHandMainsl = tmpQtyOnHandMainsl;
      //serviceResponse.QtyAvailSWCAFT = tmpQtyAvailSwcaft;
      //serviceResponse.QtyOnHandSWCAFT = tmpQtyOnHandSwcaft;
      //serviceResponse.QtyAvailBasc = tmpQtyAvailBasc;
      //serviceResponse.QtyOnHandBasc = tmpQtyOnHandBasc;
      serviceResponse.QtyAvailZinusTracy = tmpQtyAvailZinusTracy;
      serviceResponse.QtyOnHandZinusTracy = tmpQtyOnHandZinusTracy;
      serviceResponse.QtyAvailZinusChs = tmpQtyAvailZinusChs;
      serviceResponse.QtyOnHandZinusChs = tmpQtyOnHandZinusChs;

      foreach (InvFeedsRepItemDetail tmpDtoDetail in invFeedsRepItemDetails)
      {
        List<InvFeedsRepItemLoc> tmpDtoItemLocs = await _kc.InvFeedsRepItemLocs
          .Where(t => t.InvFeedsRepItemDetailId == tmpDtoDetail.InvFeedsRepItemDetailId)
          .Include(t => t.InvFeedsAppliedRule)
          .ToListAsync();

        switch (tmpDtoDetail.CustomerId)
        {
          case 5: // Amazon Drop Ship
                  //serviceResponse.AppliedFeedingRuleNoBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                  //(int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId : 0) : 0);
                  //serviceResponse.AppliedFeedingRuleTypeBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) == null ?
                  //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleTypeMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId : 0) : 0);
            serviceResponse.AppliedFeedingRuleTypeZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRuleId : 0) : 0);
            serviceResponse.AppliedFeedingRuleTypeZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRuleId : 0) : 0);
            //serviceResponse.AppliedFeedingRuleTypeSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) == null ?
            //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : ""));
            //serviceResponse.AppliedFeedingRuleNoSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //     (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId : 0) : 0);
            //serviceResponse.AppliedFeedingRuleTypeBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) == null ?
            //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRule.Description : ""));
            //serviceResponse.AppliedFeedingRuleNoBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //(int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRuleId : 0) : 0);
            serviceResponse.AmazonFeedable = (tmpDtoItemLocs != null ? true : false);
            //serviceResponse.AmazonQtyBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
            //(int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).QtyAvail) : 0);
            serviceResponse.AmazonQtyMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                  (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).QtyAvail) : 0);
            //serviceResponse.AmazonQtySWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //          (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).QtyAvail) : 0);
            //serviceResponse.AmazonBancPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
            //(int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio : 0) : 0);
            serviceResponse.AmazonMainslPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                  (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio : 0) : 0);
            //serviceResponse.AmazonSWCAFTPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio : 0) : 0);
            //serviceResponse.AmazonQtyBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //(int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).QtyAvail) : 0);
            //serviceResponse.AmazonBascPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //(int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).Ratio : 0) : 0);
            serviceResponse.AmazonQtyZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).QtyAvail) : 0);
            serviceResponse.AmazonZinusTracyPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).Ratio : 0) : 0);
            serviceResponse.AmazonQtyZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).QtyAvail) : 0);
            serviceResponse.AmazonZinusChsPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).Ratio : 0) : 0);
            serviceResponse.AmazonDupCount = (int)(tmpDtoDetail.DuplicateCounter != null ? tmpDtoDetail.DuplicateCounter : 1);
            break;

          case 9: // BPM Website
                  //serviceResponse.AppliedFeedingRuleNoBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                  //(int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId : 0) : 0);
                  //serviceResponse.AppliedFeedingRuleTypeBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) == null ?
                  //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleTypeMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId : 0) : 0);
            serviceResponse.AppliedFeedingRuleTypeZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRuleId : 0) : 0);
            serviceResponse.AppliedFeedingRuleTypeZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRuleId : 0) : 0);

            //serviceResponse.AppliedFeedingRuleTypeSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) == null ?
            //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : ""));
            //serviceResponse.AppliedFeedingRuleNoSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId : 0) : 0);
            //serviceResponse.AppliedFeedingRuleTypeBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) == null ?
            //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRule.Description : ""));
            //serviceResponse.AppliedFeedingRuleNoBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //           (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRuleId : 0) : 0);
            serviceResponse.BPMFeedable = (tmpDtoItemLocs != null ? true : false);
            //serviceResponse.BPMWebQtyBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).QtyAvail) : 0);
            serviceResponse.BPMWebQtyMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).QtyAvail) : 0);
            //serviceResponse.BPMWebQtyBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //            (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).QtyAvail) : 0);
            serviceResponse.BPMWebQtyZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                          (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).QtyAvail) : 0);
            serviceResponse.BPMWebQtyZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                          (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).QtyAvail) : 0);
            //serviceResponse.BPMWebQtySWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).QtyAvail) : 0);
            //serviceResponse.BPMWebBancPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio : 0) : 0);
            serviceResponse.BPMWebMainslPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                  (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio : 0) : 0);
            //serviceResponse.BPMWebBascPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).Ratio : 0) : 0);
            serviceResponse.BPMWebZinusTracyPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).Ratio : 0) : 0);
            serviceResponse.BPMWebZinusChsPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).Ratio : 0) : 0);
            //serviceResponse.BPMWebSWCAFTPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio : 0) : 0);
            serviceResponse.BPMDupCount = (int)(tmpDtoDetail.DuplicateCounter != null ? tmpDtoDetail.DuplicateCounter : 1);
            break;

          case 12: // eBay
                   //serviceResponse.AppliedFeedingRuleNoBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                   //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId : 0) : 0);
                   //serviceResponse.AppliedFeedingRuleTypeBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) == null ?
                   //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleTypeMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId : 0) : 0);
            //serviceResponse.AppliedFeedingRuleNoBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //   (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRuleId : 0) : 0);
            //serviceResponse.AppliedFeedingRuleTypeBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) == null ?
            //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleTypeZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRuleId : 0) : 0);
            serviceResponse.AppliedFeedingRuleTypeZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRuleId : 0) : 0);

            //serviceResponse.AppliedFeedingRuleTypeSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) == null ?
            //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : ""));
            //serviceResponse.AppliedFeedingRuleNoSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId : 0) : 0);
            serviceResponse.eBayFeedable = (tmpDtoItemLocs != null ? true : false);
            //serviceResponse.eBayQtyBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
            //            (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).QtyAvail) : 0);
            serviceResponse.eBayQtyMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                          (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).QtyAvail) : 0);
            //serviceResponse.eBayQtyBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //                (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).QtyAvail) : 0);
            serviceResponse.eBayQtyZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).QtyAvail) : 0);
            serviceResponse.eBayQtyZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).QtyAvail) : 0);
            //serviceResponse.eBayQtySWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //            (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).QtyAvail) : 0);
            //serviceResponse.eBayBancPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio : 0) : 0);
            serviceResponse.eBayMainslPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                  (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio : 0) : 0);
            //serviceResponse.eBayBascPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).Ratio : 0) : 0);
            serviceResponse.eBayZinusTracyPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).Ratio : 0) : 0);
            serviceResponse.eBayZinusChsPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).Ratio : 0) : 0);
            //serviceResponse.eBaySWCAFTPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio : 0) : 0);
            serviceResponse.eBayDupCount = (int)(tmpDtoDetail.DuplicateCounter != null ? tmpDtoDetail.DuplicateCounter : 1);
            break;
          /*
        case 14: // Houzz Drop Ship
          serviceResponse.AppliedFeedingRuleNoBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId : 0) : 0);
          serviceResponse.AppliedFeedingRuleTypeBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) == null ?
        "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule.Description : ""));
          serviceResponse.AppliedFeedingRuleTypeMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) == null ?
        "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule.Description : ""));
          serviceResponse.AppliedFeedingRuleNoMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId : 0) : 0);
          serviceResponse.AppliedFeedingRuleNoBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
                   (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRuleId : 0) : 0);
          serviceResponse.AppliedFeedingRuleTypeBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) == null ?
        "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRule.Description : ""));
          serviceResponse.AppliedFeedingRuleTypeSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) == null ?
        "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : ""));
          serviceResponse.AppliedFeedingRuleNoSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId : 0) : 0);
          serviceResponse.HouzzFeedable = (tmpDtoItemLocs != null ? true : false);
          serviceResponse.HouzzQtyBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).QtyAvail) : 0);
          serviceResponse.HouzzQtyMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).QtyAvail) : 0);
          serviceResponse.HouzzQtyBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
                            (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).QtyAvail) : 0);
          serviceResponse.HouzzQtySWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).QtyAvail) : 0);
          serviceResponse.HouzzBancPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio : 0) : 0);
          serviceResponse.HouzzMainslPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio : 0) : 0);
          serviceResponse.HouzzBascPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
                    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).Ratio : 0) : 0);
          serviceResponse.HouzzSWCAFTPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio : 0) : 0);
          serviceResponse.HouzzDupCount = (int)(tmpDtoDetail.DuplicateCounter != null ? tmpDtoDetail.DuplicateCounter : 1);
          break;
          */
          case 18: // Mellow Website
                   //serviceResponse.AppliedFeedingRuleNoBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                   //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId : 0) : 0);
                   //serviceResponse.AppliedFeedingRuleTypeBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) == null ?
                   //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleTypeMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId : 0) : 0);
            //serviceResponse.AppliedFeedingRuleNoBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRuleId : 0) : 0);
            //serviceResponse.AppliedFeedingRuleTypeBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) == null ?
            //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleTypeZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRuleId : 0) : 0);
            serviceResponse.AppliedFeedingRuleTypeZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRuleId : 0) : 0);

            //serviceResponse.AppliedFeedingRuleTypeSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) == null ?
            //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : ""));
            //serviceResponse.AppliedFeedingRuleNoSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId : 0) : 0);
            serviceResponse.MellowFeedable = (tmpDtoItemLocs != null ? true : false);
            //serviceResponse.MellowWebQtyBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
            //            (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).QtyAvail) : 0);
            serviceResponse.MellowWebQtyMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                          (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).QtyAvail) : 0);
            //serviceResponse.MellowWebQtyBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //                (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).QtyAvail) : 0);
            serviceResponse.MellowWebQtyZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).QtyAvail) : 0);
            serviceResponse.MellowWebQtyZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).QtyAvail) : 0);
            //serviceResponse.MellowWebQtySWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //            (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).QtyAvail) : 0);
            //serviceResponse.MellowWebBancPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio : 0) : 0);
            serviceResponse.MellowWebMainslPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                  (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio : 0) : 0);
            //serviceResponse.MellowWebBascPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).Ratio : 0) : 0);
            serviceResponse.MellowWebZinusTracyPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).Ratio : 0) : 0);
            serviceResponse.MellowWebZinusChsPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).Ratio : 0) : 0);
            //serviceResponse.MellowWebSWCAFTPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio : 0) : 0);
            serviceResponse.MellowDupCount = (int)(tmpDtoDetail.DuplicateCounter != null ? tmpDtoDetail.DuplicateCounter : 1);
            break;

          case 21: // Overstock Drop Ship
                   //serviceResponse.AppliedFeedingRuleNoBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                   //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId : 0) : 0);
                   //serviceResponse.AppliedFeedingRuleTypeBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) == null ?
                   //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleTypeMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId : 0) : 0);
            //serviceResponse.AppliedFeedingRuleNoBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRuleId : 0) : 0);
            //serviceResponse.AppliedFeedingRuleTypeBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) == null ?
            //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleTypeZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRuleId : 0) : 0);
            serviceResponse.AppliedFeedingRuleTypeZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRuleId : 0) : 0);

            // serviceResponse.AppliedFeedingRuleTypeSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) == null ?
            //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : ""));
            //serviceResponse.AppliedFeedingRuleNoSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId : 0) : 0);
            serviceResponse.OverstockFeedable = (tmpDtoItemLocs != null ? true : false);
            //serviceResponse.OverstockQtyBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
            //            (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).QtyAvail) : 0);
            serviceResponse.OverstockQtyMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                          (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).QtyAvail) : 0);
            //serviceResponse.OverstockQtyBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //                (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).QtyAvail) : 0);
            serviceResponse.OverstockQtyZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).QtyAvail) : 0);
            serviceResponse.OverstockQtyZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).QtyAvail) : 0);
            //serviceResponse.OverstockQtySWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //            (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).QtyAvail) : 0);
            //serviceResponse.OverstockBancPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio : 0) : 0);
            serviceResponse.OverstockMainslPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                  (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio : 0) : 0);
            //serviceResponse.OverstockBascPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).Ratio : 0) : 0);
            serviceResponse.OverstockZinusTracyPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).Ratio : 0) : 0);
            serviceResponse.OverstockZinusChsPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).Ratio : 0) : 0);
            // serviceResponse.OverstockSWCAFTPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //     (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio : 0) : 0);
            serviceResponse.OverstockDupCount = (int)(tmpDtoDetail.DuplicateCounter != null ? tmpDtoDetail.DuplicateCounter : 1);
            break;

          case 26: // Walmart DSV
                   //serviceResponse.AppliedFeedingRuleNoBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                   //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId : 0) : 0);
                   //serviceResponse.AppliedFeedingRuleTypeBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) == null ?
                   //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleTypeMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId : 0) : 0);
            //serviceResponse.AppliedFeedingRuleNoBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRuleId : 0) : 0);
            //serviceResponse.AppliedFeedingRuleTypeBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) == null ?
            //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleTypeZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRuleId : 0) : 0);
            serviceResponse.AppliedFeedingRuleTypeZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRuleId : 0) : 0);

            //serviceResponse.AppliedFeedingRuleTypeSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) == null ?
            //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : ""));
            //serviceResponse.AppliedFeedingRuleNoSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId : 0) : 0);
            serviceResponse.WalmartFeedable = (tmpDtoItemLocs != null ? true : false);
            //serviceResponse.WalmartQtyBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
            //              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).QtyAvail) : 0);
            serviceResponse.WalmartQtyMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                          (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).QtyAvail) : 0);
            //serviceResponse.WalmartQtyBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //                  (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).QtyAvail) : 0);
            serviceResponse.WalmartQtyZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).QtyAvail) : 0);
            serviceResponse.WalmartQtyZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).QtyAvail) : 0);
            //serviceResponse.WalmartQtySWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //            (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).QtyAvail) : 0);
            //serviceResponse.WalmartBancPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
            //          (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio : 0) : 0);
            serviceResponse.WalmartMainslPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                  (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio : 0) : 0);
            //serviceResponse.WalmartBascPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //(int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).Ratio : 0) : 0);
            serviceResponse.WalmartZinusTracyPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
          (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).Ratio : 0) : 0);
            serviceResponse.WalmartZinusChsPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
          (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).Ratio : 0) : 0);
            //serviceResponse.WalmartSWCAFTPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio : 0) : 0);
            serviceResponse.WalmartDupCount = (int)(tmpDtoDetail.DuplicateCounter != null ? tmpDtoDetail.DuplicateCounter : 1);
            break;

          case 29: // Wayfair Drop Ship
                   //serviceResponse.AppliedFeedingRuleNoBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                   //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId : 0) : 0);
                   //serviceResponse.AppliedFeedingRuleTypeBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) == null ?
                   //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleTypeMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId : 0) : 0);
            //serviceResponse.AppliedFeedingRuleNoBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRuleId : 0) : 0);
            //serviceResponse.AppliedFeedingRuleTypeBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) == null ?
            //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleTypeZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRuleId : 0) : 0);
            serviceResponse.AppliedFeedingRuleTypeZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRuleId : 0) : 0);

            //serviceResponse.AppliedFeedingRuleTypeSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) == null ?
            //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : ""));
            //serviceResponse.AppliedFeedingRuleNoSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId : 0) : 0);
            serviceResponse.WayfairFeedable = (tmpDtoItemLocs != null ? true : false);
            //serviceResponse.WayfairQtyBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
            //            (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).QtyAvail) : 0);
            serviceResponse.WayfairQtyMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                          (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).QtyAvail) : 0);
            //serviceResponse.WayfairQtyBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //                (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).QtyAvail) : 0);
            serviceResponse.WayfairQtyZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).QtyAvail) : 0);
            serviceResponse.WayfairQtyZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).QtyAvail) : 0);
            //serviceResponse.WayfairQtySWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //            (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).QtyAvail) : 0);
            //serviceResponse.WayfairBancPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio : 0) : 0);
            //serviceResponse.WayfairBascPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).Ratio : 0) : 0);
            //serviceResponse.WayfairSWCAFTPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio : 0) : 0);
            serviceResponse.WayfairMainslPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                  (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio : 0) : 0);
            serviceResponse.WayfairZinusTracyPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                  (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).Ratio : 0) : 0);
            serviceResponse.WayfairZinusChsPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                  (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).Ratio : 0) : 0);
            serviceResponse.WayfairDupCount = (int)(tmpDtoDetail.DuplicateCounter != null ? tmpDtoDetail.DuplicateCounter : 1);
            break;



          case 40: // HomeDepot Drop Ship
                   //serviceResponse.AppliedFeedingRuleNoBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                   //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId : 0) : 0);
                   //serviceResponse.AppliedFeedingRuleTypeBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) == null ?
                   //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleTypeMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId : 0) : 0);
            //serviceResponse.AppliedFeedingRuleNoBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRuleId : 0) : 0);
            //serviceResponse.AppliedFeedingRuleTypeBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) == null ?
            //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleTypeZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRuleId : 0) : 0);
            serviceResponse.AppliedFeedingRuleTypeZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRuleId : 0) : 0);

            // serviceResponse.AppliedFeedingRuleTypeSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) == null ?
            //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : ""));
            //serviceResponse.AppliedFeedingRuleNoSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId : 0) : 0);
            serviceResponse.HomeDepotFeedable = (tmpDtoItemLocs != null ? true : false);
            //serviceResponse.HomeDepotQtyBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
            //             (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).QtyAvail) : 0);
            serviceResponse.HomeDepotQtyMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                          (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).QtyAvail) : 0);
            //serviceResponse.HomeDepotQtyBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //                (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).QtyAvail) : 0);
            serviceResponse.HomeDepotQtyZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).QtyAvail) : 0);
            serviceResponse.HomeDepotQtyZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).QtyAvail) : 0);
            //serviceResponse.HomeDepotQtySWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //            (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).QtyAvail) : 0);
            //serviceResponse.HomeDepotBancPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio : 0) : 0);
            //serviceResponse.HomeDepotBascPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).Ratio : 0) : 0);
            serviceResponse.HomeDepotZinusTracyPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).Ratio : 0) : 0);
            serviceResponse.HomeDepotZinusChsPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).Ratio : 0) : 0);
            //serviceResponse.HomeDepotSWCAFTPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio : 0) : 0);
            serviceResponse.HomeDepotMainslPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                  (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio : 0) : 0);
            serviceResponse.HomeDepotDupCount = (int)(tmpDtoDetail.DuplicateCounter != null ? tmpDtoDetail.DuplicateCounter : 1);
            break;

          case 51: // Target Drop Ship
                   //serviceResponse.AppliedFeedingRuleNoBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                   //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId : 0) : 0);
                   //serviceResponse.AppliedFeedingRuleTypeBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) == null ?
                   //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleTypeMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId : 0) : 0);
            //serviceResponse.AppliedFeedingRuleNoBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRuleId : 0) : 0);
            //serviceResponse.AppliedFeedingRuleTypeBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) == null ?
            //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleTypeZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).InvFeedsAppliedRuleId : 0) : 0);
            serviceResponse.AppliedFeedingRuleTypeZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) == null ?
          "" : (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRule.Description : ""));
            serviceResponse.AppliedFeedingRuleNoZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).InvFeedsAppliedRuleId : 0) : 0);

            //serviceResponse.AppliedFeedingRuleTypeSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) == null ?
            //"" : (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : ""));
            //serviceResponse.AppliedFeedingRuleNoSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId : 0) : 0);
            serviceResponse.TargetFeedable = (tmpDtoItemLocs != null ? true : false);
            //serviceResponse.TargetQtyBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
            //            (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).QtyAvail) : 0);
            serviceResponse.TargetQtyMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                          (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).QtyAvail) : 0);
            //serviceResponse.TargetQtyBasc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //                (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).QtyAvail) : 0);
            serviceResponse.TargetQtyZinusTracy = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).QtyAvail) : 0);
            serviceResponse.TargetQtyZinusChs = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).QtyAvail) : 0);
            //serviceResponse.TargetQtySWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //            (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).QtyAvail) : 0);
            //serviceResponse.TargetBancPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio : 0) : 0);
            //serviceResponse.TargetBascPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bascId) != null ?
            //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bascId).Ratio : 0) : 0);
            serviceResponse.TargetZinusTracyPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusTracyId).Ratio : 0) : 0);
            serviceResponse.TargetZinusChsPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId) != null ?
                                  (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == zinusChsId).Ratio : 0) : 0);

            //serviceResponse.TargetSWCAFTPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
            //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio : 0) : 0);
            serviceResponse.TargetMainslPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                  (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio : 0) : 0);
            serviceResponse.TargetDupCount = (int)(tmpDtoDetail.DuplicateCounter != null ? tmpDtoDetail.DuplicateCounter : 1);
            break;

        }
      }

      return serviceResponse;
    }


    // Old and Depreciated
    // Brand New; This is new main inventory feed logic
    // Revised by Brian Yi on 08/23/2021
    public async Task<List<GetInventoryFeedsItemDTO>> GetInvFeeds(DateTime startDate, DateTime endDate, DateTime today)
    {
      // DO NOT USE
      //swcaftId = 54,
      int bancId = 4, mainslId = 25, bascId = 62, amazonID = 5, bpmWebID = 9, ebayID = 12, houzzID = 14, mellowWebID = 18, ostID = 21, walmartID = 26, wayfairID = 29;
      DateTime beforeDate = new DateTime(today.AddDays(-1).Year, today.AddDays(-1).Month, today.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(today.AddDays(1).Year, today.AddDays(1).Month, today.AddDays(1).Day, 0, 0, 0);

      List<GetInventoryFeedsItemDTO> serviceResponse = new List<GetInventoryFeedsItemDTO>();

      // Getting today's inventory report
      InvFeedsReport invFeedReport = await _kc.InvFeedsReports
        .Where(ifr => (DateTime)ifr.CreatedDate > beforeDate && (DateTime)ifr.CreatedDate < afterDate)
        .Include(x => x.InvFeedsItems)
        .OrderByDescending(x => x.CreatedDate)
        .FirstOrDefaultAsync();

      // If there is no today's report, return nothing.
      if (invFeedReport == null) return serviceResponse;
      List<InvFeedsItemLocQty> tmpFeedsItemLocQties;
      int tmpQtyAvailBanc = 0, tmpQtyOnHandBanc = 0, tmpQtyAvailMainsl = 0, tmpQtyOnHandMainsl = 0, tmpQtyAvailSWCAFT = 0, tmpQtyOnHandSWCAFT = 0, tmpQtyAvailBasc = 0, tmpQtyOnHandBasc = 0;
      // For loading past feeding report
      // After this if-clause, this method will be done
      if ((today.Day != DateTime.Now.Day || today.Year != DateTime.Now.Year || today.Month != DateTime.Now.Month) && invFeedReport.IsApproved == true)
      {
        List<InvFeedsReportItem> loadRepItems = await _kc.InvFeedsReportItems
          .Where(lri => lri.InvFeedsReportId == invFeedReport.InvFeedsReportId)
          .Include(lri => lri.ItemNo)
          .Include(lri => lri.InvFeedsRepItemDetails)
          .ToListAsync();

        List<InvFeedsItem> loadFeedsItems = await _kc.InvFeedsItems
          .Where(lfi => lfi.InvFeedsReportId == invFeedReport.InvFeedsReportId)
          .Include(lfi => lfi.InvFeedsItemLocQties)
          .ToListAsync();

        GetInventoryFeedsItemDTO newItem;
        // Initialize feeding items
        foreach (InvFeedsReportItem tmpDto in loadRepItems)
        {
          BpmItem tmpItem = await _kc.BpmItems
            .Where(bi => bi.ItemNoId == tmpDto.ItemNoId)
            .Include(bi => bi.ItemStatus)
            .FirstOrDefaultAsync();
          tmpFeedsItemLocQties = loadFeedsItems.FindLast(x => x.ItemNoId == tmpDto.ItemNoId).InvFeedsItemLocQties.ToList();

          if (tmpFeedsItemLocQties != null)
          {
            foreach (InvFeedsItemLocQty tmpLoc in tmpFeedsItemLocQties)
            {
              if (tmpLoc.ItemLocId == bancId) { tmpQtyAvailBanc = (int)tmpLoc.QtyAvail; tmpQtyOnHandBanc = (int)tmpLoc.QtyOnHand; }
              else if (tmpLoc.ItemLocId == mainslId) { tmpQtyAvailMainsl = (int)tmpLoc.QtyAvail; tmpQtyOnHandMainsl = (int)tmpLoc.QtyOnHand; }
              //else if (tmpLoc.ItemLocId == swcaftId) { tmpQtyAvailSWCAFT = (int)tmpLoc.QtyAvail; tmpQtyOnHandSWCAFT = (int)tmpLoc.QtyOnHand; }
              else if (tmpLoc.ItemLocId == bascId) { tmpQtyAvailBasc = (int)tmpLoc.QtyAvail; tmpQtyOnHandBasc = (int)tmpLoc.QtyOnHand; }
            }
          }
          //SWCAFT
          newItem = new GetInventoryFeedsItemDTO()
          {
            ItemNoId = (int)tmpDto.ItemNoId,
            ItemStatus = tmpItem.ItemStatus.StatusItem,
            ItemName = tmpDto.ItemNo.ItemName,
            AppliedFeedingRuleNoBanc = 0,
            AppliedFeedingRuleTypeBanc = "",
            AppliedFeedingRuleNoMainsl = 0,
            AppliedFeedingRuleTypeMainsl = "",
            // AppliedFeedingRuleNoSWCAFT = 0,
            //AppliedFeedingRuleTypeSWCAFT = "",
            AppliedFeedingRuleNoBasc = 0,
            AppliedFeedingRuleTypeBasc = "",
            QtyAvailBanc = tmpQtyAvailBanc,
            QtyAvailMainsl = tmpQtyAvailMainsl,
            //QtyAvailSWCAFT = tmpQtyAvailSWCAFT,
            QtyOnHandBanc = tmpQtyOnHandBanc,
            QtyOnHandMainsl = tmpQtyOnHandMainsl,
            //QtyOnHandSWCAFT = tmpQtyOnHandSWCAFT,
            QtyAvailBasc = tmpQtyAvailBasc,
            QtyOnHandBasc = tmpQtyOnHandBasc,
            BancFeedable = false,
            MainslFeedable = false,
            //SWCAFTFeedable = true,
            BascFeedable = true,
            AmazonCustSKU = "",
            AmazonQtyBanc = 0,
            AmazonQtyMainsl = 0,
            //AmazonQtySWCAFT = 0,
            AmazonQtyBasc = 0,
            AmazonPercentage = 0,
            AmazonBancPercentage = 0,
            AmazonMainslPercentage = 0,
            //AmazonSWCAFTPercentage = 0,
            AmazonFeedable = false,
            AmazonDupCount = 0,
            WayfairCustSKU = "",
            WayfairQtyBanc = 0,
            WayfairQtyMainsl = 0,
            //WayfairQtySWCAFT = 0,
            WayfairPercentage = 0,
            WayfairBancPercentage = 0,
            WayfairMainslPercentage = 0,
            //WayfairSWCAFTPercentage = 0,
            WayfairFeedable = false,
            WayfairDupCount = 0,
            WalmartCustSKU = "",
            WalmartQtyBanc = 0,
            WalmartQtyMainsl = 0,
            //WalmartQtySWCAFT = 0,
            WalmartPercentage = 0,
            WalmartBancPercentage = 0,
            WalmartMainslPercentage = 0,
            //WalmartSWCAFTPercentage = 0,
            WalmartFeedable = false,
            WalmartDupCount = 1,
            OverstockCustSKU = "",
            OverstockQtyBanc = 0,
            OverstockQtyMainsl = 0,
            //OverstockQtySWCAFT = 0,
            OverstockPercentage = 0,
            OverstockBancPercentage = 0,
            OverstockMainslPercentage = 0,
            //OverstockSWCAFTPercentage = 0,
            OverstockFeedable = false,
            OverstockDupCount = 0,
            eBayCustSKU = "",
            eBayQtyBanc = 0,
            eBayQtyMainsl = 0,
            //eBayQtySWCAFT = 0,
            eBayPercentage = 0,
            eBayBancPercentage = 0,
            eBayMainslPercentage = 0,
            //eBaySWCAFTPercentage = 0,
            eBayFeedable = false,
            eBayDupCount = 0,
            BPMWebCustSKU = "",
            BPMWebQtyBanc = 0,
            BPMWebQtyMainsl = 0,
            //BPMWebQtySWCAFT = 0,
            BPMWebPercentage = 0,
            BPMWebBancPercentage = 0,
            BPMWebMainslPercentage = 0,
            //BPMWebSWCAFTPercentage = 0,
            BPMFeedable = false,
            BPMDupCount = 0,
            MellowWebCustSKU = "",
            MellowWebQtyBanc = 0,
            MellowWebQtyMainsl = 0,
            //MellowWebQtySWCAFT = 0,
            MellowWebPercentage = 0,
            MellowWebBancPercentage = 0,
            MellowWebMainslPercentage = 0,
            //MellowWebSWCAFTPercentage = 0,
            MellowFeedable = false,
            MellowDupCount = 0,
            HouzzCustSKU = "",
            HouzzQtyBanc = 0,
            HouzzQtyMainsl = 0,
            //HouzzQtySWCAFT = 0,
            HouzzPercentage = 0,
            HouzzBancPercentage = 0,
            HouzzMainslPercentage = 0,
            //HouzzSWCAFTPercentage = 0,
            HouzzFeedable = false,
            HouzzDupCount = 0,
            HomeDepotCustSKU = "",
            HomeDepotQtyBanc = 0,
            HomeDepotQtyMainsl = 0,
            //HomeDepotQtySWCAFT = 0,
            HomeDepotPercentage = 0,
            HomeDepotBancPercentage = 0,
            HomeDepotMainslPercentage = 0,
            //HomeDepotSWCAFTPercentage = 0,
            HomeDepotFeedable = false,
            HomeDepotDupCount = 0,
            etcMarketQty = 0,
            etcMarketPercentage = 0
          };

          foreach (InvFeedsRepItemDetail tmpDtoDetail in tmpDto.InvFeedsRepItemDetails)
          {
            List<InvFeedsRepItemLoc> tmpDtoItemLocs = await _kc.InvFeedsRepItemLocs
              .Where(t => t.InvFeedsRepItemDetailId == tmpDtoDetail.InvFeedsReportItemId)
              .Include(t => t.InvFeedsAppliedRule)
              .ToListAsync();

            switch (tmpDtoDetail.CustomerId)
            {
              case 5: // Amazon Drop Ship
                newItem.AppliedFeedingRuleNoBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId : 0) : 0);
                newItem.AppliedFeedingRuleTypeBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule.Description : "") : "");
                newItem.AppliedFeedingRuleTypeMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule.Description : "") : "");
                newItem.AppliedFeedingRuleNoMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId : 0) : 0);
                //newItem.AppliedFeedingRuleTypeSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //    (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : "") : "");
                //newItem.AppliedFeedingRuleNoSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId : 0) : 0);
                newItem.AmazonQtyBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).QtyAvail) : 0);
                newItem.AmazonQtyMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).QtyAvail) : 0);
                //newItem.AmazonQtySWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).QtyAvail) : 0);
                newItem.AmazonBancPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio : 0) : 0);
                newItem.AmazonMainslPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio : 0) : 0);
                //newItem.AmazonSWCAFTPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio : 0) : 0);
                newItem.AmazonDupCount = (int)(tmpDtoDetail.DuplicateCounter != null ? tmpDtoDetail.DuplicateCounter : 1);
                break;

              case 9: // BPM Website
                newItem.AppliedFeedingRuleNoBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId : 0) : 0);
                newItem.AppliedFeedingRuleTypeBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule.Description : "") : "");
                newItem.AppliedFeedingRuleTypeMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule.Description : "") : "");
                newItem.AppliedFeedingRuleNoMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId : 0) : 0);
                //newItem.AppliedFeedingRuleTypeSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //      (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : "") : "");
                //newItem.AppliedFeedingRuleNoSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId : 0) : 0);
                newItem.BPMWebQtyBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                          (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).QtyAvail) : 0);
                newItem.BPMWebQtyMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                          (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).QtyAvail) : 0);
                //newItem.BPMWebQtySWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //        (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).QtyAvail) : 0);
                newItem.BPMWebBancPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio : 0) : 0);
                newItem.BPMWebMainslPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio : 0) : 0);
                //newItem.BPMWebSWCAFTPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio : 0) : 0);
                newItem.BPMDupCount = (int)(tmpDtoDetail.DuplicateCounter != null ? tmpDtoDetail.DuplicateCounter : 1);
                break;

              case 12: // eBay
                newItem.AppliedFeedingRuleNoBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId : 0) : 0);
                newItem.AppliedFeedingRuleTypeBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule.Description : "") : "");
                newItem.AppliedFeedingRuleTypeMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule.Description : "") : "");
                newItem.AppliedFeedingRuleNoMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId : 0) : 0);
                //newItem.AppliedFeedingRuleTypeSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //    (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : "") : "");
                //newItem.AppliedFeedingRuleNoSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId : 0) : 0);
                newItem.eBayQtyBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).QtyAvail) : 0);
                newItem.eBayQtyMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).QtyAvail) : 0);
                //newItem.eBayQtySWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //            (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).QtyAvail) : 0);
                newItem.eBayBancPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio : 0) : 0);
                newItem.eBayMainslPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio : 0) : 0);
                //newItem.eBaySWCAFTPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio : 0) : 0);
                newItem.eBayDupCount = (int)(tmpDtoDetail.DuplicateCounter != null ? tmpDtoDetail.DuplicateCounter : 1);
                break;

              case 14: // Houzz Drop Ship
                newItem.AppliedFeedingRuleNoBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId : 0) : 0);
                newItem.AppliedFeedingRuleTypeBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule.Description : "") : "");
                newItem.AppliedFeedingRuleTypeMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule.Description : "") : "");
                newItem.AppliedFeedingRuleNoMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId : 0) : 0);
                //newItem.AppliedFeedingRuleTypeSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //    (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : "") : "");
                //newItem.AppliedFeedingRuleNoSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId : 0) : 0);
                newItem.HouzzQtyBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).QtyAvail) : 0);
                newItem.HouzzQtyMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).QtyAvail) : 0);
                //newItem.HouzzQtySWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //            (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).QtyAvail) : 0);
                newItem.HouzzBancPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio : 0) : 0);
                newItem.HouzzMainslPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio : 0) : 0);
                //newItem.HouzzSWCAFTPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio : 0) : 0);
                newItem.HouzzDupCount = (int)(tmpDtoDetail.DuplicateCounter != null ? tmpDtoDetail.DuplicateCounter : 1);
                break;

              case 18: // Mellow Website
                newItem.AppliedFeedingRuleNoBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId : 0) : 0);
                newItem.AppliedFeedingRuleTypeBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule.Description : "") : "");
                newItem.AppliedFeedingRuleTypeMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule.Description : "") : "");
                newItem.AppliedFeedingRuleNoMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId : 0) : 0);
                //newItem.AppliedFeedingRuleTypeSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //     (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : "") : "");
                //newItem.AppliedFeedingRuleNoSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId : 0) : 0);
                newItem.MellowWebQtyBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).QtyAvail) : 0);
                newItem.MellowWebQtyMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).QtyAvail) : 0);
                //newItem.MellowWebQtySWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //            (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).QtyAvail) : 0);
                newItem.MellowWebBancPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio : 0) : 0);
                newItem.MellowWebMainslPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio : 0) : 0);
                //newItem.MellowWebSWCAFTPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio : 0) : 0);
                newItem.MellowDupCount = (int)(tmpDtoDetail.DuplicateCounter != null ? tmpDtoDetail.DuplicateCounter : 1);
                break;

              case 21: // Overstock Drop Ship
                newItem.AppliedFeedingRuleNoBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId : 0) : 0);
                newItem.AppliedFeedingRuleTypeBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule.Description : "") : "");
                newItem.AppliedFeedingRuleTypeMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule.Description : "") : "");
                newItem.AppliedFeedingRuleNoMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId : 0) : 0);
                //newItem.AppliedFeedingRuleTypeSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //    (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : "") : "");
                //newItem.AppliedFeedingRuleNoSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId : 0) : 0);
                newItem.OverstockQtyBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).QtyAvail) : 0);
                newItem.OverstockQtyMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).QtyAvail) : 0);
                //newItem.OverstockQtySWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //            (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).QtyAvail) : 0);
                newItem.OverstockBancPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio : 0) : 0);
                newItem.OverstockMainslPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio : 0) : 0);
                //newItem.OverstockSWCAFTPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio : 0) : 0);
                newItem.OverstockDupCount = (int)(tmpDtoDetail.DuplicateCounter != null ? tmpDtoDetail.DuplicateCounter : 1);
                break;

              case 26: // Walmart DSV
                newItem.AppliedFeedingRuleNoBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId : 0) : 0);
                newItem.AppliedFeedingRuleTypeBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule.Description : "") : "");
                newItem.AppliedFeedingRuleTypeMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule.Description : "") : "");
                newItem.AppliedFeedingRuleNoMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId : 0) : 0);
                //newItem.AppliedFeedingRuleTypeSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //    (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : "") : "");
                //newItem.AppliedFeedingRuleNoSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId : 0) : 0);
                newItem.WalmartQtyBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).QtyAvail) : 0);
                newItem.WalmartQtyMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).QtyAvail) : 0);
                //newItem.WalmartQtySWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //            (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).QtyAvail) : 0);
                newItem.WalmartBancPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio : 0) : 0);
                newItem.WalmartMainslPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio : 0) : 0);
                //newItem.WalmartSWCAFTPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio : 0) : 0);
                newItem.WalmartDupCount = (int)(tmpDtoDetail.DuplicateCounter != null ? tmpDtoDetail.DuplicateCounter : 1);
                break;

              case 29: // Wayfair Drop Ship
                newItem.AppliedFeedingRuleNoBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRuleId : 0) : 0);
                newItem.AppliedFeedingRuleTypeBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).InvFeedsAppliedRule.Description : "") : "");
                newItem.AppliedFeedingRuleTypeMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRule.Description : "") : "");
                newItem.AppliedFeedingRuleNoMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).InvFeedsAppliedRuleId : 0) : 0);
                //newItem.AppliedFeedingRuleTypeSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //    (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : "") : "");
                //newItem.AppliedFeedingRuleNoSWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).InvFeedsAppliedRuleId : 0) : 0);
                newItem.WayfairQtyBanc = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).QtyAvail) : 0);
                newItem.WayfairQtyMainsl = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                              (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).QtyAvail) : 0);
                //newItem.WayfairQtySWCAFT = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //            (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).QtyAvail) : 0);
                newItem.WayfairBancPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == bancId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == bancId).Ratio : 0) : 0);
                newItem.WayfairMainslPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId) != null ?
                      (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == mainslId).Ratio : 0) : 0);
                //newItem.WayfairSWCAFTPercentage = (tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId) != null ?
                //    (int)(tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio != null ? tmpDtoItemLocs.FindLast(x => x.LocationId == swcaftId).Ratio : 0) : 0);
                newItem.WayfairDupCount = (int)(tmpDtoDetail.DuplicateCounter != null ? tmpDtoDetail.DuplicateCounter : 1);
                break;

            }
          }
          serviceResponse.Add(newItem);
        }

        return serviceResponse;
      }

      //List<GetInventoryFeedsItemDTO> doubledSKUs = new List<GetInventoryFeedsItemDTO>(); // For same BPM SKU but doubled SKU item at same market


      //bool feedToAmazon = true, feedToeBay = true, feedToBPM = true, feedToMellow = true, 
      // feedToHouzz = true, feedToWalmart = true, feedToOverstock = true, feedToWayfair = true;


      // Load the detail of each item(Location)
      List<InvFeedsItem> invFeedsItems = await _kc.InvFeedsItems
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .Include(i => i.InvFeedsItemLocQties)
        .ToListAsync();

      // For feeding rules
      List<InvFeedsAppliedRule> invFeedsAppliedRules = await _kc.InvFeedsAppliedRules.ToListAsync();

      // Only One in our DB
      InventoryConfig inventoryConfig = await _kc.InventoryConfigs
        .Where(i => i.InventoryConfigId == 1)
        .FirstOrDefaultAsync();

      // Get all bpm item except Inactive & Obsolete       
      List<BpmItem> bpmItems = await _kc.BpmItems
        .Where(bi => bi.ItemStatusId <= itemStatus && bi.ItemTypeId <= itemType && bi.IsFeedable == true)
        .Include(bi => bi.ItemStatus)
        .ToListAsync();

      // Loading the feeding market rules   
      List<InvFeedsRule> invFeedsRules = await _kc.InvFeedsRules
        .Where(ifr => ifr.IsActivated == true)
        .Include(ifr => ifr.Customer)
        .Include(ifr => ifr.LastModifiedByNavigation)
        .ToListAsync();

      // Loading the specific SKU feeding rules
      List<InvFeedsRuleSku> invFeedsRuleSKUs = await _kc.InvFeedsRuleSkus
        .Include(ifrs => ifrs.InvFeedsRuleSkumkts)
        .ToListAsync();

      // Initialize feeding items // 12/21/2021
      serviceResponse = bpmItems.Select(bi =>
      new GetInventoryFeedsItemDTO()
      {
        ItemNoId = bi.ItemNoId,
        ItemStatus = bi.ItemStatus.StatusItem,
        ItemStatusId = (int)bi.ItemStatusId,
        ItemName = bi.ItemName,
        AppliedFeedingRuleNoBanc = 0,
        AppliedFeedingRuleTypeBanc = "",
        AppliedFeedingRuleNoMainsl = 0,
        AppliedFeedingRuleTypeMainsl = "",
        //AppliedFeedingRuleNoSWCAFT = 0,
        //AppliedFeedingRuleTypeSWCAFT = "",
        QtyAvailBanc = 0,
        QtyAvailMainsl = 0,
        //QtyAvailSWCAFT = 0,
        QtyOnHandBanc = 0,
        QtyOnHandMainsl = 0,
        //QtyOnHandSWCAFT = 0,
        BancFeedable = true,
        MainslFeedable = true,
        //SWCAFTFeedable = true,
        AmazonCustSKU = "",
        AmazonQtyBanc = 0,
        AmazonQtyMainsl = 0,
        //AmazonQtySWCAFT = 0,
        AmazonPercentage = 0,
        AmazonBancPercentage = 0,
        AmazonMainslPercentage = 0,
        //AmazonSWCAFTPercentage = 0,
        AmazonFeedable = true,
        AmazonDupCount = 0,
        WayfairCustSKU = "",
        WayfairQtyBanc = 0,
        WayfairQtyMainsl = 0,
        //WayfairQtySWCAFT = 0,
        WayfairPercentage = 0,
        WayfairBancPercentage = 0,
        WayfairMainslPercentage = 0,
        //WayfairSWCAFTPercentage = 0,
        WayfairFeedable = true,
        WayfairDupCount = 0,
        WalmartCustSKU = "",
        WalmartQtyBanc = 0,
        WalmartQtyMainsl = 0,
        //WalmartQtySWCAFT = 0,
        WalmartPercentage = 0,
        WalmartBancPercentage = 0,
        WalmartMainslPercentage = 0,
        //WalmartSWCAFTPercentage = 0,
        WalmartFeedable = true,
        WalmartDupCount = 0,
        OverstockCustSKU = "",
        OverstockQtyBanc = 0,
        OverstockQtyMainsl = 0,
        //OverstockQtySWCAFT = 0,
        OverstockPercentage = 0,
        OverstockBancPercentage = 0,
        OverstockMainslPercentage = 0,
        //OverstockSWCAFTPercentage = 0,
        OverstockFeedable = true,
        OverstockDupCount = 0,
        eBayCustSKU = "",
        eBayQtyBanc = 0,
        eBayQtyMainsl = 0,
        //eBayQtySWCAFT = 0,
        eBayPercentage = 0,
        eBayBancPercentage = 0,
        eBayMainslPercentage = 0,
        //eBaySWCAFTPercentage = 0,
        eBayFeedable = true,
        eBayDupCount = 0,
        BPMWebCustSKU = "",
        BPMWebQtyBanc = 0,
        BPMWebQtyMainsl = 0,
        //BPMWebQtySWCAFT = 0,
        BPMWebPercentage = 0,
        BPMWebBancPercentage = 0,
        BPMWebMainslPercentage = 0,
        //BPMWebSWCAFTPercentage = 0,
        BPMFeedable = true,
        BPMDupCount = 0,
        MellowWebCustSKU = "",
        MellowWebQtyBanc = 0,
        MellowWebQtyMainsl = 0,
        //MellowWebQtySWCAFT = 0,
        MellowWebPercentage = 0,
        MellowWebBancPercentage = 0,
        MellowWebMainslPercentage = 0,
        //MellowWebSWCAFTPercentage = 0,
        MellowFeedable = true,
        MellowDupCount = 0,
        HouzzCustSKU = "",
        HouzzQtyBanc = 0,
        HouzzQtyMainsl = 0,
        //HouzzQtySWCAFT = 0,
        HouzzPercentage = 0,
        HouzzBancPercentage = 0,
        HouzzMainslPercentage = 0,
        //HouzzSWCAFTPercentage = 0,
        HouzzFeedable = false,
        HouzzDupCount = 0,
        etcMarketQty = 0,
        etcMarketPercentage = 0,
        isCooMasterSku = (bool)bi.IsCoOmasterSku

      }).ToList();
      //serviceResponse
      //GetInventoryFeedsItemDTO
      GetInventoryFeedsItemDTO tmpInvFeedsItem = new GetInventoryFeedsItemDTO();
      InvFeedsItemLocQty tmpLocQty = new InvFeedsItemLocQty();

      foreach (InvFeedsItem ifi in invFeedsItems)
      {
        tmpInvFeedsItem = serviceResponse.FindLast(s => s.ItemNoId == ifi.ItemNoId);
        if (tmpInvFeedsItem != null)
        {
          tmpLocQty = ifi.InvFeedsItemLocQties.Where(i => i.ItemLocId == bancId).FirstOrDefault();
          if (tmpLocQty != null)
          {
            tmpInvFeedsItem.QtyAvailBanc = (tmpLocQty.QtyAvail.HasValue ? (int)tmpLocQty.QtyAvail : 0);
            tmpInvFeedsItem.QtyOnHandBanc = (tmpLocQty.QtyOnHand.HasValue ? (int)tmpLocQty.QtyOnHand : 0);
          }
          else { tmpInvFeedsItem.QtyAvailBanc = 0; tmpInvFeedsItem.QtyOnHandBanc = 0; }

          tmpLocQty = ifi.InvFeedsItemLocQties.Where(i => i.ItemLocId == mainslId).FirstOrDefault();
          if (tmpLocQty != null)
          {
            tmpInvFeedsItem.QtyAvailMainsl = (tmpLocQty.QtyAvail.HasValue ? (int)tmpLocQty.QtyAvail : 0);
            tmpInvFeedsItem.QtyOnHandMainsl = (tmpLocQty.QtyOnHand.HasValue ? (int)tmpLocQty.QtyOnHand : 0);
          }
          else { tmpInvFeedsItem.QtyAvailMainsl = 0; tmpInvFeedsItem.QtyOnHandMainsl = 0; }
          /*
          tmpLocQty = ifi.InvFeedsItemLocQties.Where(i => i.ItemLocId == swcaftId).FirstOrDefault();
          if (tmpLocQty != null)
          {
            tmpInvFeedsItem.QtyAvailSWCAFT = (tmpLocQty.QtyAvail.HasValue ? (int)tmpLocQty.QtyAvail : 0);
            tmpInvFeedsItem.QtyOnHandSWCAFT = (tmpLocQty.QtyOnHand.HasValue ? (int)tmpLocQty.QtyOnHand : 0);
          }
          else { tmpInvFeedsItem.QtyAvailSWCAFT = 0; tmpInvFeedsItem.QtyOnHandSWCAFT = 0; }*/
        }
        else
        {
          Console.WriteLine("Should not come here!!!!");
        }
      } // Qty Initialize



      // Get sales history
      List<GetInvSalesHistoryListItemDTO> invSalesHistList = await this.GetInvSalesHist(startDate, endDate);
      int index = 0;
      InvFeedsItem invFeedsItem = new InvFeedsItem();
      BpmItem bpmItem = new BpmItem();
      List<NsIcr> nsIcrs = new List<NsIcr>();
      int ruleForSku = 0;
      bool isPassed = false;
      InvFeedsRuleSku invFeedsRuleSku = new InvFeedsRuleSku();
      GetInvSalesHistoryListItemDTO invSalesData = new GetInvSalesHistoryListItemDTO();
      // Making return list
      while (index < serviceResponse.Count)
      {
        invFeedsItem = invFeedsItems.Where(bi => bi.ItemNoId == serviceResponse[index].ItemNoId).FirstOrDefault();
        // Check whether there is enough stock in our warehouses
        serviceResponse[index].AmazonDupCount = await countDuplicatedSKU(amazonID, serviceResponse[index].ItemNoId);
        serviceResponse[index].OverstockDupCount = await countDuplicatedSKU(ostID, serviceResponse[index].ItemNoId);
        serviceResponse[index].WalmartDupCount = await countDuplicatedSKU(walmartID, serviceResponse[index].ItemNoId);
        serviceResponse[index].WayfairDupCount = await countDuplicatedSKU(wayfairID, serviceResponse[index].ItemNoId);
        serviceResponse[index].BPMDupCount = await countDuplicatedSKU(bpmWebID, serviceResponse[index].ItemNoId);
        serviceResponse[index].eBayDupCount = await countDuplicatedSKU(ebayID, serviceResponse[index].ItemNoId);
        serviceResponse[index].MellowDupCount = await countDuplicatedSKU(mellowWebID, serviceResponse[index].ItemNoId);
        serviceResponse[index].HouzzDupCount = await countDuplicatedSKU(houzzID, serviceResponse[index].ItemNoId);

        // No related customer SKU => Not feedable!
        if (serviceResponse[index].AmazonDupCount == 0) { serviceResponse[index].AmazonFeedable = false; }
        if (serviceResponse[index].OverstockDupCount == 0) { serviceResponse[index].OverstockFeedable = false; }
        if (serviceResponse[index].WalmartDupCount == 0) { serviceResponse[index].WalmartFeedable = false; }
        if (serviceResponse[index].WayfairDupCount == 0) { serviceResponse[index].WayfairFeedable = false; }
        if (serviceResponse[index].BPMDupCount == 0) { serviceResponse[index].BPMFeedable = false; }
        if (serviceResponse[index].eBayDupCount == 0) { serviceResponse[index].eBayFeedable = false; }
        if (serviceResponse[index].MellowDupCount == 0) { serviceResponse[index].MellowFeedable = false; }
        if (serviceResponse[index].HouzzDupCount == 0) { serviceResponse[index].HouzzFeedable = false; }


        if (invFeedsItem != null)
        {
          //if(invFeedsItem.ItemNoId == 227)
          //{ Console.WriteLine("Hell!");}
          invFeedsRuleSku = invFeedsRuleSKUs.FindLast(i => i.ItemNoId == invFeedsItem.ItemNoId);
          ruleForSku = await DeterminedFeedingRuleForSKU(inventoryConfig, invFeedsItem, serviceResponse[index], invFeedsRules, invFeedsRuleSku, invSalesHistList);

          if (ruleForSku != 6)
          {  /*
            switch (serviceResponse[index].AppliedFeedingRuleNoBanc)
            {
              case 5: // Low Inventory Rule // IF Low Stock Amazon Rule is activated, then ruleForSku is needed to be changed here 
                if (serviceResponse[index].BancFeedable == true)
                { isPassed = InventoryFeedsLowInventoryRule(bancId, invFeedsRules, serviceResponse[index], inventoryConfig); }
                break;
              case 4: // Custom Rule - SKU Specific
                invSalesData = invSalesHistList.FindLast(ish => ish.ItemNoId == serviceResponse[index].ItemNoId);
                if (serviceResponse[index].BancFeedable == true)
                { isPassed = await InventoryFeedsCustomRulesSalesDataRule(bancId, invSalesData, invFeedsRules, invFeedsRuleSku, serviceResponse[index]); }
                break;
              case 3: // Custom Rule - Market Specific
                invSalesData = invSalesHistList.FindLast(ish => ish.ItemNoId == serviceResponse[index].ItemNoId);
                if (serviceResponse[index].BancFeedable == true)
                { isPassed = await InventoryFeedsCustomRulesSalesDataRule(bancId, invSalesData, invFeedsRules, invFeedsRuleSku, serviceResponse[index]); }
                break;
              case 2: // New Item or Low Sales History Data Rule
                if (serviceResponse[index].BancFeedable == true)
                { isPassed = InventoryFeedsNewItemLowSalesDataRule(bancId, invFeedsRules, serviceResponse[index]); }
                break;
              case 1: // Sales History and/or Custom Rule - Market Specific
                invSalesData = invSalesHistList.FindLast(ish => ish.ItemNoId == serviceResponse[index].ItemNoId);
                if (serviceResponse[index].BancFeedable == true)
                { isPassed = await InventoryFeedsCustomRulesSalesDataRule(bancId, invSalesData, invFeedsRules, invFeedsRuleSku, serviceResponse[index]); }
                break;
            } // End of BANC
            switch (serviceResponse[index].AppliedFeedingRuleNoMainsl)
            {
              case 5: // Low Inventory Rule // IF Low Stock Amazon Rule is activated, then ruleForSku is needed to be changed here 
                if (serviceResponse[index].MainslFeedable == true)
                { isPassed = InventoryFeedsLowInventoryRule(mainslId, invFeedsRules, serviceResponse[index], inventoryConfig); }
                break;
              case 4: // Custom Rule - SKU Specific
                invSalesData = invSalesHistList.FindLast(ish => ish.ItemNoId == serviceResponse[index].ItemNoId);
                if (serviceResponse[index].MainslFeedable == true)
                { isPassed = await InventoryFeedsCustomRulesSalesDataRule(mainslId, invSalesData, invFeedsRules, invFeedsRuleSku, serviceResponse[index]); }
                break;
              case 3: // Custom Rule - Market Specific
                invSalesData = invSalesHistList.FindLast(ish => ish.ItemNoId == serviceResponse[index].ItemNoId);
                if (serviceResponse[index].MainslFeedable == true)
                { isPassed = await InventoryFeedsCustomRulesSalesDataRule(mainslId, invSalesData, invFeedsRules, invFeedsRuleSku, serviceResponse[index]); }
                break;
              case 2: // New Item or Low Sales History Data Rule
                if (serviceResponse[index].MainslFeedable == true)
                { isPassed = InventoryFeedsNewItemLowSalesDataRule(mainslId, invFeedsRules, serviceResponse[index]); }
                break;
              case 1: // Sales History and/or Custom Rule - Market Specific
                invSalesData = invSalesHistList.FindLast(ish => ish.ItemNoId == serviceResponse[index].ItemNoId);
                if (serviceResponse[index].MainslFeedable == true)
                { isPassed = await InventoryFeedsCustomRulesSalesDataRule(mainslId, invSalesData, invFeedsRules, invFeedsRuleSku, serviceResponse[index]); }
                break;
            } // End of MainSL
            switch (serviceResponse[index].AppliedFeedingRuleNoSWCAFT)
            {
              case 5: // Low Inventory Rule // IF Low Stock Amazon Rule is activated, then ruleForSku is needed to be changed here 
                if (serviceResponse[index].MainslFeedable == true)
                { isPassed = InventoryFeedsLowInventoryRule(swcaftId, invFeedsRules, serviceResponse[index], inventoryConfig); }
                break;
              case 4: // Custom Rule - SKU Specific
                invSalesData = invSalesHistList.FindLast(ish => ish.ItemNoId == serviceResponse[index].ItemNoId);
                if (serviceResponse[index].MainslFeedable == true)
                { isPassed = await InventoryFeedsCustomRulesSalesDataRule(swcaftId, invSalesData, invFeedsRules, invFeedsRuleSku, serviceResponse[index]); }
                break;
              case 3: // Custom Rule - Market Specific
                invSalesData = invSalesHistList.FindLast(ish => ish.ItemNoId == serviceResponse[index].ItemNoId);
                if (serviceResponse[index].MainslFeedable == true)
                { isPassed = await InventoryFeedsCustomRulesSalesDataRule(swcaftId, invSalesData, invFeedsRules, invFeedsRuleSku, serviceResponse[index]); }
                break;
              case 2: // New Item or Low Sales History Data Rule
                if (serviceResponse[index].MainslFeedable == true)
                { isPassed = InventoryFeedsNewItemLowSalesDataRule(swcaftId, invFeedsRules, serviceResponse[index]); }
                break;
              case 1: // Sales History and/or Custom Rule - Market Specific
                invSalesData = invSalesHistList.FindLast(ish => ish.ItemNoId == serviceResponse[index].ItemNoId);
                if (serviceResponse[index].MainslFeedable == true)
                { isPassed = await InventoryFeedsCustomRulesSalesDataRule(swcaftId, invSalesData, invFeedsRules, invFeedsRuleSku, serviceResponse[index]); }
                break;
            } // End of SWCAFT
          */

          }
        }
        else // No stock on both warehouses
        {
          nsIcrs = await _kc.NsIcrs
            .Where(n => n.ItemNoId == serviceResponse[index].ItemNoId && n.IsInvFeed > 0)
            .ToListAsync();
          if (nsIcrs != null) // if there is any active feeding SKU
          {
            serviceResponse[index].AppliedFeedingRuleNoBanc = 0;//invFeedsAppliedRules
            serviceResponse[index].AppliedFeedingRuleTypeBanc = invFeedsAppliedRules.Where(i => i.RuleNo == 0).FirstOrDefault().Description;
            serviceResponse[index].AppliedFeedingRuleNoMainsl = 0;//invFeedsAppliedRules
            serviceResponse[index].AppliedFeedingRuleTypeMainsl = invFeedsAppliedRules.Where(i => i.RuleNo == 0).FirstOrDefault().Description;
            //serviceResponse[index].AppliedFeedingRuleNoSWCAFT = 0;//invFeedsAppliedRules
            //serviceResponse[index].AppliedFeedingRuleTypeSWCAFT = invFeedsAppliedRules.Where(i => i.RuleNo == 0).FirstOrDefault().Description;

            foreach (NsIcr tmpIcr in nsIcrs)
            {
              updateEachMarketSKU(tmpIcr.CustomerId, tmpIcr.CustSku, serviceResponse[index]);
            }// End of foreach
            //index++;
          }
          else // If not, just remove from the list
          {
            serviceResponse.Remove(serviceResponse[index]);
          }
        }


        index++;
      }
      bool result = await SaveInventoryFeeds(false, invFeedReport.InvFeedsReportId, serviceResponse);

      return serviceResponse;
    }



    // Determine
    public async Task<int> DeterminedFeedingRuleForSKU(InventoryConfig inventoryConfig, InvFeedsItem invFeedsItem, GetInventoryFeedsItemDTO getInventoryFeedsItemDTO,
      List<InvFeedsRule> invFeedsRules, InvFeedsRuleSku invFeedsRuleSKU, List<GetInvSalesHistoryListItemDTO> invSalesHistList)
    {
      int result = 0, resultMainsl = 1;//, resultSWCAFT = 1; resultBanc = 1,

      // For feeding rules
      List<InvFeedsAppliedRule> invFeedsAppliedRules = await _kc.InvFeedsAppliedRules.ToListAsync();

      // For individual markets feedable
      List<InvFeedsRuleSkumkt> invFeedsRuleSkumkts = new List<InvFeedsRuleSkumkt>();
      List<NsIcr> nsIcrs = await _kc.NsIcrs
        .Where(n => n.ItemNoId == getInventoryFeedsItemDTO.ItemNoId && n.IsInvFeed == 1)
        .ToListAsync();
      //NsIcr tmpIcr = new NsIcr();
      if (invFeedsRuleSKU != null) // Rules for each market
      {
        invFeedsRuleSkumkts = await _kc.InvFeedsRuleSkumkts
          .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSKU.InvFeedsRuleSkuid)
          .Where(i => i.IsActivated == true)
          .ToListAsync();
        // Currently, missing "Do Not Feed From SWCAFT"; Default value is True
        // getInventoryFeedsItemDTO.BancFeedable = (invFeedsRuleSKU.DoNotFeedFromBanc.HasValue ?
        // ((bool)invFeedsRuleSKU.DoNotFeedFromBanc ? false : true) : true);
        getInventoryFeedsItemDTO.MainslFeedable = (invFeedsRuleSKU.DoNotFeedFromMainsl.HasValue ?
          ((bool)invFeedsRuleSKU.DoNotFeedFromMainsl ? false : true) : true);
        if (invFeedsRuleSkumkts.Count > 0)
        {
          foreach (InvFeedsRuleSkumkt tmpDto in invFeedsRuleSkumkts)
          {
            switch (tmpDto.CustomerId)
            {
              case 5: // Amazon Drop Ship
                getInventoryFeedsItemDTO.AmazonFeedable = (tmpDto.DoNotFeedToHere.HasValue ?
                  ((bool)tmpDto.DoNotFeedToHere ? false : true) : true);
                if (nsIcrs.FindLast(i => i.CustomerId == 5) == null) { getInventoryFeedsItemDTO.AmazonFeedable = false; }
                break;
              case 9: // BPM Website - need to change
                getInventoryFeedsItemDTO.BPMFeedable = (tmpDto.DoNotFeedToHere.HasValue ?
                  ((bool)tmpDto.DoNotFeedToHere ? false : true) : true);
                if (nsIcrs.FindLast(i => i.CustomerId == 9) == null) { getInventoryFeedsItemDTO.BPMFeedable = false; }
                break;
              case 12: // eBay
                getInventoryFeedsItemDTO.eBayFeedable = (tmpDto.DoNotFeedToHere.HasValue ?
                  ((bool)tmpDto.DoNotFeedToHere ? false : true) : true);
                if (nsIcrs.FindLast(i => i.CustomerId == 12) == null) { getInventoryFeedsItemDTO.eBayFeedable = false; }
                break;
              /*
            case 14: // Houzz Drop Ship
              getInventoryFeedsItemDTO.HouzzFeedable = (tmpDto.DoNotFeedToHere.HasValue ?
                ((bool)tmpDto.DoNotFeedToHere ? false : true) : true);
              if (nsIcrs.FindLast(i => i.CustomerId == 14) == null) { getInventoryFeedsItemDTO.HouzzFeedable = false; }
              break;*/
              case 18: // Mellow Website - need to change
                getInventoryFeedsItemDTO.MellowFeedable = (tmpDto.DoNotFeedToHere.HasValue ?
                  ((bool)tmpDto.DoNotFeedToHere ? false : true) : true);
                if (nsIcrs.FindLast(i => i.CustomerId == 18) == null) { getInventoryFeedsItemDTO.MellowFeedable = false; }
                break;
              case 21: // Overstock Drop Ship
                getInventoryFeedsItemDTO.OverstockFeedable = (tmpDto.DoNotFeedToHere.HasValue ?
                  ((bool)tmpDto.DoNotFeedToHere ? false : true) : true);
                if (nsIcrs.FindLast(i => i.CustomerId == 21) == null) { getInventoryFeedsItemDTO.OverstockFeedable = false; }
                break;
              case 26: // Walmart DSV
                getInventoryFeedsItemDTO.WalmartFeedable = (tmpDto.DoNotFeedToHere.HasValue ?
                  ((bool)tmpDto.DoNotFeedToHere ? false : true) : true);
                if (nsIcrs.FindLast(i => i.CustomerId == 26) == null) { getInventoryFeedsItemDTO.WalmartFeedable = false; }
                break;
              case 29: // Wayfair Drop Ship
                getInventoryFeedsItemDTO.WayfairFeedable = (tmpDto.DoNotFeedToHere.HasValue ?
                  ((bool)tmpDto.DoNotFeedToHere ? false : true) : true);
                if (nsIcrs.FindLast(i => i.CustomerId == 29) == null) { getInventoryFeedsItemDTO.WayfairFeedable = false; }
                break;
            }
          }
        }
      } // End of market feedable check




      foreach (InvFeedsItemLocQty tmpLocQty in invFeedsItem.InvFeedsItemLocQties)
      {
        // 1. Zero or Low Stock Rule; Rule No.: 6
        // only from BANC(4) and Mainsl(25)
        /*if (tmpLocQty.ItemLocId == 4)
        {
          if (inventoryConfig.ZeroOutBufferBanc >= tmpLocQty.QtyAvail)
          {
            resultBanc = 6;

            getInventoryFeedsItemDTO.QtyAvailBanc = 0;
            getInventoryFeedsItemDTO.AmazonQtyBanc = 0;
            getInventoryFeedsItemDTO.BPMWebQtyBanc = 0;
            getInventoryFeedsItemDTO.MellowWebQtyBanc = 0;
            getInventoryFeedsItemDTO.HouzzQtyBanc = 0;
            getInventoryFeedsItemDTO.OverstockQtyBanc = 0;
            getInventoryFeedsItemDTO.WalmartQtyBanc = 0;
            getInventoryFeedsItemDTO.WayfairQtyBanc = 0;
            getInventoryFeedsItemDTO.eBayQtyBanc = 0;
          } // Rule 6
          else // end of rule 6
          {
            if (inventoryConfig.LowInventoryQty >= tmpLocQty.QtyAvail)
            { resultBanc = 5; } // end of rule 5
            else
            {
              if (invFeedsRuleSKU != null)
              { resultBanc = 3; } // end of rule 3
              else
              {
                GetInvSalesHistoryListItemDTO getInvSalesHistoryListItemDTO = invSalesHistList.FindLast(i => i.ItemNoId == invFeedsItem.ItemNoId);
                if (getInvSalesHistoryListItemDTO.totalSalesQty >= inventoryConfig.SalesHistoryLowDataSwitchQty)
                { resultBanc = 1; }// end of rule 1
                else
                { resultBanc = 2; }
              }
            }
          }
          getInventoryFeedsItemDTO.AppliedFeedingRuleNoBanc = resultBanc;
          getInventoryFeedsItemDTO.AppliedFeedingRuleTypeBanc = invFeedsAppliedRules.Where(i => i.RuleNo == resultBanc).FirstOrDefault().Description;
        }
        else*/
        if (tmpLocQty.ItemLocId == 25)
        {
          if (inventoryConfig.ZeroOutBufferMainSl >= tmpLocQty.QtyAvail)
          {
            resultMainsl = 6;
            getInventoryFeedsItemDTO.QtyAvailMainsl = 0;
            getInventoryFeedsItemDTO.AmazonQtyMainsl = 0;
            getInventoryFeedsItemDTO.BPMWebQtyMainsl = 0;
            getInventoryFeedsItemDTO.MellowWebQtyMainsl = 0;
            getInventoryFeedsItemDTO.HouzzQtyMainsl = 0;
            getInventoryFeedsItemDTO.OverstockQtyMainsl = 0;
            getInventoryFeedsItemDTO.WalmartQtyMainsl = 0;
            getInventoryFeedsItemDTO.WayfairQtyMainsl = 0;
            getInventoryFeedsItemDTO.eBayQtyMainsl = 0;
          }// Rule 1.
          else // end of rule 6
          {
            if (inventoryConfig.LowInventoryQty >= tmpLocQty.QtyAvail)
            { resultMainsl = 5; } // end of rule 5
            else
            {
              if (invFeedsRuleSKU != null)
              { resultMainsl = 3; } // end of rule 3
              else
              {
                GetInvSalesHistoryListItemDTO getInvSalesHistoryListItemDTO = invSalesHistList.FindLast(i => i.ItemNoId == invFeedsItem.ItemNoId);
                if (getInvSalesHistoryListItemDTO.totalSalesQty >= inventoryConfig.SalesHistoryLowDataSwitchQty)
                { resultMainsl = 1; }// end of rule 2
                else
                { resultMainsl = 2; }
              }
            }
          }
          getInventoryFeedsItemDTO.AppliedFeedingRuleNoMainsl = resultMainsl;
          getInventoryFeedsItemDTO.AppliedFeedingRuleTypeMainsl = invFeedsAppliedRules.Where(i => i.RuleNo == resultMainsl).FirstOrDefault().Description;
        }/*
        else if (tmpLocQty.ItemLocId == 54) // SWCAFT
        {
          if (3 >= tmpLocQty.QtyAvail) //More than 3, then feed!
          {
            resultMainsl = 6;
            getInventoryFeedsItemDTO.QtyAvailSWCAFT = 0;
            getInventoryFeedsItemDTO.AmazonQtySWCAFT = 0;
            getInventoryFeedsItemDTO.BPMWebQtySWCAFT = 0;
            getInventoryFeedsItemDTO.MellowWebQtySWCAFT = 0;
            getInventoryFeedsItemDTO.HouzzQtySWCAFT = 0;
            getInventoryFeedsItemDTO.OverstockQtySWCAFT = 0;
            getInventoryFeedsItemDTO.WalmartQtySWCAFT = 0;
            getInventoryFeedsItemDTO.WayfairQtySWCAFT = 0;
            getInventoryFeedsItemDTO.eBayQtySWCAFT = 0;
          }// Rule 1.
          else // end of rule 6
          {
            if (inventoryConfig.LowInventoryQty >= tmpLocQty.QtyAvail)
            { resultSWCAFT = 5; } // end of rule 5
            else
            {
              if (invFeedsRuleSKU != null)
              { resultSWCAFT = 3; } // end of rule 3
              else
              {
                GetInvSalesHistoryListItemDTO getInvSalesHistoryListItemDTO = invSalesHistList.FindLast(i => i.ItemNoId == invFeedsItem.ItemNoId);
                if (getInvSalesHistoryListItemDTO.totalSalesQty >= inventoryConfig.SalesHistoryLowDataSwitchQty)
                { resultSWCAFT = 1; }// end of rule 2
                else
                { resultSWCAFT = 2; }
              }
            }
          }
          getInventoryFeedsItemDTO.AppliedFeedingRuleNoSWCAFT = resultSWCAFT;
          getInventoryFeedsItemDTO.AppliedFeedingRuleTypeSWCAFT = invFeedsAppliedRules.Where(i => i.RuleNo == resultSWCAFT).FirstOrDefault().Description;
      }*/


        // End of while

        if (resultMainsl == 6)// && resultSWCAFT == 6); resultBanc == 6 && 
        { return result = 6; }
      }
      return result;
    }

    public async Task<int> countDuplicatedSKU(int custId, int itemNoId)
    {
      int result = 0, marketId = CustomerIDtoMarketID(custId);
      //if (marketId == 341)
      //{ Console.WriteLine("Here"); }
      if (custId == 9 || custId == 18)
      {
        result = await _kc.InvFeedsShopifies
          .Where(fs => fs.ItemNoId == itemNoId && fs.CustomerId == custId && fs.IsFeedable == true)
          .CountAsync();
      }
      else
      {
        /*
        result = await _kc.NsIcrs
          .Where(ni => ni.ItemNoId == itemNoId && ni.CustomerId == custId && ni.IsInvFeed == 1)
          .CountAsync();*/
        result = await _kc.MkIcrs
          .Where(i => i.ItemNoId == itemNoId && i.MarketId == marketId && i.IsInvFeed == true)
          .CountAsync();
      }
      return result;
    }

    // For inventory feeding Low Inventory Rule
    // By Brian Yi on 08/24/2021
    public async Task<GetInventoryFeedsItemDTO> InventoryFeedsLowInventoryRule(int LocId, List<InvFeedsRule> invFeedsRules, GetInventoryFeedsItemDTO getInventoryFeedsItemDTO, InventoryConfig inventoryConfig)
    {
      // IF Low Stock Amazon Rule is activated, then ruleForSku is needed to be changed here 
      int mainslId = 25, zinusTracyId = 57, zinusChsId = 108, totalQty = 0, realTotalQty = 0, OnePMarketCount = 4,
        AmazonZeroOut = 0, OverstockZeroOut = 0, WalmartZeroOut = 0, WayfairZeroOut = 0,
        eBayZeroOut = 0, BPMZeroOut = 0, MellowZeroOut = 0, HouzzZeroOut = 0, HomeDepotZeroOut = 0, TargetZeroOut = 0,
        AmazonQty = 0, OverstockQty = 0, WalmartQty = 0, WayfairQty = 0,
        eBayQty = 0, BPMQty = 0, MellowQty = 0, HouzzQty = 0, HomeDepotQty = 0, TargetQty = 0;
      // bancId = 4,  swcaftId = 54, prsmCastId = 51, prsmCaltId = 67, bascId = 62,
      InvFeedsRuleSku invFeedsRuleSku = await _kc.InvFeedsRuleSkus
        .Where(i => i.ItemNoId == getInventoryFeedsItemDTO.ItemNoId)
        .Include(i => i.InvFeedsRuleSkumkts)
        .FirstOrDefaultAsync();

      InvFeedsRuleSkumkt invFeedsRuleSkumkt = new InvFeedsRuleSkumkt();

      foreach (InvFeedsRule tmpDto in invFeedsRules)
      {
        switch (tmpDto.CustomerId)
        {
          case 5: // Amazon Drop Ship
            AmazonZeroOut = (int)tmpDto.ZeroOutAt; 
            if (invFeedsRuleSku != null)
            {
              invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == 5).FirstOrDefault();
              if(invFeedsRuleSkumkt != null)
              { getInventoryFeedsItemDTO.AmazonFeedable = (!((bool)invFeedsRuleSkumkt.DoNotFeedToHere)); }
            }
            break;
          case 9: // BPM Website
            BPMZeroOut = (int)tmpDto.ZeroOutAt;
            if (invFeedsRuleSku != null)
            {
              invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == 9).FirstOrDefault();
              if (invFeedsRuleSkumkt != null)
              { getInventoryFeedsItemDTO.AmazonFeedable = (!((bool)invFeedsRuleSkumkt.DoNotFeedToHere)); }
            }
            break;
          case 12: // eBay
            eBayZeroOut = (int)tmpDto.ZeroOutAt;
            if (invFeedsRuleSku != null)
            {
              invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == 12).FirstOrDefault();
              if (invFeedsRuleSkumkt != null)
              { getInventoryFeedsItemDTO.AmazonFeedable = (!((bool)invFeedsRuleSkumkt.DoNotFeedToHere)); }
            }
            break;
          case 14: // Houzz Drop Ship
            HouzzZeroOut = (int)tmpDto.ZeroOutAt;
            break;
          case 18: // Mellow Website
            MellowZeroOut = (int)tmpDto.ZeroOutAt;
            if (invFeedsRuleSku != null)
            {
              invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == 18).FirstOrDefault();
              if (invFeedsRuleSkumkt != null)
              { getInventoryFeedsItemDTO.AmazonFeedable = (!((bool)invFeedsRuleSkumkt.DoNotFeedToHere)); }
            }
            break;
          case 21: // Overstock Drop Ship
            OverstockZeroOut = (int)tmpDto.ZeroOutAt;
            if (invFeedsRuleSku != null)
            {
              invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == 21).FirstOrDefault();
              if (invFeedsRuleSkumkt != null)
              { getInventoryFeedsItemDTO.AmazonFeedable = (!((bool)invFeedsRuleSkumkt.DoNotFeedToHere)); }
            }
            break;
          case 26: // Walmart DSV
            WalmartZeroOut = (int)tmpDto.ZeroOutAt;
            if (invFeedsRuleSku != null)
            {
              invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == 26).FirstOrDefault();
              if (invFeedsRuleSkumkt != null)
              { getInventoryFeedsItemDTO.AmazonFeedable = (!((bool)invFeedsRuleSkumkt.DoNotFeedToHere)); }
            }
            break;
          case 29: // Wayfair Drop Ship
            WayfairZeroOut = (int)tmpDto.ZeroOutAt;
            if (invFeedsRuleSku != null)
            {
              invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == 29).FirstOrDefault();
              if (invFeedsRuleSkumkt != null)
              { getInventoryFeedsItemDTO.AmazonFeedable = (!((bool)invFeedsRuleSkumkt.DoNotFeedToHere)); }
            }
            break;
          case 40: // HomeDepot Drop Ship
            HomeDepotZeroOut = (int)tmpDto.ZeroOutAt;
            if (invFeedsRuleSku != null)
            {
              invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == 40).FirstOrDefault();
              if (invFeedsRuleSkumkt != null)
              { getInventoryFeedsItemDTO.AmazonFeedable = (!((bool)invFeedsRuleSkumkt.DoNotFeedToHere)); }
            }
            break;
          case 51: // HomeDepot Drop Ship
            TargetZeroOut = (int)tmpDto.ZeroOutAt;
            if (invFeedsRuleSku != null)
            {
              invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == 51).FirstOrDefault();
              if (invFeedsRuleSkumkt != null)
              { getInventoryFeedsItemDTO.AmazonFeedable = (!((bool)invFeedsRuleSkumkt.DoNotFeedToHere)); }
            }
            break;
        }
      }
      //inventoryConfig.AmazonLowStockQty
      //inventoryConfig.IsAmazonLowStockOn
      /*
      if (LocId == bancId && inventoryConfig.ZeroOutBufferBanc < getInventoryFeedsItemDTO.QtyAvailBanc)
      {
        totalQty = getInventoryFeedsItemDTO.QtyAvailBanc - getInventoryFeedsItemDTO.totalStagePOQtyBanc;
        if (totalQty <= 0)
        { getInventoryFeedsItemDTO.BancFeedable = false; getInventoryFeedsItemDTO.QtyAvailBanc = 0; goto SkipToEndBanc; }
        getInventoryFeedsItemDTO.QtyAvailBanc = totalQty; // Added by Brian Yi on 6/12/2024
        if (inventoryConfig.IsAmazonLowStockOn == true && getInventoryFeedsItemDTO.AmazonFeedable == true
          && totalQty <= inventoryConfig.AmazonLowStockQty && inventoryConfig.ZeroOutBufferBanc < totalQty)
        {
          getInventoryFeedsItemDTO.AmazonQtyBanc = totalQty;
          goto SkipToEndBanc;
        }
        if (totalQty > 10)
        {
          OnePMarketCount = 4;
          if (getInventoryFeedsItemDTO.eBayFeedable == true && getInventoryFeedsItemDTO.QtyAvailBanc > eBayZeroOut) { getInventoryFeedsItemDTO.eBayQtyBanc = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.BPMFeedable == true && getInventoryFeedsItemDTO.QtyAvailBanc > BPMZeroOut) { getInventoryFeedsItemDTO.BPMWebQtyBanc = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.MellowFeedable == true && getInventoryFeedsItemDTO.QtyAvailBanc > MellowZeroOut) { getInventoryFeedsItemDTO.MellowWebQtyBanc = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.HouzzFeedable == true && getInventoryFeedsItemDTO.QtyAvailBanc > HouzzZeroOut) { getInventoryFeedsItemDTO.HouzzQtyBanc = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.HomeDepotFeedable == true && getInventoryFeedsItemDTO.QtyAvailBanc > HomeDepotZeroOut) { getInventoryFeedsItemDTO.HomeDepotQtyBanc = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.TargetFeedable == true && getInventoryFeedsItemDTO.QtyAvailBanc > TargetZeroOut) { getInventoryFeedsItemDTO.TargetQtyBanc = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.AmazonFeedable == true && getInventoryFeedsItemDTO.QtyAvailBanc > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyBanc;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && getInventoryFeedsItemDTO.QtyAvailBanc > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyBanc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyBanc;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && getInventoryFeedsItemDTO.QtyAvailBanc > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyBanc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyBanc;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && getInventoryFeedsItemDTO.QtyAvailBanc > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyBanc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyBanc;
          }
          else { OnePMarketCount--; }

          if (getInventoryFeedsItemDTO.AmazonFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailBanc > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyBanc;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailBanc > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyBanc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyBanc;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailBanc > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyBanc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyBanc;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailBanc > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyBanc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyBanc;
            OnePMarketCount--;
          }
        }
        else if (totalQty <= 10 && totalQty > inventoryConfig.ZeroOutBufferBanc)
        {
          OnePMarketCount = 4;
          if (getInventoryFeedsItemDTO.AmazonFeedable == true && getInventoryFeedsItemDTO.QtyAvailBanc > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyBanc;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && getInventoryFeedsItemDTO.QtyAvailBanc > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyBanc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyBanc;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && getInventoryFeedsItemDTO.QtyAvailBanc > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyBanc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyBanc;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && getInventoryFeedsItemDTO.QtyAvailBanc > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyBanc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyBanc;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.AmazonFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailBanc > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyBanc;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailBanc > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyBanc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyBanc;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailBanc > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyBanc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyBanc;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailBanc > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyBanc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyBanc;
            OnePMarketCount--;
          }
        }
        else if (totalQty <= inventoryConfig.ZeroOutBufferBanc && totalQty > 0)
        { // Do Nothing
        }
      SkipToEndBanc:
        totalQty = getInventoryFeedsItemDTO.QtyAvailBanc;
        AmazonQty = getInventoryFeedsItemDTO.AmazonQtyBanc;
        OverstockQty = getInventoryFeedsItemDTO.OverstockQtyBanc;
        WalmartQty = getInventoryFeedsItemDTO.WalmartQtyBanc;
        WayfairQty = getInventoryFeedsItemDTO.WayfairQtyBanc;
        eBayQty = getInventoryFeedsItemDTO.eBayQtyBanc;
        BPMQty = getInventoryFeedsItemDTO.BPMWebQtyBanc;
        MellowQty = getInventoryFeedsItemDTO.MellowWebQtyBanc;
        HouzzQty = getInventoryFeedsItemDTO.HouzzQtyBanc;
        HomeDepotQty = getInventoryFeedsItemDTO.HomeDepotQtyBanc;
        TargetQty = getInventoryFeedsItemDTO.TargetQtyBanc;
        getInventoryFeedsItemDTO.leftOverQtyBanc = totalQty - (AmazonQty + OverstockQty + WalmartQty + WayfairQty + eBayQty + BPMQty + MellowQty + HouzzQty + HomeDepotQty + TargetQty);
        // Floor -> round
        getInventoryFeedsItemDTO.AmazonBancPercentage = (AmazonQty == 0 ? 0 : (int)Math.Round(((double)AmazonQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.OverstockBancPercentage = (OverstockQty == 0 ? 0 : (int)Math.Round(((double)OverstockQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.WalmartBancPercentage = (WalmartQty == 0 ? 0 : (int)Math.Round(((double)WalmartQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.WayfairBancPercentage = (WayfairQty == 0 ? 0 : (int)Math.Round(((double)WayfairQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.BPMWebBancPercentage = (BPMQty == 0 ? 0 : (int)Math.Round(((double)BPMQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.MellowWebBancPercentage = (MellowQty == 0 ? 0 : (int)Math.Round(((double)MellowQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.eBayBancPercentage = (eBayQty == 0 ? 0 : (int)Math.Round(((double)eBayQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.HouzzBancPercentage = (HouzzQty == 0 ? 0 : (int)Math.Round(((double)HouzzQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.HomeDepotBancPercentage = (HomeDepotQty == 0 ? 0 : (int)Math.Round(((double)HomeDepotQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.TargetBancPercentage = (TargetQty == 0 ? 0 : (int)Math.Round(((double)TargetQty / totalQty) * 100, MidpointRounding.AwayFromZero));

      }// Done for BANC
      else */
      if (LocId == mainslId && inventoryConfig.ZeroOutBufferMainSl < getInventoryFeedsItemDTO.QtyAvailMainsl)
      {
        totalQty = getInventoryFeedsItemDTO.QtyAvailMainsl - (getInventoryFeedsItemDTO.totalStagePOQtyMainsl + 15);
        realTotalQty = totalQty + 15; // Added by Brian Yi on 7/30/2024
        if (realTotalQty <= 0) { realTotalQty = 0; }
        if (totalQty <= 0)
        { getInventoryFeedsItemDTO.MainslFeedable = false; getInventoryFeedsItemDTO.QtyAvailMainsl = 0; goto SkipToEndMainSL; }
        getInventoryFeedsItemDTO.QtyAvailMainsl = totalQty; // Added by Brian Yi on 6/12/2024
        if (inventoryConfig.IsAmazonLowStockOn == true && getInventoryFeedsItemDTO.AmazonFeedable == true
         && totalQty <= inventoryConfig.AmazonLowStockQty && inventoryConfig.ZeroOutBufferMainSl < totalQty)
        {
          getInventoryFeedsItemDTO.AmazonQtyMainsl = totalQty;
          goto SkipToEndMainSL;
        }
        if (totalQty > 10)
        {
          OnePMarketCount = 4;
          if (getInventoryFeedsItemDTO.eBayFeedable == true && getInventoryFeedsItemDTO.QtyAvailMainsl > eBayZeroOut) { getInventoryFeedsItemDTO.eBayQtyMainsl = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.HomeDepotFeedable == true && getInventoryFeedsItemDTO.QtyAvailMainsl > HomeDepotZeroOut) { getInventoryFeedsItemDTO.HomeDepotQtyMainsl = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.BPMFeedable == true && getInventoryFeedsItemDTO.QtyAvailMainsl > BPMZeroOut) { getInventoryFeedsItemDTO.BPMWebQtyMainsl = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.MellowFeedable == true && getInventoryFeedsItemDTO.QtyAvailMainsl > MellowZeroOut) { getInventoryFeedsItemDTO.MellowWebQtyMainsl = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.HouzzFeedable == true && getInventoryFeedsItemDTO.QtyAvailMainsl > HouzzZeroOut) { getInventoryFeedsItemDTO.HouzzQtyMainsl = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.TargetFeedable == true && getInventoryFeedsItemDTO.QtyAvailMainsl > TargetZeroOut) { getInventoryFeedsItemDTO.TargetQtyMainsl = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.AmazonFeedable == true && getInventoryFeedsItemDTO.QtyAvailMainsl > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyMainsl = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyMainsl;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && getInventoryFeedsItemDTO.QtyAvailMainsl > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyMainsl = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyMainsl;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && getInventoryFeedsItemDTO.QtyAvailMainsl > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyMainsl = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyMainsl;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && getInventoryFeedsItemDTO.QtyAvailMainsl > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyMainsl = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyMainsl;
          }
          else { OnePMarketCount--; }

          if (getInventoryFeedsItemDTO.AmazonFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailMainsl > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyMainsl = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyMainsl;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailMainsl > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyMainsl = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyMainsl;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailMainsl > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyMainsl = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyMainsl;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailMainsl > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyMainsl = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyMainsl;
            OnePMarketCount--;
          }
        }/*
        else if (totalQty <= 20 && totalQty > 10)
        { OnePMarketCount = 4;
        }*/
        else if (totalQty <= 10 && totalQty > inventoryConfig.ZeroOutBufferMainSl)
        {
          OnePMarketCount = 4;
          if (getInventoryFeedsItemDTO.AmazonFeedable == true && getInventoryFeedsItemDTO.QtyAvailMainsl > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyMainsl = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyMainsl;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && getInventoryFeedsItemDTO.QtyAvailMainsl > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyMainsl = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyMainsl;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && getInventoryFeedsItemDTO.QtyAvailMainsl > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyMainsl = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyMainsl;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && getInventoryFeedsItemDTO.QtyAvailMainsl > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyMainsl = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyMainsl;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.AmazonFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailMainsl > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyMainsl = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyMainsl;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailMainsl > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyMainsl = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyMainsl;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailMainsl > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyMainsl = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyMainsl;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailMainsl > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyMainsl = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyMainsl;
            OnePMarketCount--;
          }
        }
        /*else if (totalQty <= 5 && totalQty > 3) // Buffer out on BANC
        { 
          OnePMarketCount = 4;
        }*/
        else if (totalQty <= inventoryConfig.ZeroOutBufferMainSl && totalQty > 0)
        { // Do Nothing
        }
      SkipToEndMainSL:
        getInventoryFeedsItemDTO.QtyAvailMainsl = realTotalQty;
        totalQty = getInventoryFeedsItemDTO.QtyAvailMainsl;
        AmazonQty = getInventoryFeedsItemDTO.AmazonQtyMainsl;
        OverstockQty = getInventoryFeedsItemDTO.OverstockQtyMainsl;
        WalmartQty = getInventoryFeedsItemDTO.WalmartQtyMainsl;
        WayfairQty = getInventoryFeedsItemDTO.WayfairQtyMainsl;
        eBayQty = getInventoryFeedsItemDTO.eBayQtyMainsl;
        BPMQty = getInventoryFeedsItemDTO.BPMWebQtyMainsl;
        MellowQty = getInventoryFeedsItemDTO.MellowWebQtyMainsl;
        HouzzQty = getInventoryFeedsItemDTO.HouzzQtyMainsl;
        HomeDepotQty = getInventoryFeedsItemDTO.HomeDepotQtyMainsl;
        TargetQty = getInventoryFeedsItemDTO.TargetQtyMainsl;
        getInventoryFeedsItemDTO.leftOverQtyMainsl = totalQty - (AmazonQty + OverstockQty + WalmartQty + WayfairQty + eBayQty + BPMQty + MellowQty + HouzzQty + HomeDepotQty + TargetQty);

        //Floor -> Round on 8/1/2022
        getInventoryFeedsItemDTO.AmazonMainslPercentage = (AmazonQty == 0 ? 0 : (int)Math.Round(((double)AmazonQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.OverstockMainslPercentage = (OverstockQty == 0 ? 0 : (int)Math.Round(((double)OverstockQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.WalmartMainslPercentage = (WalmartQty == 0 ? 0 : (int)Math.Round(((double)WalmartQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.WayfairMainslPercentage = (WayfairQty == 0 ? 0 : (int)Math.Round(((double)WayfairQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.BPMWebMainslPercentage = (BPMQty == 0 ? 0 : (int)Math.Round(((double)BPMQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.MellowWebMainslPercentage = (MellowQty == 0 ? 0 : (int)Math.Round(((double)MellowQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.eBayMainslPercentage = (eBayQty == 0 ? 0 : (int)Math.Round(((double)eBayQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.HouzzMainslPercentage = (HouzzQty == 0 ? 0 : (int)Math.Round(((double)HouzzQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.HomeDepotMainslPercentage = (HomeDepotQty == 0 ? 0 : (int)Math.Round(((double)HomeDepotQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.TargetMainslPercentage = (TargetQty == 0 ? 0 : (int)Math.Round(((double)TargetQty / totalQty) * 100, MidpointRounding.AwayFromZero));

      } // Done for MainSL  
      /*else if (LocId == swcaftId && 3 < getInventoryFeedsItemDTO.QtyAvailSWCAFT) //SWCAFT NEED TO BE FIXED
       {
         totalQty = getInventoryFeedsItemDTO.QtyAvailSWCAFT;
         if (inventoryConfig.IsAmazonLowStockOn == true && getInventoryFeedsItemDTO.AmazonFeedable == true
          && totalQty <= inventoryConfig.AmazonLowStockQty && 3 < totalQty)
         {
           getInventoryFeedsItemDTO.AmazonQtySWCAFT = totalQty;
           goto SkipToEndSWCAFT;
         }
         if (totalQty > 10)
         {
           OnePMarketCount = 4;
           if (getInventoryFeedsItemDTO.eBayFeedable == true && getInventoryFeedsItemDTO.QtyAvailSWCAFT > eBayZeroOut) { getInventoryFeedsItemDTO.eBayQtySWCAFT = 1; totalQty--; }
           if (getInventoryFeedsItemDTO.HomeDepotFeedable == true && getInventoryFeedsItemDTO.QtyAvailSWCAFT > HomeDepotZeroOut) { getInventoryFeedsItemDTO.HomeDepotQtySWCAFT = 1; totalQty--; }
           if (getInventoryFeedsItemDTO.BPMFeedable == true && getInventoryFeedsItemDTO.QtyAvailSWCAFT > BPMZeroOut) { getInventoryFeedsItemDTO.BPMWebQtySWCAFT = 1; totalQty--; }
           if (getInventoryFeedsItemDTO.MellowFeedable == true && getInventoryFeedsItemDTO.QtyAvailSWCAFT > MellowZeroOut) { getInventoryFeedsItemDTO.MellowWebQtySWCAFT = 1; totalQty--; }
           if (getInventoryFeedsItemDTO.HouzzFeedable == true && getInventoryFeedsItemDTO.QtyAvailSWCAFT > HouzzZeroOut) { getInventoryFeedsItemDTO.HouzzQtySWCAFT = 1; totalQty--; }
           if (getInventoryFeedsItemDTO.TargetFeedable == true && getInventoryFeedsItemDTO.QtyAvailSWCAFT > TargetZeroOut) { getInventoryFeedsItemDTO.TargetQtySWCAFT = 1; totalQty--; }
           if (getInventoryFeedsItemDTO.AmazonFeedable == true && getInventoryFeedsItemDTO.QtyAvailSWCAFT > AmazonZeroOut)
           {
             getInventoryFeedsItemDTO.AmazonQtySWCAFT = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtySWCAFT;
           }
           else { OnePMarketCount--; }
           if (getInventoryFeedsItemDTO.OverstockFeedable == true && getInventoryFeedsItemDTO.QtyAvailSWCAFT > OverstockZeroOut)
           {
             getInventoryFeedsItemDTO.OverstockQtySWCAFT = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtySWCAFT;
           }
           else { OnePMarketCount--; }
           if (getInventoryFeedsItemDTO.WalmartFeedable == true && getInventoryFeedsItemDTO.QtyAvailSWCAFT > WalmartZeroOut)
           {
             getInventoryFeedsItemDTO.WalmartQtySWCAFT = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtySWCAFT;
           }
           else { OnePMarketCount--; }
           if (getInventoryFeedsItemDTO.WayfairFeedable == true && getInventoryFeedsItemDTO.QtyAvailSWCAFT > WayfairZeroOut)
           {
             getInventoryFeedsItemDTO.WayfairQtySWCAFT = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtySWCAFT;
           }
           else { OnePMarketCount--; }

           if (getInventoryFeedsItemDTO.AmazonFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailSWCAFT > AmazonZeroOut)
           {
             getInventoryFeedsItemDTO.AmazonQtySWCAFT = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtySWCAFT;
             OnePMarketCount--;
           }
           if (getInventoryFeedsItemDTO.OverstockFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailSWCAFT > OverstockZeroOut)
           {
             getInventoryFeedsItemDTO.OverstockQtySWCAFT = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtySWCAFT;
             OnePMarketCount--;
           }
           if (getInventoryFeedsItemDTO.WalmartFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailSWCAFT > WalmartZeroOut)
           {
             getInventoryFeedsItemDTO.WalmartQtySWCAFT = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtySWCAFT;
             OnePMarketCount--;
           }
           if (getInventoryFeedsItemDTO.WayfairFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailSWCAFT > WayfairZeroOut)
           {
             getInventoryFeedsItemDTO.WayfairQtySWCAFT = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtySWCAFT;
             OnePMarketCount--;
           }
         }
         else if (totalQty <= 10 && totalQty > 3) // NEED TO BE FIXED!!!
         {
           OnePMarketCount = 4;
           if (getInventoryFeedsItemDTO.AmazonFeedable == true && getInventoryFeedsItemDTO.QtyAvailSWCAFT > AmazonZeroOut)
           {
             getInventoryFeedsItemDTO.AmazonQtySWCAFT = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtySWCAFT;
           }
           else { OnePMarketCount--; }
           if (getInventoryFeedsItemDTO.OverstockFeedable == true && getInventoryFeedsItemDTO.QtyAvailSWCAFT > OverstockZeroOut)
           {
             getInventoryFeedsItemDTO.OverstockQtySWCAFT = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtySWCAFT;
           }
           else { OnePMarketCount--; }
           if (getInventoryFeedsItemDTO.WalmartFeedable == true && getInventoryFeedsItemDTO.QtyAvailSWCAFT > WalmartZeroOut)
           {
             getInventoryFeedsItemDTO.WalmartQtySWCAFT = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtySWCAFT;
           }
           else { OnePMarketCount--; }
           if (getInventoryFeedsItemDTO.WayfairFeedable == true && getInventoryFeedsItemDTO.QtyAvailSWCAFT > WayfairZeroOut)
           {
             getInventoryFeedsItemDTO.WayfairQtySWCAFT = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtySWCAFT;
           }
           else { OnePMarketCount--; }
           if (getInventoryFeedsItemDTO.AmazonFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailSWCAFT > AmazonZeroOut)
           {
             getInventoryFeedsItemDTO.AmazonQtySWCAFT = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtySWCAFT;
             OnePMarketCount--;
           }
           if (getInventoryFeedsItemDTO.OverstockFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailSWCAFT > OverstockZeroOut)
           {
             getInventoryFeedsItemDTO.OverstockQtySWCAFT = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtySWCAFT;
             OnePMarketCount--;
           }
           if (getInventoryFeedsItemDTO.WalmartFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailSWCAFT > WalmartZeroOut)
           {
             getInventoryFeedsItemDTO.WalmartQtySWCAFT = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtySWCAFT;
             OnePMarketCount--;
           }
           if (getInventoryFeedsItemDTO.WayfairFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailSWCAFT > WayfairZeroOut)
           {
             getInventoryFeedsItemDTO.WayfairQtySWCAFT = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtySWCAFT;
             OnePMarketCount--;
           }
         }
         else if (totalQty <= 3 && totalQty > 0) // Need to be fixed!!!
         { // Do Nothing
         }
       SkipToEndSWCAFT:
         totalQty = getInventoryFeedsItemDTO.QtyAvailSWCAFT;
         AmazonQty = getInventoryFeedsItemDTO.AmazonQtySWCAFT;
         OverstockQty = getInventoryFeedsItemDTO.OverstockQtySWCAFT;
         WalmartQty = getInventoryFeedsItemDTO.WalmartQtySWCAFT;
         WayfairQty = getInventoryFeedsItemDTO.WayfairQtySWCAFT;
         eBayQty = getInventoryFeedsItemDTO.eBayQtySWCAFT;
         BPMQty = getInventoryFeedsItemDTO.BPMWebQtySWCAFT;
         MellowQty = getInventoryFeedsItemDTO.MellowWebQtySWCAFT;
         HouzzQty = getInventoryFeedsItemDTO.HouzzQtySWCAFT;
         HomeDepotQty = getInventoryFeedsItemDTO.HomeDepotQtySWCAFT;
         TargetQty = getInventoryFeedsItemDTO.TargetQtySWCAFT;
         getInventoryFeedsItemDTO.leftOverQtySWCAFT = totalQty - (AmazonQty + OverstockQty + WalmartQty + WayfairQty + eBayQty + BPMQty + MellowQty + HouzzQty + HomeDepotQty + TargetQty);

         // Floor -> Round on 08/01/2022
         getInventoryFeedsItemDTO.AmazonSWCAFTPercentage = (AmazonQty == 0 ? 0 : (int)Math.Round(((double)AmazonQty / totalQty) * 100, MidpointRounding.AwayFromZero));
         getInventoryFeedsItemDTO.OverstockSWCAFTPercentage = (OverstockQty == 0 ? 0 : (int)Math.Round(((double)OverstockQty / totalQty) * 100, MidpointRounding.AwayFromZero));
         getInventoryFeedsItemDTO.WalmartSWCAFTPercentage = (WalmartQty == 0 ? 0 : (int)Math.Round(((double)WalmartQty / totalQty) * 100, MidpointRounding.AwayFromZero));
         getInventoryFeedsItemDTO.WayfairSWCAFTPercentage = (WayfairQty == 0 ? 0 : (int)Math.Round(((double)WayfairQty / totalQty) * 100, MidpointRounding.AwayFromZero));
         getInventoryFeedsItemDTO.BPMWebSWCAFTPercentage = (BPMQty == 0 ? 0 : (int)Math.Round(((double)BPMQty / totalQty) * 100, MidpointRounding.AwayFromZero));
         getInventoryFeedsItemDTO.MellowWebSWCAFTPercentage = (MellowQty == 0 ? 0 : (int)Math.Round(((double)MellowQty / totalQty) * 100, MidpointRounding.AwayFromZero));
         getInventoryFeedsItemDTO.eBaySWCAFTPercentage = (eBayQty == 0 ? 0 : (int)Math.Round(((double)eBayQty / totalQty) * 100, MidpointRounding.AwayFromZero));
         getInventoryFeedsItemDTO.HouzzSWCAFTPercentage = (HouzzQty == 0 ? 0 : (int)Math.Round(((double)HouzzQty / totalQty) * 100, 0, MidpointRounding.AwayFromZero));
         getInventoryFeedsItemDTO.HomeDepotSWCAFTPercentage = (HomeDepotQty == 0 ? 0 : (int)Math.Round(((double)HomeDepotQty / totalQty) * 100, MidpointRounding.AwayFromZero));
         getInventoryFeedsItemDTO.TargetSWCAFTPercentage = (TargetQty == 0 ? 0 : (int)Math.Round(((double)TargetQty / totalQty) * 100, MidpointRounding.AwayFromZero));

     } */  // Done for SWCAFT
      /* else if (LocId == bascId && 3 < getInventoryFeedsItemDTO.QtyAvailBasc) //Basc NEED TO BE FIXED
       {
         totalQty = getInventoryFeedsItemDTO.QtyAvailBasc - getInventoryFeedsItemDTO.totalStagePOQtyBasc;
         if (totalQty <= 0)
         { getInventoryFeedsItemDTO.BascFeedable = false; getInventoryFeedsItemDTO.QtyAvailBasc = 0; goto SkipToEndBasc; }
         getInventoryFeedsItemDTO.QtyAvailBasc = totalQty; // Added by Brian Yi on 6/12/2024
         if (inventoryConfig.IsAmazonLowStockOn == true && getInventoryFeedsItemDTO.AmazonFeedable == true
          && totalQty <= inventoryConfig.AmazonLowStockQty && 3 < totalQty)
         {
           getInventoryFeedsItemDTO.AmazonQtyBasc = totalQty;
           goto SkipToEndBasc;
         }
         if (totalQty > 10)
         {
           OnePMarketCount = 4;
           if (getInventoryFeedsItemDTO.eBayFeedable == true && getInventoryFeedsItemDTO.QtyAvailBasc > eBayZeroOut) { getInventoryFeedsItemDTO.eBayQtyBasc = 1; totalQty--; }
           if (getInventoryFeedsItemDTO.HomeDepotFeedable == true && getInventoryFeedsItemDTO.QtyAvailBasc > HomeDepotZeroOut) { getInventoryFeedsItemDTO.HomeDepotQtyBasc = 1; totalQty--; }
           if (getInventoryFeedsItemDTO.BPMFeedable == true && getInventoryFeedsItemDTO.QtyAvailBasc > BPMZeroOut) { getInventoryFeedsItemDTO.BPMWebQtyBasc = 1; totalQty--; }
           if (getInventoryFeedsItemDTO.MellowFeedable == true && getInventoryFeedsItemDTO.QtyAvailBasc > MellowZeroOut) { getInventoryFeedsItemDTO.MellowWebQtyBasc = 1; totalQty--; }
           if (getInventoryFeedsItemDTO.HouzzFeedable == true && getInventoryFeedsItemDTO.QtyAvailBasc > HouzzZeroOut) { getInventoryFeedsItemDTO.HouzzQtyBasc = 1; totalQty--; }
           if (getInventoryFeedsItemDTO.TargetFeedable == true && getInventoryFeedsItemDTO.QtyAvailBasc > TargetZeroOut) { getInventoryFeedsItemDTO.TargetQtyBasc = 1; totalQty--; }
           if (getInventoryFeedsItemDTO.AmazonFeedable == true && getInventoryFeedsItemDTO.QtyAvailBasc > AmazonZeroOut)
           {
             getInventoryFeedsItemDTO.AmazonQtyBasc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyBasc;
           }
           else { OnePMarketCount--; }
           if (getInventoryFeedsItemDTO.OverstockFeedable == true && getInventoryFeedsItemDTO.QtyAvailBasc > OverstockZeroOut)
           {
             getInventoryFeedsItemDTO.OverstockQtyBasc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyBasc;
           }
           else { OnePMarketCount--; }
           if (getInventoryFeedsItemDTO.WalmartFeedable == true && getInventoryFeedsItemDTO.QtyAvailBasc > WalmartZeroOut)
           {
             getInventoryFeedsItemDTO.WalmartQtyBasc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyBasc;
           }
           else { OnePMarketCount--; }
           if (getInventoryFeedsItemDTO.WayfairFeedable == true && getInventoryFeedsItemDTO.QtyAvailBasc > WayfairZeroOut)
           {
             getInventoryFeedsItemDTO.WayfairQtyBasc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyBasc;
           }
           else { OnePMarketCount--; }

           if (getInventoryFeedsItemDTO.AmazonFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailBasc > AmazonZeroOut)
           {
             getInventoryFeedsItemDTO.AmazonQtyBasc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyBasc;
             OnePMarketCount--;
           }
           if (getInventoryFeedsItemDTO.OverstockFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailBasc > OverstockZeroOut)
           {
             getInventoryFeedsItemDTO.OverstockQtyBasc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyBasc;
             OnePMarketCount--;
           }
           if (getInventoryFeedsItemDTO.WalmartFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailBasc > WalmartZeroOut)
           {
             getInventoryFeedsItemDTO.WalmartQtyBasc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyBasc;
             OnePMarketCount--;
           }
           if (getInventoryFeedsItemDTO.WayfairFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailBasc > WayfairZeroOut)
           {
             getInventoryFeedsItemDTO.WayfairQtyBasc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyBasc;
             OnePMarketCount--;
           }
         }
         else if (totalQty <= 10 && totalQty > 3) // NEED TO BE FIXED!!!
         {
           OnePMarketCount = 4;
           if (getInventoryFeedsItemDTO.AmazonFeedable == true && getInventoryFeedsItemDTO.QtyAvailBasc > AmazonZeroOut)
           {
             getInventoryFeedsItemDTO.AmazonQtyBasc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyBasc;
           }
           else { OnePMarketCount--; }
           if (getInventoryFeedsItemDTO.OverstockFeedable == true && getInventoryFeedsItemDTO.QtyAvailBasc > OverstockZeroOut)
           {
             getInventoryFeedsItemDTO.OverstockQtyBasc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyBasc;
           }
           else { OnePMarketCount--; }
           if (getInventoryFeedsItemDTO.WalmartFeedable == true && getInventoryFeedsItemDTO.QtyAvailBasc > WalmartZeroOut)
           {
             getInventoryFeedsItemDTO.WalmartQtyBasc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyBasc;
           }
           else { OnePMarketCount--; }
           if (getInventoryFeedsItemDTO.WayfairFeedable == true && getInventoryFeedsItemDTO.QtyAvailBasc > WayfairZeroOut)
           {
             getInventoryFeedsItemDTO.WayfairQtyBasc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyBasc;
           }
           else { OnePMarketCount--; }
           if (getInventoryFeedsItemDTO.AmazonFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailBasc > AmazonZeroOut)
           {
             getInventoryFeedsItemDTO.AmazonQtyBasc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyBasc;
             OnePMarketCount--;
           }
           if (getInventoryFeedsItemDTO.OverstockFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailBasc > OverstockZeroOut)
           {
             getInventoryFeedsItemDTO.OverstockQtyBasc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyBasc;
             OnePMarketCount--;
           }
           if (getInventoryFeedsItemDTO.WalmartFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailBasc > WalmartZeroOut)
           {
             getInventoryFeedsItemDTO.WalmartQtyBasc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyBasc;
             OnePMarketCount--;
           }
           if (getInventoryFeedsItemDTO.WayfairFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailBasc > WayfairZeroOut)
           {
             getInventoryFeedsItemDTO.WayfairQtyBasc = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
             totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyBasc;
             OnePMarketCount--;
           }
         }
         else if (totalQty <= 3 && totalQty > 0) // Need to be fixed!!!
         { // Do Nothing
         }
       SkipToEndBasc:
         totalQty = getInventoryFeedsItemDTO.QtyAvailBasc;
         AmazonQty = getInventoryFeedsItemDTO.AmazonQtyBasc;
         OverstockQty = getInventoryFeedsItemDTO.OverstockQtyBasc;
         WalmartQty = getInventoryFeedsItemDTO.WalmartQtyBasc;
         WayfairQty = getInventoryFeedsItemDTO.WayfairQtyBasc;
         eBayQty = getInventoryFeedsItemDTO.eBayQtyBasc;
         BPMQty = getInventoryFeedsItemDTO.BPMWebQtyBasc;
         MellowQty = getInventoryFeedsItemDTO.MellowWebQtyBasc;
         HouzzQty = getInventoryFeedsItemDTO.HouzzQtyBasc;
         HomeDepotQty = getInventoryFeedsItemDTO.HomeDepotQtyBasc;
         TargetQty = getInventoryFeedsItemDTO.TargetQtyBasc;
         getInventoryFeedsItemDTO.leftOverQtyBasc = totalQty - (AmazonQty + OverstockQty + WalmartQty + WayfairQty + eBayQty + BPMQty + MellowQty + HouzzQty + HomeDepotQty + TargetQty);

         // Floor -> Round
         getInventoryFeedsItemDTO.AmazonBascPercentage = (AmazonQty == 0 ? 0 : (int)Math.Round(((double)AmazonQty / totalQty) * 100, MidpointRounding.AwayFromZero));
         getInventoryFeedsItemDTO.OverstockBascPercentage = (OverstockQty == 0 ? 0 : (int)Math.Round(((double)OverstockQty / totalQty) * 100, MidpointRounding.AwayFromZero));
         getInventoryFeedsItemDTO.WalmartBascPercentage = (WalmartQty == 0 ? 0 : (int)Math.Round(((double)WalmartQty / totalQty) * 100, MidpointRounding.AwayFromZero));
         getInventoryFeedsItemDTO.WayfairBascPercentage = (WayfairQty == 0 ? 0 : (int)Math.Round(((double)WayfairQty / totalQty) * 100, MidpointRounding.AwayFromZero));
         getInventoryFeedsItemDTO.BPMWebBascPercentage = (BPMQty == 0 ? 0 : (int)Math.Round(((double)BPMQty / totalQty) * 100, MidpointRounding.AwayFromZero));
         getInventoryFeedsItemDTO.MellowWebBascPercentage = (MellowQty == 0 ? 0 : (int)Math.Round(((double)MellowQty / totalQty) * 100, MidpointRounding.AwayFromZero));
         getInventoryFeedsItemDTO.eBayBascPercentage = (eBayQty == 0 ? 0 : (int)Math.Round(((double)eBayQty / totalQty) * 100, MidpointRounding.AwayFromZero));
         getInventoryFeedsItemDTO.HouzzBascPercentage = (HouzzQty == 0 ? 0 : (int)Math.Round(((double)HouzzQty / totalQty) * 100, MidpointRounding.AwayFromZero));
         getInventoryFeedsItemDTO.HomeDepotBascPercentage = (HomeDepotQty == 0 ? 0 : (int)Math.Round(((double)HomeDepotQty / totalQty) * 100, MidpointRounding.AwayFromZero));
         getInventoryFeedsItemDTO.TargetBascPercentage = (TargetQty == 0 ? 0 : (int)Math.Round(((double)TargetQty / totalQty) * 100, MidpointRounding.AwayFromZero));

       } // Done for Basc  //need to add */
      else if (LocId == zinusTracyId && inventoryConfig.ZeroOutBufferMainSl < getInventoryFeedsItemDTO.QtyAvailZinusTracy)
      {
        totalQty = getInventoryFeedsItemDTO.QtyAvailZinusTracy - (getInventoryFeedsItemDTO.totalStagePOQtyZinusTracy + 15);
        realTotalQty = totalQty + 15; // Added by Brian Yi on 7/30/2024
        if (realTotalQty <= 0) { realTotalQty = 0; }
        if (totalQty <= 0)
        { getInventoryFeedsItemDTO.ZinusTracyFeedable = false; getInventoryFeedsItemDTO.QtyAvailZinusTracy = 0; goto SkipToEndZinusTracy; }
        getInventoryFeedsItemDTO.QtyAvailZinusTracy = totalQty; // Added by Brian Yi on 6/12/2024
        if (inventoryConfig.IsAmazonLowStockOn == true && getInventoryFeedsItemDTO.AmazonFeedable == true
         && totalQty <= inventoryConfig.AmazonLowStockQty && inventoryConfig.ZeroOutBufferMainSl < totalQty)
        {
          getInventoryFeedsItemDTO.AmazonQtyZinusTracy = totalQty;
          goto SkipToEndZinusTracy;
        }
        if (totalQty > 10)
        {
          OnePMarketCount = 4;
          if (getInventoryFeedsItemDTO.eBayFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusTracy > eBayZeroOut) { getInventoryFeedsItemDTO.eBayQtyZinusTracy = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.HomeDepotFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusTracy > HomeDepotZeroOut) { getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.BPMFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusTracy > BPMZeroOut) { getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.MellowFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusTracy > MellowZeroOut) { getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = 1; totalQty--; }
          //if (getInventoryFeedsItemDTO.HouzzFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusTracy > HouzzZeroOut) { getInventoryFeedsItemDTO.HouzzQtyZinusTracy = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.TargetFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusTracy > TargetZeroOut) { getInventoryFeedsItemDTO.TargetQtyZinusTracy = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.AmazonFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusTracy > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyZinusTracy = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyZinusTracy;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusTracy > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyZinusTracy = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyZinusTracy;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusTracy > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyZinusTracy = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyZinusTracy;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusTracy > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyZinusTracy = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyZinusTracy;
          }
          else { OnePMarketCount--; }

          if (getInventoryFeedsItemDTO.AmazonFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailZinusTracy > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyZinusTracy = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyZinusTracy;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailZinusTracy > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyZinusTracy = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyZinusTracy;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailZinusTracy > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyZinusTracy = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyZinusTracy;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailZinusTracy > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyZinusTracy = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyZinusTracy;
            OnePMarketCount--;
          }
        }/*
        else if (totalQty <= 20 && totalQty > 10)
        { OnePMarketCount = 4;
        }*/
        else if (totalQty <= 10 && totalQty > inventoryConfig.ZeroOutBufferMainSl)
        {
          OnePMarketCount = 4;
          if (getInventoryFeedsItemDTO.AmazonFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusTracy > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyZinusTracy = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyZinusTracy;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusTracy > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyZinusTracy = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyZinusTracy;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusTracy > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyZinusTracy = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyZinusTracy;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusTracy > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyZinusTracy = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyZinusTracy;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.AmazonFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailZinusTracy > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyZinusTracy = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyZinusTracy;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailZinusTracy > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyZinusTracy = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyZinusTracy;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailZinusTracy > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyZinusTracy = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyZinusTracy;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailZinusTracy > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyZinusTracy = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyZinusTracy;
            OnePMarketCount--;
          }
        }
        /*else if (totalQty <= 5 && totalQty > 3) // Buffer out on BANC
        { 
          OnePMarketCount = 4;
        }*/
        else if (totalQty <= inventoryConfig.ZeroOutBufferMainSl && totalQty > 0)
        { // Do Nothing
        }
      SkipToEndZinusTracy:
        getInventoryFeedsItemDTO.QtyAvailZinusTracy = realTotalQty;
        totalQty = getInventoryFeedsItemDTO.QtyAvailZinusTracy;
        AmazonQty = getInventoryFeedsItemDTO.AmazonQtyZinusTracy;
        OverstockQty = getInventoryFeedsItemDTO.OverstockQtyZinusTracy;
        WalmartQty = getInventoryFeedsItemDTO.WalmartQtyZinusTracy;
        WayfairQty = getInventoryFeedsItemDTO.WayfairQtyZinusTracy;
        eBayQty = getInventoryFeedsItemDTO.eBayQtyZinusTracy;
        BPMQty = getInventoryFeedsItemDTO.BPMWebQtyZinusTracy;
        MellowQty = getInventoryFeedsItemDTO.MellowWebQtyZinusTracy;
        HouzzQty = 0;//getInventoryFeedsItemDTO.HouzzQtyZinusTracy;
        HomeDepotQty = getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy;
        TargetQty = getInventoryFeedsItemDTO.TargetQtyZinusTracy;
        getInventoryFeedsItemDTO.leftOverQtyZinusTracy = totalQty - (AmazonQty + OverstockQty + WalmartQty + WayfairQty + eBayQty + BPMQty + MellowQty + HouzzQty + HomeDepotQty + TargetQty);

        //Floor -> Round on 8/1/2022
        getInventoryFeedsItemDTO.AmazonZinusTracyPercentage = (AmazonQty == 0 ? 0 : (int)Math.Round(((double)AmazonQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.OverstockZinusTracyPercentage = (OverstockQty == 0 ? 0 : (int)Math.Round(((double)OverstockQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.WalmartZinusTracyPercentage = (WalmartQty == 0 ? 0 : (int)Math.Round(((double)WalmartQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.WayfairZinusTracyPercentage = (WayfairQty == 0 ? 0 : (int)Math.Round(((double)WayfairQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.BPMWebZinusTracyPercentage = (BPMQty == 0 ? 0 : (int)Math.Round(((double)BPMQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.MellowWebZinusTracyPercentage = (MellowQty == 0 ? 0 : (int)Math.Round(((double)MellowQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.eBayZinusTracyPercentage = (eBayQty == 0 ? 0 : (int)Math.Round(((double)eBayQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        // getInventoryFeedsItemDTO.HouzzZinusTracyPercentage = (HouzzQty == 0 ? 0 : (int)Math.Round(((double)HouzzQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.HomeDepotZinusTracyPercentage = (HomeDepotQty == 0 ? 0 : (int)Math.Round(((double)HomeDepotQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.TargetZinusTracyPercentage = (TargetQty == 0 ? 0 : (int)Math.Round(((double)TargetQty / totalQty) * 100, MidpointRounding.AwayFromZero));

      }// Done for ZINUS Tracy
      else if (LocId == zinusChsId && inventoryConfig.ZeroOutBufferMainSl < getInventoryFeedsItemDTO.QtyAvailZinusChs)
      {
        //if (getInventoryFeedsItemDTO.ItemNoId == 2789)
        //{ Console.WriteLine("Here");}
        totalQty = getInventoryFeedsItemDTO.QtyAvailZinusChs - (getInventoryFeedsItemDTO.totalStagePOQtyZinusChs + 15);
        realTotalQty = totalQty + 15; // Added by Brian Yi on 7/30/2024
        if (realTotalQty <= 0) { realTotalQty = 0; }
        if (totalQty <= 0)
        { getInventoryFeedsItemDTO.ZinusChsFeedable = false; getInventoryFeedsItemDTO.QtyAvailZinusChs = 0; goto SkipToEndZinusChs; }
        getInventoryFeedsItemDTO.QtyAvailZinusChs = totalQty; // Added by Brian Yi on 6/12/2024
        if (inventoryConfig.IsAmazonLowStockOn == true && getInventoryFeedsItemDTO.AmazonFeedable == true
         && totalQty <= inventoryConfig.AmazonLowStockQty && inventoryConfig.ZeroOutBufferMainSl < totalQty)
        {
          getInventoryFeedsItemDTO.AmazonQtyZinusChs = totalQty;
          goto SkipToEndZinusChs;
        }
        if (totalQty > 10)
        {
          OnePMarketCount = 4;
          if (getInventoryFeedsItemDTO.eBayFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusChs > eBayZeroOut) { getInventoryFeedsItemDTO.eBayQtyZinusChs = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.HomeDepotFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusChs > HomeDepotZeroOut) { getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.BPMFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusChs > BPMZeroOut) { getInventoryFeedsItemDTO.BPMWebQtyZinusChs = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.MellowFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusChs > MellowZeroOut) { getInventoryFeedsItemDTO.MellowWebQtyZinusChs = 1; totalQty--; }
          //if (getInventoryFeedsItemDTO.HouzzFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusChs > HouzzZeroOut) { getInventoryFeedsItemDTO.HouzzQtyZinusChs = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.TargetFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusChs > TargetZeroOut) { getInventoryFeedsItemDTO.TargetQtyZinusChs = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.AmazonFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusChs > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyZinusChs = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyZinusChs;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusChs > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyZinusChs = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyZinusChs;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusChs > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyZinusChs = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyZinusChs;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusChs > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyZinusChs = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyZinusChs;
          }
          else { OnePMarketCount--; }

          if (getInventoryFeedsItemDTO.AmazonFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailZinusChs > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyZinusChs = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyZinusChs;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailZinusChs > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyZinusChs = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyZinusChs;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailZinusChs > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyZinusChs = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyZinusChs;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailZinusChs > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyZinusChs = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyZinusChs;
            OnePMarketCount--;
          }
        }/*
        else if (totalQty <= 20 && totalQty > 10)
        { OnePMarketCount = 4;
        }*/
        else if (totalQty <= 10 && totalQty > inventoryConfig.ZeroOutBufferMainSl)
        {
          OnePMarketCount = 4;
          if (getInventoryFeedsItemDTO.AmazonFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusChs > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyZinusChs = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyZinusChs;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusChs > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyZinusChs = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyZinusChs;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusChs > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyZinusChs = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyZinusChs;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && getInventoryFeedsItemDTO.QtyAvailZinusChs > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyZinusChs = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyZinusChs;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.AmazonFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailZinusChs > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyZinusChs = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyZinusChs;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailZinusChs > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyZinusChs = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyZinusChs;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailZinusChs > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyZinusChs = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyZinusChs;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailZinusChs > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyZinusChs = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyZinusChs;
            OnePMarketCount--;
          }
        }
        /*else if (totalQty <= 5 && totalQty > 3) // Buffer out on BANC
        { 
          OnePMarketCount = 4;
        }*/
        else if (totalQty <= inventoryConfig.ZeroOutBufferMainSl && totalQty > 0)
        { // Do Nothing
        }
      SkipToEndZinusChs:
        getInventoryFeedsItemDTO.QtyAvailZinusChs = realTotalQty;
        totalQty = getInventoryFeedsItemDTO.QtyAvailZinusChs;
        AmazonQty = getInventoryFeedsItemDTO.AmazonQtyZinusChs;
        OverstockQty = getInventoryFeedsItemDTO.OverstockQtyZinusChs;
        WalmartQty = getInventoryFeedsItemDTO.WalmartQtyZinusChs;
        WayfairQty = getInventoryFeedsItemDTO.WayfairQtyZinusChs;
        eBayQty = getInventoryFeedsItemDTO.eBayQtyZinusChs;
        BPMQty = getInventoryFeedsItemDTO.BPMWebQtyZinusChs;
        MellowQty = getInventoryFeedsItemDTO.MellowWebQtyZinusChs;
        HouzzQty = 0;//getInventoryFeedsItemDTO.HouzzQtyZinusChs;
        HomeDepotQty = getInventoryFeedsItemDTO.HomeDepotQtyZinusChs;
        TargetQty = getInventoryFeedsItemDTO.TargetQtyZinusChs;
        getInventoryFeedsItemDTO.leftOverQtyZinusChs = totalQty - (AmazonQty + OverstockQty + WalmartQty + WayfairQty + eBayQty + BPMQty + MellowQty + HouzzQty + HomeDepotQty + TargetQty);

        //Floor -> Round on 8/1/2022
        getInventoryFeedsItemDTO.AmazonZinusChsPercentage = (AmazonQty == 0 ? 0 : (int)Math.Round(((double)AmazonQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.OverstockZinusChsPercentage = (OverstockQty == 0 ? 0 : (int)Math.Round(((double)OverstockQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.WalmartZinusChsPercentage = (WalmartQty == 0 ? 0 : (int)Math.Round(((double)WalmartQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.WayfairZinusChsPercentage = (WayfairQty == 0 ? 0 : (int)Math.Round(((double)WayfairQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.BPMWebZinusChsPercentage = (BPMQty == 0 ? 0 : (int)Math.Round(((double)BPMQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.MellowWebZinusChsPercentage = (MellowQty == 0 ? 0 : (int)Math.Round(((double)MellowQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.eBayZinusChsPercentage = (eBayQty == 0 ? 0 : (int)Math.Round(((double)eBayQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        // getInventoryFeedsItemDTO.HouzzZinusChsPercentage = (HouzzQty == 0 ? 0 : (int)Math.Round(((double)HouzzQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.HomeDepotZinusChsPercentage = (HomeDepotQty == 0 ? 0 : (int)Math.Round(((double)HomeDepotQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.TargetZinusChsPercentage = (TargetQty == 0 ? 0 : (int)Math.Round(((double)TargetQty / totalQty) * 100, MidpointRounding.AwayFromZero));

      } // End of ZINUS CHS
      /*else if (LocId == prsmCastId && 3 < getInventoryFeedsItemDTO.QtyAvailPrismCast) // Prism-Cast
      {
        totalQty = getInventoryFeedsItemDTO.QtyAvailPrismCast;
        if (inventoryConfig.IsAmazonLowStockOn == true && getInventoryFeedsItemDTO.AmazonFeedable == true
         && totalQty <= inventoryConfig.AmazonLowStockQty && 3 < totalQty)
        {
          getInventoryFeedsItemDTO.AmazonQtyPrismCast = totalQty;
          goto SkipToEndPrismCast;
        }
        if (totalQty > 10)
        {
          OnePMarketCount = 4;
          if (getInventoryFeedsItemDTO.eBayFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCast > eBayZeroOut) { getInventoryFeedsItemDTO.eBayQtyPrismCast = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.HomeDepotFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCast > HomeDepotZeroOut) { getInventoryFeedsItemDTO.HomeDepotQtyPrismCast = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.BPMFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCast > BPMZeroOut) { getInventoryFeedsItemDTO.BPMWebQtyPrismCast = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.MellowFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCast > MellowZeroOut) { getInventoryFeedsItemDTO.MellowWebQtyPrismCast = 1; totalQty--; }
          //if (getInventoryFeedsItemDTO.HouzzFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCast > HouzzZeroOut) { getInventoryFeedsItemDTO.HouzzQtyPrismCast = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.TargetFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCast > TargetZeroOut) { getInventoryFeedsItemDTO.TargetQtyPrismCast = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.AmazonFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCast > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyPrismCast = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyPrismCast;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCast > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyPrismCast = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyPrismCast;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCast > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyPrismCast = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyPrismCast;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCast > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyPrismCast = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyPrismCast;
          }
          else { OnePMarketCount--; }

          if (getInventoryFeedsItemDTO.AmazonFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailPrismCast > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyPrismCast = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyPrismCast;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailPrismCast > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyPrismCast = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyPrismCast;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailPrismCast > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyPrismCast = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyPrismCast;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailPrismCast > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyPrismCast = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyPrismCast;
            OnePMarketCount--;
          }
        }/*
        else if (totalQty <= 20 && totalQty > 10)
        { OnePMarketCount = 4;
        }*/ /*
        else if (totalQty <= 10 && totalQty > 3) // NEED TO BE FIXED!!!
        {
          OnePMarketCount = 4;
          if (getInventoryFeedsItemDTO.AmazonFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCast > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyPrismCast = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyPrismCast;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCast > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyPrismCast = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyPrismCast;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCast > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyPrismCast = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyPrismCast;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCast > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyPrismCast = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyPrismCast;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.AmazonFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailPrismCast > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyPrismCast = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyPrismCast;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailPrismCast > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyPrismCast = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyPrismCast;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailPrismCast > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyPrismCast = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyPrismCast;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailPrismCast > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyPrismCast = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyPrismCast;
            OnePMarketCount--;
          }
        }
        /*else if (totalQty <= 5 && totalQty > 3) // Buffer out on BANC
        { 
          OnePMarketCount = 4;
        }*/ /*
        else if (totalQty <= 3 && totalQty > 0) // Need to be fixed!!!
        { // Do Nothing
        }
      SkipToEndPrismCast:
        totalQty = getInventoryFeedsItemDTO.QtyAvailPrismCast;
        AmazonQty = getInventoryFeedsItemDTO.AmazonQtyPrismCast;
        OverstockQty = getInventoryFeedsItemDTO.OverstockQtyPrismCast;
        WalmartQty = getInventoryFeedsItemDTO.WalmartQtyPrismCast;
        WayfairQty = getInventoryFeedsItemDTO.WayfairQtyPrismCast;
        eBayQty = getInventoryFeedsItemDTO.eBayQtyPrismCast;
        BPMQty = getInventoryFeedsItemDTO.BPMWebQtyPrismCast;
        MellowQty = getInventoryFeedsItemDTO.MellowWebQtyPrismCast;
        HouzzQty = 0;//getInventoryFeedsItemDTO.HouzzQtyPrismCast;
        HomeDepotQty = getInventoryFeedsItemDTO.HomeDepotQtyPrismCast;
        TargetQty = getInventoryFeedsItemDTO.TargetQtyPrismCast;
        getInventoryFeedsItemDTO.leftOverQtyPrismCast = totalQty - (AmazonQty + OverstockQty + WalmartQty + WayfairQty + eBayQty + BPMQty + MellowQty + HouzzQty + HomeDepotQty + TargetQty);

        // Floor -> Round
        getInventoryFeedsItemDTO.AmazonPrismCastPercentage = (AmazonQty == 0 ? 0 : (int)Math.Round(((double)AmazonQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.OverstockPrismCastPercentage = (OverstockQty == 0 ? 0 : (int)Math.Round(((double)OverstockQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.WalmartPrismCastPercentage = (WalmartQty == 0 ? 0 : (int)Math.Round(((double)WalmartQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.WayfairPrismCastPercentage = (WayfairQty == 0 ? 0 : (int)Math.Round(((double)WayfairQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.BPMWebPrismCastPercentage = (BPMQty == 0 ? 0 : (int)Math.Round(((double)BPMQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.MellowWebPrismCastPercentage = (MellowQty == 0 ? 0 : (int)Math.Round(((double)MellowQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.eBayPrismCastPercentage = (eBayQty == 0 ? 0 : (int)Math.Round(((double)eBayQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        //getInventoryFeedsItemDTO.HouzzPrismCastPercentage = (HouzzQty == 0 ? 0 : (int)Math.Round(((double)HouzzQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.HomeDepotPrismCastPercentage = (HomeDepotQty == 0 ? 0 : (int)Math.Round(((double)HomeDepotQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.TargetPrismCastPercentage = (TargetQty == 0 ? 0 : (int)Math.Round(((double)TargetQty / totalQty) * 100, MidpointRounding.AwayFromZero));

      } // Done for PRISM-CAST
      else if (LocId == prsmCaltId && 3 < getInventoryFeedsItemDTO.QtyAvailPrismCalt) // Prism-Calt
      {
        totalQty = getInventoryFeedsItemDTO.QtyAvailPrismCalt;
        if (inventoryConfig.IsAmazonLowStockOn == true && getInventoryFeedsItemDTO.AmazonFeedable == true
         && totalQty <= inventoryConfig.AmazonLowStockQty && 3 < totalQty)
        {
          getInventoryFeedsItemDTO.AmazonQtyPrismCalt = totalQty;
          goto SkipToEndPrismCalt;
        }
        if (totalQty > 10)
        {
          OnePMarketCount = 4;
          if (getInventoryFeedsItemDTO.eBayFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCalt > eBayZeroOut) { getInventoryFeedsItemDTO.eBayQtyPrismCalt = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.HomeDepotFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCalt > HomeDepotZeroOut) { getInventoryFeedsItemDTO.HomeDepotQtyPrismCalt = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.BPMFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCalt > BPMZeroOut) { getInventoryFeedsItemDTO.BPMWebQtyPrismCalt = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.MellowFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCalt > MellowZeroOut) { getInventoryFeedsItemDTO.MellowWebQtyPrismCalt = 1; totalQty--; }
          //if (getInventoryFeedsItemDTO.HouzzFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCalt > HouzzZeroOut) { getInventoryFeedsItemDTO.HouzzQtyPrismCalt = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.TargetFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCalt > TargetZeroOut) { getInventoryFeedsItemDTO.TargetQtyPrismCalt = 1; totalQty--; }
          if (getInventoryFeedsItemDTO.AmazonFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCalt > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyPrismCalt = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyPrismCalt;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCalt > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyPrismCalt = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyPrismCalt;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCalt > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyPrismCalt = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyPrismCalt;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCalt > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyPrismCalt = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyPrismCalt;
          }
          else { OnePMarketCount--; }

          if (getInventoryFeedsItemDTO.AmazonFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailPrismCalt > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyPrismCalt = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyPrismCalt;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailPrismCalt > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyPrismCalt = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyPrismCalt;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailPrismCalt > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyPrismCalt = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyPrismCalt;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailPrismCalt > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyPrismCalt = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyPrismCalt;
            OnePMarketCount--;
          }
        }/*
        else if (totalQty <= 20 && totalQty > 10)
        { OnePMarketCount = 4;
        }*/ /*
        else if (totalQty <= 10 && totalQty > 3) // NEED TO BE FIXED!!!
        {
          OnePMarketCount = 4;
          if (getInventoryFeedsItemDTO.AmazonFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCalt > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyPrismCalt = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyPrismCalt;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCalt > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyPrismCalt = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyPrismCalt;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCalt > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyPrismCalt = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyPrismCalt;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && getInventoryFeedsItemDTO.QtyAvailPrismCalt > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyPrismCalt = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyPrismCalt;
          }
          else { OnePMarketCount--; }
          if (getInventoryFeedsItemDTO.AmazonFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailPrismCalt > AmazonZeroOut)
          {
            getInventoryFeedsItemDTO.AmazonQtyPrismCalt = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.AmazonQtyPrismCalt;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.OverstockFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailPrismCalt > OverstockZeroOut)
          {
            getInventoryFeedsItemDTO.OverstockQtyPrismCalt = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.OverstockQtyPrismCalt;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WalmartFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailPrismCalt > WalmartZeroOut)
          {
            getInventoryFeedsItemDTO.WalmartQtyPrismCalt = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WalmartQtyPrismCalt;
            OnePMarketCount--;
          }
          if (getInventoryFeedsItemDTO.WayfairFeedable == true && totalQty > 0 && getInventoryFeedsItemDTO.QtyAvailPrismCalt > WayfairZeroOut)
          {
            getInventoryFeedsItemDTO.WayfairQtyPrismCalt = (int)Math.Floor(totalQty * ((double)1 / OnePMarketCount));
            totalQty = totalQty - getInventoryFeedsItemDTO.WayfairQtyPrismCalt;
            OnePMarketCount--;
          }
        }
        /*else if (totalQty <= 5 && totalQty > 3) // Buffer out on BANC
        { 
          OnePMarketCount = 4;
        }*/ /*
        else if (totalQty <= 3 && totalQty > 0) // Need to be fixed!!!
        { // Do Nothing
        }
      SkipToEndPrismCalt:
        totalQty = getInventoryFeedsItemDTO.QtyAvailPrismCalt;
        AmazonQty = getInventoryFeedsItemDTO.AmazonQtyPrismCalt;
        OverstockQty = getInventoryFeedsItemDTO.OverstockQtyPrismCalt;
        WalmartQty = getInventoryFeedsItemDTO.WalmartQtyPrismCalt;
        WayfairQty = getInventoryFeedsItemDTO.WayfairQtyPrismCalt;
        eBayQty = getInventoryFeedsItemDTO.eBayQtyPrismCalt;
        BPMQty = getInventoryFeedsItemDTO.BPMWebQtyPrismCalt;
        MellowQty = getInventoryFeedsItemDTO.MellowWebQtyPrismCalt;
        HouzzQty = 0;//getInventoryFeedsItemDTO.HouzzQtyPrismCalt;
        HomeDepotQty = getInventoryFeedsItemDTO.HomeDepotQtyPrismCalt;
        TargetQty = getInventoryFeedsItemDTO.TargetQtyPrismCalt;
        getInventoryFeedsItemDTO.leftOverQtyPrismCalt = totalQty - (AmazonQty + OverstockQty + WalmartQty + WayfairQty + eBayQty + BPMQty + MellowQty + HouzzQty + HomeDepotQty + TargetQty);

        // Floor -> Round
        getInventoryFeedsItemDTO.AmazonPrismCaltPercentage = (AmazonQty == 0 ? 0 : (int)Math.Round(((double)AmazonQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.OverstockPrismCaltPercentage = (OverstockQty == 0 ? 0 : (int)Math.Round(((double)OverstockQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.WalmartPrismCaltPercentage = (WalmartQty == 0 ? 0 : (int)Math.Round(((double)WalmartQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.WayfairPrismCaltPercentage = (WayfairQty == 0 ? 0 : (int)Math.Round(((double)WayfairQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.BPMWebPrismCaltPercentage = (BPMQty == 0 ? 0 : (int)Math.Round(((double)BPMQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.MellowWebPrismCaltPercentage = (MellowQty == 0 ? 0 : (int)Math.Round(((double)MellowQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.eBayPrismCaltPercentage = (eBayQty == 0 ? 0 : (int)Math.Round(((double)eBayQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        //getInventoryFeedsItemDTO.HouzzPrismCaltPercentage = (HouzzQty == 0 ? 0 : (int)Math.Round(((double)HouzzQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.HomeDepotPrismCaltPercentage = (HomeDepotQty == 0 ? 0 : (int)Math.Round(((double)HomeDepotQty / totalQty) * 100, MidpointRounding.AwayFromZero));
        getInventoryFeedsItemDTO.TargetPrismCaltPercentage = (TargetQty == 0 ? 0 : (int)Math.Round(((double)TargetQty / totalQty) * 100, MidpointRounding.AwayFromZero));

      } // Done for PRISM-CALT 
      */
      else { Console.WriteLine("Should NOT Come here!!!"); }
      /*
      getInventoryFeedsItemDTO.AmazonPercentage = (AmazonQty == 0 ? 0 : (int)Math.Floor(((double)AmazonQty / totalQty) * 100));
      getInventoryFeedsItemDTO.OverstockPercentage = (OverstockQty == 0 ? 0 : (int)Math.Floor(((double)OverstockQty / totalQty) * 100));
      getInventoryFeedsItemDTO.WalmartPercentage = (WalmartQty == 0 ? 0 : (int)Math.Floor(((double)WalmartQty / totalQty) * 100));
      getInventoryFeedsItemDTO.WayfairPercentage = (WayfairQty == 0 ? 0 : (int)Math.Floor(((double)WayfairQty / totalQty) * 100));
      getInventoryFeedsItemDTO.BPMWebPercentage = (BPMQty == 0 ? 0 : (int)Math.Floor(((double)BPMQty / totalQty) * 100));
      getInventoryFeedsItemDTO.MellowWebPercentage = (MellowQty == 0 ? 0 : (int)Math.Floor(((double)MellowQty / totalQty) * 100));
      getInventoryFeedsItemDTO.eBayPercentage = (eBayQty == 0 ? 0 : (int)Math.Floor(((double)eBayQty / totalQty) * 100));
      getInventoryFeedsItemDTO.HouzzPercentage = (HouzzQty == 0 ? 0 : (int)Math.Floor(((double)HouzzQty / totalQty) * 100));
      */
      return getInventoryFeedsItemDTO;
    }


    // For inventory feeding New Item or Low Sales History Data Rule
    // Need to decide how we are going to deal with left over qty
    // By Brian Yi on 08/24/2021; modified by Brian Yi on 06/05/2024
    public async  Task<GetInventoryFeedsItemDTO> InventoryFeedsNewItemLowSalesDataRule(int LocId, List<InvFeedsRule> invFeedsRules, InvFeedsRuleSku invFeedsRuleSku, GetInventoryFeedsItemDTO getInventoryFeedsItemDTO)
    {
      int mainslId = 25, zinusTracyId = 57, zinusChsId = 108, totalQty = 0; //bancId = 4,  swcaftId = 54, bascId = 54, prsmCastId = 51, prsmCaltId = 67,
      int amazonID = 5;
      int bpmWebID = 9;
      int ebayID = 12;
      int houzzID = 14;
      int mellowWebID = 18;
      int ostID = 21;
      int walmartID = 26;
      int wayfairID = 29;
      int homeDepotID = 40;
      int targetID = 51;
      int realTotalQty = 0;
      List<InvFeedsRuleSkumkt> invFeedsRuleSkumkts = new List<InvFeedsRuleSkumkt>();
      if (invFeedsRuleSku != null)
      {
        invFeedsRuleSkumkts = await _kc.InvFeedsRuleSkumkts.Where((InvFeedsRuleSkumkt i) => i.InvFeedsRuleSkuid == (long?)invFeedsRuleSku.InvFeedsRuleSkuid).ToListAsync();
      }
      /*if (LocId == bancId)
      {
        totalQty = getInventoryFeedsItemDTO.QtyAvailBanc - getInventoryFeedsItemDTO.totalStagePOQtyBanc;
        if (totalQty <= 0)
        { 
          getInventoryFeedsItemDTO.BancFeedable = false; getInventoryFeedsItemDTO.QtyAvailBanc = 0;
          goto SkipToEndBanc;
        }
        getInventoryFeedsItemDTO.QtyAvailBanc = totalQty; // Added by Brian Yi on 6/12/2024
        foreach (InvFeedsRule tmpDto in invFeedsRules)
        {
          switch (tmpDto.CustomerId)
          {
            case 5: // Amazon Drop Ship
              if (getInventoryFeedsItemDTO.AmazonFeedable == true)
              {
                getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailBanc * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.AmazonBancPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 9: // BPM Website
              if (getInventoryFeedsItemDTO.BPMFeedable == true)
              {
                getInventoryFeedsItemDTO.BPMWebQtyBanc = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailBanc * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.BPMWebBancPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 12: // eBay
              if (getInventoryFeedsItemDTO.eBayFeedable == true)
              {
                getInventoryFeedsItemDTO.eBayQtyBanc = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailBanc * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.eBayBancPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
            case 14: // Houzz Drop Ship
              if (getInventoryFeedsItemDTO.HouzzFeedable == true)
              {
                getInventoryFeedsItemDTO.HouzzQtyBanc = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailBanc * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.HouzzBancPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 18: // Mellow Website
              if (getInventoryFeedsItemDTO.MellowFeedable == true)
              {
                getInventoryFeedsItemDTO.MellowWebQtyBanc = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailBanc * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.MellowWebBancPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 21: // Overstock Drop Ship
              if (getInventoryFeedsItemDTO.OverstockFeedable == true)
              {
                getInventoryFeedsItemDTO.OverstockQtyBanc = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailBanc * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.OverstockBancPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 26: // Walmart DSV
              if (getInventoryFeedsItemDTO.WalmartFeedable == true)
              {
                getInventoryFeedsItemDTO.WalmartQtyBanc = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailBanc * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.WalmartBancPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 29: // Wayfair Drop Ship
              if (getInventoryFeedsItemDTO.WayfairFeedable == true)
              {
                getInventoryFeedsItemDTO.WayfairQtyBanc = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailBanc * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.WayfairBancPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 40: // HomeDepot Drop Ship
              if (getInventoryFeedsItemDTO.HomeDepotFeedable == true)
              {
                getInventoryFeedsItemDTO.HomeDepotQtyBanc = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailBanc * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.HomeDepotBancPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
            case 51: // Target Drop Ship
              if (getInventoryFeedsItemDTO.TargetFeedable == true)
              {
                getInventoryFeedsItemDTO.TargetQtyBanc = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailBanc * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.TargetBancPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
          }
        } // End of foreach for Qty calculation
        SkipToEndBanc:
          Console.WriteLine("");
      }
      else */
      if (LocId == mainslId)
      {
        totalQty = getInventoryFeedsItemDTO.QtyAvailMainsl - (getInventoryFeedsItemDTO.totalStagePOQtyMainsl + 15);
        realTotalQty = totalQty + 15;
        if (realTotalQty <= 0) { realTotalQty = 0; }
        if (totalQty <= 0)
        { getInventoryFeedsItemDTO.MainslFeedable = false; getInventoryFeedsItemDTO.QtyAvailMainsl = 0; goto SkipToEndMainsl; }
        if (totalQty <= 60)
        { totalQty = (int)Math.Floor((double)totalQty * 0.8); };
        getInventoryFeedsItemDTO.QtyAvailMainsl = totalQty; // Added by Brian Yi on 6/12/2024
        foreach (InvFeedsRule tmpDto in invFeedsRules)
        {
          switch (tmpDto.CustomerId)
          {
            case 5: // Amazon Drop Ship
              if (getInventoryFeedsItemDTO.AmazonFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == amazonID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == amazonID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.AmazonQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.AmazonQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.AmazonQtyMainsl = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.AmazonQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.AmazonQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    } // End if of SKU specific rule
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.AmazonQtyMainsl = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailMainsl * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.AmazonMainslPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 9: // BPM Website
              if (getInventoryFeedsItemDTO.BPMFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == bpmWebID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == bpmWebID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.BPMWebQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.BPMWebQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.BPMWebQtyMainsl = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.BPMWebQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.BPMWebQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.BPMWebQtyMainsl = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailMainsl * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.BPMWebMainslPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 12: // eBay
              if (getInventoryFeedsItemDTO.eBayFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ebayID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ebayID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.eBayQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.eBayQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.eBayQtyMainsl = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.eBayQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.eBayQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.eBayQtyMainsl = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailMainsl * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.eBayMainslPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
            case 14: // Houzz Drop Ship
              if (getInventoryFeedsItemDTO.HouzzFeedable == true)
              {
                getInventoryFeedsItemDTO.HouzzQtyMainsl = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailMainsl * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.HouzzMainslPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 18: // Mellow Website
              if (getInventoryFeedsItemDTO.MellowFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == mellowWebID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == mellowWebID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.MellowWebQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.MellowWebQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.MellowWebQtyMainsl = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.MellowWebQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.MellowWebQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.MellowWebQtyMainsl = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailMainsl * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.MellowWebMainslPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 21: // Overstock Drop Ship
              if (getInventoryFeedsItemDTO.OverstockFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ostID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ostID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.OverstockQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.OverstockQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.OverstockQtyMainsl = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.OverstockQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.OverstockQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.OverstockQtyMainsl = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailMainsl * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.OverstockMainslPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 26: // Walmart DSV
              if (getInventoryFeedsItemDTO.WalmartFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == walmartID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == walmartID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.WalmartQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.WalmartQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.WalmartQtyMainsl = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.WalmartQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.WalmartQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.WalmartQtyMainsl = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailMainsl * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.WalmartMainslPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 29: // Wayfair Drop Ship
              if (getInventoryFeedsItemDTO.WayfairFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == wayfairID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == wayfairID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.WayfairQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.WayfairQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.WayfairQtyMainsl = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.WayfairQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.WayfairQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.WayfairQtyMainsl = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailMainsl * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.WayfairMainslPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 40: // HomeDepot Drop Ship
              if (getInventoryFeedsItemDTO.HomeDepotFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == homeDepotID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == homeDepotID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.HomeDepotQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.HomeDepotQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.HomeDepotQtyMainsl = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.HomeDepotQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.HomeDepotQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.HomeDepotQtyMainsl = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailMainsl * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.HomeDepotMainslPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
            case 51: // Target Drop Ship
              if (getInventoryFeedsItemDTO.TargetFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == targetID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == targetID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.TargetQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.TargetQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.TargetQtyMainsl = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.TargetQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.TargetQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.TargetQtyMainsl = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailMainsl * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.TargetMainslPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
          }
        } // End of foreach for Qty calculation
      SkipToEndMainsl:
        getInventoryFeedsItemDTO.QtyAvailMainsl = realTotalQty;
        Console.WriteLine("");
      } /*
      else if (LocId == swcaftId) // For SWCA-FT
      {
        totalQty = getInventoryFeedsItemDTO.QtyAvailSWCAFT;
        foreach (InvFeedsRule tmpDto in invFeedsRules)
        {
          switch (tmpDto.CustomerId)
          {
            case 5: // Amazon Drop Ship
              if (getInventoryFeedsItemDTO.AmazonFeedable == true)
              {
                getInventoryFeedsItemDTO.AmazonQtySWCAFT = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailSWCAFT * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.AmazonSWCAFTPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 9: // BPM Website
              if (getInventoryFeedsItemDTO.BPMFeedable == true)
              {
                getInventoryFeedsItemDTO.BPMWebQtySWCAFT = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailSWCAFT * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.BPMWebSWCAFTPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 12: // eBay
              if (getInventoryFeedsItemDTO.eBayFeedable == true)
              {
                getInventoryFeedsItemDTO.eBayQtySWCAFT = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailSWCAFT * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.eBaySWCAFTPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
            case 14: // Houzz Drop Ship
              if (getInventoryFeedsItemDTO.HouzzFeedable == true)
              {
                getInventoryFeedsItemDTO.HouzzQtySWCAFT = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailSWCAFT * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.HouzzSWCAFTPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 18: // Mellow Website
              if (getInventoryFeedsItemDTO.MellowFeedable == true)
              {
                getInventoryFeedsItemDTO.MellowWebQtySWCAFT = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailSWCAFT * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.MellowWebSWCAFTPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 21: // Overstock Drop Ship
              if (getInventoryFeedsItemDTO.OverstockFeedable == true)
              {
                getInventoryFeedsItemDTO.OverstockQtySWCAFT = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailSWCAFT * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.OverstockSWCAFTPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 26: // Walmart DSV
              if (getInventoryFeedsItemDTO.WalmartFeedable == true)
              {
                getInventoryFeedsItemDTO.WalmartQtySWCAFT = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailSWCAFT * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.WalmartSWCAFTPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 29: // Wayfair Drop Ship
              if (getInventoryFeedsItemDTO.WayfairFeedable == true)
              {
                getInventoryFeedsItemDTO.WayfairQtySWCAFT = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailSWCAFT * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.WayfairSWCAFTPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 40: // HomeDepot Drop Ship
              if (getInventoryFeedsItemDTO.HomeDepotFeedable == true)
              {
                getInventoryFeedsItemDTO.HomeDepotQtySWCAFT = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailSWCAFT * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.HomeDepotSWCAFTPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
            case 51: // Target Drop Ship
              if (getInventoryFeedsItemDTO.TargetFeedable == true)
              {
                getInventoryFeedsItemDTO.TargetQtySWCAFT = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailSWCAFT * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.TargetSWCAFTPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
          }
        } // End of foreach for Qty calculation
      }*/
      /*else if (LocId == bascId) // For BASC
      {
        totalQty = getInventoryFeedsItemDTO.QtyAvailBasc - getInventoryFeedsItemDTO.totalStagePOQtyBasc;
        if (totalQty <= 0)
        { getInventoryFeedsItemDTO.BascFeedable = false; getInventoryFeedsItemDTO.QtyAvailBasc = 0;  goto SkipToEndBasc; }
        getInventoryFeedsItemDTO.QtyAvailBasc = totalQty; // Added by Brian Yi on 6/12/2024
        foreach (InvFeedsRule tmpDto in invFeedsRules)
        {
          switch (tmpDto.CustomerId)
          {
            case 5: // Amazon Drop Ship
              if (getInventoryFeedsItemDTO.AmazonFeedable == true)
              {
                getInventoryFeedsItemDTO.AmazonQtyBasc = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailBasc * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.AmazonBascPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 9: // BPM Website
              if (getInventoryFeedsItemDTO.BPMFeedable == true)
              {
                getInventoryFeedsItemDTO.BPMWebQtyBasc = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailBasc * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.BPMWebBascPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 12: // eBay
              if (getInventoryFeedsItemDTO.eBayFeedable == true)
              {
                getInventoryFeedsItemDTO.eBayQtyBasc = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailBasc * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.eBayBascPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
            case 14: // Houzz Drop Ship
              if (getInventoryFeedsItemDTO.HouzzFeedable == true)
              {
                getInventoryFeedsItemDTO.HouzzQtyBasc = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailBasc * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.HouzzBascPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 18: // Mellow Website
              if (getInventoryFeedsItemDTO.MellowFeedable == true)
              {
                getInventoryFeedsItemDTO.MellowWebQtyBasc = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailBasc * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.MellowWebBascPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 21: // Overstock Drop Ship
              if (getInventoryFeedsItemDTO.OverstockFeedable == true)
              {
                getInventoryFeedsItemDTO.OverstockQtyBasc = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailBasc * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.OverstockBascPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 26: // Walmart DSV
              if (getInventoryFeedsItemDTO.WalmartFeedable == true)
              {
                getInventoryFeedsItemDTO.WalmartQtyBasc = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailBasc * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.WalmartBascPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 29: // Wayfair Drop Ship
              if (getInventoryFeedsItemDTO.WayfairFeedable == true)
              {
                getInventoryFeedsItemDTO.WayfairQtyBasc = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailBasc * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.WayfairBascPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 40: // HomeDepot Drop Ship
              if (getInventoryFeedsItemDTO.HomeDepotFeedable == true)
              {
                getInventoryFeedsItemDTO.HomeDepotQtyBasc = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailBasc * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.HomeDepotBascPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
            case 51: // Target Drop Ship
              if (getInventoryFeedsItemDTO.TargetFeedable == true)
              {
                getInventoryFeedsItemDTO.TargetQtyBasc = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailBasc * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.TargetBascPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
          }
        } // End of foreach for Qty calculation
      SkipToEndBasc:
        Console.WriteLine("");
      }*//*
      else if (LocId == prsmCastId) // For Prism-Cast
      {
        totalQty = getInventoryFeedsItemDTO.QtyAvailPrismCast;
        foreach (InvFeedsRule tmpDto in invFeedsRules)
        {
          switch (tmpDto.CustomerId)
          {
            case 5: // Amazon Drop Ship
              if (getInventoryFeedsItemDTO.AmazonFeedable == true)
              {
                getInventoryFeedsItemDTO.AmazonQtyPrismCast = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailPrismCast * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.AmazonPrismCastPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 9: // BPM Website
              if (getInventoryFeedsItemDTO.BPMFeedable == true)
              {
                getInventoryFeedsItemDTO.BPMWebQtyPrismCast = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailPrismCast * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.BPMWebPrismCastPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 12: // eBay
              if (getInventoryFeedsItemDTO.eBayFeedable == true)
              {
                getInventoryFeedsItemDTO.eBayQtyPrismCast = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailPrismCast * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.eBayPrismCastPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
            case 14: // Houzz Drop Ship
              if (getInventoryFeedsItemDTO.HouzzFeedable == true)
              {/*
                getInventoryFeedsItemDTO.HouzzQtyPrismCast = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailPrismCast * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.HouzzPrismCastPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoC++;*/ /*
              } 
              break;
            case 18: // Mellow Website
              if (getInventoryFeedsItemDTO.MellowFeedable == true)
              {
                getInventoryFeedsItemDTO.MellowWebQtyPrismCast = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailPrismCast * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.MellowWebPrismCastPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 21: // Overstock Drop Ship
              if (getInventoryFeedsItemDTO.OverstockFeedable == true)
              {
                getInventoryFeedsItemDTO.OverstockQtyPrismCast = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailPrismCast * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.OverstockPrismCastPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 26: // Walmart DSV
              if (getInventoryFeedsItemDTO.WalmartFeedable == true)
              {
                getInventoryFeedsItemDTO.WalmartQtyPrismCast = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailPrismCast * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.WalmartPrismCastPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 29: // Wayfair Drop Ship
              if (getInventoryFeedsItemDTO.WayfairFeedable == true)
              {
                getInventoryFeedsItemDTO.WayfairQtyPrismCast = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailPrismCast * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.WayfairPrismCastPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 40: // HomeDepot Drop Ship
              if (getInventoryFeedsItemDTO.HomeDepotFeedable == true)
              {
                getInventoryFeedsItemDTO.HomeDepotQtyPrismCast = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailPrismCast * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.HomeDepotPrismCastPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
            case 51: // Target Drop Ship
              if (getInventoryFeedsItemDTO.TargetFeedable == true)
              {
                getInventoryFeedsItemDTO.TargetQtyPrismCast = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailPrismCast * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.TargetPrismCastPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
          }
        } // End of foreach for Qty calculation
      }
      else if (LocId == prsmCaltId) // For Prism-Calt
      {
        totalQty = getInventoryFeedsItemDTO.QtyAvailPrismCalt;
        foreach (InvFeedsRule tmpDto in invFeedsRules)
        {
          switch (tmpDto.CustomerId)
          {
            case 5: // Amazon Drop Ship
              if (getInventoryFeedsItemDTO.AmazonFeedable == true)
              {
                getInventoryFeedsItemDTO.AmazonQtyPrismCalt = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailPrismCalt * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.AmazonPrismCaltPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 9: // BPM Website
              if (getInventoryFeedsItemDTO.BPMFeedable == true)
              {
                getInventoryFeedsItemDTO.BPMWebQtyPrismCalt = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailPrismCalt * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.BPMWebPrismCaltPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 12: // eBay
              if (getInventoryFeedsItemDTO.eBayFeedable == true)
              {
                getInventoryFeedsItemDTO.eBayQtyPrismCalt = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailPrismCalt * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.eBayPrismCaltPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
            case 14: // Houzz Drop Ship
              if (getInventoryFeedsItemDTO.HouzzFeedable == true)
              {/*
                getInventoryFeedsItemDTO.HouzzQtyPrismCalt = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailPrismCalt * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.HouzzPrismCaltPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoC++;*/ /*
              }
              break;
            case 18: // Mellow Website
              if (getInventoryFeedsItemDTO.MellowFeedable == true)
              {
                getInventoryFeedsItemDTO.MellowWebQtyPrismCalt = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailPrismCalt * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.MellowWebPrismCaltPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 21: // Overstock Drop Ship
              if (getInventoryFeedsItemDTO.OverstockFeedable == true)
              {
                getInventoryFeedsItemDTO.OverstockQtyPrismCalt = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailPrismCalt * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.OverstockPrismCaltPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 26: // Walmart DSV
              if (getInventoryFeedsItemDTO.WalmartFeedable == true)
              {
                getInventoryFeedsItemDTO.WalmartQtyPrismCalt = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailPrismCalt * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.WalmartPrismCaltPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 29: // Wayfair Drop Ship
              if (getInventoryFeedsItemDTO.WayfairFeedable == true)
              {
                getInventoryFeedsItemDTO.WayfairQtyPrismCalt = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailPrismCalt * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.WayfairPrismCaltPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 40: // HomeDepot Drop Ship
              if (getInventoryFeedsItemDTO.HomeDepotFeedable == true)
              {
                getInventoryFeedsItemDTO.HomeDepotQtyPrismCalt = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailPrismCalt * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.HomeDepotPrismCaltPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
            case 51: // Target Drop Ship
              if (getInventoryFeedsItemDTO.TargetFeedable == true)
              {
                getInventoryFeedsItemDTO.TargetQtyPrismCalt = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailPrismCalt * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.TargetPrismCaltPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
          }
        } // End of foreach for Qty calculation
      }*/
      else if (LocId == zinusTracyId) // For ZINUS-Tracy
      {
        totalQty = getInventoryFeedsItemDTO.QtyAvailZinusTracy - (getInventoryFeedsItemDTO.totalStagePOQtyZinusTracy + 15);
        realTotalQty = totalQty + 15;
        if (realTotalQty <= 0) { realTotalQty = 0; }
        if (totalQty <= 0)
        { getInventoryFeedsItemDTO.ZinusTracyFeedable = false; getInventoryFeedsItemDTO.QtyAvailZinusTracy = 0; goto SkipToEndZinusTracy; }
        if (totalQty <= 60)
        { totalQty = (int)Math.Floor((double)totalQty * 0.8); };
        getInventoryFeedsItemDTO.QtyAvailZinusTracy = totalQty; // Added by Brian Yi on 6/12/2024
        foreach (InvFeedsRule tmpDto in invFeedsRules)
        {
          switch (tmpDto.CustomerId)
          {
            case 5: // Amazon Drop Ship
              if (getInventoryFeedsItemDTO.AmazonFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == amazonID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == amazonID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusTracy)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.AmazonQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.AmazonQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.AmazonQtyZinusTracy = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.AmazonQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.AmazonQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.AmazonQtyZinusTracy = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailZinusTracy * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.AmazonZinusTracyPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 9: // BPM Website
              if (getInventoryFeedsItemDTO.BPMFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == bpmWebID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == bpmWebID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusTracy)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailZinusTracy * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.BPMWebZinusTracyPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 12: // eBay
              if (getInventoryFeedsItemDTO.eBayFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ebayID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ebayID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusTracy)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.eBayQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.eBayQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.eBayQtyZinusTracy = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.eBayQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.eBayQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.eBayQtyZinusTracy = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailZinusTracy * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.eBayZinusTracyPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
            case 14: // Houzz Drop Ship
              if (getInventoryFeedsItemDTO.HouzzFeedable == true)
              {/*
                getInventoryFeedsItemDTO.HouzzQtyZinusTracy = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailZinusTracy * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.HouzzZinusTracyPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoC++;*/
              }
              break;
            case 18: // Mellow Website
              if (getInventoryFeedsItemDTO.MellowFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == mellowWebID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == mellowWebID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusTracy)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailZinusTracy * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.MellowWebZinusTracyPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 21: // Overstock Drop Ship
              if (getInventoryFeedsItemDTO.OverstockFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ostID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ostID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusTracy)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.OverstockQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.OverstockQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.OverstockQtyZinusTracy = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.OverstockQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.OverstockQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.OverstockQtyZinusTracy = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailZinusTracy * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.OverstockZinusTracyPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 26: // Walmart DSV
              if (getInventoryFeedsItemDTO.WalmartFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == walmartID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == walmartID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusTracy)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.WalmartQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.WalmartQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.WalmartQtyZinusTracy = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.WalmartQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.WalmartQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.WalmartQtyZinusTracy = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailZinusTracy * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.WalmartZinusTracyPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 29: // Wayfair Drop Ship
              if (getInventoryFeedsItemDTO.WayfairFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == wayfairID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == wayfairID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusTracy)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.WayfairQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.WayfairQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.WayfairQtyZinusTracy = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.WayfairQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.WayfairQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.WayfairQtyZinusTracy = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailZinusTracy * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.WayfairZinusTracyPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 40: // HomeDepot Drop Ship
              if (getInventoryFeedsItemDTO.HomeDepotFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == homeDepotID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == homeDepotID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusTracy)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailZinusTracy * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.HomeDepotZinusTracyPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
            case 51: // Target Drop Ship
              if (getInventoryFeedsItemDTO.TargetFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == targetID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == targetID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusTracy)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.TargetQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.TargetQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.TargetQtyZinusTracy = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.TargetQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.TargetQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.TargetQtyZinusTracy = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailZinusTracy * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.TargetZinusTracyPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
          }
        } // End of foreach for Qty calculation
      SkipToEndZinusTracy:
        getInventoryFeedsItemDTO.QtyAvailZinusTracy = realTotalQty;
        Console.WriteLine("");

      }
      else if (LocId == zinusChsId) // For ZINUS-CHS
      {
        totalQty = getInventoryFeedsItemDTO.QtyAvailZinusChs - (getInventoryFeedsItemDTO.totalStagePOQtyZinusChs + 15);
        realTotalQty = totalQty + 15;
        if (realTotalQty <= 0) { realTotalQty = 0; }
        if (totalQty <= 0)
        { getInventoryFeedsItemDTO.ZinusChsFeedable = false; getInventoryFeedsItemDTO.QtyAvailZinusChs = 0; goto SkipToEndZinusChs; }
        if (totalQty <= 60)
        { totalQty = (int)Math.Floor((double)totalQty * 0.8); };
        getInventoryFeedsItemDTO.QtyAvailZinusChs = totalQty; // Added by Brian Yi on 6/12/2024
        foreach (InvFeedsRule tmpDto in invFeedsRules)
        {
          switch (tmpDto.CustomerId)
          {
            case 5: // Amazon Drop Ship
              if (getInventoryFeedsItemDTO.AmazonFeedable == true)
              {

                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == amazonID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == amazonID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusChs)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.AmazonQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.AmazonQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.AmazonQtyZinusChs = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.AmazonQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.AmazonQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.AmazonQtyZinusChs = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailZinusChs * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.AmazonZinusChsPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 9: // BPM Website
              if (getInventoryFeedsItemDTO.BPMFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == bpmWebID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == bpmWebID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusChs)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.BPMWebQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.BPMWebQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.BPMWebQtyZinusChs = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.BPMWebQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.BPMWebQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.BPMWebQtyZinusChs = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailZinusChs * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.BPMWebZinusChsPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 12: // eBay
              if (getInventoryFeedsItemDTO.eBayFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ebayID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ebayID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusChs)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.eBayQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.eBayQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.eBayQtyZinusChs = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.eBayQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.eBayQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.eBayQtyZinusChs = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailZinusChs * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.eBayZinusChsPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
            case 14: // Houzz Drop Ship
              if (getInventoryFeedsItemDTO.HouzzFeedable == true)
              {/*
                getInventoryFeedsItemDTO.HouzzQtyZinusChs = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailZinusChs * ((double)tmpDto.RatioOnLowData / 100));
                getInventoryFeedsItemDTO.HouzzZinusChsPercentage = (int)tmpDto.RatioOnLowData;
                getInventoryFeedsItemDTO.countParetoC++;*/
              }
              break;
            case 18: // Mellow Website
              if (getInventoryFeedsItemDTO.MellowFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == mellowWebID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == mellowWebID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusChs)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.MellowWebQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.MellowWebQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.MellowWebQtyZinusChs = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.MellowWebQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.MellowWebQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.MellowWebQtyZinusChs = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailZinusChs * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.MellowWebZinusChsPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 21: // Overstock Drop Ship
              if (getInventoryFeedsItemDTO.OverstockFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ostID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ostID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusChs)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.OverstockQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.OverstockQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.OverstockQtyZinusChs = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.OverstockQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.OverstockQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.OverstockQtyZinusChs = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailZinusChs * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.OverstockZinusChsPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 26: // Walmart DSV
              if (getInventoryFeedsItemDTO.WalmartFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == walmartID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == walmartID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusChs)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.WalmartQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.WalmartQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.WalmartQtyZinusChs = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.WalmartQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.WalmartQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.WalmartQtyZinusChs = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailZinusChs * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.WalmartZinusChsPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoA++;
                getInventoryFeedsItemDTO.paretoAqty = -1;
              }
              break;
            case 29: // Wayfair Drop Ship
              if (getInventoryFeedsItemDTO.WayfairFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == wayfairID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == wayfairID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusChs)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.WayfairQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.WayfairQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.WayfairQtyZinusChs = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.WayfairQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.WayfairQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.WayfairQtyZinusChs = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailZinusChs * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.WayfairZinusChsPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoC++;
              }
              break;
            case 40: // HomeDepot Drop Ship
              if (getInventoryFeedsItemDTO.HomeDepotFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == homeDepotID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == homeDepotID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusChs)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailZinusChs * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.HomeDepotZinusChsPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
            case 51: // Target Drop Ship
              if (getInventoryFeedsItemDTO.TargetFeedable == true)
              {
                if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == targetID) != null)
                {
                  InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == targetID);
                  if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
                  {
                    if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
                    {
                      if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusChs)
                      {
                        if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                        {
                          //getInventoryFeedsItemDTO.TargetQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                          getInventoryFeedsItemDTO.TargetQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                        }
                      }
                      else
                      {
                        getInventoryFeedsItemDTO.TargetQtyZinusChs = 0;
                      }
                    }
                    else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                    {
                      //getInventoryFeedsItemDTO.TargetQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                      getInventoryFeedsItemDTO.TargetQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    }
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.TargetQtyZinusChs = (int)Math.Floor(getInventoryFeedsItemDTO.QtyAvailZinusChs * ((double)tmpDto.RatioOnLowData / 100));
                  getInventoryFeedsItemDTO.TargetZinusChsPercentage = (int)tmpDto.RatioOnLowData;
                }

                getInventoryFeedsItemDTO.countParetoB++;
                getInventoryFeedsItemDTO.paretoBqty = -1;
              }
              break;
          }
        } // End of foreach for Qty calculation
      SkipToEndZinusChs:
        Console.WriteLine("");
        getInventoryFeedsItemDTO.QtyAvailZinusChs = realTotalQty;
      } // End of ZINUS-CHS
      else { Console.WriteLine("Should NOT Come here!!!"); }

      return getInventoryFeedsItemDTO;
    }

    // For inventory feeding Custom Rules & Sales History Rule
    // By Brian Yi on 08/24/2021
    // Deprecated
    public async Task<bool> InventoryFeedsCustomRulesSalesDataRule(int LocId, GetInvSalesHistoryListItemDTO invSalesHistListItem,
      List<InvFeedsRule> invFeedsRules, InvFeedsRuleSku invFeedsRuleSku, GetInventoryFeedsItemDTO getInventoryFeedsItemDTO)
    {
      int mainslId = 25, totalQty = 0, totalSalesQty = invSalesHistListItem.totalSalesQty,
        amazonID = 5, bpmWebID = 9, ebayID = 12, houzzID = 14, mellowWebID = 18, ostID = 21, walmartID = 26, wayfairID = 29,
        AmazonQty = 0, OverstockQty = 0, WalmartQty = 0, WayfairQty = 0,
        eBayQty = 0, BPMQty = 0, MellowQty = 0, HouzzQty = 0; //bancId = 4,  swcaftId = 54, 

      List<InvFeedsRuleSkumkt> invFeedsRuleSkumkts = new List<InvFeedsRuleSkumkt>();
      //if(getInventoryFeedsItemDTO.ItemName == "5ZMF-GM4K")
      //{ Console.WriteLine("Hell!");}
      if (invFeedsRuleSku != null)
      {
        invFeedsRuleSkumkts = await _kc.InvFeedsRuleSkumkts
        .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid)
        .Where(i => i.IsActivated == true)
        .ToListAsync();
      }
      InvFeedsRule tmpInvFeedRule = new InvFeedsRule();

      InvFeedsRuleSkumkt invFeedsRuleSkumkt = new InvFeedsRuleSkumkt();
      /*if (LocId == bancId)
      {
        totalQty = getInventoryFeedsItemDTO.QtyAvailBanc;

        if (getInventoryFeedsItemDTO.AmazonFeedable == true)
        {
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == amazonID);

          getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.AmazonDropShip, totalSalesQty));

          // Market Specific
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBanc)
          { getInventoryFeedsItemDTO.AmazonQtyBanc = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == amazonID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == amazonID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBanc)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.AmazonQtyBanc = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.AmazonDropShip, totalSalesQty)); }
        } // End of Amazon Feeds

        if (getInventoryFeedsItemDTO.OverstockFeedable == true)
        {
          getInventoryFeedsItemDTO.OverstockQtyBanc = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.OverstockDropShip, totalSalesQty));

          // Market Specific
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == ostID);
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBanc)
          { getInventoryFeedsItemDTO.OverstockQtyBanc = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.OverstockQtyBanc = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == ostID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == ostID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBanc)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.OverstockQtyBanc = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.OverstockQtyBanc = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.OverstockQtyBanc = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.OverstockQtyBanc = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.OverstockDropShip, totalSalesQty)); }

        }// End of Overstock Feeds

        if (getInventoryFeedsItemDTO.WalmartFeedable == true)
        {
          getInventoryFeedsItemDTO.WalmartQtyBanc = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.Walmart, totalSalesQty));

          // Market Specific
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == walmartID);
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBanc)
          { getInventoryFeedsItemDTO.WalmartQtyBanc = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.WalmartQtyBanc = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == walmartID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == walmartID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBanc)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.WalmartQtyBanc = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.WalmartQtyBanc = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.WalmartQtyBanc = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.WalmartQtyBanc = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.Walmart, totalSalesQty)); }

        } // End of Walmart Feeds

        if (getInventoryFeedsItemDTO.WayfairFeedable == true)
        {
          getInventoryFeedsItemDTO.WayfairQtyBanc = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.WayfairDropShip, totalSalesQty));

          // Market Specific
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == wayfairID);
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBanc)
          { getInventoryFeedsItemDTO.WayfairQtyBanc = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.WayfairQtyBanc = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == wayfairID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == wayfairID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBanc)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.WayfairQtyBanc = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.WayfairQtyBanc = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.WayfairQtyBanc = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.WayfairQtyBanc = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.WayfairDropShip, totalSalesQty)); }

        } // End of Wayfair Feeds

        if (getInventoryFeedsItemDTO.eBayFeedable == true)
        {
          getInventoryFeedsItemDTO.eBayQtyBanc = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.eBay, totalSalesQty));

          // Market Specific
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == ebayID);
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBanc)
          { getInventoryFeedsItemDTO.eBayQtyBanc = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.eBayQtyBanc = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == ebayID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == ebayID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBanc)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.eBayQtyBanc = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.eBayQtyBanc = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.eBayQtyBanc = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.eBayQtyBanc = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.eBay, totalSalesQty)); }

        } // End of eBay Feeds

        if (getInventoryFeedsItemDTO.BPMFeedable == true)
        {
          getInventoryFeedsItemDTO.BPMWebQtyBanc = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.BPMWeb, totalSalesQty));

          // Market Specific
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == bpmWebID);
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBanc)
          { getInventoryFeedsItemDTO.BPMWebQtyBanc = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.BPMWebQtyBanc = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == bpmWebID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == bpmWebID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBanc)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.BPMWebQtyBanc = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.BPMWebQtyBanc = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.BPMWebQtyBanc = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.BPMWebQtyBanc = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.BPMWeb, totalSalesQty)); }

        } // End of BPM Web

        if (getInventoryFeedsItemDTO.MellowFeedable == true)
        {
          getInventoryFeedsItemDTO.MellowWebQtyBanc = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.MellowWeb, totalSalesQty));

          // Market Specific
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == mellowWebID);
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBanc)
          { getInventoryFeedsItemDTO.MellowWebQtyBanc = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.MellowWebQtyBanc = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == mellowWebID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == mellowWebID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBanc)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.MellowWebQtyBanc = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.MellowWebQtyBanc = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.MellowWebQtyBanc = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.MellowWebQtyBanc = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.MellowWeb, totalSalesQty)); }

        } // End of Mellow Web

        if (getInventoryFeedsItemDTO.HouzzFeedable == true)
        {
          getInventoryFeedsItemDTO.HouzzQtyBanc = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.Houzz, totalSalesQty));

          // Market Specific
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == houzzID);
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBanc)
          { getInventoryFeedsItemDTO.HouzzQtyBanc = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.HouzzQtyBanc = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == houzzID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == houzzID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBanc)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.HouzzQtyBanc = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.HouzzQtyBanc = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.HouzzQtyBanc = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.HouzzQtyBanc = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.Houzz, totalSalesQty)); }

        } // End of Houzz Feeds

        AmazonQty = getInventoryFeedsItemDTO.AmazonQtyBanc;
        OverstockQty = getInventoryFeedsItemDTO.OverstockQtyBanc;
        WalmartQty = getInventoryFeedsItemDTO.WalmartQtyBanc;
        WayfairQty = getInventoryFeedsItemDTO.WayfairQtyBanc;
        eBayQty = getInventoryFeedsItemDTO.eBayQtyBanc;
        BPMQty = getInventoryFeedsItemDTO.BPMWebQtyBanc;
        MellowQty = getInventoryFeedsItemDTO.MellowWebQtyBanc;
        HouzzQty = getInventoryFeedsItemDTO.HouzzQtyBanc;

        // Floor -> Round
        getInventoryFeedsItemDTO.AmazonBancPercentage = (int)Math.Round(((double)AmazonQty / totalQty) * 100, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.OverstockBancPercentage = (int)Math.Round(((double)OverstockQty / totalQty) * 100, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.WalmartBancPercentage = (int)Math.Round(((double)WalmartQty / totalQty) * 100, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.WayfairBancPercentage = (int)Math.Round(((double)WayfairQty / totalQty) * 100, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.BPMWebBancPercentage = (int)Math.Round(((double)BPMQty / totalQty) * 100, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.MellowWebBancPercentage = (int)Math.Round(((double)MellowQty / totalQty) * 100, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.eBayBancPercentage = (int)Math.Round(((double)eBayQty / totalQty) * 100, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.HouzzBancPercentage = (int)Math.Round(((double)HouzzQty / totalQty) * 100, MidpointRounding.AwayFromZero);

      }// End of BANC
      else*/
      if (LocId == mainslId)
      {
        totalQty = getInventoryFeedsItemDTO.QtyAvailMainsl;

        if (getInventoryFeedsItemDTO.AmazonFeedable == true)
        {
          getInventoryFeedsItemDTO.AmazonQtyMainsl = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.AmazonDropShip, totalSalesQty));

          // Market Specific
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == amazonID);
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailMainsl)
          { getInventoryFeedsItemDTO.AmazonQtyMainsl = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.AmazonQtyMainsl = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == amazonID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == amazonID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.AmazonQtyMainsl = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.AmazonQtyMainsl = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.AmazonQtyMainsl = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.AmazonQtyMainsl = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.AmazonDropShip, totalSalesQty)); }
        } // End of Amazon Feeds

        if (getInventoryFeedsItemDTO.OverstockFeedable == true)
        {
          getInventoryFeedsItemDTO.OverstockQtyMainsl = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.OverstockDropShip, totalSalesQty));

          // Market Specific
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == ostID);
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailMainsl)
          { getInventoryFeedsItemDTO.OverstockQtyMainsl = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.OverstockQtyMainsl = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == ostID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == ostID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.OverstockQtyMainsl = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.OverstockQtyMainsl = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.OverstockQtyMainsl = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.OverstockQtyMainsl = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.OverstockDropShip, totalSalesQty)); }

        }// End of Overstock Feeds

        if (getInventoryFeedsItemDTO.WalmartFeedable == true)
        {
          getInventoryFeedsItemDTO.WalmartQtyMainsl = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.Walmart, totalSalesQty));

          // Market Specific
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == walmartID);
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailMainsl)
          { getInventoryFeedsItemDTO.WalmartQtyMainsl = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.WalmartQtyMainsl = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == walmartID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == walmartID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.WalmartQtyMainsl = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.WalmartQtyMainsl = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.WalmartQtyMainsl = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.WalmartQtyMainsl = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.Walmart, totalSalesQty)); }

        } // End of Walmart Feeds

        if (getInventoryFeedsItemDTO.WayfairFeedable == true)
        {
          getInventoryFeedsItemDTO.WayfairQtyMainsl = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.WayfairDropShip, totalSalesQty));

          // Market Specific
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == wayfairID);
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailMainsl)
          { getInventoryFeedsItemDTO.WayfairQtyMainsl = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.WayfairQtyMainsl = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == wayfairID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == wayfairID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.WayfairQtyMainsl = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.WayfairQtyMainsl = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.WayfairQtyMainsl = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.WayfairQtyMainsl = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.WayfairDropShip, totalSalesQty)); }

        } // End of Wayfair Feeds

        if (getInventoryFeedsItemDTO.eBayFeedable == true)
        {
          getInventoryFeedsItemDTO.eBayQtyMainsl = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.eBay, totalSalesQty));

          // Market Specific
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == ebayID);
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailMainsl)
          { getInventoryFeedsItemDTO.eBayQtyMainsl = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.eBayQtyMainsl = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == ebayID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == ebayID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.eBayQtyMainsl = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.eBayQtyMainsl = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.eBayQtyMainsl = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.eBayQtyMainsl = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.eBay, totalSalesQty)); }

        } // End of eBay Feeds

        if (getInventoryFeedsItemDTO.BPMFeedable == true)
        {
          getInventoryFeedsItemDTO.BPMWebQtyMainsl = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.BPMWeb, totalSalesQty));

          // Market Specific
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == bpmWebID);
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailMainsl)
          { getInventoryFeedsItemDTO.BPMWebQtyMainsl = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.BPMWebQtyMainsl = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == bpmWebID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == bpmWebID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.BPMWebQtyMainsl = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.BPMWebQtyMainsl = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.BPMWebQtyMainsl = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.BPMWebQtyMainsl = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.BPMWeb, totalSalesQty)); }

        } // End of BPM Web

        if (getInventoryFeedsItemDTO.MellowFeedable == true)
        {
          getInventoryFeedsItemDTO.MellowWebQtyMainsl = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.MellowWeb, totalSalesQty));

          // Market Specific
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == mellowWebID);
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailMainsl)
          { getInventoryFeedsItemDTO.MellowWebQtyMainsl = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.MellowWebQtyMainsl = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == mellowWebID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == mellowWebID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.MellowWebQtyMainsl = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.MellowWebQtyMainsl = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.MellowWebQtyMainsl = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.MellowWebQtyMainsl = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.MellowWeb, totalSalesQty)); }

        } // End of Mellow Web

        if (getInventoryFeedsItemDTO.HouzzFeedable == true)
        {
          getInventoryFeedsItemDTO.HouzzQtyMainsl = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.Houzz, totalSalesQty));

          // Market Specific
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == houzzID);
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailMainsl)
          { getInventoryFeedsItemDTO.HouzzQtyMainsl = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.HouzzQtyMainsl = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == houzzID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == houzzID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.HouzzQtyMainsl = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.HouzzQtyMainsl = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.HouzzQtyMainsl = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.HouzzQtyMainsl = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.Houzz, totalSalesQty)); }

        } // End of Houzz Feeds

        AmazonQty = getInventoryFeedsItemDTO.AmazonQtyMainsl;
        OverstockQty = getInventoryFeedsItemDTO.OverstockQtyMainsl;
        WalmartQty = getInventoryFeedsItemDTO.WalmartQtyMainsl;
        WayfairQty = getInventoryFeedsItemDTO.WayfairQtyMainsl;
        eBayQty = getInventoryFeedsItemDTO.eBayQtyMainsl;
        BPMQty = getInventoryFeedsItemDTO.BPMWebQtyMainsl;
        MellowQty = getInventoryFeedsItemDTO.MellowWebQtyMainsl;
        HouzzQty = getInventoryFeedsItemDTO.HouzzQtyMainsl;

        // Floor -> Round on 08/01/2022
        getInventoryFeedsItemDTO.AmazonMainslPercentage = (int)Math.Round(((double)AmazonQty / totalQty) * 100, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.OverstockMainslPercentage = (int)Math.Round(((double)OverstockQty / totalQty) * 100, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.WalmartMainslPercentage = (int)Math.Round(((double)WalmartQty / totalQty) * 100, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.WayfairMainslPercentage = (int)Math.Round(((double)WayfairQty / totalQty) * 100, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.BPMWebMainslPercentage = (int)Math.Round(((double)BPMQty / totalQty) * 100, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.MellowWebMainslPercentage = (int)Math.Round(((double)MellowQty / totalQty) * 100, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.eBayMainslPercentage = (int)Math.Round(((double)eBayQty / totalQty) * 100, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.HouzzMainslPercentage = (int)Math.Round(((double)HouzzQty / totalQty) * 100, MidpointRounding.AwayFromZero);
      }// End of MainSL
      /*else if (LocId == swcaftId) // For SWCA-FT
      {
        totalQty = getInventoryFeedsItemDTO.QtyAvailSWCAFT;

        if (getInventoryFeedsItemDTO.AmazonFeedable == true)
        {
          getInventoryFeedsItemDTO.AmazonQtySWCAFT = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.AmazonDropShip, totalSalesQty));

          // Market Specific
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == amazonID);
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailMainsl)
          { getInventoryFeedsItemDTO.AmazonQtySWCAFT = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.AmazonQtySWCAFT = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == amazonID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == amazonID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailSWCAFT)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.AmazonQtySWCAFT = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.AmazonQtySWCAFT = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.AmazonQtySWCAFT = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.AmazonQtySWCAFT = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.AmazonDropShip, totalSalesQty)); }
        } // End of Amazon Feeds

        if (getInventoryFeedsItemDTO.OverstockFeedable == true)
        {
          getInventoryFeedsItemDTO.OverstockQtySWCAFT = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.OverstockDropShip, totalSalesQty));

          // Market Specific
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == ostID);
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailSWCAFT)
          { getInventoryFeedsItemDTO.OverstockQtySWCAFT = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.OverstockQtySWCAFT = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == ostID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == ostID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailSWCAFT)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.OverstockQtySWCAFT = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.OverstockQtySWCAFT = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.OverstockQtySWCAFT = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.OverstockQtySWCAFT = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.OverstockDropShip, totalSalesQty)); }

        }// End of Overstock Feeds

        if (getInventoryFeedsItemDTO.WalmartFeedable == true)
        {
          getInventoryFeedsItemDTO.WalmartQtySWCAFT = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.Walmart, totalSalesQty));

          // Market Specific
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == walmartID);
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailSWCAFT)
          { getInventoryFeedsItemDTO.WalmartQtySWCAFT = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.WalmartQtySWCAFT = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == walmartID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == walmartID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailSWCAFT)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.WalmartQtySWCAFT = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.WalmartQtySWCAFT = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.WalmartQtySWCAFT = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.WalmartQtySWCAFT = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.Walmart, totalSalesQty)); }

        } // End of Walmart Feeds

        if (getInventoryFeedsItemDTO.WayfairFeedable == true)
        {
          getInventoryFeedsItemDTO.WayfairQtySWCAFT = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.WayfairDropShip, totalSalesQty));

          // Market Specific
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == wayfairID);
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailSWCAFT)
          { getInventoryFeedsItemDTO.WayfairQtySWCAFT = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.WayfairQtySWCAFT = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == wayfairID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == wayfairID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailSWCAFT)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.WayfairQtySWCAFT = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.WayfairQtySWCAFT = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.WayfairQtySWCAFT = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.WayfairQtySWCAFT = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.WayfairDropShip, totalSalesQty)); }

        } // End of Wayfair Feeds

        if (getInventoryFeedsItemDTO.eBayFeedable == true)
        {
          getInventoryFeedsItemDTO.eBayQtySWCAFT = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.eBay, totalSalesQty));

          // Market Specific
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == ebayID);
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailSWCAFT)
          { getInventoryFeedsItemDTO.eBayQtySWCAFT = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.eBayQtySWCAFT = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == ebayID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == ebayID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailSWCAFT)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.eBayQtySWCAFT = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.eBayQtySWCAFT = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.eBayQtySWCAFT = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.eBayQtySWCAFT = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.eBay, totalSalesQty)); }

        } // End of eBay Feeds

        if (getInventoryFeedsItemDTO.BPMFeedable == true)
        {
          getInventoryFeedsItemDTO.BPMWebQtySWCAFT = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.BPMWeb, totalSalesQty));

          // Market Specific
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == bpmWebID);
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailSWCAFT)
          { getInventoryFeedsItemDTO.BPMWebQtySWCAFT = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.BPMWebQtySWCAFT = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == bpmWebID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == bpmWebID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailSWCAFT)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.BPMWebQtySWCAFT = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.BPMWebQtySWCAFT = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.BPMWebQtySWCAFT = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.BPMWebQtySWCAFT = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.BPMWeb, totalSalesQty)); }

        } // End of BPM Web

        if (getInventoryFeedsItemDTO.MellowFeedable == true)
        {
          getInventoryFeedsItemDTO.MellowWebQtySWCAFT = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.MellowWeb, totalSalesQty));

          // Market Specific
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == mellowWebID);
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailSWCAFT)
          { getInventoryFeedsItemDTO.MellowWebQtySWCAFT = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.MellowWebQtySWCAFT = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == mellowWebID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == mellowWebID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailSWCAFT)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.MellowWebQtySWCAFT = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.MellowWebQtySWCAFT = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.MellowWebQtySWCAFT = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.MellowWebQtySWCAFT = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.MellowWeb, totalSalesQty)); }

        } // End of Mellow Web

        if (getInventoryFeedsItemDTO.HouzzFeedable == true)
        {
          getInventoryFeedsItemDTO.HouzzQtySWCAFT = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.Houzz, totalSalesQty));

          // Market Specific
          tmpInvFeedRule = invFeedsRules.FindLast(i => i.CustomerId == houzzID);
          if (tmpInvFeedRule.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailSWCAFT)
          { getInventoryFeedsItemDTO.HouzzQtySWCAFT = 0; }
          if (tmpInvFeedRule.CustomFeedRatio > 0)
          { getInventoryFeedsItemDTO.HouzzQtySWCAFT = (int)Math.Floor(totalQty * ((double)tmpInvFeedRule.CustomFeedRatio / 100)); }

          // SKU Specific
          if (invFeedsRuleSkumkts.Count > 0 && (invFeedsRuleSkumkts.FindLast(i => i.CustomerId == houzzID) != null))
          {
            invFeedsRuleSkumkt = invFeedsRuleSkumkts.FindLast(i => i.CustomerId == houzzID);
            if (invFeedsRuleSkumkt.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailSWCAFT)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
                {
                  if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                  { getInventoryFeedsItemDTO.HouzzQtySWCAFT = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

                }
              }
              else
              { getInventoryFeedsItemDTO.HouzzQtySWCAFT = 0; }
            }
            else
            {
              if (invFeedsRuleSkumkt.CustomFixedPercentage.HasValue == true)
              {
                if (invFeedsRuleSkumkt.CustomFixedPercentage > 0)
                { getInventoryFeedsItemDTO.HouzzQtySWCAFT = (int)Math.Floor(totalQty * ((double)invFeedsRuleSkumkt.CustomFixedPercentage / 100)); }

              }
            }
          }
          else { getInventoryFeedsItemDTO.HouzzQtySWCAFT = (int)Math.Floor(totalQty * calMarketRatioBySalesHistory(2, invSalesHistListItem.Houzz, totalSalesQty)); }

        } // End of Houzz Feeds

        AmazonQty = getInventoryFeedsItemDTO.AmazonQtySWCAFT;
        OverstockQty = getInventoryFeedsItemDTO.OverstockQtySWCAFT;
        WalmartQty = getInventoryFeedsItemDTO.WalmartQtySWCAFT;
        WayfairQty = getInventoryFeedsItemDTO.WayfairQtySWCAFT;
        eBayQty = getInventoryFeedsItemDTO.eBayQtySWCAFT;
        BPMQty = getInventoryFeedsItemDTO.BPMWebQtySWCAFT;
        MellowQty = getInventoryFeedsItemDTO.MellowWebQtySWCAFT;
        HouzzQty = getInventoryFeedsItemDTO.HouzzQtySWCAFT;

        // Floor -> Round on 08/02/2022
        getInventoryFeedsItemDTO.AmazonSWCAFTPercentage = (int)Math.Round(((double)AmazonQty / totalQty) * 100, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.OverstockSWCAFTPercentage = (int)Math.Round(((double)OverstockQty / totalQty) * 100, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.WalmartSWCAFTPercentage = (int)Math.Round(((double)WalmartQty / totalQty) * 100, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.WayfairSWCAFTPercentage = (int)Math.Round(((double)WayfairQty / totalQty) * 100, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.BPMWebSWCAFTPercentage = (int)Math.Round(((double)BPMQty / totalQty) * 100, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.MellowWebSWCAFTPercentage = (int)Math.Round(((double)MellowQty / totalQty) * 100, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.eBaySWCAFTPercentage = (int)Math.Round(((double)eBayQty / totalQty) * 100, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.HouzzSWCAFTPercentage = (int)Math.Round(((double)HouzzQty / totalQty) * 100, MidpointRounding.AwayFromZero);
      }// End of SWCAFT */
      else { Console.WriteLine("Should NOT Come here!!!"); }
      /*
      getInventoryFeedsItemDTO.AmazonPercentage = (int)Math.Floor(((double)AmazonQty / totalQty) * 100);
      getInventoryFeedsItemDTO.OverstockPercentage = (int)Math.Floor(((double)OverstockQty / totalQty) * 100);
      getInventoryFeedsItemDTO.WalmartPercentage = (int)Math.Floor(((double)WalmartQty / totalQty) * 100);
      getInventoryFeedsItemDTO.WayfairPercentage = (int)Math.Floor(((double)WayfairQty / totalQty) * 100);
      getInventoryFeedsItemDTO.BPMWebPercentage = (int)Math.Floor(((double)BPMQty / totalQty) * 100);
      getInventoryFeedsItemDTO.MellowWebPercentage = (int)Math.Floor(((double)MellowQty / totalQty) * 100);
      getInventoryFeedsItemDTO.eBayPercentage = (int)Math.Floor(((double)eBayQty / totalQty) * 100);
      getInventoryFeedsItemDTO.HouzzPercentage = (int)Math.Floor(((double)HouzzQty / totalQty) * 100);
      */
      return true;
    }

    // For getting Inventory Feeding history
    // By Brian Yi on 06/10/2021
    public async Task<List<GetInventoryFeedsItemDTO>> GetInvFeedsHistory(DateTime historyDate)
    {
      List<GetInventoryFeedsItemDTO> serviceResponse = new List<GetInventoryFeedsItemDTO>();
      InvFeedsReport invFeedReport = await _kc.InvFeedsReports
        .Where(i => i.FeedingDate == historyDate && i.IsApproved == true)
        .FirstOrDefaultAsync();

      List<InvFeedsReportItem> invFeedsReportItems = await _kc.InvFeedsReportItems
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .Include(i => i.InvFeedsRepItemDetails)
        .ToListAsync();

      GetInventoryFeedsItemDTO tmpInvFeedsItem = new GetInventoryFeedsItemDTO();

      foreach (InvFeedsReportItem tmpDto in invFeedsReportItems)
      {
        tmpInvFeedsItem = await GetInvFeedItemDetail(tmpDto);
        serviceResponse.Add(tmpInvFeedsItem);
      }
      return serviceResponse;
    }


    // Finish this first!!! - DONE
    // Get Inventory Feeds Item Detail
    // Created by Brian Yi on 9/10/2021

    public async Task<GetInventoryFeedsItemDTO> GetInvFeedItemDetail(InvFeedsReportItem invFeedsReportItem)
    {
      int bancId = 4, mainslId = 25, swcaftId = 54;
      BpmItem bpmItem = await _kc.BpmItems
        .Where(bi => bi.ItemNoId == invFeedsReportItem.ItemNoId)
        .FirstOrDefaultAsync();

      GetInventoryFeedsItemDTO result = new GetInventoryFeedsItemDTO()
      {
        ItemNoId = (int)invFeedsReportItem.ItemNoId,
        ItemName = bpmItem.ItemName
      };

      foreach (InvFeedsRepItemDetail tmpDto in invFeedsReportItem.InvFeedsRepItemDetails)
      {
        switch (tmpDto.CustomerId)
        {
          case 5: // Amazon Drop Ship
            result.AmazonPercentage = (int)tmpDto.Ratio;
            foreach (InvFeedsRepItemLoc tmpLoc in tmpDto.InvFeedsRepItemLocs)
            {
              if (tmpLoc.LocationId == bancId)
              { result.AmazonQtyBanc = (int)tmpLoc.QtyAvail; }
              else if (tmpLoc.LocationId == mainslId)
              { result.AmazonQtyMainsl = (int)tmpLoc.QtyAvail; }
              //else if (tmpLoc.LocationId == swcaftId)
              //{ result.AmazonQtySWCAFT = (int)tmpLoc.QtyAvail; }
            }
            break;
          case 9: // BPM Website
            result.BPMWebPercentage = (int)tmpDto.Ratio;
            foreach (InvFeedsRepItemLoc tmpLoc in tmpDto.InvFeedsRepItemLocs)
            {
              if (tmpLoc.LocationId == bancId)
              { result.BPMWebQtyBanc = (int)tmpLoc.QtyAvail; }
              else if (tmpLoc.LocationId == mainslId)
              { result.BPMWebQtyMainsl = (int)tmpLoc.QtyAvail; }
              //else if (tmpLoc.LocationId == swcaftId)
              //{ result.AmazonQtySWCAFT = (int)tmpLoc.QtyAvail; }
            }
            break;
          case 12: // eBay
            result.eBayPercentage = (int)tmpDto.Ratio;
            foreach (InvFeedsRepItemLoc tmpLoc in tmpDto.InvFeedsRepItemLocs)
            {
              if (tmpLoc.LocationId == bancId)
              { result.eBayQtyBanc = (int)tmpLoc.QtyAvail; }
              else if (tmpLoc.LocationId == mainslId)
              { result.eBayQtyMainsl = (int)tmpLoc.QtyAvail; }
              //else if (tmpLoc.LocationId == swcaftId)
              //{ result.AmazonQtySWCAFT = (int)tmpLoc.QtyAvail; }
            }
            break;
          case 14: // Houzz Drop Ship
            result.HouzzPercentage = (int)tmpDto.Ratio;
            foreach (InvFeedsRepItemLoc tmpLoc in tmpDto.InvFeedsRepItemLocs)
            {
              if (tmpLoc.LocationId == bancId)
              { result.HouzzQtyBanc = (int)tmpLoc.QtyAvail; }
              else if (tmpLoc.LocationId == mainslId)
              { result.HouzzQtyMainsl = (int)tmpLoc.QtyAvail; }
              //else if (tmpLoc.LocationId == swcaftId)
              //{ result.AmazonQtySWCAFT = (int)tmpLoc.QtyAvail; }
            }
            break;
          case 18: // Mellow Website
            result.MellowWebPercentage = (int)tmpDto.Ratio;
            foreach (InvFeedsRepItemLoc tmpLoc in tmpDto.InvFeedsRepItemLocs)
            {
              if (tmpLoc.LocationId == bancId)
              { result.MellowWebQtyBanc = (int)tmpLoc.QtyAvail; }
              else if (tmpLoc.LocationId == mainslId)
              { result.MellowWebQtyMainsl = (int)tmpLoc.QtyAvail; }
              //else if (tmpLoc.LocationId == swcaftId)
              //{ result.AmazonQtySWCAFT = (int)tmpLoc.QtyAvail; }
            }
            break;
          case 21: // Overstock Drop Ship
            result.OverstockPercentage = (int)tmpDto.Ratio;
            foreach (InvFeedsRepItemLoc tmpLoc in tmpDto.InvFeedsRepItemLocs)
            {
              if (tmpLoc.LocationId == bancId)
              { result.OverstockQtyBanc = (int)tmpLoc.QtyAvail; }
              else if (tmpLoc.LocationId == mainslId)
              { result.OverstockQtyMainsl = (int)tmpLoc.QtyAvail; }
              //else if (tmpLoc.LocationId == swcaftId)
              //{ result.AmazonQtySWCAFT = (int)tmpLoc.QtyAvail; }
            }
            break;
          case 26: // Walmart DSV
            result.WalmartPercentage = (int)tmpDto.Ratio;
            foreach (InvFeedsRepItemLoc tmpLoc in tmpDto.InvFeedsRepItemLocs)
            {
              if (tmpLoc.LocationId == bancId)
              { result.WalmartQtyBanc = (int)tmpLoc.QtyAvail; }
              else if (tmpLoc.LocationId == mainslId)
              { result.WalmartQtyMainsl = (int)tmpLoc.QtyAvail; }
              //else if (tmpLoc.LocationId == swcaftId)
              //{ result.AmazonQtySWCAFT = (int)tmpLoc.QtyAvail; }
            }
            break;
          case 29: // Wayfair Drop Ship
            result.WayfairPercentage = (int)tmpDto.Ratio;
            foreach (InvFeedsRepItemLoc tmpLoc in tmpDto.InvFeedsRepItemLocs)
            {
              if (tmpLoc.LocationId == bancId)
              { result.WayfairQtyBanc = (int)tmpLoc.QtyAvail; }
              else if (tmpLoc.LocationId == mainslId)
              { result.WayfairQtyMainsl = (int)tmpLoc.QtyAvail; }
              // else if (tmpLoc.LocationId == swcaftId)
              // { result.AmazonQtySWCAFT = (int)tmpLoc.QtyAvail; }
            }
            break;
        }
      }

      return result;
    }



    // Update Inventory Feeds Item Detail
    // Created by Brian Yi on 9/10/2021
    // Modified by Brian Yi on 
    public async Task<bool> UpdateInvFeedItemDetail(int empId, GetInventoryFeedsItemDTO invFeedsItemDTO)
    {
      const int mainslId = 25; //bancId = 4, , swcaftId = 54, bascId = 62
      int amazonID = 5, bpmWebID = 9, ebayID = 12, houzzID = 14, mellowWebID = 18, ostID = 21, walmartID = 26, wayfairID = 29, homedepotId = 40;
      bool result = true;
      InvFeedsReportItem invFeedsRepItem = await _kc.InvFeedsReportItems
        .Where(ri => ri.InvFeedsReportItemId == invFeedsItemDTO.InvFeedsReportItemId)
        .Include(ri => ri.InvFeedsRepItemDetails)
        .FirstOrDefaultAsync();
      InvFeedsRepTableDetail invFeedsRepTableDetail = await _kc.InvFeedsRepTableDetails
        .Where(d => d.InvFeedsReportItemId == invFeedsRepItem.InvFeedsReportItemId)
        .FirstOrDefaultAsync();

      List<InvFeedsRepItemLoc> tmpLocs = new List<InvFeedsRepItemLoc>();
      List<InvFeedsRepItemDetail> invFeedsRepItemDetails = new List<InvFeedsRepItemDetail>();
      List<InvFeedsRepItemLoc> invFeedsRepItemLocs = new List<InvFeedsRepItemLoc>();
      List<InvFeedsAppliedRule> invFeedsAppliedRules = await _kc.InvFeedsAppliedRules.ToListAsync();
      InvFeedsRepItemDetail invFeedsRepItemDetail = new InvFeedsRepItemDetail();
      InvFeedsRepItemLoc invFeedsRepItemLoc = new InvFeedsRepItemLoc();

      // Updating InvFeedsRepTableDetail record
      //invFeedsRepTableDetail.QtyAvailBanc = invFeedsItemDTO.QtyAvailBanc;
      //invFeedsRepTableDetail.QtyAvailBasc = invFeedsItemDTO.QtyAvailBasc;
      invFeedsRepTableDetail.QtyAvailMainSl = invFeedsItemDTO.QtyAvailMainsl;
      //invFeedsRepTableDetail.QtyAvailSwcaft = invFeedsItemDTO.QtyAvailSWCAFT;
      invFeedsRepTableDetail.QtyAvailCastleGate = invFeedsItemDTO.QtyAvailCGInv;

      //Skip for now
      //invFeedsRepTableDetail.TotalStagePoqtyBanc = invFeedsItemDTO.totalStagePOQtyBanc;
      //invFeedsRepTableDetail.TotalStagePoqtyBasc = invFeedsItemDTO.totalStagePOQtyBasc;
      invFeedsRepTableDetail.TotalStagePoqtyMainSl = invFeedsItemDTO.totalStagePOQtyMainsl;
      //invFeedsRepTableDetail.TotalStagePoqtySwcaft = invFeedsItemDTO.totalStagePOQtySWCAFT;
      //invFeedsRepTableDetail.QtyAvailAmazon = invFeedsItemDTO.QtyAvailAmzInv;

      // For Amazon
      //invFeedsRepTableDetail.AmazonQtyBanc = invFeedsItemDTO.AmazonQtyBanc;
      //invFeedsRepTableDetail.AmazonQtyBasc = invFeedsItemDTO.AmazonQtyBasc;
      invFeedsRepTableDetail.AmazonQtyMainSl = invFeedsItemDTO.AmazonQtyMainsl;
      //invFeedsRepTableDetail.AmazonQtySwcaft = invFeedsItemDTO.AmazonQtySWCAFT;

      // For Walmart
      //invFeedsRepTableDetail.WalmartQtyBanc = invFeedsItemDTO.WalmartQtyBanc;
      //invFeedsRepTableDetail.WalmartQtyBasc = invFeedsItemDTO.WalmartQtyBasc;
      invFeedsRepTableDetail.WalmartQtyMainSl = invFeedsItemDTO.WalmartQtyMainsl;
      //invFeedsRepTableDetail.WalmartQtySwcaft = invFeedsItemDTO.WalmartQtySWCAFT;

      // For Wayfair
      //invFeedsRepTableDetail.WayfairQtyBanc = invFeedsItemDTO.WayfairQtyBanc;
      //invFeedsRepTableDetail.WayfairQtyBasc = invFeedsItemDTO.WayfairQtyBasc;
      invFeedsRepTableDetail.WayfairQtyMainSl = invFeedsItemDTO.WayfairQtyMainsl;
      //invFeedsRepTableDetail.WayfairQtySwcaft = invFeedsItemDTO.WayfairQtySWCAFT;

      // For Overstock
      //invFeedsRepTableDetail.OverstockQtyBanc = invFeedsItemDTO.OverstockQtyBanc;
      //invFeedsRepTableDetail.OverstockQtyBasc = invFeedsItemDTO.OverstockQtyBasc;
      invFeedsRepTableDetail.OverstockQtyMainSl = invFeedsItemDTO.OverstockQtyMainsl;
      //invFeedsRepTableDetail.OverstockQtySwcaft = invFeedsItemDTO.OverstockQtySWCAFT;

      // For HomeDepot
      //invFeedsRepTableDetail.HomeDepotQtyBanc = invFeedsItemDTO.HomeDepotQtyBanc;
      //invFeedsRepTableDetail.HomeDepotQtyBasc = invFeedsItemDTO.HomeDepotQtyBasc;
      invFeedsRepTableDetail.HomeDepotQtyMainSl = invFeedsItemDTO.HomeDepotQtyMainsl;
      //invFeedsRepTableDetail.HomeDepotQtySwcaft = invFeedsItemDTO.HomeDepotQtySWCAFT;

      // For Target
      //invFeedsRepTableDetail.TargetQtyBanc = invFeedsItemDTO.TargetQtyBanc;
      //invFeedsRepTableDetail.TargetQtyBasc = invFeedsItemDTO.TargetQtyBasc;
      invFeedsRepTableDetail.TargetQtyMainSl = invFeedsItemDTO.TargetQtyMainsl;
      //invFeedsRepTableDetail.TargetQtySwcaft = invFeedsItemDTO.TargetQtySWCAFT;

      // For eBay
      //invFeedsRepTableDetail.EBayQtyBanc = invFeedsItemDTO.eBayQtyBanc;
      //invFeedsRepTableDetail.EBayQtyBasc = invFeedsItemDTO.eBayQtyBasc;
      invFeedsRepTableDetail.EBayQtyMainSl = invFeedsItemDTO.eBayQtyMainsl;
      // invFeedsRepTableDetail.EBayQtySwcaft = invFeedsItemDTO.eBayQtySWCAFT;

      // For BpmWeb
      //invFeedsRepTableDetail.BpmWebQtyBanc = invFeedsItemDTO.BPMWebQtyBanc;
      //invFeedsRepTableDetail.BpmWebQtyBasc = invFeedsItemDTO.BPMWebQtyBasc;
      invFeedsRepTableDetail.BpmWebQtyMainSl = invFeedsItemDTO.BPMWebQtyMainsl;
      //invFeedsRepTableDetail.BpmWebQtySwcaft = invFeedsItemDTO.BPMWebQtySWCAFT;

      // For MellowWeb
      //invFeedsRepTableDetail.MellowWebQtyBanc = invFeedsItemDTO.MellowWebQtyBanc;
      //invFeedsRepTableDetail.MellowWebQtyBasc = invFeedsItemDTO.MellowWebQtyBasc;
      invFeedsRepTableDetail.MellowWebQtyMainSl = invFeedsItemDTO.MellowWebQtyMainsl;
      //invFeedsRepTableDetail.MellowWebQtySwcaft = invFeedsItemDTO.MellowWebQtySWCAFT;

      // For Houzz
      //invFeedsRepTableDetail.HouzzQtyBanc = invFeedsItemDTO.HouzzQtyBanc;
      //invFeedsRepTableDetail.HouzzQtyBasc = invFeedsItemDTO.HouzzQtyBasc;
      invFeedsRepTableDetail.HouzzQtyMainSl = invFeedsItemDTO.HouzzQtyMainsl;
      //invFeedsRepTableDetail.HouzzQtySwcaft = invFeedsItemDTO.HouzzQtySWCAFT;

      _kc.InvFeedsRepTableDetails.Update(invFeedsRepTableDetail);

      //List<InvFeedsRepItemLoc> invFeedsRepItemLocs = new List<InvFeedsRepItemLoc>();
      /*
      if (invFeedsItemDTO.AmazonQtyBanc > 0 || invFeedsItemDTO.AmazonQtyBasc > 0 
        || invFeedsItemDTO.AmazonQtyMainsl > 0 || invFeedsItemDTO.AmazonQtySWCAFT > 0)
      {
        invFeedsRepItemDetail = invFeedsRepItem.InvFeedsRepItemDetails.Where(i => i.CustomerId == amazonID).FirstOrDefault();

        if (invFeedsRepItemDetail == null)
        {
          invFeedsRepItemDetail = new InvFeedsRepItemDetail()
          {
            InvFeedsReportItem = invFeedsRepItem,
            InvFeedsReportItemId = invFeedsRepItem.InvFeedsReportItemId,
            Ratio = invFeedsItemDTO.AmazonPercentage,
            DuplicateCounter = invFeedsItemDTO.AmazonDupCount,
            CustomerId = amazonID,
            CustomerWarehouseQty = invFeedsItemDTO.QtyOnHandAmzInv
          };
          _kc.InvFeedsRepItemDetails.Add(invFeedsRepItemDetail);
          await _kc.SaveChangesAsync();

          // Amazon Banc
          invFeedsRepItemLoc = new InvFeedsRepItemLoc()
          {
            InvFeedsRepItemDetail = invFeedsRepItemDetail,
            InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
            LocationId = bancId,
            InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == invFeedsItemDTO.AppliedFeedingRuleNoBanc).InvFeedsAppliedRuleId,
            Ratio = invFeedsItemDTO.AmazonBancPercentage,
            QtyAvail = invFeedsItemDTO.AmazonQtyBanc,
            QtyOnBackOrder = 0,
            StagePoqty = invFeedsItemDTO.totalStagePOQtyBanc
          };
          invFeedsRepItemLocList.Add(invFeedsRepItemLoc);

        }
        else
        {
        }


      }// End of Amazon

      if (invFeedsItemDTO.AmazonQtyBanc != 0 && invFeedsRepItem.InvFeedsRepItemDetails) { }
      if (invFeedsItemDTO.AmazonQtyBasc != 0) { }
      if (invFeedsItemDTO.AmazonQtyMainsl != 0) { }
      if (invFeedsItemDTO.AmazonQtySWCAFT != 0) { }
      if (invFeedsItemDTO.WalmartQtyBanc != 0) { }
      if (invFeedsItemDTO.WalmartQtyBasc != 0) { }
      if (invFeedsItemDTO.WalmartQtySWCAFT != 0) { }
      if (invFeedsItemDTO.WalmartQtyMainsl != 0) { }
      if (invFeedsItemDTO.WayfairQtyBanc != 0) { }
      if (invFeedsItemDTO.WayfairQtyBasc != 0) { }
      if (invFeedsItemDTO.WayfairQtyMainsl != 0) { }
      if (invFeedsItemDTO.WayfairQtySWCAFT != 0) { }

      invFeedsRepItemLocs = new List<InvFeedsRepItemLoc>();
      */
      foreach (InvFeedsRepItemDetail tmpItemDetail in invFeedsRepItem.InvFeedsRepItemDetails)
      {
        tmpLocs = await _kc.InvFeedsRepItemLocs.Where(il => il.InvFeedsRepItemDetailId == tmpItemDetail.InvFeedsRepItemDetailId).ToListAsync();
        //if(tmpItemDetail.CustomerId == 
        // need to match customer ID for something
        foreach (InvFeedsRepItemLoc tmpItemLoc in tmpLocs)
        {
          switch (tmpItemLoc.LocationId)
          {/*
            case bancId:
              switch (tmpItemDetail.CustomerId)
              {
                case 5: // Amazon Drop Ship
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.AmazonQtyBanc;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.AmazonBancPercentage;
                  break;
                case 9: // BPM Website
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.BPMWebQtyBanc;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.BPMWebBancPercentage;
                  break;
                case 12: // eBay
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.eBayQtyBanc;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.eBayBancPercentage;
                  break;
                case 14: // Houzz Drop Ship
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.HouzzQtyBanc;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.HouzzBancPercentage;
                  break;
                case 18: // Mellow Website
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.MellowWebQtyBanc;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.MellowWebBancPercentage;
                  break;
                case 21: // Overstock Drop Ship
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.OverstockQtyBanc;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.OverstockBancPercentage;
                  break;
                case 26: // Walmart DSV
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.WalmartQtyBanc;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.WalmartBancPercentage;
                  break;
                case 29: // Wayfair Drop Ship
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.WayfairQtyBanc;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.WayfairBancPercentage;
                  break;
                case 40: // Home Depot
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.HomeDepotQtyBanc;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.HomeDepotBancPercentage;
                  break;
                case 51: // Target
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.TargetQtyBanc;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.TargetBancPercentage;
                  break;
              }
              break;

            case bascId:
              switch (tmpItemDetail.CustomerId)
              {
                case 5: // Amazon Drop Ship
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.AmazonQtyBasc;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.AmazonBascPercentage;
                  break;
                case 9: // BPM Website
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.BPMWebQtyBasc;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.BPMWebBascPercentage;
                  break;
                case 12: // eBay
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.eBayQtyBasc;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.eBayBascPercentage;
                  break;
                case 14: // Houzz Drop Ship
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.HouzzQtyBasc;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.HouzzBascPercentage;
                  break;
                case 18: // Mellow Website
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.MellowWebQtyBanc;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.MellowWebBascPercentage;
                  break;
                case 21: // Overstock Drop Ship
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.OverstockQtyBanc;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.OverstockBascPercentage;
                  break;
                case 26: // Walmart DSV
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.WalmartQtyBasc;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.WalmartBascPercentage;
                  break;
                case 29: // Wayfair Drop Ship
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.WayfairQtyBasc;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.WayfairBascPercentage;
                  break;
                case 40: // Home Depot
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.HomeDepotQtyBasc;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.HomeDepotBascPercentage;
                  break;
                case 51: // Target
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.TargetQtyBasc;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.TargetBascPercentage;
                  break;
              }
              break;
            */
            case mainslId:
              switch (tmpItemDetail.CustomerId)
              {
                case 5: // Amazon Drop Ship
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.AmazonQtyMainsl;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.AmazonMainslPercentage;
                  break;
                case 9: // BPM Website
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.BPMWebQtyMainsl;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.BPMWebMainslPercentage;
                  break;
                case 12: // eBay
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.eBayQtyMainsl;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.eBayMainslPercentage;
                  break;
                case 14: // Houzz Drop Ship
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.HouzzQtyMainsl;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.HouzzMainslPercentage;
                  break;
                case 18: // Mellow Website
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.MellowWebQtyMainsl;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.MellowWebMainslPercentage;
                  break;
                case 21: // Overstock Drop Ship
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.OverstockQtyMainsl;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.OverstockMainslPercentage;
                  break;
                case 26: // Walmart DSV
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.WalmartQtyMainsl;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.WalmartMainslPercentage;
                  break;
                case 29: // Wayfair Drop Ship
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.WayfairQtyMainsl;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.WayfairMainslPercentage;
                  break;
                case 40: // Home Depot
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.HomeDepotQtyMainsl;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.HomeDepotMainslPercentage;
                  break;
                case 51: // Target
                  tmpItemLoc.QtyAvail = invFeedsItemDTO.TargetQtyMainsl;
                  tmpItemLoc.InvFeedsAppliedRuleId = 7;
                  tmpItemLoc.Ratio = invFeedsItemDTO.TargetMainslPercentage;
                  break;
              }
              break;


              /*
                case swcaftId:
                switch (tmpItemDetail.CustomerId)
                {
                  case 5: // Amazon Drop Ship
                    tmpItemLoc.QtyAvail = invFeedsItemDTO.AmazonQtySWCAFT;
                    tmpItemLoc.InvFeedsAppliedRuleId = 7;
                    tmpItemLoc.Ratio = invFeedsItemDTO.AmazonSWCAFTPercentage;
                    break;
                  case 9: // BPM Website
                    tmpItemLoc.QtyAvail = invFeedsItemDTO.BPMWebQtySWCAFT;
                    tmpItemLoc.InvFeedsAppliedRuleId = 7;
                    tmpItemLoc.Ratio = invFeedsItemDTO.BPMWebSWCAFTPercentage;
                    break;
                  case 12: // eBay
                    tmpItemLoc.QtyAvail = invFeedsItemDTO.eBayQtySWCAFT;
                    tmpItemLoc.InvFeedsAppliedRuleId = 7;
                    tmpItemLoc.Ratio = invFeedsItemDTO.eBaySWCAFTPercentage;
                    break;
                  case 14: // Houzz Drop Ship
                    tmpItemLoc.QtyAvail = invFeedsItemDTO.HouzzQtySWCAFT;
                    tmpItemLoc.InvFeedsAppliedRuleId = 7;
                    tmpItemLoc.Ratio = invFeedsItemDTO.HouzzSWCAFTPercentage;
                    break;
                  case 18: // Mellow Website
                    tmpItemLoc.QtyAvail = invFeedsItemDTO.MellowWebQtySWCAFT;
                    tmpItemLoc.InvFeedsAppliedRuleId = 7;
                    tmpItemLoc.Ratio = invFeedsItemDTO.MellowWebSWCAFTPercentage;
                    break;
                  case 21: // Overstock Drop Ship
                    tmpItemLoc.QtyAvail = invFeedsItemDTO.OverstockQtySWCAFT;
                    tmpItemLoc.InvFeedsAppliedRuleId = 7;
                    tmpItemLoc.Ratio = invFeedsItemDTO.OverstockSWCAFTPercentage;
                    break;
                  case 26: // Walmart DSV
                    tmpItemLoc.QtyAvail = invFeedsItemDTO.WalmartQtySWCAFT;
                    tmpItemLoc.InvFeedsAppliedRuleId = 7;
                    tmpItemLoc.Ratio = invFeedsItemDTO.WalmartSWCAFTPercentage;
                    break;
                  case 29: // Wayfair Drop Ship
                    tmpItemLoc.QtyAvail = invFeedsItemDTO.WayfairQtySWCAFT;
                    tmpItemLoc.InvFeedsAppliedRuleId = 7;
                    tmpItemLoc.Ratio = invFeedsItemDTO.WayfairSWCAFTPercentage;
                    break;
                  case 40: // Home Depot
                    tmpItemLoc.QtyAvail = invFeedsItemDTO.HomeDepotQtySWCAFT;
                    tmpItemLoc.InvFeedsAppliedRuleId = 7;
                    tmpItemLoc.Ratio = invFeedsItemDTO.HomeDepotSWCAFTPercentage;
                    break;
                  case 51: // Target
                    tmpItemLoc.QtyAvail = invFeedsItemDTO.TargetQtySWCAFT;
                    tmpItemLoc.InvFeedsAppliedRuleId = 7;
                    tmpItemLoc.Ratio = invFeedsItemDTO.TargetSWCAFTPercentage;
                    break;
                }
                break;*/
          }

          invFeedsRepItemLocs.Add(tmpItemLoc);
        }
        invFeedsRepItemDetails.Add(tmpItemDetail);
      }
      //await _kc.BulkUpdateAsync(invFeedsRepTableDetail);
      await _kc.BulkUpdateAsync(invFeedsRepItemDetails);
      await _kc.BulkUpdateAsync(invFeedsRepItemLocs);

      invFeedsRepItem.LastModifiedBy = empId;
      invFeedsRepItem.LastModifiedDate = DateTime.Now;
      await _kc.SaveChangesAsync();

      return result;
    }


    // Automatically calculate Inventory Feeds
    // By Brian Yi on 05/28/21
    // Deprecated
    public GetInventoryFeedsItemDTO AutoCalcInvFeeds(GetInventoryFeedsItemDTO invFeedsItem, GetInvSalesHistoryListItemDTO saleHistItem, List<InvFeedsRule> invFeedsRules, List<InvFeedsRuleSku> invFeedsRulesSKUs)
    {
      int amazonQtyBanc = 0, amazonQtyMainsl = 0, wayfairQtyBanc = 0, wayfairQtyMainsl = 0, walmartQtyBanc = 0, walmartQtyMainsl = 0,
        ostQtyBanc = 0, ostQtyMainsl = 0, ebayQtyBanc = 0, ebayQtyMainsl = 0, bpmQtyBanc = 0, bpmQtyMainsl = 0, mellowQtyBanc = 0, mellowQtyMainsl = 0,
        houzzQtyBanc = 0, houzzQtyMainsl = 0, totalSalesQty, tmpTotalBanc = 0, tmpTotalMainsl = 0, tmpAdjBanc = 0, tmpAdjMainsl = 0, customPrcntg = 0, customRatioCnt = 0;
      double amazonPrcntg = 0, wayfairPrcntg = 0, walmartPrcntg = 0, ostPrcntg = 0, ebayPrcntg = 0, bpmPrcntg = 0, mellowPrcntg = 0, houzzPrcntg = 0, tmpPrcntg = 0;//, accrlCustPrcntg = 0;
      string amazonSKU = "", wayfairSKU = "", walmartSKU = "", ostSKU = "", eBaySKU = "";
      List<InvFeedsMarketForCalc> invFeedsMrkts = new List<InvFeedsMarketForCalc>();
      InvFeedsMarketForCalc tmpMrkt = new InvFeedsMarketForCalc()
      {
        CustomerId = 0,
        QtyBanc = 0,
        QtyMainsl = 0,
        Ratio = 0,
        isDone = false
      };
      List<int> custIDs = new List<int>() { 5, 9, 12, 14, 18, 21, 26, 29 };

      Dictionary<int, int> custIDsandTiers = new Dictionary<int, int>();
      custIDsandTiers.Add(5, 1); // Amazon 1P
      custIDsandTiers.Add(9, 3); // BPM Website
      custIDsandTiers.Add(12, 3); // eBay
      custIDsandTiers.Add(14, 3); // Houzz
      custIDsandTiers.Add(18, 3); // Mellow Website
      custIDsandTiers.Add(21, 1); // Overstock
      custIDsandTiers.Add(26, 1); // Walmart
      custIDsandTiers.Add(29, 1); // Wayfair

      foreach (var tmpCustInfo in custIDsandTiers)
      {
        tmpMrkt = new InvFeedsMarketForCalc()
        {
          CustomerId = tmpCustInfo.Key,
          QtyBanc = 0,
          QtyMainsl = 0,
          Ratio = 0,
          Tier = tmpCustInfo.Value,
          isDone = false
        };
        invFeedsMrkts.Add(tmpMrkt);
      }

      GetInventoryFeedsItemDTO result = new GetInventoryFeedsItemDTO
      {
        ItemName = invFeedsItem.ItemName,
        ItemNoId = invFeedsItem.ItemNoId
      };

      totalSalesQty = saleHistItem.totalSalesQty;

      int curQtyBanc = invFeedsItem.QtyAvailBanc, curQtyMainsl = invFeedsItem.QtyAvailMainsl;

      if (invFeedsItem.QtyAvailBanc != 0)
      {
        // First General Rules from each customer
        foreach (InvFeedsMarketForCalc tmpDTO in invFeedsMrkts)
        {
          InvFeedsRule tmpCustRule = invFeedsRules.Find(ifr => ifr.CustomerId == tmpDTO.CustomerId);
          // Check Zero Out
          if (tmpCustRule.ZeroOutAt >= invFeedsItem.QtyAvailBanc)
          {
            tmpDTO.QtyBanc = 0;
            tmpDTO.isDone = true; // No More Feeding
          }
          else if (tmpCustRule.CustomFeedRatio > 0) // Check Custom Feeding Ratio if any
          {
            tmpDTO.QtyBanc = (int)Math.Floor(invFeedsItem.QtyAvailBanc * ((double)tmpCustRule.CustomFeedRatio / 100));
            tmpDTO.Ratio = (int)tmpCustRule.CustomFeedRatio;
            //accrlCustPrcntg += tmpDTO.Ratio; customRatioCnt++;
            invFeedsItem.QtyAvailBanc = invFeedsItem.QtyAvailBanc - tmpDTO.QtyBanc;
            tmpDTO.isDone = true; // No More Feeding
          }
        }
        // Second check any specific rule for this SKU
        List<InvFeedsRuleSku> tmpRuleList = invFeedsRulesSKUs.FindAll(ifrs => ifrs.ItemNoId == invFeedsItem.ItemNoId);
        if (tmpRuleList != null)
        {
          foreach (InvFeedsRuleSku tmpRule in tmpRuleList)
          {
            if (tmpRule.DoNotFeedFromBanc == true)
            {
              foreach (InvFeedsMarketForCalc tmpDTO in invFeedsMrkts)
              {
                if (tmpDTO.QtyBanc > 0) invFeedsItem.QtyAvailBanc += tmpDTO.QtyBanc;
                tmpDTO.QtyBanc = 0;
                tmpDTO.isDone = true; // No More Feeding
              }
            }
            else
            {
              List<InvFeedsRuleSkumkt> invFeedsRuleSkumkts = tmpRule.InvFeedsRuleSkumkts.ToList();
              if (invFeedsRuleSkumkts != null)
              {
                foreach (InvFeedsRuleSkumkt tmpSKURuleMkt in invFeedsRuleSkumkts)
                {
                  InvFeedsMarketForCalc tmpDTO = invFeedsMrkts.FindLast(ifm => ifm.CustomerId == tmpSKURuleMkt.CustomerId);
                  if (tmpDTO != null)
                  {
                    // 1. Check Do Not Feed to here
                    if ((bool)tmpSKURuleMkt.DoNotFeedToHere == true)
                    {
                      if (tmpDTO.QtyBanc > 0) invFeedsItem.QtyAvailBanc += tmpDTO.QtyBanc;
                      tmpDTO.QtyBanc = 0;
                      tmpDTO.isDone = true; // No More Feeding
                    }
                    // 2. Check Custom Fixed Ratio
                    if (tmpSKURuleMkt.CustomFixedPercentage > 0)
                    {
                      if (tmpDTO.QtyBanc > 0) invFeedsItem.QtyAvailBanc += tmpDTO.QtyBanc;
                      tmpDTO.Ratio = (int)tmpSKURuleMkt.CustomFixedPercentage;
                      //accrlCustPrcntg += tmpDTO.Ratio; customRatioCnt++;
                      tmpDTO.QtyBanc = 0;
                      tmpDTO.QtyBanc = (int)Math.Floor(invFeedsItem.QtyAvailBanc * (double)tmpSKURuleMkt.CustomFixedPercentage);
                      invFeedsItem.QtyAvailBanc = invFeedsItem.QtyAvailBanc - tmpDTO.QtyBanc;
                      tmpDTO.isDone = true; // No More Feeding
                    }
                    // 3. Check Custom Zero Out At
                    if (tmpSKURuleMkt.CustomZeroOutAt > 0)
                    {
                      if (invFeedsItem.QtyAvailBanc + tmpDTO.QtyBanc <= tmpSKURuleMkt.CustomZeroOutAt)
                      {
                        invFeedsItem.QtyAvailBanc += tmpDTO.QtyBanc;
                        tmpDTO.QtyBanc = 0;
                        tmpDTO.isDone = true; // No More Feeding
                      }

                    }
                  }
                }
              }
            }
          } // end of foreach

        }
      }
      else if (invFeedsItem.QtyAvailMainsl != 0)
      {
        // First General Rules from each customer
        foreach (InvFeedsMarketForCalc tmpDTO in invFeedsMrkts)
        {
          InvFeedsRule tmpCustRule = invFeedsRules.Find(ifr => ifr.CustomerId == tmpDTO.CustomerId);
          // Check Zero Out
          if (tmpCustRule.ZeroOutAt >= invFeedsItem.QtyAvailMainsl)
          {
            tmpDTO.QtyMainsl = 0;
            tmpDTO.isDone = true; // No More Feeding
          }
          else if (tmpCustRule.CustomFeedRatio > 0) // Check Custom Feeding Ratio if any
          {
            tmpDTO.QtyMainsl = (int)Math.Floor(invFeedsItem.QtyAvailMainsl * ((double)tmpCustRule.CustomFeedRatio / 100));
            tmpDTO.Ratio = (int)tmpCustRule.CustomFeedRatio;
            //accrlCustPrcntg += tmpDTO.Ratio; customRatioCnt++;
            invFeedsItem.QtyAvailMainsl = invFeedsItem.QtyAvailMainsl - tmpDTO.QtyMainsl;
            tmpDTO.isDone = true; // No More Feeding
          }
        }
        // Second check any specific rule for this SKU
        List<InvFeedsRuleSku> tmpRuleList = invFeedsRulesSKUs.FindAll(ifrs => ifrs.ItemNoId == invFeedsItem.ItemNoId);
        if (tmpRuleList != null)
        {
          foreach (InvFeedsRuleSku tmpRule in tmpRuleList)
          {
            if (tmpRule.DoNotFeedFromMainsl == true)
            {
              foreach (InvFeedsMarketForCalc tmpDTO in invFeedsMrkts)
              {
                if (tmpDTO.QtyMainsl > 0) invFeedsItem.QtyAvailMainsl += tmpDTO.QtyMainsl;
                tmpDTO.QtyMainsl = 0;
                tmpDTO.isDone = true; // No More Feeding
              }
            }
            else
            {
              List<InvFeedsRuleSkumkt> invFeedsRuleSkumkts = tmpRule.InvFeedsRuleSkumkts.ToList();
              if (invFeedsRuleSkumkts != null)
              {
                foreach (InvFeedsRuleSkumkt tmpSKURuleMkt in invFeedsRuleSkumkts)
                {
                  InvFeedsMarketForCalc tmpDTO = invFeedsMrkts.FindLast(ifm => ifm.CustomerId == tmpSKURuleMkt.CustomerId);
                  if (tmpDTO != null)
                  {
                    // 1. Check Do Not Feed to here
                    if ((bool)tmpSKURuleMkt.DoNotFeedToHere == true)
                    {
                      if (tmpDTO.QtyMainsl > 0) invFeedsItem.QtyAvailMainsl += tmpDTO.QtyMainsl;
                      tmpDTO.QtyMainsl = 0;
                      tmpDTO.isDone = true; // No More Feeding
                    }
                    // 2. Check Custom Fixed Ratio
                    if (tmpSKURuleMkt.CustomFixedPercentage > 0)
                    {
                      if (tmpDTO.QtyMainsl > 0) invFeedsItem.QtyAvailMainsl += tmpDTO.QtyMainsl;
                      tmpDTO.Ratio = (int)tmpSKURuleMkt.CustomFixedPercentage;
                      //accrlCustPrcntg += tmpDTO.Ratio; customRatioCnt++;
                      tmpDTO.QtyMainsl = 0;
                      tmpDTO.QtyMainsl = (int)Math.Floor(invFeedsItem.QtyAvailMainsl * (double)tmpSKURuleMkt.CustomFixedPercentage);
                      invFeedsItem.QtyAvailMainsl = invFeedsItem.QtyAvailMainsl - tmpDTO.QtyMainsl;
                      tmpDTO.isDone = true; // No More Feeding
                    }
                    // 3. Check Custom Zero Out At
                    if (tmpSKURuleMkt.CustomZeroOutAt > 0)
                    {
                      if (invFeedsItem.QtyAvailMainsl + tmpDTO.QtyMainsl <= tmpSKURuleMkt.CustomZeroOutAt)
                      {
                        invFeedsItem.QtyAvailMainsl += tmpDTO.QtyMainsl;
                        tmpDTO.QtyMainsl = 0;
                        tmpDTO.isDone = true; // No More Feeding
                      }

                    }
                  }
                }
              }
            }
          } // end of foreach
        }
      } // end of SKU Specific

      // Need to check sales history

      // Feeds items based on Sales History
      if ((invFeedsItem.QtyAvailBanc != 0) || (invFeedsItem.QtyAvailMainsl != 0))
      {
        // Using floor instead of round; because of speed
        amazonPrcntg = calMarketRatioBySalesHistory(2, saleHistItem.AmazonDropShip, totalSalesQty);
        wayfairPrcntg = calMarketRatioBySalesHistory(2, saleHistItem.WayfairDropShip, totalSalesQty);
        walmartPrcntg = calMarketRatioBySalesHistory(2, saleHistItem.Walmart, totalSalesQty);
        ostPrcntg = calMarketRatioBySalesHistory(2, saleHistItem.OverstockDropShip, totalSalesQty);
        ebayPrcntg = calMarketRatioBySalesHistory(2, saleHistItem.eBay, totalSalesQty);
        bpmPrcntg = calMarketRatioBySalesHistory(2, saleHistItem.BPMWeb, totalSalesQty);
        mellowPrcntg = calMarketRatioBySalesHistory(2, saleHistItem.MellowWeb, totalSalesQty);
        houzzPrcntg = calMarketRatioBySalesHistory(2, saleHistItem.Houzz, totalSalesQty);

        amazonSKU = saleHistItem.AmazonCustSKU;
        wayfairSKU = saleHistItem.WayfairCustSKU;
        walmartSKU = saleHistItem.WalmartCustSKU;
        ostSKU = saleHistItem.OverstockCustSKU;
        eBaySKU = saleHistItem.eBayCustSKU;

        Dictionary<int, double> salesHistoryList = new Dictionary<int, double>();
        salesHistoryList.Add(5, amazonPrcntg); // Amazon
        salesHistoryList.Add(29, wayfairPrcntg); // Wayfair
        salesHistoryList.Add(26, walmartPrcntg); // Walmart
        salesHistoryList.Add(21, ostPrcntg); // Overstock

        // Check Custom Ratio(percentage)
        double dividedRatio = 0;
        //if (accrlCustPrcntg != 0) dividedRatio = accrlCustPrcntg / customRatioCnt;

        foreach (InvFeedsMarketForCalc tmpDTO in invFeedsMrkts)
        {
          if (tmpDTO.isDone != true)
          {
            if (tmpDTO.Ratio == 100)
              dividedRatio = 0;
            switch (tmpDTO.CustomerId)
            {
              case 5: // Amazon Drop Ship
                tmpDTO.Ratio = (int)(amazonPrcntg * 100 + dividedRatio);
                break;
              case 9: // BPM Website
                tmpDTO.Ratio = (int)(bpmPrcntg * 100 + dividedRatio);
                break;
              case 12: // eBay
                tmpDTO.Ratio = (int)(ebayPrcntg * 100 + dividedRatio);
                break;
              case 14: // Houzz Drop Ship
                tmpDTO.Ratio = (int)(houzzPrcntg * 100 + dividedRatio);
                break;
              case 18: // Mellow Website
                tmpDTO.Ratio = (int)(mellowPrcntg * 100 + dividedRatio);
                break;
              case 21: // Overstock Drop Ship
                tmpDTO.Ratio = (int)(ostPrcntg * 100 + dividedRatio);
                break;
              case 26: // Walmart DSV
                tmpDTO.Ratio = (int)(walmartPrcntg * 100 + dividedRatio);
                break;
              case 29: // Wayfair Drop Ship
                tmpDTO.Ratio = (int)(wayfairPrcntg * 100 + dividedRatio);
                break;
            }
          }
          if (tmpDTO.Ratio > 100)
            tmpDTO.Ratio = tmpDTO.Ratio - 100;
        }


        if (invFeedsItem.QtyAvailBanc != 0)
        {
          // Low Qty SKU
          if (curQtyBanc < 30)
          {
            salesHistoryList.OrderBy(key => key.Value); // Order by Sales History Ratio ASC

            if (curQtyBanc > 20) // > 20 && <
            {
              invFeedsItem.QtyAvailBanc = curQtyBanc - 4;
              foreach (InvFeedsMarketForCalc tmpDTO in invFeedsMrkts)
              {
                if (tmpDTO.CustomerId == 9 || tmpDTO.CustomerId == 14 || tmpDTO.CustomerId == 18 || tmpDTO.CustomerId == 12)
                {
                  if ((tmpDTO.isDone) && (tmpDTO.QtyBanc != 0))
                  {
                    tmpDTO.QtyBanc = 1;
                  }
                }
                else
                { // Need to revisit later
                  switch (tmpDTO.CustomerId)
                  {
                    case 5: // Amazon
                      tmpPrcntg = amazonPrcntg;
                      break;
                    case 21: // Overstock
                      tmpPrcntg = ostPrcntg;
                      break;
                    case 26: // Walmart DSV
                      tmpPrcntg = walmartPrcntg;
                      break;
                    case 29: // Wayfair Drop Ship
                      tmpPrcntg = wayfairPrcntg;
                      break;
                  }
                  tmpDTO.QtyBanc = curQtyBanc / 4;//(int)Math.Floor(((double)(curQtyBanc - 4) * tmpPrcntg));
                  invFeedsItem.QtyAvailBanc -= tmpDTO.QtyBanc;
                }
              }
            }
            else if (curQtyBanc > 10 && curQtyBanc <= 20) //  <= 20 && > 10
            {
              invFeedsItem.QtyAvailBanc = curQtyBanc - 5;
              foreach (InvFeedsMarketForCalc tmpDTO in invFeedsMrkts)
              {
                if (tmpDTO.CustomerId == 9 || tmpDTO.CustomerId == 14 || tmpDTO.CustomerId == 18
                  || tmpDTO.CustomerId == 12 || tmpDTO.CustomerId == salesHistoryList.ElementAt(0).Key)
                {
                  if ((tmpDTO.isDone) && (tmpDTO.QtyBanc != 0))
                  {
                    tmpDTO.QtyBanc = 1;
                  }
                }
                else
                { // Need to revisit later
                  switch (tmpDTO.CustomerId)
                  {
                    case 5: // Amazon
                      tmpPrcntg = amazonPrcntg;
                      break;
                    case 21: // Overstock
                      tmpPrcntg = ostPrcntg;
                      break;
                    case 26: // Walmart DSV
                      tmpPrcntg = walmartPrcntg;
                      break;
                    case 29: // Wayfair Drop Ship
                      tmpPrcntg = wayfairPrcntg;
                      break;
                  }
                  tmpDTO.QtyBanc = curQtyBanc / 3;//(int)Math.Floor(((double)(curQtyBanc - 5) * tmpPrcntg));
                  invFeedsItem.QtyAvailBanc -= tmpDTO.QtyBanc;
                }
              }
            }
            else if (curQtyBanc > 5 && curQtyBanc <= 10)
            {
              foreach (InvFeedsMarketForCalc tmpDTO in invFeedsMrkts)
              {
                if ((tmpDTO.CustomerId == salesHistoryList.ElementAt(3).Key) || (tmpDTO.CustomerId == salesHistoryList.ElementAt(2).Key))
                { tmpDTO.QtyBanc = 2; invFeedsItem.QtyAvailBanc -= tmpDTO.QtyBanc; }
                else { tmpDTO.QtyBanc = 0; }
              }

            }
            else if (curQtyBanc > 3 && curQtyBanc <= 5)
            {
              foreach (InvFeedsMarketForCalc tmpDTO in invFeedsMrkts)
              {
                if (tmpDTO.CustomerId == salesHistoryList.ElementAt(3).Key)
                { tmpDTO.QtyBanc = 2; invFeedsItem.QtyAvailBanc -= tmpDTO.QtyBanc; }
                tmpDTO.QtyBanc = 0;
              }
            }
            else if (curQtyBanc <= 3)
            { // Zero out on everywhere
              foreach (InvFeedsMarketForCalc tmpDTO in invFeedsMrkts) tmpDTO.QtyBanc = 0;
            }
          }// End of less than 30; Low inventory Items
          else
          {
            foreach (InvFeedsMarketForCalc tmpDTO in invFeedsMrkts)
            {
              if (tmpDTO.isDone == false)
                tmpDTO.QtyBanc = (int)(invFeedsItem.QtyAvailBanc * ((double)tmpDTO.Ratio / 100));
            }
          }
        } // End of BANC Inventory
        if (invFeedsItem.QtyAvailMainsl != 0)
        {
          if (curQtyMainsl < 30)
          {
            salesHistoryList.OrderBy(key => key.Value); // Order by Sales History Ratio ASC

            if (curQtyMainsl > 20) // > 20 && <
            {
              invFeedsItem.QtyAvailMainsl = curQtyMainsl - 4;
              foreach (InvFeedsMarketForCalc tmpDTO in invFeedsMrkts)
              {
                if (tmpDTO.CustomerId == 9 || tmpDTO.CustomerId == 14 || tmpDTO.CustomerId == 18 || tmpDTO.CustomerId == 12)
                {
                  if ((tmpDTO.isDone) && (tmpDTO.QtyMainsl != 0))
                  {
                    tmpDTO.QtyMainsl = 1;
                  }
                }
                else
                { // Need to revisit later
                  switch (tmpDTO.CustomerId)
                  {
                    case 5: // Amazon
                      tmpPrcntg = amazonPrcntg;
                      break;
                    case 21: // Overstock
                      tmpPrcntg = ostPrcntg;
                      break;
                    case 26: // Walmart DSV
                      tmpPrcntg = walmartPrcntg;
                      break;
                    case 29: // Wayfair Drop Ship
                      tmpPrcntg = wayfairPrcntg;
                      break;
                  }
                  tmpDTO.QtyMainsl = curQtyMainsl / 4;//(int)Math.Floor(((double)(curQtyBanc - 4) * tmpPrcntg));
                  invFeedsItem.QtyAvailMainsl -= tmpDTO.QtyMainsl;
                }
              }
            }
            else if (curQtyMainsl > 10 && curQtyMainsl <= 20) //  <= 20 && > 10
            {
              invFeedsItem.QtyAvailMainsl = curQtyMainsl - 5;
              foreach (InvFeedsMarketForCalc tmpDTO in invFeedsMrkts)
              {
                if (tmpDTO.CustomerId == 9 || tmpDTO.CustomerId == 14 || tmpDTO.CustomerId == 18
                  || tmpDTO.CustomerId == 12 || tmpDTO.CustomerId == salesHistoryList.ElementAt(0).Key)
                {
                  if ((tmpDTO.isDone) && (tmpDTO.QtyMainsl != 0))
                  {
                    tmpDTO.QtyMainsl = 1;
                  }
                }
                else
                { // Need to revisit later
                  switch (tmpDTO.CustomerId)
                  {
                    case 5: // Amazon
                      tmpPrcntg = amazonPrcntg;
                      break;
                    case 21: // Overstock
                      tmpPrcntg = ostPrcntg;
                      break;
                    case 26: // Walmart DSV
                      tmpPrcntg = walmartPrcntg;
                      break;
                    case 29: // Wayfair Drop Ship
                      tmpPrcntg = wayfairPrcntg;
                      break;
                  }
                  tmpDTO.QtyMainsl = curQtyMainsl / 3;//(int)Math.Floor(((double)(curQtyBanc - 5) * tmpPrcntg));
                  invFeedsItem.QtyAvailMainsl -= tmpDTO.QtyMainsl;
                }
              }
            }
            else if (curQtyMainsl > 5 && curQtyMainsl <= 10)
            {
              foreach (InvFeedsMarketForCalc tmpDTO in invFeedsMrkts)
              {
                if ((tmpDTO.CustomerId == salesHistoryList.ElementAt(3).Key) || (tmpDTO.CustomerId == salesHistoryList.ElementAt(2).Key))
                { tmpDTO.QtyMainsl = 2; invFeedsItem.QtyAvailMainsl -= tmpDTO.QtyMainsl; }
                else { tmpDTO.QtyMainsl = 0; }
              }
            }
            else if (curQtyMainsl > 3 && curQtyMainsl <= 5)
            {
              foreach (InvFeedsMarketForCalc tmpDTO in invFeedsMrkts)
              {
                if (tmpDTO.CustomerId == salesHistoryList.ElementAt(3).Key)
                { tmpDTO.QtyMainsl = 2; invFeedsItem.QtyAvailMainsl -= tmpDTO.QtyMainsl; }
                tmpDTO.QtyMainsl = 0;
              }
            }
            else if (curQtyBanc <= 3)
            { // Zero out on everywhere
              foreach (InvFeedsMarketForCalc tmpDTO in invFeedsMrkts) tmpDTO.QtyMainsl = 0;
            }
          }// End of less than 30; Low inventory Items
          else
          {
            foreach (InvFeedsMarketForCalc tmpDTO in invFeedsMrkts)
            {
              if (tmpDTO.isDone == false)
                tmpDTO.QtyMainsl = (int)(invFeedsItem.QtyAvailMainsl * ((double)tmpDTO.Ratio / 100));
            }
          }
        }

        //tmpAdjBanc = 0;
        foreach (InvFeedsMarketForCalc tmpDTO in invFeedsMrkts)
        {
          tmpTotalBanc += tmpDTO.QtyBanc;
          tmpTotalMainsl += tmpDTO.QtyMainsl;
          switch (tmpDTO.CustomerId)
          {
            case 5: // Amazon Drop Ship
              amazonQtyBanc = tmpDTO.QtyBanc;
              amazonQtyMainsl = tmpDTO.QtyMainsl;
              amazonPrcntg = tmpDTO.Ratio;
              break;
            case 9: // BPM Website
              bpmQtyBanc = tmpDTO.QtyBanc;
              bpmQtyMainsl = tmpDTO.QtyMainsl;
              bpmPrcntg = tmpDTO.Ratio;
              break;
            case 12: // eBay
              ebayQtyBanc = tmpDTO.QtyBanc;
              ebayQtyMainsl = tmpDTO.QtyMainsl;
              ebayPrcntg = tmpDTO.Ratio;
              break;
            case 14: // Houzz Drop Ship
              houzzQtyBanc = tmpDTO.QtyBanc;
              houzzQtyMainsl = tmpDTO.QtyMainsl;
              houzzPrcntg = tmpDTO.Ratio;
              break;
            case 18: // Mellow Website
              mellowQtyBanc = tmpDTO.QtyBanc;
              mellowQtyMainsl = tmpDTO.QtyMainsl;
              mellowPrcntg = tmpDTO.Ratio;
              break;
            case 21: // Overstock Drop Ship
              ostQtyBanc = tmpDTO.QtyBanc;
              ostQtyMainsl = tmpDTO.QtyMainsl;
              ostPrcntg = tmpDTO.Ratio;
              break;
            case 26: // Walmart DSV
              walmartQtyBanc = tmpDTO.QtyBanc;
              walmartQtyMainsl = tmpDTO.QtyMainsl;
              walmartPrcntg = tmpDTO.Ratio;
              break;
            case 29: // Wayfair Drop Ship
              wayfairQtyBanc = tmpDTO.QtyBanc;
              wayfairQtyMainsl = tmpDTO.QtyMainsl;
              wayfairPrcntg = tmpDTO.Ratio;
              break;
          }
        }

        if (tmpTotalBanc > curQtyBanc)
        {
          if (tmpTotalBanc - curQtyBanc == 1) tmpAdjBanc += 1;
          if (tmpTotalBanc - curQtyBanc == 2) tmpAdjBanc += 2;
          if (tmpTotalBanc - curQtyBanc == 3) tmpAdjBanc += 3;
          if (tmpTotalBanc - curQtyBanc == 4) tmpAdjBanc += 4;
          if (tmpTotalBanc - curQtyBanc == 5) tmpAdjBanc += 5;
          if (tmpTotalBanc - curQtyBanc == 6) tmpAdjBanc += 6;
          if (tmpTotalBanc - curQtyBanc == 7) tmpAdjBanc += 7;
          if (tmpTotalBanc - curQtyBanc == 8) tmpAdjBanc += 8;

        }
        else if (tmpTotalBanc < curQtyBanc)
        {
          if (curQtyBanc - tmpTotalBanc == 1) tmpAdjBanc -= 1;
          if (curQtyBanc - tmpTotalBanc == 2) tmpAdjBanc -= 2;
          if (curQtyBanc - tmpTotalBanc == 3) tmpAdjBanc -= 3;
          if (curQtyBanc - tmpTotalBanc == 4) tmpAdjBanc -= 4;
          if (curQtyBanc - tmpTotalBanc == 5) tmpAdjBanc -= 5;
          if (curQtyBanc - tmpTotalBanc == 6) tmpAdjBanc -= 6;
          if (curQtyBanc - tmpTotalBanc == 7) tmpAdjBanc -= 7;
          if (curQtyBanc - tmpTotalBanc == 8) tmpAdjBanc -= 8;
        }

        if (tmpTotalMainsl > curQtyMainsl)
        {
          if (tmpTotalMainsl - curQtyMainsl == 1) tmpAdjMainsl += 1;
          if (tmpTotalMainsl - curQtyMainsl == 2) tmpAdjMainsl += 2;
          if (tmpTotalMainsl - curQtyMainsl == 3) tmpAdjMainsl += 3;
          if (tmpTotalMainsl - curQtyMainsl == 4) tmpAdjMainsl += 4;
          if (tmpTotalMainsl - curQtyMainsl == 5) tmpAdjMainsl += 5;
          if (tmpTotalMainsl - curQtyMainsl == 6) tmpAdjMainsl += 6;
          if (tmpTotalMainsl - curQtyMainsl == 7) tmpAdjMainsl += 7;
          if (tmpTotalMainsl - curQtyMainsl == 8) tmpAdjMainsl += 8;

        }
        else if (tmpTotalMainsl < curQtyMainsl)
        {
          if (curQtyMainsl - tmpTotalMainsl == 1) tmpAdjMainsl -= 1;
          if (curQtyMainsl - tmpTotalMainsl == 2) tmpAdjMainsl -= 2;
          if (curQtyMainsl - tmpTotalMainsl == 3) tmpAdjMainsl -= 3;
          if (curQtyMainsl - tmpTotalMainsl == 4) tmpAdjMainsl -= 4;
          if (curQtyMainsl - tmpTotalMainsl == 5) tmpAdjMainsl -= 5;
          if (curQtyMainsl - tmpTotalMainsl == 6) tmpAdjMainsl -= 6;
          if (curQtyMainsl - tmpTotalMainsl == 7) tmpAdjMainsl -= 7;
          if (curQtyMainsl - tmpTotalMainsl == 8) tmpAdjMainsl -= 8;
        }

        // Adjustment for Banc
        if (tmpAdjBanc > 0)
        {
          switch (tmpAdjBanc)
          {
            case 1:
              amazonQtyBanc -= amazonQtyBanc;
              break;
            case 2:
              amazonQtyBanc -= amazonQtyBanc; wayfairQtyBanc -= wayfairQtyBanc;
              break;
            case 3:
              amazonQtyBanc -= amazonQtyBanc; wayfairQtyBanc -= wayfairQtyBanc; walmartQtyBanc -= walmartQtyBanc;
              break;
            case 4:
              amazonQtyBanc -= amazonQtyBanc; wayfairQtyBanc -= wayfairQtyBanc; walmartQtyBanc -= walmartQtyBanc; ostQtyBanc -= ostQtyBanc;
              break;
            case 5:
              amazonQtyBanc -= amazonQtyBanc; wayfairQtyBanc -= wayfairQtyBanc; walmartQtyBanc -= walmartQtyBanc; ostQtyBanc -= ostQtyBanc; ebayQtyBanc -= ebayQtyBanc;
              break;
            case 6:
              amazonQtyBanc -= amazonQtyBanc; wayfairQtyBanc -= wayfairQtyBanc; walmartQtyBanc -= walmartQtyBanc; ostQtyBanc -= ostQtyBanc; ebayQtyBanc -= ebayQtyBanc; bpmQtyBanc -= bpmQtyBanc;
              break;
            case 7:
              amazonQtyBanc -= amazonQtyBanc; wayfairQtyBanc -= wayfairQtyBanc; walmartQtyBanc -= walmartQtyBanc; ostQtyBanc -= ostQtyBanc; ebayQtyBanc -= ebayQtyBanc; bpmQtyBanc -= bpmQtyBanc; mellowQtyBanc -= mellowQtyBanc;
              break;
            case 8:
              amazonQtyBanc -= amazonQtyBanc; wayfairQtyBanc -= wayfairQtyBanc; walmartQtyBanc -= walmartQtyBanc; ostQtyBanc -= ostQtyBanc; ebayQtyBanc -= ebayQtyBanc; bpmQtyBanc -= bpmQtyBanc; mellowQtyBanc -= mellowQtyBanc; houzzQtyBanc -= houzzQtyBanc;
              break;
          }
        }
        else if (tmpAdjBanc < 0)
        {
          switch (tmpAdjBanc)
          {
            case -1:
              amazonQtyBanc += amazonQtyBanc;
              break;
            case -2:
              amazonQtyBanc += amazonQtyBanc; wayfairQtyBanc += wayfairQtyBanc;
              break;
            case -3:
              amazonQtyBanc += amazonQtyBanc; wayfairQtyBanc += wayfairQtyBanc; walmartQtyBanc += walmartQtyBanc;
              break;
            case -4:
              amazonQtyBanc += amazonQtyBanc; wayfairQtyBanc += wayfairQtyBanc; walmartQtyBanc += walmartQtyBanc; ostQtyBanc += ostQtyBanc;
              break;
            case -5:
              amazonQtyBanc += amazonQtyBanc; wayfairQtyBanc += wayfairQtyBanc; walmartQtyBanc += walmartQtyBanc; ostQtyBanc += ostQtyBanc; ebayQtyBanc += ebayQtyBanc;
              break;
            case -6:
              amazonQtyBanc += amazonQtyBanc; wayfairQtyBanc += wayfairQtyBanc; walmartQtyBanc += walmartQtyBanc; ostQtyBanc += ostQtyBanc; ebayQtyBanc += ebayQtyBanc; bpmQtyBanc += bpmQtyBanc;
              break;
            case 7:
              amazonQtyBanc += amazonQtyBanc; wayfairQtyBanc += wayfairQtyBanc; walmartQtyBanc += walmartQtyBanc; ostQtyBanc += ostQtyBanc; ebayQtyBanc += ebayQtyBanc; bpmQtyBanc += bpmQtyBanc; mellowQtyBanc += mellowQtyBanc;
              break;
            case 8:
              amazonQtyBanc += amazonQtyBanc; wayfairQtyBanc += wayfairQtyBanc; walmartQtyBanc += walmartQtyBanc; ostQtyBanc += ostQtyBanc; ebayQtyBanc += ebayQtyBanc; bpmQtyBanc += bpmQtyBanc; mellowQtyBanc += mellowQtyBanc; houzzQtyBanc += houzzQtyBanc;
              break;
          }
        }
        // Adjustment for Mainsl
        if (tmpAdjMainsl > 0)
        {
          switch (tmpAdjMainsl)
          {
            case 1:
              amazonQtyMainsl -= amazonQtyMainsl;
              break;
            case 2:
              amazonQtyMainsl -= amazonQtyMainsl; wayfairQtyMainsl -= wayfairQtyMainsl;
              break;
            case 3:
              amazonQtyMainsl -= amazonQtyMainsl; wayfairQtyMainsl -= wayfairQtyMainsl; walmartQtyMainsl -= walmartQtyMainsl;
              break;
            case 4:
              amazonQtyMainsl -= amazonQtyMainsl; wayfairQtyMainsl -= wayfairQtyMainsl; walmartQtyMainsl -= walmartQtyMainsl; ostQtyMainsl -= ostQtyMainsl;
              break;
            case 5:
              amazonQtyMainsl -= amazonQtyMainsl; wayfairQtyMainsl -= wayfairQtyMainsl; walmartQtyMainsl -= walmartQtyMainsl; ostQtyMainsl -= ostQtyMainsl; ebayQtyMainsl -= ebayQtyMainsl;
              break;
            case 6:
              amazonQtyMainsl -= amazonQtyMainsl; wayfairQtyMainsl -= wayfairQtyMainsl; walmartQtyMainsl -= walmartQtyMainsl; ostQtyMainsl -= ostQtyMainsl; ebayQtyMainsl -= ebayQtyMainsl; bpmQtyMainsl -= bpmQtyMainsl;
              break;
            case 7:
              amazonQtyMainsl -= amazonQtyMainsl; wayfairQtyMainsl -= wayfairQtyMainsl; walmartQtyMainsl -= walmartQtyMainsl; ostQtyMainsl -= ostQtyMainsl; ebayQtyMainsl -= ebayQtyMainsl; bpmQtyMainsl -= bpmQtyMainsl; mellowQtyMainsl -= mellowQtyMainsl;
              break;
            case 8:
              amazonQtyMainsl -= amazonQtyMainsl; wayfairQtyMainsl -= wayfairQtyMainsl; walmartQtyMainsl -= walmartQtyMainsl; ostQtyMainsl -= ostQtyMainsl; ebayQtyMainsl -= ebayQtyMainsl; bpmQtyMainsl -= bpmQtyMainsl; mellowQtyMainsl -= mellowQtyMainsl; houzzQtyMainsl -= houzzQtyMainsl;
              break;
          }
        }
        else if (tmpAdjMainsl < 0)
        {
          switch (tmpAdjMainsl)
          {
            case -1:
              amazonQtyMainsl += amazonQtyMainsl;
              break;
            case -2:
              amazonQtyMainsl += amazonQtyMainsl; wayfairQtyMainsl += wayfairQtyMainsl;
              break;
            case -3:
              amazonQtyMainsl += amazonQtyMainsl; wayfairQtyMainsl += wayfairQtyMainsl; walmartQtyMainsl += walmartQtyMainsl;
              break;
            case -4:
              amazonQtyMainsl += amazonQtyMainsl; wayfairQtyMainsl += wayfairQtyMainsl; walmartQtyMainsl += walmartQtyMainsl; ostQtyMainsl += ostQtyMainsl;
              break;
            case -5:
              amazonQtyMainsl += amazonQtyMainsl; wayfairQtyMainsl += wayfairQtyMainsl; walmartQtyMainsl += walmartQtyMainsl; ostQtyMainsl += ostQtyMainsl; ebayQtyMainsl += ebayQtyMainsl;
              break;
            case -6:
              amazonQtyMainsl += amazonQtyMainsl; wayfairQtyMainsl += wayfairQtyMainsl; walmartQtyMainsl += walmartQtyMainsl; ostQtyMainsl += ostQtyMainsl; ebayQtyMainsl += ebayQtyMainsl; bpmQtyMainsl += bpmQtyMainsl;
              break;
            case 7:
              amazonQtyMainsl += amazonQtyMainsl; wayfairQtyMainsl += wayfairQtyMainsl; walmartQtyMainsl += walmartQtyMainsl; ostQtyMainsl += ostQtyMainsl; ebayQtyMainsl += ebayQtyMainsl; bpmQtyMainsl += bpmQtyMainsl; mellowQtyMainsl += mellowQtyMainsl;
              break;
            case 8:
              amazonQtyMainsl += amazonQtyMainsl; wayfairQtyMainsl += wayfairQtyMainsl; walmartQtyMainsl += walmartQtyMainsl; ostQtyMainsl += ostQtyMainsl; ebayQtyMainsl += ebayQtyMainsl; bpmQtyMainsl += bpmQtyMainsl; mellowQtyMainsl += mellowQtyMainsl; houzzQtyMainsl += houzzQtyMainsl;
              break;
          }
        }
      }


      result = new GetInventoryFeedsItemDTO
      {
        ItemName = invFeedsItem.ItemName,
        ItemNoId = invFeedsItem.ItemNoId,
        QtyAvailBanc = curQtyBanc,
        QtyAvailMainsl = curQtyMainsl,
        AmazonQtyBanc = amazonQtyBanc,
        AmazonQtyMainsl = amazonQtyMainsl,
        AmazonPercentage = (int)amazonPrcntg,
        AmazonCustSKU = amazonSKU,
        WayfairQtyBanc = wayfairQtyBanc,
        WayfairQtyMainsl = wayfairQtyMainsl,
        WayfairPercentage = (int)wayfairPrcntg,
        WayfairCustSKU = wayfairSKU,
        WalmartQtyBanc = wayfairQtyBanc,
        WalmartQtyMainsl = walmartQtyMainsl,
        WalmartPercentage = (int)walmartPrcntg,
        WalmartCustSKU = walmartSKU,
        OverstockQtyBanc = ostQtyBanc,
        OverstockQtyMainsl = ostQtyMainsl,
        OverstockPercentage = (int)ostPrcntg,
        OverstockCustSKU = ostSKU,
        eBayQtyBanc = ebayQtyBanc,
        eBayQtyMainsl = ebayQtyMainsl,
        eBayPercentage = (int)ebayPrcntg,
        eBayCustSKU = eBaySKU,
        BPMWebQtyBanc = bpmQtyBanc,
        BPMWebQtyMainsl = bpmQtyMainsl,
        BPMWebPercentage = (int)bpmPrcntg,
        MellowWebQtyBanc = mellowQtyBanc,
        MellowWebQtyMainsl = mellowQtyMainsl,
        MellowWebPercentage = (int)mellowPrcntg,
        HouzzQtyBanc = houzzQtyBanc,
        HouzzQtyMainsl = houzzQtyMainsl,
        HouzzPercentage = (int)houzzPrcntg,
        isCooMasterSku = true
      };


      return result;
    }

    // For low sales history SKUs & New SKUs
    // By Brian Yi on 06/06/2021
    public GetInventoryFeedsItemDTO AutoCalcInvFeedsForLowSalesHistory(GetInventoryFeedsItemDTO invFeedsItem, List<InvFeedsRule> invFeedsRules, List<InvFeedsRuleSku> invFeedsRulesSKUs)
    {
      // Setting feeding ratio for each tier(party)
      int firstParty = 20, thirdParty = 5;
      int curQtyBanc = invFeedsItem.QtyAvailBanc, curQtyMainsl = invFeedsItem.QtyAvailMainsl, doneCnt = 0;

      List<InvFeedsMarketForCalc> invFeedsMrkts = new List<InvFeedsMarketForCalc>();
      InvFeedsMarketForCalc tmpMrkt = new InvFeedsMarketForCalc() { };

      List<int> custIDs = new List<int>() { 5, 9, 12, 14, 18, 21, 26, 29 };

      Dictionary<int, int> custIDsandTiers = new Dictionary<int, int>();
      custIDsandTiers.Add(5, 1); // Amazon 1P
      custIDsandTiers.Add(9, 3); // BPM Website
      custIDsandTiers.Add(12, 3); // eBay
      custIDsandTiers.Add(14, 3); // Houzz
      custIDsandTiers.Add(18, 3); // Mellow Website
      custIDsandTiers.Add(21, 1); // Overstock
      custIDsandTiers.Add(26, 1); // Walmart
      custIDsandTiers.Add(29, 1); // Wayfair

      foreach (var tmpCustInfo in custIDsandTiers)
      {
        tmpMrkt = new InvFeedsMarketForCalc()
        {
          CustomerId = tmpCustInfo.Key,
          QtyBanc = 0,
          QtyMainsl = 0,
          Ratio = 0,
          Tier = tmpCustInfo.Value,
          isDone = false
        };
        invFeedsMrkts.Add(tmpMrkt);
      }

      GetInventoryFeedsItemDTO result = new GetInventoryFeedsItemDTO
      {
        ItemName = invFeedsItem.ItemName,
        ItemNoId = invFeedsItem.ItemNoId
      };

      if (invFeedsItem.QtyAvailBanc != 0)
      {
        // First General Rules from each customer
        foreach (InvFeedsMarketForCalc tmpDTO in invFeedsMrkts)
        {
          InvFeedsRule tmpCustRule = invFeedsRules.Find(ifr => ifr.CustomerId == tmpDTO.CustomerId);
          // Check Zero Out
          if (tmpCustRule.ZeroOutAt >= invFeedsItem.QtyAvailBanc)
          {
            tmpDTO.QtyBanc = 0;
            tmpDTO.isDone = true; // No More Feeding
          }
          else if (tmpCustRule.CustomFeedRatio > 0) // Check Custom Feeding Ratio if any
          {
            tmpDTO.QtyBanc = (int)Math.Floor(invFeedsItem.QtyAvailBanc * ((double)tmpCustRule.CustomFeedRatio / 100));
            tmpDTO.Ratio = (int)tmpCustRule.CustomFeedRatio;
            invFeedsItem.QtyAvailBanc = invFeedsItem.QtyAvailBanc - tmpDTO.QtyBanc;
            tmpDTO.isDone = true; // No More Feeding
          }
        }
        // Second check any specific rule for this SKU
        List<InvFeedsRuleSku> tmpRuleList = invFeedsRulesSKUs.FindAll(ifrs => ifrs.ItemNoId == invFeedsItem.ItemNoId);
        if (tmpRuleList != null)
        {
          foreach (InvFeedsRuleSku tmpRule in tmpRuleList)
          {
            if (tmpRule.DoNotFeedFromBanc == true)
            {
              foreach (InvFeedsMarketForCalc tmpDTO in invFeedsMrkts)
              {
                if (tmpDTO.QtyBanc > 0) invFeedsItem.QtyAvailBanc += tmpDTO.QtyBanc;
                tmpDTO.QtyBanc = 0;
                tmpDTO.isDone = true; // No More Feeding
              }
            }
            else
            {
              List<InvFeedsRuleSkumkt> invFeedsRuleSkumkts = tmpRule.InvFeedsRuleSkumkts.ToList();
              if (invFeedsRuleSkumkts != null)
              {
                foreach (InvFeedsRuleSkumkt tmpSKURuleMkt in invFeedsRuleSkumkts)
                {
                  InvFeedsMarketForCalc tmpDTO = invFeedsMrkts.FindLast(ifm => ifm.CustomerId == tmpSKURuleMkt.CustomerId);
                  if (tmpDTO != null)
                  {
                    // 1. Check Do Not Feed to here
                    if ((bool)tmpSKURuleMkt.DoNotFeedToHere == true)
                    {
                      if (tmpDTO.QtyBanc > 0) invFeedsItem.QtyAvailBanc += tmpDTO.QtyBanc;
                      tmpDTO.QtyBanc = 0;
                      tmpDTO.isDone = true; // No More Feeding
                    }
                    // 2. Check Custom Fixed Ratio
                    if (tmpSKURuleMkt.CustomFixedPercentage > 0)
                    {
                      if (tmpDTO.QtyBanc > 0) invFeedsItem.QtyAvailBanc += tmpDTO.QtyBanc;
                      tmpDTO.Ratio = (int)tmpSKURuleMkt.CustomFixedPercentage;
                      tmpDTO.QtyBanc = 0;
                      tmpDTO.QtyBanc = (int)Math.Floor(invFeedsItem.QtyAvailBanc * (double)tmpSKURuleMkt.CustomFixedPercentage);
                      invFeedsItem.QtyAvailBanc = invFeedsItem.QtyAvailBanc - tmpDTO.QtyBanc;
                      tmpDTO.isDone = true; // No More Feeding
                    }
                    // 3. Check Custom Zero Out At
                    if (tmpSKURuleMkt.CustomZeroOutAt > 0)
                    {
                      if (invFeedsItem.QtyAvailBanc + tmpDTO.QtyBanc <= tmpSKURuleMkt.CustomZeroOutAt)
                      {
                        invFeedsItem.QtyAvailBanc += tmpDTO.QtyBanc;
                        tmpDTO.QtyBanc = 0;
                        tmpDTO.isDone = true; // No More Feeding
                      }

                    }
                  }
                }
              }
            }
          } // end of foreach
        }
      }
      else if (invFeedsItem.QtyAvailMainsl != 0)
      {
        // First General Rules from each customer
        foreach (InvFeedsMarketForCalc tmpDTO in invFeedsMrkts)
        {
          InvFeedsRule tmpCustRule = invFeedsRules.Find(ifr => ifr.CustomerId == tmpDTO.CustomerId);
          // Check Zero Out
          if (tmpCustRule.ZeroOutAt >= invFeedsItem.QtyAvailMainsl)
          {
            tmpDTO.QtyMainsl = 0;
            tmpDTO.isDone = true; // No More Feeding
          }
          else if (tmpCustRule.CustomFeedRatio > 0) // Check Custom Feeding Ratio if any
          {
            tmpDTO.QtyMainsl = (int)Math.Floor(invFeedsItem.QtyAvailMainsl * ((double)tmpCustRule.CustomFeedRatio / 100));
            tmpDTO.Ratio = (int)tmpCustRule.CustomFeedRatio;
            invFeedsItem.QtyAvailMainsl = invFeedsItem.QtyAvailMainsl - tmpDTO.QtyMainsl;
            tmpDTO.isDone = true; // No More Feeding
          }
        }
        // Second check any specific rule for this SKU
        List<InvFeedsRuleSku> tmpRuleList = invFeedsRulesSKUs.FindAll(ifrs => ifrs.ItemNoId == invFeedsItem.ItemNoId);
        if (tmpRuleList != null)
        {
          foreach (InvFeedsRuleSku tmpRule in tmpRuleList)
          {
            if (tmpRule.DoNotFeedFromMainsl == true)
            {
              foreach (InvFeedsMarketForCalc tmpDTO in invFeedsMrkts)
              {
                if (tmpDTO.QtyMainsl > 0) invFeedsItem.QtyAvailMainsl += tmpDTO.QtyMainsl;
                tmpDTO.QtyMainsl = 0;
                tmpDTO.isDone = true; // No More Feeding
              }
            }
            else
            {
              List<InvFeedsRuleSkumkt> invFeedsRuleSkumkts = tmpRule.InvFeedsRuleSkumkts.ToList();
              if (invFeedsRuleSkumkts != null)
              {
                foreach (InvFeedsRuleSkumkt tmpSKURuleMkt in invFeedsRuleSkumkts)
                {
                  InvFeedsMarketForCalc tmpDTO = invFeedsMrkts.FindLast(ifm => ifm.CustomerId == tmpSKURuleMkt.CustomerId);
                  if (tmpDTO != null)
                  {
                    // 1. Check Do Not Feed to here
                    if ((bool)tmpSKURuleMkt.DoNotFeedToHere == true)
                    {
                      if (tmpDTO.QtyMainsl > 0) invFeedsItem.QtyAvailMainsl += tmpDTO.QtyMainsl;
                      tmpDTO.QtyMainsl = 0;
                      tmpDTO.isDone = true; // No More Feeding
                    }
                    // 2. Check Custom Fixed Ratio
                    if (tmpSKURuleMkt.CustomFixedPercentage > 0)
                    {
                      if (tmpDTO.QtyMainsl > 0) invFeedsItem.QtyAvailMainsl += tmpDTO.QtyMainsl;
                      tmpDTO.Ratio = (int)tmpSKURuleMkt.CustomFixedPercentage;
                      tmpDTO.QtyMainsl = 0;
                      tmpDTO.QtyMainsl = (int)Math.Floor(invFeedsItem.QtyAvailMainsl * (double)tmpSKURuleMkt.CustomFixedPercentage);
                      invFeedsItem.QtyAvailMainsl = invFeedsItem.QtyAvailMainsl - tmpDTO.QtyMainsl;
                      tmpDTO.isDone = true; // No More Feeding
                    }
                    // 3. Check Custom Zero Out At
                    if (tmpSKURuleMkt.CustomZeroOutAt > 0)
                    {
                      if (invFeedsItem.QtyAvailMainsl + tmpDTO.QtyMainsl <= tmpSKURuleMkt.CustomZeroOutAt)
                      {
                        invFeedsItem.QtyAvailMainsl += tmpDTO.QtyMainsl;
                        tmpDTO.QtyMainsl = 0;
                        tmpDTO.isDone = true; // No More Feeding
                      }

                    }
                  }
                }
              }
            }
          } // end of foreach
        }
      } // end of SKU 

      foreach (InvFeedsMarketForCalc tmpDto in invFeedsMrkts)
      {
        if (tmpDto.isDone != true)
        {
          if (tmpDto.Tier == 1)
          {
            tmpDto.Ratio = firstParty;
            tmpDto.QtyBanc = (curQtyBanc != 0 ? (int)(curQtyBanc * ((double)firstParty / 100)) : 0);
            tmpDto.QtyMainsl = (curQtyMainsl != 0 ? (int)(curQtyMainsl * ((double)firstParty / 100)) : 0);
          }
          else if (tmpDto.Tier == 3)
          {
            tmpDto.Ratio = thirdParty;
            tmpDto.QtyBanc = (curQtyBanc != 0 ? (int)(curQtyBanc * ((double)thirdParty / 100)) : 0);
            tmpDto.QtyMainsl = (curQtyMainsl != 0 ? (int)(curQtyMainsl * ((double)thirdParty / 100)) : 0);
          }
        }
        switch (tmpDto.CustomerId)
        {
          case 5: // Amazon Drop Ship
            result.AmazonCustSKU = "";
            result.AmazonQtyBanc = tmpDto.QtyBanc;
            result.AmazonQtyMainsl = tmpDto.QtyMainsl;
            result.AmazonPercentage = tmpDto.Ratio;
            break;
          case 9: // BPM Website
            result.BPMWebQtyBanc = tmpDto.QtyBanc;
            result.BPMWebQtyMainsl = tmpDto.QtyMainsl;
            result.BPMWebPercentage = tmpDto.Ratio;
            break;
          case 12: // eBay
            result.eBayCustSKU = "";
            result.eBayQtyBanc = tmpDto.QtyBanc;
            result.eBayQtyMainsl = tmpDto.QtyMainsl;
            result.eBayPercentage = tmpDto.Ratio;
            break;
          case 14: // Houzz Drop Ship
            result.HouzzQtyBanc = tmpDto.QtyBanc;
            result.HouzzQtyMainsl = tmpDto.QtyMainsl;
            result.HouzzPercentage = tmpDto.Ratio;
            break;
          case 18: // Mellow Website
            result.MellowWebQtyBanc = tmpDto.QtyBanc;
            result.MellowWebQtyMainsl = tmpDto.QtyMainsl;
            result.MellowWebPercentage = tmpDto.Ratio;
            break;
          case 21: // Overstock Drop Ship
            result.OverstockCustSKU = "";
            result.OverstockQtyBanc = tmpDto.QtyBanc;
            result.OverstockQtyMainsl = tmpDto.QtyMainsl;
            result.OverstockPercentage = tmpDto.Ratio;
            break;
          case 26: // Walmart DSV
            result.WalmartCustSKU = "";
            result.WalmartQtyBanc = tmpDto.QtyBanc;
            result.WalmartQtyMainsl = tmpDto.QtyMainsl;
            result.WalmartPercentage = tmpDto.Ratio;
            break;
          case 29: // Wayfair Drop Ship
            result.WayfairCustSKU = "";
            result.WayfairQtyBanc = tmpDto.QtyBanc;
            result.WayfairQtyMainsl = tmpDto.QtyMainsl;
            result.WayfairPercentage = tmpDto.Ratio;
            break;
        }
      }
      result.QtyAvailBanc = curQtyBanc;
      result.QtyAvailMainsl = curQtyMainsl;

      return result;
    }

    // Get a list from InvRealTimeInventory Table
    // Put a date and you will get latest data for that date
    // By Brian Yi on 05/03/2021
    public async Task<List<InvRealTime>> GetRealTimeInventory(DateTime date)
    {
      DateTime latestDate = await GetLatestDateTimeOfInvRealTimeTable(date);

      //4: BANC; 25: Mainsl
      List<InvRealTime> invRealTime = await _kc.InvRealTimes
        .Include(irt => irt.Location)
        .Include(irt => irt.ItemNo)
        .Where(irt => irt.TimeRecord.CompareTo(latestDate) == 0)
        .Where(irt => irt.LocationId == 4 || irt.LocationId == 25)
        .ToListAsync();

      return invRealTime;
    }


    // Get Latest DateTime from InvRealTimeTable
    // Just put date you want, you will get the latest updated DateTime
    // By Brian Yi on 05/03/2021
    public async Task<DateTime> GetLatestDateTimeOfInvRealTimeTable(DateTime date)
    {
      InvRealTime invRealTimeLatestOfDate = await _kc.InvRealTimes
       .Where(irt => irt.TimeRecord.Date.CompareTo(date.Date) == 0)
       .OrderBy(irt => irt.TimeRecord)
       .FirstOrDefaultAsync();

      if (invRealTimeLatestOfDate == null)
        return date;

      return invRealTimeLatestOfDate.TimeRecord;
    }

    // calMethod: 0 = round
    //            1 = ceiling
    //            2 = floor
    public double calMarketRatioBySalesHistory(int calMethod, int salesQty, int totalQty)
    {
      double result = 0;
      switch (calMethod)
      {
        case 0:
          result = Math.Round((double)salesQty / totalQty, 2, MidpointRounding.AwayFromZero);
          break;
        case 1:
          result = Math.Ceiling((double)salesQty / (double)totalQty * 100) / 100;
          break;
        case 2:
          result = Math.Floor((double)salesQty / (double)totalQty * 100) / 100;
          break;
      }
      return result;
    }

    // Saving Inventory Feeds Details after generates
    // Modified by Brian Yi on 06/20/2022 for quick load
    public async Task<bool> SaveInventoryFeeds(bool isModified, long reportId, List<GetInventoryFeedsItemDTO> invFeedsItemList)
    {
      int amazonID = 5;
      int bpmWebID = 9;
      int ebayID = 12;
      int houzzID = 14;
      int mellowWebID = 18;
      int ostID = 21;
      int walmartID = 26;
      int wayfairID = 29;
      int homedepotId = 40;
      int targetId = 51;
      List<InvFeedsReportItem> invFeedsReportItemList = new List<InvFeedsReportItem>();
      List<InvFeedsRepItemDetail> invFeedsRepItemDetailList = new List<InvFeedsRepItemDetail>();
      List<InvFeedsRepItemLoc> invFeedsRepItemLocList = new List<InvFeedsRepItemLoc>();
      List<InvFeedsAppliedRule> invFeedsAppliedRules = await _kc.InvFeedsAppliedRules.ToListAsync();

      InvFeedsReportItem invFeedsReportItem = new InvFeedsReportItem();
      InvFeedsRepItemDetail invFeedsRepItemDetail = new InvFeedsRepItemDetail();
      InvFeedsRepItemLoc invFeedsRepItemLoc = new InvFeedsRepItemLoc();

      //added on 06/20/2022
      List<InvFeedsRepTableDetail> invFeedsRepTableDetails = new List<InvFeedsRepTableDetail>();


      // Checking a duplication
      InvFeedsReportItem tmpInvFeedsReportItem = await _kc.InvFeedsReportItems
        .Where(i => i.InvFeedsReportId == reportId)
        .FirstOrDefaultAsync();

      if (tmpInvFeedsReportItem != null && isModified == false) return true;
      //if(await UpsertInvFeedsTable(reportId, invFeedsItemList) != true) return true;

      bool isCompleted = true;
      int mainslId = 25, zinusTracyId = 57, zinusChsId = 108; //swcaftId = 54,  prsmCastId = 51, prsmCaltId = 67, bancId = 4, bascId = 62, 
      var bulkConfig = new BulkConfig()
      {
        SetOutputIdentity = true,
        PreserveInsertOrder = true
      };
      var aBulkConfig = new BulkConfig()
      {
        SetOutputIdentity = true,
        PreserveInsertOrder = true
      };

      foreach (GetInventoryFeedsItemDTO tmpDTO in invFeedsItemList)
      //Parallel.ForEach(invFeedsItemList, tmpDTO =>
      {
        //if(tmpDTO.totalStagePOQtyBanc != 0 || tmpDTO.totalStagePOQtyMainsl != 0)
        //{ Console.WriteLine("HECK!!!");}
        invFeedsReportItem = new InvFeedsReportItem()
        {
          InvFeedsReportId = reportId,
          ItemNoId = tmpDTO.ItemNoId
        };
        tmpDTO.InvFeedsReportItemId = invFeedsReportItem.InvFeedsReportItemId;
        // Amazon
        invFeedsRepItemDetail = new InvFeedsRepItemDetail()
        {
          InvFeedsReportItem = invFeedsReportItem,
          InvFeedsReportItemId = invFeedsReportItem.InvFeedsReportItemId,
          Ratio = tmpDTO.AmazonPercentage,
          DuplicateCounter = tmpDTO.AmazonDupCount,
          CustomerId = amazonID,
          CustomerWarehouseQty = 0
        };

        invFeedsReportItemList.Add(invFeedsReportItem);
        invFeedsRepItemDetailList.Add(invFeedsRepItemDetail);

        // Amazon Banc
        /*invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = bancId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoBanc).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.AmazonBancPercentage,
          QtyAvail = tmpDTO.AmazonQtyBanc,
          QtyOnBackOrder = 0,
          StagePoqty = tmpDTO.totalStagePOQtyBanc
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // Amazon Mainsl
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = mainslId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoMainsl).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.AmazonMainslPercentage,
          QtyAvail = tmpDTO.AmazonQtyMainsl,
          QtyOnBackOrder = 0,
          StagePoqty = tmpDTO.totalStagePOQtyMainsl
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // Amazon SWCAFT
        /*
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = swcaftId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoSWCAFT).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.AmazonSWCAFTPercentage,
          QtyAvail = tmpDTO.AmazonQtySWCAFT,
          QtyOnBackOrder = 0,
          StagePoqty = tmpDTO.totalStagePOQtySWCAFT
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // Amazon Basc
        /*invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = bascId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoBasc).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.AmazonBascPercentage,
          QtyAvail = tmpDTO.AmazonQtyBasc,
          QtyOnBackOrder = 0,
          StagePoqty = tmpDTO.totalStagePOQtyBasc
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        /*
        // Amazon Prism-Cast
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = prsmCastId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoPrismCast).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.AmazonPrismCastPercentage,
          QtyAvail = tmpDTO.AmazonQtyPrismCast,
          QtyOnBackOrder = 0,
          StagePoqty = tmpDTO.totalStagePOQtyPrismCast
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // Amazon Prism-Calt
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = prsmCaltId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoPrismCalt).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.AmazonPrismCaltPercentage,
          QtyAvail = tmpDTO.AmazonQtyPrismCalt,
          QtyOnBackOrder = 0,
          StagePoqty = tmpDTO.totalStagePOQtyPrismCalt
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // Amazon Zinus-Tracy
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = zinusTracyId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoZinusTracy).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.AmazonZinusTracyPercentage,
          QtyAvail = tmpDTO.AmazonQtyZinusTracy,
          QtyOnBackOrder = 0,
          StagePoqty = tmpDTO.totalStagePOQtyZinusTracy
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // Amazon Zinus-Chs
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = zinusChsId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoZinusChs).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.AmazonZinusChsPercentage,
          QtyAvail = tmpDTO.AmazonQtyZinusChs,
          QtyOnBackOrder = 0,
          StagePoqty = tmpDTO.totalStagePOQtyZinusChs
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);

        // BPM Website
        invFeedsRepItemDetail = new InvFeedsRepItemDetail()
        {
          InvFeedsReportItem = invFeedsReportItem,
          InvFeedsReportItemId = invFeedsReportItem.InvFeedsReportItemId,
          Ratio = tmpDTO.BPMWebPercentage,
          DuplicateCounter = tmpDTO.BPMDupCount,
          CustomerId = bpmWebID,
          CustomerWarehouseQty = 0
        };

        invFeedsRepItemDetailList.Add(invFeedsRepItemDetail);

        // BPM Banc
        /*invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = bancId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoBanc).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.BPMWebBancPercentage,
          QtyAvail = tmpDTO.BPMWebQtyBanc,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // BPM Mainsl
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = mainslId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoMainsl).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.BPMWebMainslPercentage,
          QtyAvail = tmpDTO.BPMWebQtyMainsl,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // BPM SWCAFT
        /*
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = swcaftId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoSWCAFT).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.BPMWebSWCAFTPercentage,
          QtyAvail = tmpDTO.BPMWebQtySWCAFT,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // BPM Basc
        /*invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = bascId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoBasc).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.BPMWebBascPercentage,
          QtyAvail = tmpDTO.BPMWebQtyBasc,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // BPM Prism-Cast
        /*
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = prsmCastId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoPrismCast).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.BPMWebPrismCastPercentage,
          QtyAvail = tmpDTO.BPMWebQtyPrismCast,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // BPM Prism-Calt
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = prsmCaltId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoPrismCalt).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.BPMWebPrismCaltPercentage,
          QtyAvail = tmpDTO.BPMWebQtyPrismCalt,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // BPM Zinus-Tracy
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = zinusTracyId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoZinusTracy).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.BPMWebZinusTracyPercentage,
          QtyAvail = tmpDTO.BPMWebQtyZinusTracy,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // BPM Zinus-Chs
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = zinusChsId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoZinusChs).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.BPMWebZinusChsPercentage,
          QtyAvail = tmpDTO.BPMWebQtyZinusChs,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);

        // eBay
        invFeedsRepItemDetail = new InvFeedsRepItemDetail()
        {
          InvFeedsReportItem = invFeedsReportItem,
          InvFeedsReportItemId = invFeedsReportItem.InvFeedsReportItemId,
          Ratio = tmpDTO.eBayPercentage,
          DuplicateCounter = tmpDTO.eBayDupCount,
          CustomerId = ebayID,
          CustomerWarehouseQty = 0
        };

        invFeedsRepItemDetailList.Add(invFeedsRepItemDetail);

        // eBay Banc
        /*invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = bancId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoBanc).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.eBayBancPercentage,
          QtyAvail = tmpDTO.eBayQtyBanc,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // eBay Mainsl
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = mainslId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoMainsl).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.eBayMainslPercentage,
          QtyAvail = tmpDTO.eBayQtyMainsl,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // eBay SWCAFT
        /*
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = swcaftId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoSWCAFT).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.eBaySWCAFTPercentage,
          QtyAvail = tmpDTO.eBayQtySWCAFT,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // eBay Basc
        /*invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = bascId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoBasc).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.eBayBascPercentage,
          QtyAvail = tmpDTO.eBayQtyBasc,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // eBay PRISM-CAST
        /*
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = prsmCastId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoPrismCast).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.eBayPrismCastPercentage,
          QtyAvail = tmpDTO.eBayQtyPrismCast,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // eBay PRISM-CALT
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = prsmCaltId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoPrismCalt).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.eBayPrismCaltPercentage,
          QtyAvail = tmpDTO.eBayQtyPrismCalt,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // eBay Zinus-Tracy
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = zinusTracyId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoZinusTracy).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.eBayZinusTracyPercentage,
          QtyAvail = tmpDTO.eBayQtyZinusTracy,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // eBay Zinus-Chs
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = zinusChsId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoZinusChs).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.eBayZinusChsPercentage,
          QtyAvail = tmpDTO.eBayQtyZinusChs,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);

        // Houzz
        invFeedsRepItemDetail = new InvFeedsRepItemDetail()
        {
          InvFeedsReportItem = invFeedsReportItem,
          InvFeedsReportItemId = invFeedsReportItem.InvFeedsReportItemId,
          Ratio = tmpDTO.HouzzPercentage,
          DuplicateCounter = tmpDTO.HouzzDupCount,
          CustomerId = houzzID,
          CustomerWarehouseQty = 0
        };

        invFeedsRepItemDetailList.Add(invFeedsRepItemDetail);

        // Houzz Banc
        /*invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = bancId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoBanc).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.HouzzBancPercentage,
          QtyAvail = tmpDTO.HouzzQtyBanc,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // Houzz Mainsl
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = mainslId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoMainsl).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.HouzzMainslPercentage,
          QtyAvail = tmpDTO.HouzzQtyMainsl,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // Houzz SWCAFT
        /*
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = swcaftId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoSWCAFT).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.HouzzSWCAFTPercentage,
          QtyAvail = tmpDTO.HouzzQtySWCAFT,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // Houzz Basc
        /*invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = bascId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoBasc).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.HouzzBascPercentage,
          QtyAvail = tmpDTO.HouzzQtyBasc,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/

        // Mellow
        invFeedsRepItemDetail = new InvFeedsRepItemDetail()
        {
          InvFeedsReportItem = invFeedsReportItem,
          InvFeedsReportItemId = invFeedsReportItem.InvFeedsReportItemId,
          Ratio = tmpDTO.MellowWebPercentage,
          DuplicateCounter = tmpDTO.MellowDupCount,
          CustomerId = mellowWebID,
          CustomerWarehouseQty = 0
        };

        invFeedsRepItemDetailList.Add(invFeedsRepItemDetail);

        // Mellow Banc
        /*invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = bancId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoBanc).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.MellowWebBancPercentage,
          QtyAvail = tmpDTO.MellowWebQtyBanc,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // Mellow Mainsl
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = mainslId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoMainsl).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.MellowWebMainslPercentage,
          QtyAvail = tmpDTO.MellowWebQtyMainsl,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // Mellow SWCAFT
        /*
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = swcaftId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoSWCAFT).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.MellowWebSWCAFTPercentage,
          QtyAvail = tmpDTO.MellowWebQtySWCAFT,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        */
        // Mellow Basc
        /*invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = bascId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoBasc).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.MellowWebBascPercentage,
          QtyAvail = tmpDTO.MellowWebQtyBasc,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // Mellow PRISM-CAST
        /*
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = prsmCastId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoPrismCast).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.MellowWebPrismCastPercentage,
          QtyAvail = tmpDTO.MellowWebQtyPrismCast,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // Mellow PRISM-CALT
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = prsmCaltId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoPrismCalt).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.MellowWebPrismCaltPercentage,
          QtyAvail = tmpDTO.MellowWebQtyPrismCalt,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // Mellow Zinus-Tracy
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = zinusTracyId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoZinusTracy).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.MellowWebZinusTracyPercentage,
          QtyAvail = tmpDTO.MellowWebQtyZinusTracy,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // Mellow Zinus-Chs
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = zinusChsId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoZinusChs).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.MellowWebZinusChsPercentage,
          QtyAvail = tmpDTO.MellowWebQtyZinusChs,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);

        // Overstock
        invFeedsRepItemDetail = new InvFeedsRepItemDetail()
        {
          InvFeedsReportItem = invFeedsReportItem,
          InvFeedsReportItemId = invFeedsReportItem.InvFeedsReportItemId,
          Ratio = tmpDTO.OverstockPercentage,
          DuplicateCounter = tmpDTO.OverstockDupCount,
          CustomerId = ostID,
          CustomerWarehouseQty = 0
        };

        invFeedsRepItemDetailList.Add(invFeedsRepItemDetail);

        // Overstock Banc
        /*invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = bancId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoBanc).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.OverstockBancPercentage,
          QtyAvail = tmpDTO.OverstockQtyBanc,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // Overstock Mainsl
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = mainslId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoMainsl).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.OverstockMainslPercentage,
          QtyAvail = tmpDTO.OverstockQtyMainsl,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // Overstock SWCAFT
        /*
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = swcaftId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoSWCAFT).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.OverstockSWCAFTPercentage,
          QtyAvail = tmpDTO.OverstockQtySWCAFT,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        */
        // Overstock Basc
        /*invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = bascId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoBasc).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.OverstockBascPercentage,
          QtyAvail = tmpDTO.OverstockQtyBasc,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // Overstock PRISM-CAST
        /*
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = prsmCastId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoPrismCast).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.OverstockPrismCastPercentage,
          QtyAvail = tmpDTO.OverstockQtyPrismCast,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // Overstock PRISM-CALT
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = prsmCaltId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoPrismCalt).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.OverstockPrismCaltPercentage,
          QtyAvail = tmpDTO.OverstockQtyPrismCalt,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // Overstock ZINUS-Tracy
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = zinusTracyId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoZinusTracy).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.OverstockZinusTracyPercentage,
          QtyAvail = tmpDTO.OverstockQtyZinusTracy,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // Overstock ZINUS-CHS
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = zinusChsId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoZinusChs).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.OverstockZinusChsPercentage,
          QtyAvail = tmpDTO.OverstockQtyZinusChs,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);

        // Walmart
        invFeedsRepItemDetail = new InvFeedsRepItemDetail()
        {
          InvFeedsReportItem = invFeedsReportItem,
          InvFeedsReportItemId = invFeedsReportItem.InvFeedsReportItemId,
          Ratio = tmpDTO.WalmartPercentage,
          DuplicateCounter = tmpDTO.WalmartDupCount,
          CustomerId = walmartID,
          CustomerWarehouseQty = 0
        };

        invFeedsRepItemDetailList.Add(invFeedsRepItemDetail);

        // Walmart Banc
        /*(invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = bancId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoBanc).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.WalmartBancPercentage,
          QtyAvail = tmpDTO.WalmartQtyBanc,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // Walmart Mainsl
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = mainslId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoMainsl).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.WalmartMainslPercentage,
          QtyAvail = tmpDTO.WalmartQtyMainsl,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // Walmart SWCAFT
        /*
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = swcaftId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoSWCAFT).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.WalmartSWCAFTPercentage,
          QtyAvail = tmpDTO.WalmartQtySWCAFT,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        */
        // Walmart Basc
        /*invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = bascId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoBasc).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.WalmartBascPercentage,
          QtyAvail = tmpDTO.WalmartQtyBasc,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // Walmart PRISM-CAST
        /*
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = prsmCastId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoPrismCast).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.WalmartPrismCastPercentage,
          QtyAvail = tmpDTO.WalmartQtyPrismCast,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // Walmart PRISM-CALT
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = prsmCaltId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoPrismCalt).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.WalmartPrismCaltPercentage,
          QtyAvail = tmpDTO.WalmartQtyPrismCalt,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // Walmart ZINUS-Tracy
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = zinusTracyId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoZinusTracy).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.WalmartZinusTracyPercentage,
          QtyAvail = tmpDTO.WalmartQtyZinusTracy,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // Walmart ZINUS-CHS
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = zinusChsId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoZinusChs).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.WalmartZinusChsPercentage,
          QtyAvail = tmpDTO.WalmartQtyZinusChs,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);

        // Wayfair
        invFeedsRepItemDetail = new InvFeedsRepItemDetail()
        {
          InvFeedsReportItem = invFeedsReportItem,
          InvFeedsReportItemId = invFeedsReportItem.InvFeedsReportItemId,
          Ratio = tmpDTO.WayfairPercentage,
          DuplicateCounter = tmpDTO.WayfairDupCount,
          CustomerId = wayfairID,
          CustomerWarehouseQty = tmpDTO.QtyAvailCGInv
        };

        invFeedsRepItemDetailList.Add(invFeedsRepItemDetail);

        // Wayfair Banc
        /*invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = bancId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoBanc).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.WayfairBancPercentage,
          QtyAvail = tmpDTO.WayfairQtyBanc,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // Wayfair Mainsl
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = mainslId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoMainsl).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.WayfairMainslPercentage,
          QtyAvail = tmpDTO.WayfairQtyMainsl,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // Wayfair SWCAFT
        /*
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = swcaftId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoSWCAFT).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.WayfairSWCAFTPercentage,
          QtyAvail = tmpDTO.WayfairQtySWCAFT,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        */
        // Wayfair Basc
        /*invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = bascId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoBasc).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.WayfairBascPercentage,
          QtyAvail = tmpDTO.WayfairQtyBasc,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // Wayfair PRISM-CAST
        /*
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = prsmCastId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoPrismCast).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.WayfairPrismCastPercentage,
          QtyAvail = tmpDTO.WayfairQtyPrismCast,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // Wayfair PRISM-CALT
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = prsmCaltId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoPrismCalt).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.WayfairPrismCaltPercentage,
          QtyAvail = tmpDTO.WayfairQtyPrismCalt,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc); */
        // Wayfair ZINUS-Tracy
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = zinusTracyId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoZinusTracy).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.WayfairZinusTracyPercentage,
          QtyAvail = tmpDTO.WayfairQtyZinusTracy,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // Wayfair ZINUS-CHS
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = zinusChsId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoZinusChs).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.WayfairZinusChsPercentage,
          QtyAvail = tmpDTO.WayfairQtyZinusChs,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);


        // HomeDepot
        invFeedsRepItemDetail = new InvFeedsRepItemDetail()
        {
          InvFeedsReportItem = invFeedsReportItem,
          InvFeedsReportItemId = invFeedsReportItem.InvFeedsReportItemId,
          Ratio = tmpDTO.HomeDepotPercentage,
          DuplicateCounter = tmpDTO.HomeDepotDupCount,
          CustomerId = homedepotId,
          CustomerWarehouseQty = tmpDTO.QtyAvailCGInv
        };

        invFeedsRepItemDetailList.Add(invFeedsRepItemDetail);

        // HomeDepot Banc
        /*invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = bancId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoBanc).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.HomeDepotBancPercentage,
          QtyAvail = tmpDTO.HomeDepotQtyBanc,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // HomeDepot Mainsl
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = mainslId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoMainsl).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.HomeDepotMainslPercentage,
          QtyAvail = tmpDTO.HomeDepotQtyMainsl,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // HomeDepot SWCAFT
        /*
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = swcaftId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoSWCAFT).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.HomeDepotSWCAFTPercentage,
          QtyAvail = tmpDTO.HomeDepotQtySWCAFT,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        */
        // HomeDepot Basc
        /*invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = bascId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoBasc).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.HomeDepotBascPercentage,
          QtyAvail = tmpDTO.HomeDepotQtyBasc,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // HomeDepot PRISM-CAST
        /*
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = prsmCastId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoPrismCast).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.HomeDepotPrismCastPercentage,
          QtyAvail = tmpDTO.HomeDepotQtyPrismCast,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // HomeDepot PRISM-CALT
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = prsmCaltId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoPrismCalt).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.HomeDepotPrismCaltPercentage,
          QtyAvail = tmpDTO.HomeDepotQtyPrismCalt,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // HomeDepot ZINUS-Tracy
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = zinusTracyId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoZinusTracy).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.HomeDepotZinusTracyPercentage,
          QtyAvail = tmpDTO.HomeDepotQtyZinusTracy,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // HomeDepot ZINUS-CHS
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = zinusChsId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoZinusChs).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.HomeDepotZinusChsPercentage,
          QtyAvail = tmpDTO.HomeDepotQtyZinusChs,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);

        // Target
        invFeedsRepItemDetail = new InvFeedsRepItemDetail()
        {
          InvFeedsReportItem = invFeedsReportItem,
          InvFeedsReportItemId = invFeedsReportItem.InvFeedsReportItemId,
          Ratio = tmpDTO.TargetPercentage,
          DuplicateCounter = tmpDTO.TargetDupCount,
          CustomerId = targetId,
          CustomerWarehouseQty = tmpDTO.QtyAvailCGInv
        };

        invFeedsRepItemDetailList.Add(invFeedsRepItemDetail);

        // Target Banc
        /*invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = bancId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoBanc).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.TargetBancPercentage,
          QtyAvail = tmpDTO.TargetQtyBanc,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // Target Mainsl
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = mainslId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoMainsl).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.TargetMainslPercentage,
          QtyAvail = tmpDTO.TargetQtyMainsl,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // Target SWCAFT
        /*
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = swcaftId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoSWCAFT).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.TargetSWCAFTPercentage,
          QtyAvail = tmpDTO.TargetQtySWCAFT,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        */
        // Target Basc
        /*invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = bascId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoBasc).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.TargetBascPercentage,
          QtyAvail = tmpDTO.TargetQtyBasc,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // Target PRISM-CAST
        /*
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = prsmCastId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoPrismCast).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.TargetPrismCastPercentage,
          QtyAvail = tmpDTO.TargetQtyPrismCast,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // Target PRISM-CALT
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = prsmCaltId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoPrismCalt).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.TargetPrismCaltPercentage,
          QtyAvail = tmpDTO.TargetQtyPrismCalt,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);*/
        // Target ZINUS-Tracy
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = zinusTracyId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoZinusTracy).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.TargetZinusTracyPercentage,
          QtyAvail = tmpDTO.TargetQtyZinusTracy,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);
        // Target ZINUS-CHS
        invFeedsRepItemLoc = new InvFeedsRepItemLoc()
        {
          InvFeedsRepItemDetail = invFeedsRepItemDetail,
          InvFeedsRepItemDetailId = invFeedsRepItemDetail.InvFeedsRepItemDetailId,
          LocationId = zinusChsId,
          InvFeedsAppliedRuleId = invFeedsAppliedRules.FindLast(x => x.RuleNo == tmpDTO.AppliedFeedingRuleNoZinusChs).InvFeedsAppliedRuleId,
          Ratio = tmpDTO.TargetZinusChsPercentage,
          QtyAvail = tmpDTO.TargetQtyZinusChs,
          QtyOnBackOrder = 0,
          StagePoqty = 0
        };
        invFeedsRepItemLocList.Add(invFeedsRepItemLoc);

      } // End of Foreach

      //await _kc.InvFeedsReports.AddAsync(newReport);
      //await _kc.SaveChangesAsync();
      _kc.BulkInsert(invFeedsReportItemList, bulkConfig);
      //await _kc.SaveChangesAsync();
      //foreach (InvFeedsRepItemDetail tmpDTO in invFeedsRepItemDetailList)
      Parallel.ForEach(invFeedsRepItemDetailList, tmpDTO =>
      {
        tmpDTO.InvFeedsReportItemId = tmpDTO.InvFeedsReportItem.InvFeedsReportItemId;
      });
      _kc.BulkInsert(invFeedsRepItemDetailList, aBulkConfig);
      //await _kc.SaveChangesAsync();
      //foreach (InvFeedsRepItemLoc tmpDTO in invFeedsRepItemLocList)
      Parallel.ForEach(invFeedsRepItemLocList, tmpDTO =>
      {
        tmpDTO.InvFeedsRepItemDetailId = tmpDTO.InvFeedsRepItemDetail.InvFeedsRepItemDetailId;
      });
      _kc.BulkInsert(invFeedsRepItemLocList);
      //if (await UpsertInvFeedsTable(reportId, invFeedsItemList) != true) return true;
      GetInventoryFeedsItemDTO tmpInvFeedsItemDto = new GetInventoryFeedsItemDTO();
      //foreach (InvFeedsReportItem tmpDtp in invFeedsReportItemList)
      Parallel.ForEach(invFeedsReportItemList, tmpDtp =>
      {
        tmpInvFeedsItemDto = invFeedsItemList.Where(i => i.ItemNoId == tmpDtp.ItemNoId).FirstOrDefault();
        tmpInvFeedsItemDto.InvFeedsReportItemId = tmpDtp.InvFeedsReportItemId;
      });
      await _kc.SaveChangesAsync();
      await UpsertInvFeedsTable(reportId, invFeedsItemList);

      return isCompleted;
    }

    // Getting Amazon Inventory Feeds
    // By Brian Yi on 06/23/2021; Modified on 07/26/2021
    public async Task<List<AmazonFeedDTO>> GetInvFeedsAmazon(DateTime historyDate)
    {
      int amazonCustNo = 5, amazonMkId = 1;
      /*List<NsIcr> nsIcrs = await _kc.NsIcrs
        .Where(n => n.CustomerId == amazonCustNo && n.IsInvFeed == 1)
        .Include(n => n.ItemNo)
        .ToListAsync();*/
      List<MkIcr> mkIcrs = await _kc.MkIcrs
            .Where(n => n.MarketId == amazonMkId && n.IsInvFeed == true)
            .Include(n => n.ItemNo)
            .ToListAsync();



      List<AmazonFeedDTO> serviceResponse = new List<AmazonFeedDTO>();

      //AmazonFeedDTO amazonFeedsItem = new AmazonFeedDTO();
      DateTime beforeDate = new DateTime(historyDate.AddDays(-1).Year, historyDate.AddDays(-1).Month, historyDate.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(historyDate.AddDays(1).Year, historyDate.AddDays(1).Month, historyDate.AddDays(1).Day, 0, 0, 0);
      InvFeedsReport invFeedReport = await _kc.InvFeedsReports
        .Where(ifr => (DateTime)ifr.CreatedDate > beforeDate && (DateTime)ifr.CreatedDate < afterDate)
        .Where(ifr => ifr.IsApproved == true)
        .Include(x => x.InvFeedsItems)
        .OrderByDescending(x => x.CreatedDate)
        .FirstOrDefaultAsync();

      if (invFeedReport == null) return serviceResponse;

      AmazonFeedDTO amazonFeedDTO = new AmazonFeedDTO();


      List<InvFeedsReportItem> invFeedsReportItemList = await _kc.InvFeedsReportItems
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .Include(i => i.InvFeedsRepItemDetails)
        .ToListAsync();
      // Get Info. about BANC
      BpmLocation bancAmazon = await _kc.BpmLocations
        .Where(b => b.LocationId == 4)
        .FirstOrDefaultAsync();
      // Get Info. about Mainsl
      BpmLocation mainslAmazon = await _kc.BpmLocations
        .Where(m => m.LocationId == 25)
        .FirstOrDefaultAsync();
      int index = 0;
      InvFeedsReportItem tmpDTO = new InvFeedsReportItem();
      InvFeedsRepItemLoc tmpLoc = new InvFeedsRepItemLoc();
      MkIcr custItem = new MkIcr();

      while (index < invFeedsReportItemList.Count)
      {
        tmpDTO = invFeedsReportItemList[index];
        if (tmpDTO != null)
        {
          InvFeedsRepItemDetail invFeedsRepItem = await _kc.InvFeedsRepItemDetails
            .Where(i => i.InvFeedsReportItemId == tmpDTO.InvFeedsReportItemId && i.CustomerId == amazonCustNo)
            .Include(i => i.InvFeedsRepItemLocs)
            .FirstOrDefaultAsync();

          if (invFeedsRepItem != null)
          {
            BpmItem bpmItem = await _kc.BpmItems
              .Where(b => b.ItemNoId == tmpDTO.ItemNoId)
              .FirstOrDefaultAsync();
            /*
            NsIcr custItem = await _kc.NsIcrs
              .Where(c => c.ItemNoId == tmpDTO.ItemNoId)
              .Where(c => c.CustomerId == amazonCustNo)
              .FirstOrDefaultAsync();
            */
            custItem = await _kc.MkIcrs
             .Where(c => c.ItemNoId == tmpDTO.ItemNoId)
             .Where(c => c.MarketId == amazonMkId)
             .FirstOrDefaultAsync();

            if (custItem != null) // NEED TO RE VISIT for Custom SKU!!!
            {
              tmpLoc = invFeedsRepItem.InvFeedsRepItemLocs.Where(i => i.LocationId == mainslAmazon.LocationId).FirstOrDefault();
              if (tmpLoc != null)
              {
                amazonFeedDTO = new AmazonFeedDTO()
                {
                  SKU = custItem.CustSku,
                  UPC = custItem.CustUpc,
                  ASIN = custItem.CustAsin,
                  Title = bpmItem.Description,
                  WarehouseId = mainslAmazon.LocIdAmazon,
                  WarehouseName = mainslAmazon.LocIdOverstock,
                  QtyAvail = (int)tmpLoc.QtyAvail,
                  Status = "ACTIVE"
                };
              }
              else
              {
                amazonFeedDTO = new AmazonFeedDTO()
                {
                  SKU = custItem.CustSku,
                  UPC = custItem.CustUpc,
                  ASIN = custItem.CustAsin,
                  Title = bpmItem.Description,
                  WarehouseId = mainslAmazon.LocIdAmazon,
                  WarehouseName = mainslAmazon.LocIdOverstock,
                  QtyAvail = 0,
                  Status = "ACTIVE"
                };
              }
              serviceResponse.Add(amazonFeedDTO);
              tmpLoc = invFeedsRepItem.InvFeedsRepItemLocs.Where(i => i.LocationId == bancAmazon.LocationId).FirstOrDefault();
              if (tmpLoc != null)
              {
                amazonFeedDTO = new AmazonFeedDTO()
                {
                  SKU = custItem.CustSku,
                  UPC = custItem.CustUpc,
                  ASIN = custItem.CustAsin,
                  Title = bpmItem.Description,
                  WarehouseId = bancAmazon.LocIdAmazon,
                  WarehouseName = bancAmazon.LocName,
                  QtyAvail = (int)tmpLoc.QtyAvail,
                  Status = "ACTIVE"
                };
              }
              else
              {
                amazonFeedDTO = new AmazonFeedDTO()
                {
                  SKU = custItem.CustSku,
                  UPC = custItem.CustUpc,
                  ASIN = custItem.CustAsin,
                  Title = bpmItem.Description,
                  WarehouseId = bancAmazon.LocIdAmazon,
                  WarehouseName = bancAmazon.LocName,
                  QtyAvail = 0,
                  Status = "ACTIVE"

                };
              }

              serviceResponse.Add(amazonFeedDTO);
            }
          }
          //invFeedsReportItemList.Remove(tmpDTO);
        }
        index++;
      } // End of while
      return serviceResponse;
    }


    // Creating Amazon Feeding List
    // Created & Modified by Brian Yi on 09/21/2022
    public async Task<List<AmazonFeedDTO>> GetInvFeedsAmazonRev(int locId, DateTime historyDate)
    {
      int amazonCustNo = 5, amazonMkId = 1, bancId = 4, mainslId = 25, swcaftId = 54, bascId = 62, prsmCast = 51, prsmCalt = 67, zinusTracyId = 57, zinusChsId = 108;
      //int obsoleteStatus = 6;
      /*
      List<NsIcr> nsIcrs = await _kc.NsIcrs
        .Where(n => n.CustomerId == amazonCustNo && n.IsInvFeed == 1)
        .Include(n => n.ItemNo)
        .ToListAsync();
      */
      List<MkIcr> mkIcrs = await _kc.MkIcrs
            .Where(n => n.MarketId == amazonMkId && n.IsInvFeed == true)
            .Include(n => n.ItemNo)
            .ToListAsync();

      List<AmazonFeedDTO> serviceResponse = new List<AmazonFeedDTO>();
      AmazonFeedDTO amazonFeedsItem = new AmazonFeedDTO();
      DateTime beforeDate = new DateTime(historyDate.AddDays(-1).Year, historyDate.AddDays(-1).Month, historyDate.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(historyDate.AddDays(1).Year, historyDate.AddDays(1).Month, historyDate.AddDays(1).Day, 0, 0, 0);
      InvFeedsReport invFeedReport = await _kc.InvFeedsReports
        .Where(ifr => (DateTime)ifr.CreatedDate > beforeDate && (DateTime)ifr.CreatedDate < afterDate)
        .Where(ifr => ifr.IsApproved == true)
        .Include(x => x.InvFeedsItems)
        .OrderByDescending(x => x.CreatedDate)
        .FirstOrDefaultAsync();

      if (invFeedReport == null) return serviceResponse;

      AmazonFeedDTO amazonFeedDTO = new AmazonFeedDTO();

      List<InvFeedsRepTableDetail> invFeedsRepTableDetails = await _kc.InvFeedsRepTableDetails
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .ToListAsync();

      /*
      List<InvFeedsReportItem> invFeedsReportItemList = await _kc.InvFeedsReportItems
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .Include(i => i.InvFeedsRepItemDetails)
        .ToListAsync();
      */
      BpmLocation bpmLoc = await _kc.BpmLocations
        .Where(b => b.LocationId == locId)
        .FirstOrDefaultAsync();
      int index = 0;
      InvFeedsRepTableDetail tmpDto = new InvFeedsRepTableDetail();
      //InvFeedsReportItem tmpDTO = new InvFeedsReportItem();
      InvFeedsRepItemLoc tmpLoc = new InvFeedsRepItemLoc();

      //NsIcr tmpModel = new NsIcr();
      MkIcr tmpModel = new MkIcr();
      //InvFeedsRepItemDetail tmpDto = new InvFeedsRepItemDetail();

      while (index < mkIcrs.Count)
      {
        tmpModel = mkIcrs[index];
        tmpDto = invFeedsRepTableDetails.Where(i => i.ItemNoId == tmpModel.ItemNoId).FirstOrDefault();
        //        tmpDTO = invFeedsReportItemList.Where(i => i.ItemNoId == tmpModel.ItemNoId).FirstOrDefault();

        if (tmpDto == null)
        {
          amazonFeedDTO = new AmazonFeedDTO()
          {
            SKU = tmpModel.CustSku,
            UPC = tmpModel.CustUpc,
            ASIN = tmpModel.CustAsin,
            Title = tmpModel.ItemNo.Description,
            WarehouseId = (bpmLoc.LocIdAdds == "" ? bpmLoc.LocIdAdds : bpmLoc.LocIdAmazon),
            WarehouseName = (locId == 25 ? bpmLoc.LocIdOverstock : bpmLoc.LocName),
            QtyAvail = 0,
            Status = (tmpModel.ItemNo.ItemStatusId == obsoleteStatus ? "OBSOLETE" : "ACTIVE")
          };
          if (amazonFeedDTO.QtyAvail < 0) amazonFeedDTO.QtyAvail = 0;
          // if (amazonFeedDTO.ASIN == "B08DDF4JB7")
          // { Console.WriteLine("Something fish"); }
          serviceResponse.Add(amazonFeedDTO);
        }
        else
        {
          /*if (locId == bancId)
          {
            if (tmpDto.AmazonQtyBanc > 0)
            {
              amazonFeedDTO = new AmazonFeedDTO()
              {
                SKU = tmpModel.CustSku,
                UPC = tmpModel.CustUpc,
                ASIN = tmpModel.CustAsin,
                Title = tmpModel.ItemNo.Description,
                WarehouseId = bpmLoc.LocIdAdds,
                WarehouseName = (locId == bancId ? bpmLoc.LocIdOverstock : bpmLoc.LocName),
                QtyAvail = (int)tmpDto.AmazonQtyBanc, //(invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0),
                Status = (tmpModel.ItemNo.ItemStatusId == obsoleteStatus ? "OBSOLETE" : "ACTIVE")
              };
            }
            else
            {
              amazonFeedDTO = new AmazonFeedDTO()
              {
                SKU = tmpModel.CustSku,
                UPC = tmpModel.CustUpc,
                ASIN = tmpModel.CustAsin,
                Title = tmpModel.ItemNo.Description,
                WarehouseId = bpmLoc.LocIdAdds,
                WarehouseName = (locId == bancId ? bpmLoc.LocIdOverstock : bpmLoc.LocName),
                QtyAvail = 0,
                Status = (tmpModel.ItemNo.ItemStatusId == obsoleteStatus ? "OBSOLETE" : "ACTIVE")
              };
            }
            if (amazonFeedDTO.QtyAvail < 0) amazonFeedDTO.QtyAvail = 0;
            serviceResponse.Add(amazonFeedDTO);
          }
          else if (locId == bascId)
          {
            if (tmpDto.AmazonQtyBasc > 0)
            {
              amazonFeedDTO = new AmazonFeedDTO()
              {
                SKU = tmpModel.CustSku,
                UPC = tmpModel.CustUpc,
                ASIN = tmpModel.CustAsin,
                Title = tmpModel.ItemNo.Description,
                WarehouseId = bpmLoc.LocIdAdds,
                WarehouseName = (locId == bascId ? bpmLoc.LocIdOverstock : bpmLoc.LocName),
                QtyAvail = (int)tmpDto.AmazonQtyBasc, //(invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0),
                Status = (tmpModel.ItemNo.ItemStatusId == obsoleteStatus ? "OBSOLETE" : "ACTIVE")
              };
            }
            else
            {
              amazonFeedDTO = new AmazonFeedDTO()
              {
                SKU = tmpModel.CustSku,
                UPC = tmpModel.CustUpc,
                ASIN = tmpModel.CustAsin,
                Title = tmpModel.ItemNo.Description,
                WarehouseId = bpmLoc.LocIdAdds,
                WarehouseName = (locId == bascId ? bpmLoc.LocIdOverstock : bpmLoc.LocName),
                QtyAvail = 0,
                Status = (tmpModel.ItemNo.ItemStatusId == obsoleteStatus ? "OBSOLETE" : "ACTIVE")
              };
            }
            if (amazonFeedDTO.QtyAvail < 0) amazonFeedDTO.QtyAvail = 0;
            serviceResponse.Add(amazonFeedDTO);
          }
          else*/
          if (locId == mainslId)
          {
            if (tmpDto.AmazonQtyMainSl > 0)
            {
              amazonFeedDTO = new AmazonFeedDTO()
              {
                SKU = tmpModel.CustSku,
                UPC = tmpModel.CustUpc,
                ASIN = tmpModel.CustAsin,
                Title = tmpModel.ItemNo.Description,
                WarehouseId = bpmLoc.LocIdAdds,
                WarehouseName = (locId == mainslId ? bpmLoc.LocIdOverstock : bpmLoc.LocName),
                QtyAvail = (int)tmpDto.AmazonQtyMainSl, //(invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0),
                Status = (tmpModel.ItemNo.ItemStatusId == obsoleteStatus ? "OBSOLETE" : "ACTIVE")
              };
            }
            else
            {
              amazonFeedDTO = new AmazonFeedDTO()
              {
                SKU = tmpModel.CustSku,
                UPC = tmpModel.CustUpc,
                ASIN = tmpModel.CustAsin,
                Title = tmpModel.ItemNo.Description,
                WarehouseId = bpmLoc.LocIdAdds,
                WarehouseName = (locId == mainslId ? bpmLoc.LocIdOverstock : bpmLoc.LocName),
                QtyAvail = 0,
                Status = (tmpModel.ItemNo.ItemStatusId == obsoleteStatus ? "OBSOLETE" : "ACTIVE")
              };
            }
            if (amazonFeedDTO.QtyAvail < 0) amazonFeedDTO.QtyAvail = 0;
            serviceResponse.Add(amazonFeedDTO);
          }
          else if (locId == swcaftId)
          {
            if (tmpDto.AmazonQtySwcaft > 0)
            {
              amazonFeedDTO = new AmazonFeedDTO()
              {
                SKU = tmpModel.CustSku,
                UPC = tmpModel.CustUpc,
                ASIN = tmpModel.CustAsin,
                Title = tmpModel.ItemNo.Description,
                WarehouseId = bpmLoc.LocIdAdds,
                WarehouseName = (locId == swcaftId ? bpmLoc.LocIdOverstock : bpmLoc.LocName),
                QtyAvail = (int)tmpDto.AmazonQtySwcaft, //(invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0),
                Status = (tmpModel.ItemNo.ItemStatusId == obsoleteStatus ? "OBSOLETE" : "ACTIVE")
              };
            }
            else
            {
              amazonFeedDTO = new AmazonFeedDTO()
              {
                SKU = tmpModel.CustSku,
                UPC = tmpModel.CustUpc,
                ASIN = tmpModel.CustAsin,
                Title = tmpModel.ItemNo.Description,
                WarehouseId = bpmLoc.LocIdAdds,
                WarehouseName = (locId == swcaftId ? bpmLoc.LocIdOverstock : bpmLoc.LocName),
                QtyAvail = 0,
                Status = (tmpModel.ItemNo.ItemStatusId == obsoleteStatus ? "OBSOLETE" : "ACTIVE")
              };
            }
            if (amazonFeedDTO.QtyAvail < 0) amazonFeedDTO.QtyAvail = 0;
            serviceResponse.Add(amazonFeedDTO);

          }
          /*else if (locId == prsmCast)
          {
            if (tmpDto.AmazonQtyPrismCast > 0)
            {
              amazonFeedDTO = new AmazonFeedDTO()
              {
                SKU = tmpModel.CustSku,
                UPC = tmpModel.CustUpc,
                ASIN = tmpModel.CustAsin,
                Title = tmpModel.ItemNo.Description,
                WarehouseId = bpmLoc.LocIdAdds,
                WarehouseName = (locId == prsmCast ? bpmLoc.LocIdOverstock : bpmLoc.LocName),
                QtyAvail = (int)tmpDto.AmazonQtyPrismCast, //(invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0),
                Status = (tmpModel.ItemNo.ItemStatusId == obsoleteStatus ? "OBSOLETE" : "ACTIVE")
              };
            }
            else
            {
              amazonFeedDTO = new AmazonFeedDTO()
              {
                SKU = tmpModel.CustSku,
                UPC = tmpModel.CustUpc,
                ASIN = tmpModel.CustAsin,
                Title = tmpModel.ItemNo.Description,
                WarehouseId = bpmLoc.LocIdAdds,
                WarehouseName = (locId == prsmCast ? bpmLoc.LocIdOverstock : bpmLoc.LocName),
                QtyAvail = 0,
                Status = (tmpModel.ItemNo.ItemStatusId == obsoleteStatus ? "OBSOLETE" : "ACTIVE")
              };
            }
            if (amazonFeedDTO.QtyAvail < 0) amazonFeedDTO.QtyAvail = 0;
            serviceResponse.Add(amazonFeedDTO);
          }
          else if (locId == prsmCalt)
          {
            if (tmpDto.AmazonQtyPrismCalt > 0)
            {
              amazonFeedDTO = new AmazonFeedDTO()
              {
                SKU = tmpModel.CustSku,
                UPC = tmpModel.CustUpc,
                ASIN = tmpModel.CustAsin,
                Title = tmpModel.ItemNo.Description,
                WarehouseId = bpmLoc.LocIdAdds,
                WarehouseName = (locId == prsmCalt ? bpmLoc.LocIdOverstock : bpmLoc.LocName),
                QtyAvail = (int)tmpDto.AmazonQtyPrismCalt, //(invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0),
                Status = (tmpModel.ItemNo.ItemStatusId == obsoleteStatus ? "OBSOLETE" : "ACTIVE")
              };
            }
            else
            {
              amazonFeedDTO = new AmazonFeedDTO()
              {
                SKU = tmpModel.CustSku,
                UPC = tmpModel.CustUpc,
                ASIN = tmpModel.CustAsin,
                Title = tmpModel.ItemNo.Description,
                WarehouseId = bpmLoc.LocIdAdds,
                WarehouseName = (locId == prsmCast ? bpmLoc.LocIdOverstock : bpmLoc.LocName),
                QtyAvail = 0,
                Status = (tmpModel.ItemNo.ItemStatusId == obsoleteStatus ? "OBSOLETE" : "ACTIVE")
              };
            }
            if (amazonFeedDTO.QtyAvail < 0) amazonFeedDTO.QtyAvail = 0;
            serviceResponse.Add(amazonFeedDTO);
          }*/
          else if (locId == zinusTracyId)
          {
            if (tmpDto.AmazonQtyZinusTracy > 0)
            {
              amazonFeedDTO = new AmazonFeedDTO()
              {
                SKU = tmpModel.CustSku,
                UPC = tmpModel.CustUpc,
                ASIN = tmpModel.CustAsin,
                Title = tmpModel.ItemNo.Description,
                WarehouseId = bpmLoc.LocIdAmazon,
                WarehouseName = (locId == zinusTracyId ? bpmLoc.LocIdOverstock : bpmLoc.LocName),
                QtyAvail = (int)tmpDto.AmazonQtyZinusTracy, //(invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0),
                Status = (tmpModel.ItemNo.ItemStatusId == obsoleteStatus ? "OBSOLETE" : "ACTIVE")
              };
            }
            else
            {
              amazonFeedDTO = new AmazonFeedDTO()
              {
                SKU = tmpModel.CustSku,
                UPC = tmpModel.CustUpc,
                ASIN = tmpModel.CustAsin,
                Title = tmpModel.ItemNo.Description,
                WarehouseId = bpmLoc.LocIdAmazon,
                WarehouseName = (locId == zinusTracyId ? bpmLoc.LocIdOverstock : bpmLoc.LocName),
                QtyAvail = 0,
                Status = (tmpModel.ItemNo.ItemStatusId == obsoleteStatus ? "OBSOLETE" : "ACTIVE")
              };
            }
            if (amazonFeedDTO.QtyAvail < 0) amazonFeedDTO.QtyAvail = 0;
            serviceResponse.Add(amazonFeedDTO);
          }
          else if (locId == zinusChsId)
          {
            if (tmpDto.AmazonQtyZinusChs > 0)
            {
              amazonFeedDTO = new AmazonFeedDTO()
              {
                SKU = tmpModel.CustSku,
                UPC = tmpModel.CustUpc,
                ASIN = tmpModel.CustAsin,
                Title = tmpModel.ItemNo.Description,
                WarehouseId = bpmLoc.LocIdAmazon,
                WarehouseName = (locId == zinusChsId ? bpmLoc.LocIdOverstock : bpmLoc.LocName),
                QtyAvail = (int)tmpDto.AmazonQtyZinusChs, //(invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0),
                Status = (tmpModel.ItemNo.ItemStatusId == obsoleteStatus ? "OBSOLETE" : "ACTIVE")
              };
            }
            else
            {
              amazonFeedDTO = new AmazonFeedDTO()
              {
                SKU = tmpModel.CustSku,
                UPC = tmpModel.CustUpc,
                ASIN = tmpModel.CustAsin,
                Title = tmpModel.ItemNo.Description,
                WarehouseId = bpmLoc.LocIdAmazon,
                WarehouseName = (locId == zinusChsId ? bpmLoc.LocIdOverstock : bpmLoc.LocName),
                QtyAvail = 0,
                Status = (tmpModel.ItemNo.ItemStatusId == obsoleteStatus ? "OBSOLETE" : "ACTIVE")
              };
            }
            if (amazonFeedDTO.QtyAvail < 0) amazonFeedDTO.QtyAvail = 0;
            // if(amazonFeedDTO.ASIN == "B08DDF4JB7")
            // { Console.WriteLine("Something fish");}
            serviceResponse.Add(amazonFeedDTO);
          }// End of if
        }
        index++;
      }

      return serviceResponse;
    }



    // Creating Amazon Feeding List
    // Created & Modified by Brian Yi on 09/09/2021
    // Added BASC on 06/03/2022
    public async Task<List<AmazonFeedDTO>> GetInvFeedsAmazon(int locId, DateTime historyDate)
    {
      int amazonCustNo = 5, amazonMkId = 1;
      //int obsoleteStatus = 6;
      /*
      List<NsIcr> nsIcrs = await _kc.NsIcrs
        .Where(n => n.CustomerId == amazonCustNo && n.IsInvFeed == 1)
        .Include(n => n.ItemNo)
        .ToListAsync();
      */
      List<MkIcr> mkIcrs = await _kc.MkIcrs
            .Where(n => n.MarketId == amazonMkId && n.IsInvFeed == true)
            .Include(n => n.ItemNo)
            .ToListAsync();

      List<AmazonFeedDTO> serviceResponse = new List<AmazonFeedDTO>();
      AmazonFeedDTO amazonFeedsItem = new AmazonFeedDTO();
      DateTime beforeDate = new DateTime(historyDate.AddDays(-1).Year, historyDate.AddDays(-1).Month, historyDate.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(historyDate.AddDays(1).Year, historyDate.AddDays(1).Month, historyDate.AddDays(1).Day, 0, 0, 0);
      InvFeedsReport invFeedReport = await _kc.InvFeedsReports
        .Where(ifr => (DateTime)ifr.CreatedDate > beforeDate && (DateTime)ifr.CreatedDate < afterDate)
        .Where(ifr => ifr.IsApproved == true)
        .Include(x => x.InvFeedsItems)
        .OrderByDescending(x => x.CreatedDate)
        .FirstOrDefaultAsync();

      if (invFeedReport == null) return serviceResponse;

      AmazonFeedDTO amazonFeedDTO = new AmazonFeedDTO();

      /*
      // Added on 09/09/2021
      List<NsIcr> feedableList = await _kc.NsIcrs
        .Where(f => f.CustomerId == amazonCustNo && f.IsInvFeed == 1)
        .Include(f => f.ItemNo)
        .ToListAsync();

      serviceResponse = feedableList.Select(f =>
      new AmazonFeedDTO()
      { 
        SKU = f.CustSku,
        UPC = f.CustUpc,
        ASIN = f.CustAsin,
        Title = f.ItemNo.Description,
        Status = (f.ItemNo.ItemStatusId >= obsoleteStatus ? "OBSOLETE" : "ACTIVE")
      }).ToList();

      // Need s new start

      */
      List<InvFeedsReportItem> invFeedsReportItemList = await _kc.InvFeedsReportItems
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .Include(i => i.InvFeedsRepItemDetails)
        .ToListAsync();
      BpmLocation bpmLoc = await _kc.BpmLocations
        .Where(b => b.LocationId == locId)
        .FirstOrDefaultAsync();
      int index = 0;
      InvFeedsReportItem tmpDTO = new InvFeedsReportItem();
      InvFeedsRepItemLoc tmpLoc = new InvFeedsRepItemLoc();

      //NsIcr tmpModel = new NsIcr();
      MkIcr tmpModel = new MkIcr();
      InvFeedsRepItemDetail invFeedsRepItem = new InvFeedsRepItemDetail();

      while (index < mkIcrs.Count)
      {
        tmpModel = mkIcrs[index];
        tmpDTO = invFeedsReportItemList.Where(i => i.ItemNoId == tmpModel.ItemNoId).FirstOrDefault();

        if (tmpDTO == null)
        {
          amazonFeedDTO = new AmazonFeedDTO()
          {
            SKU = tmpModel.CustSku,
            UPC = tmpModel.CustUpc,
            ASIN = tmpModel.CustAsin,
            Title = tmpModel.ItemNo.Description,
            WarehouseId = bpmLoc.LocIdAdds,
            WarehouseName = (locId == 25 ? bpmLoc.LocIdOverstock : bpmLoc.LocName),
            QtyAvail = 0,
            Status = (tmpModel.ItemNo.ItemStatusId >= obsoleteStatus ? "OBSOLETE" : "ACTIVE")
          };
          if (amazonFeedDTO.QtyAvail < 0) amazonFeedDTO.QtyAvail = 0;
          serviceResponse.Add(amazonFeedDTO);
        }
        else
        {
          invFeedsRepItem = await _kc.InvFeedsRepItemDetails
            .Where(i => i.InvFeedsReportItemId == tmpDTO.InvFeedsReportItemId && i.CustomerId == amazonCustNo)
            .Include(i => i.InvFeedsRepItemLocs)
            .FirstOrDefaultAsync();
          if (invFeedsRepItem != null)
          {
            tmpLoc = invFeedsRepItem.InvFeedsRepItemLocs.Where(i => i.LocationId == locId).FirstOrDefault();
            if (tmpLoc != null)
            {
              amazonFeedDTO = new AmazonFeedDTO()
              {
                SKU = tmpModel.CustSku,
                UPC = tmpModel.CustUpc,
                ASIN = tmpModel.CustAsin,
                Title = tmpModel.ItemNo.Description,
                WarehouseId = bpmLoc.LocIdAdds,
                WarehouseName = (locId == 25 ? bpmLoc.LocIdOverstock : bpmLoc.LocName),
                QtyAvail = (invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0),
                Status = (tmpModel.ItemNo.ItemStatusId >= obsoleteStatus ? "OBSOLETE" : "ACTIVE")
              };
            }
            else
            {
              amazonFeedDTO = new AmazonFeedDTO()
              {
                SKU = tmpModel.CustSku,
                UPC = tmpModel.CustUpc,
                ASIN = tmpModel.CustAsin,
                Title = tmpModel.ItemNo.Description,
                WarehouseId = bpmLoc.LocIdAdds,
                WarehouseName = (locId == 25 ? bpmLoc.LocIdOverstock : bpmLoc.LocName),
                QtyAvail = 0,
                Status = (tmpModel.ItemNo.ItemStatusId >= obsoleteStatus ? "OBSOLETE" : "ACTIVE")
              };
            }
          }
          else
          {
            amazonFeedDTO = new AmazonFeedDTO()
            {
              SKU = tmpModel.CustSku,
              UPC = tmpModel.CustUpc,
              ASIN = tmpModel.CustAsin,
              Title = tmpModel.ItemNo.Description,
              WarehouseId = bpmLoc.LocIdAdds,
              WarehouseName = (locId == 25 ? bpmLoc.LocIdOverstock : bpmLoc.LocName),
              QtyAvail = 0,
              Status = (tmpModel.ItemNo.ItemStatusId >= obsoleteStatus ? "OBSOLETE" : "ACTIVE")
            };

          }
          if (amazonFeedDTO.QtyAvail < 0) amazonFeedDTO.QtyAvail = 0;
          serviceResponse.Add(amazonFeedDTO);
        }
        index++;
      }

      return serviceResponse;
    }



    // Inventory Feeds Export for Walmart
    // By Brian Yi on 9/22/22 
    public async Task<List<WalmartFeedDTO>> GetInvFeedsWalmartRev(int locId, DateTime historyDate)
    {

      List<WalmartFeedDTO> serviceResponse = new List<WalmartFeedDTO>();

      // Get Latest Inventory (Feeds) Report
      // Try to get Today's report
      int walmartCustId = 26, walmartMkId = 16, bancId = 4, mainslId = 25, swcaftId = 54, bascId = 62, prsmCastId = 51, prsmCaltId = 67, zinusTracyId = 57, zinusChsId = 108;//, bancId = 4, mainslId = 25;
      DateTime beginningDate = new DateTime(historyDate.AddDays(-1).Year, historyDate.AddDays(-1).Month, historyDate.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(historyDate.AddDays(1).Year, historyDate.AddDays(1).Month, historyDate.AddDays(1).Day, 0, 0, 0);
      InvFeedsReport invFeedReport = await _kc.InvFeedsReports
        .Where(ifr => (DateTime)ifr.CreatedDate > beginningDate && (DateTime)ifr.CreatedDate < afterDate)
        .Where(ifr => ifr.IsApproved == true)
        .Include(x => x.InvFeedsItems)
        .OrderByDescending(x => x.CreatedDate)
        .FirstOrDefaultAsync();

      List<MkIcr> walmartIcrs = await _kc.MkIcrs
        .Where(icrs => icrs.MarketId == walmartMkId && icrs.IsInvFeed == true)
        .ToListAsync();

      if (invFeedReport == null) return serviceResponse;

      WalmartFeedDTO walmartDTO = new WalmartFeedDTO();

      List<InvFeedsRepTableDetail> invFeedsRepTableDetails = await _kc.InvFeedsRepTableDetails
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .ToListAsync();
      /*
      List<InvFeedsReportItem> invFeedsReportItemList = await _kc.InvFeedsReportItems
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .Include(i => i.InvFeedsRepItemDetails)
        .ToListAsync();
      */

      BpmLocation bpmLoc = await _kc.BpmLocations
        .Where(b => b.LocationId == locId)
        .FirstOrDefaultAsync();
      int index = 0;
      //InvFeedsReportItem tmpDTO = new InvFeedsReportItem();
      InvFeedsRepTableDetail tmpDto = new InvFeedsRepTableDetail();
      //InvFeedsRepItemLoc tmpLoc = new InvFeedsRepItemLoc();

      serviceResponse = walmartIcrs.Select(wi =>
      new WalmartFeedDTO()
      {
        SKU = wi.CustSku,
        Qty = 0,
        AvailabilityCode = "AC (Standard Availability Code)",
        FulfillmentLagTime = "",
      }).ToList();
      WalmartFeedDTO tmpWalmartDTO = new WalmartFeedDTO();

      //InvFeedsRepItemDetail invFeedsRepItem = new InvFeedsRepItemDetail();
      BpmItem bpmItem = new BpmItem();
      //NsIcr custItem = new NsIcr();
      MkIcr custItem01 = new MkIcr();
      MkIcr custItem02 = new MkIcr();

      int duplicateCounter = 0;

      while (index < invFeedsRepTableDetails.Count)
      {
        duplicateCounter = 1;
        tmpDto = invFeedsRepTableDetails[index];
        //tmpDTO = invFeedsReportItemList[index];
        if (tmpDto != null)
        {
          bpmItem = await _kc.BpmItems
            .Where(b => b.ItemNoId == tmpDto.ItemNoId)
            .FirstOrDefaultAsync();
          custItem01 = await _kc.MkIcrs
            .Where(c => c.ItemNoId == tmpDto.ItemNoId)
            .Where(c => c.MarketId == walmartMkId)
            .Where(c => c.IsInvFeed == true)
            .OrderBy(c => c.ItemNoId)
            .FirstOrDefaultAsync();

          custItem02 = await _kc.MkIcrs
            .Where(c => c.ItemNoId == tmpDto.ItemNoId)
            .Where(c => c.MarketId == walmartMkId)
            .Where(c => c.IsInvFeed == true)
            .OrderBy(c => c.ItemNoId)
            .LastOrDefaultAsync();

          if (custItem01 != null && custItem02 != null)
          {
            if (custItem01.CustSku != custItem02.CustSku)
            {
              duplicateCounter = 2;
            }
            else
            {
              duplicateCounter = 1;
            }
          }
          if (custItem01 == null && custItem02 == null)
          {
            goto SkipThisWalmartSKU;
          }

          if (custItem01 != null) // NEED TO RE VISIT for Custom SKU!!!
          {
            if (locId == bancId)
            {
              if (tmpDto.WalmartQtyBanc > 0)
              {
                walmartDTO = new WalmartFeedDTO()
                {
                  SKU = custItem01.CustSku,
                  AvailabilityCode = "AC (Standard Availability Code)",
                  Qty = (duplicateCounter != 0 ? (int)(tmpDto.WalmartQtyBanc / duplicateCounter) : 0),
                  FulfillmentLagTime = ""
                };
              }
              else
              {
                walmartDTO = new WalmartFeedDTO()
                {
                  SKU = custItem01.CustSku,
                  AvailabilityCode = "AC (Standard Availability Code)",
                  Qty = 0,
                  FulfillmentLagTime = ""
                };
              }
              tmpWalmartDTO = serviceResponse.FindLast(x => x.SKU == walmartDTO.SKU);
              if (tmpWalmartDTO != null)
              {
                serviceResponse.Remove(tmpWalmartDTO);
                if (walmartDTO.Qty < 0) walmartDTO.Qty = 0;
                serviceResponse.Add(walmartDTO);
              }

              if (duplicateCounter > 1)
              {
                if (tmpDto.WalmartQtyBanc > 0)
                {
                  walmartDTO = new WalmartFeedDTO()
                  {
                    SKU = custItem02.CustSku,
                    AvailabilityCode = "AC (Standard Availability Code)",
                    Qty = (duplicateCounter != 0 ? (int)(tmpDto.WalmartQtyBanc / duplicateCounter) : 0),
                    FulfillmentLagTime = ""
                  };
                }
                else
                {
                  walmartDTO = new WalmartFeedDTO()
                  {
                    SKU = custItem02.CustSku,
                    AvailabilityCode = "AC (Standard Availability Code)",
                    Qty = 0,
                    FulfillmentLagTime = ""
                  };
                }
                tmpWalmartDTO = serviceResponse.FindLast(x => x.SKU == walmartDTO.SKU);
                if (tmpWalmartDTO != null)
                {
                  serviceResponse.Remove(tmpWalmartDTO);
                  if (walmartDTO.Qty < 0) walmartDTO.Qty = 0;
                  serviceResponse.Add(walmartDTO);
                }
              }
            } // end of BANC
            else if (locId == bascId)
            {
              if (tmpDto.WalmartQtyBasc > 0)
              {
                walmartDTO = new WalmartFeedDTO()
                {
                  SKU = custItem01.CustSku,
                  AvailabilityCode = "AC (Standard Availability Code)",
                  Qty = (duplicateCounter != 0 ? (int)(tmpDto.WalmartQtyBasc / duplicateCounter) : 0),
                  FulfillmentLagTime = ""
                };
              }
              else
              {
                walmartDTO = new WalmartFeedDTO()
                {
                  SKU = custItem01.CustSku,
                  AvailabilityCode = "AC (Standard Availability Code)",
                  Qty = 0,
                  FulfillmentLagTime = ""
                };
              }
              tmpWalmartDTO = serviceResponse.FindLast(x => x.SKU == walmartDTO.SKU);
              if (tmpWalmartDTO != null)
              {
                serviceResponse.Remove(tmpWalmartDTO);
                if (walmartDTO.Qty < 0) walmartDTO.Qty = 0;
                serviceResponse.Add(walmartDTO);
              }

              if (duplicateCounter > 1)
              {
                if (tmpDto.WalmartQtyBasc > 0)
                {
                  walmartDTO = new WalmartFeedDTO()
                  {
                    SKU = custItem02.CustSku,
                    AvailabilityCode = "AC (Standard Availability Code)",
                    Qty = (duplicateCounter != 0 ? (int)(tmpDto.WalmartQtyBasc / duplicateCounter) : 0),
                    FulfillmentLagTime = ""
                  };
                }
                else
                {
                  walmartDTO = new WalmartFeedDTO()
                  {
                    SKU = custItem02.CustSku,
                    AvailabilityCode = "AC (Standard Availability Code)",
                    Qty = 0,
                    FulfillmentLagTime = ""
                  };
                }
                tmpWalmartDTO = serviceResponse.FindLast(x => x.SKU == walmartDTO.SKU);
                if (tmpWalmartDTO != null)
                {
                  serviceResponse.Remove(tmpWalmartDTO);
                  if (walmartDTO.Qty < 0) walmartDTO.Qty = 0;
                  serviceResponse.Add(walmartDTO);
                }
              }
            } // end of Basc
            else if (locId == mainslId)
            {
              if (tmpDto.WalmartQtyMainSl > 0)
              {
                walmartDTO = new WalmartFeedDTO()
                {
                  SKU = custItem01.CustSku,
                  AvailabilityCode = "AC (Standard Availability Code)",
                  Qty = (duplicateCounter != 0 ? (int)(tmpDto.WalmartQtyMainSl / duplicateCounter) : 0),
                  FulfillmentLagTime = ""
                };
              }
              else
              {
                walmartDTO = new WalmartFeedDTO()
                {
                  SKU = custItem01.CustSku,
                  AvailabilityCode = "AC (Standard Availability Code)",
                  Qty = 0,
                  FulfillmentLagTime = ""
                };
              }
              tmpWalmartDTO = serviceResponse.FindLast(x => x.SKU == walmartDTO.SKU);
              if (tmpWalmartDTO != null)
              {
                serviceResponse.Remove(tmpWalmartDTO);
                if (walmartDTO.Qty < 0) walmartDTO.Qty = 0;
                serviceResponse.Add(walmartDTO);
              }

              if (duplicateCounter > 1)
              {
                if (tmpDto.WalmartQtyMainSl > 0)
                {
                  walmartDTO = new WalmartFeedDTO()
                  {
                    SKU = custItem02.CustSku,
                    AvailabilityCode = "AC (Standard Availability Code)",
                    Qty = (duplicateCounter != 0 ? (int)(tmpDto.WalmartQtyMainSl / duplicateCounter) : 0),
                    FulfillmentLagTime = ""
                  };
                }
                else
                {
                  walmartDTO = new WalmartFeedDTO()
                  {
                    SKU = custItem02.CustSku,
                    AvailabilityCode = "AC (Standard Availability Code)",
                    Qty = 0,
                    FulfillmentLagTime = ""
                  };
                }
                tmpWalmartDTO = serviceResponse.FindLast(x => x.SKU == walmartDTO.SKU);
                if (tmpWalmartDTO != null)
                {
                  serviceResponse.Remove(tmpWalmartDTO);
                  if (walmartDTO.Qty < 0) walmartDTO.Qty = 0;
                  serviceResponse.Add(walmartDTO);
                }
              }
            } // end of MainSL
            else if (locId == swcaftId)
            {
              if (tmpDto.WalmartQtySwcaft > 0)
              {
                walmartDTO = new WalmartFeedDTO()
                {
                  SKU = custItem01.CustSku,
                  AvailabilityCode = "AC (Standard Availability Code)",
                  Qty = (duplicateCounter != 0 ? (int)(tmpDto.WalmartQtySwcaft / duplicateCounter) : 0),
                  FulfillmentLagTime = ""
                };
              }
              else
              {
                walmartDTO = new WalmartFeedDTO()
                {
                  SKU = custItem01.CustSku,
                  AvailabilityCode = "AC (Standard Availability Code)",
                  Qty = 0,
                  FulfillmentLagTime = ""
                };
              }
              tmpWalmartDTO = serviceResponse.FindLast(x => x.SKU == walmartDTO.SKU);
              if (tmpWalmartDTO != null)
              {
                serviceResponse.Remove(tmpWalmartDTO);
                if (walmartDTO.Qty < 0) walmartDTO.Qty = 0;
                serviceResponse.Add(walmartDTO);
              }

              if (duplicateCounter > 1)
              {
                if (tmpDto.WalmartQtySwcaft > 0)
                {
                  walmartDTO = new WalmartFeedDTO()
                  {
                    SKU = custItem02.CustSku,
                    AvailabilityCode = "AC (Standard Availability Code)",
                    Qty = (duplicateCounter != 0 ? (int)(tmpDto.WalmartQtySwcaft / duplicateCounter) : 0),
                    FulfillmentLagTime = ""
                  };
                }
                else
                {
                  walmartDTO = new WalmartFeedDTO()
                  {
                    SKU = custItem02.CustSku,
                    AvailabilityCode = "AC (Standard Availability Code)",
                    Qty = 0,
                    FulfillmentLagTime = ""
                  };
                }
                tmpWalmartDTO = serviceResponse.FindLast(x => x.SKU == walmartDTO.SKU);
                if (tmpWalmartDTO != null)
                {
                  serviceResponse.Remove(tmpWalmartDTO);
                  if (walmartDTO.Qty < 0) walmartDTO.Qty = 0;
                  serviceResponse.Add(walmartDTO);
                }
              }
            }// end of SWCAFT
            else if (locId == prsmCastId)
            {
              if (tmpDto.WalmartQtyPrismCast > 0)
              {
                walmartDTO = new WalmartFeedDTO()
                {
                  SKU = custItem01.CustSku,
                  AvailabilityCode = "AC (Standard Availability Code)",
                  Qty = (duplicateCounter != 0 ? (int)(tmpDto.WalmartQtyPrismCast / duplicateCounter) : 0),
                  FulfillmentLagTime = ""
                };
              }
              else
              {
                walmartDTO = new WalmartFeedDTO()
                {
                  SKU = custItem01.CustSku,
                  AvailabilityCode = "AC (Standard Availability Code)",
                  Qty = 0,
                  FulfillmentLagTime = ""
                };
              }
              tmpWalmartDTO = serviceResponse.FindLast(x => x.SKU == walmartDTO.SKU);
              if (tmpWalmartDTO != null)
              {
                serviceResponse.Remove(tmpWalmartDTO);
                if (walmartDTO.Qty < 0) walmartDTO.Qty = 0;
                serviceResponse.Add(walmartDTO);
              }

              if (duplicateCounter > 1)
              {
                if (tmpDto.WalmartQtyPrismCast > 0)
                {
                  walmartDTO = new WalmartFeedDTO()
                  {
                    SKU = custItem02.CustSku,
                    AvailabilityCode = "AC (Standard Availability Code)",
                    Qty = (duplicateCounter != 0 ? (int)(tmpDto.WalmartQtyPrismCast / duplicateCounter) : 0),
                    FulfillmentLagTime = ""
                  };
                }
                else
                {
                  walmartDTO = new WalmartFeedDTO()
                  {
                    SKU = custItem02.CustSku,
                    AvailabilityCode = "AC (Standard Availability Code)",
                    Qty = 0,
                    FulfillmentLagTime = ""
                  };
                }
                tmpWalmartDTO = serviceResponse.FindLast(x => x.SKU == walmartDTO.SKU);
                if (tmpWalmartDTO != null)
                {
                  serviceResponse.Remove(tmpWalmartDTO);
                  if (walmartDTO.Qty < 0) walmartDTO.Qty = 0;
                  serviceResponse.Add(walmartDTO);
                }
              }
            }// end of Prism-Cast
            else if (locId == prsmCaltId)
            {
              if (tmpDto.WalmartQtyPrismCalt > 0)
              {
                walmartDTO = new WalmartFeedDTO()
                {
                  SKU = custItem01.CustSku,
                  AvailabilityCode = "AC (Standard Availability Code)",
                  Qty = (duplicateCounter != 0 ? (int)(tmpDto.WalmartQtyPrismCalt / duplicateCounter) : 0),
                  FulfillmentLagTime = ""
                };
              }
              else
              {
                walmartDTO = new WalmartFeedDTO()
                {
                  SKU = custItem01.CustSku,
                  AvailabilityCode = "AC (Standard Availability Code)",
                  Qty = 0,
                  FulfillmentLagTime = ""
                };
              }
              tmpWalmartDTO = serviceResponse.FindLast(x => x.SKU == walmartDTO.SKU);
              if (tmpWalmartDTO != null)
              {
                serviceResponse.Remove(tmpWalmartDTO);
                if (walmartDTO.Qty < 0) walmartDTO.Qty = 0;
                serviceResponse.Add(walmartDTO);
              }

              if (duplicateCounter > 1)
              {
                if (tmpDto.WalmartQtyPrismCalt > 0)
                {
                  walmartDTO = new WalmartFeedDTO()
                  {
                    SKU = custItem02.CustSku,
                    AvailabilityCode = "AC (Standard Availability Code)",
                    Qty = (duplicateCounter != 0 ? (int)(tmpDto.WalmartQtyPrismCalt / duplicateCounter) : 0),
                    FulfillmentLagTime = ""
                  };
                }
                else
                {
                  walmartDTO = new WalmartFeedDTO()
                  {
                    SKU = custItem02.CustSku,
                    AvailabilityCode = "AC (Standard Availability Code)",
                    Qty = 0,
                    FulfillmentLagTime = ""
                  };
                }
                tmpWalmartDTO = serviceResponse.FindLast(x => x.SKU == walmartDTO.SKU);
                if (tmpWalmartDTO != null)
                {
                  serviceResponse.Remove(tmpWalmartDTO);
                  if (walmartDTO.Qty < 0) walmartDTO.Qty = 0;
                  serviceResponse.Add(walmartDTO);
                }
              }
            }// end of Prism-Calt
            else if (locId == zinusTracyId)
            {
              if (tmpDto.WalmartQtyZinusTracy > 0)
              {
                walmartDTO = new WalmartFeedDTO()
                {
                  SKU = custItem01.CustSku,
                  AvailabilityCode = "AC (Standard Availability Code)",
                  Qty = (duplicateCounter != 0 ? (int)(tmpDto.WalmartQtyZinusTracy / duplicateCounter) : 0),
                  FulfillmentLagTime = ""
                };
              }
              else
              {
                walmartDTO = new WalmartFeedDTO()
                {
                  SKU = custItem01.CustSku,
                  AvailabilityCode = "AC (Standard Availability Code)",
                  Qty = 0,
                  FulfillmentLagTime = ""
                };
              }
              tmpWalmartDTO = serviceResponse.FindLast(x => x.SKU == walmartDTO.SKU);
              if (tmpWalmartDTO != null)
              {
                serviceResponse.Remove(tmpWalmartDTO);
                if (walmartDTO.Qty < 0) walmartDTO.Qty = 0;
                serviceResponse.Add(walmartDTO);
              }

              if (duplicateCounter > 1)
              {
                if (tmpDto.WalmartQtyZinusTracy > 0)
                {
                  walmartDTO = new WalmartFeedDTO()
                  {
                    SKU = custItem02.CustSku,
                    AvailabilityCode = "AC (Standard Availability Code)",
                    Qty = (duplicateCounter != 0 ? (int)(tmpDto.WalmartQtyZinusTracy / duplicateCounter) : 0),
                    FulfillmentLagTime = ""
                  };
                }
                else
                {
                  walmartDTO = new WalmartFeedDTO()
                  {
                    SKU = custItem02.CustSku,
                    AvailabilityCode = "AC (Standard Availability Code)",
                    Qty = 0,
                    FulfillmentLagTime = ""
                  };
                }
                tmpWalmartDTO = serviceResponse.FindLast(x => x.SKU == walmartDTO.SKU);
                if (tmpWalmartDTO != null)
                {
                  serviceResponse.Remove(tmpWalmartDTO);
                  if (walmartDTO.Qty < 0) walmartDTO.Qty = 0;
                  serviceResponse.Add(walmartDTO);
                }
              }
            }// end of Zinus-Tracy
            else if (locId == zinusChsId)
            {
              if (tmpDto.WalmartQtyZinusChs > 0)
              {
                walmartDTO = new WalmartFeedDTO()
                {
                  SKU = custItem01.CustSku,
                  AvailabilityCode = "AC (Standard Availability Code)",
                  Qty = (duplicateCounter != 0 ? (int)(tmpDto.WalmartQtyZinusChs / duplicateCounter) : 0),
                  FulfillmentLagTime = ""
                };
              }
              else
              {
                walmartDTO = new WalmartFeedDTO()
                {
                  SKU = custItem01.CustSku,
                  AvailabilityCode = "AC (Standard Availability Code)",
                  Qty = 0,
                  FulfillmentLagTime = ""
                };
              }
              tmpWalmartDTO = serviceResponse.FindLast(x => x.SKU == walmartDTO.SKU);
              if (tmpWalmartDTO != null)
              {
                serviceResponse.Remove(tmpWalmartDTO);
                if (walmartDTO.Qty < 0) walmartDTO.Qty = 0;
                serviceResponse.Add(walmartDTO);
              }

              if (duplicateCounter > 1)
              {
                if (tmpDto.WalmartQtyZinusChs > 0)
                {
                  walmartDTO = new WalmartFeedDTO()
                  {
                    SKU = custItem02.CustSku,
                    AvailabilityCode = "AC (Standard Availability Code)",
                    Qty = (duplicateCounter != 0 ? (int)(tmpDto.WalmartQtyZinusChs / duplicateCounter) : 0),
                    FulfillmentLagTime = ""
                  };
                }
                else
                {
                  walmartDTO = new WalmartFeedDTO()
                  {
                    SKU = custItem02.CustSku,
                    AvailabilityCode = "AC (Standard Availability Code)",
                    Qty = 0,
                    FulfillmentLagTime = ""
                  };
                }
                tmpWalmartDTO = serviceResponse.FindLast(x => x.SKU == walmartDTO.SKU);
                if (tmpWalmartDTO != null)
                {
                  serviceResponse.Remove(tmpWalmartDTO);
                  if (walmartDTO.Qty < 0) walmartDTO.Qty = 0;
                  serviceResponse.Add(walmartDTO);
                }
              }
            }// end of Zinus-Chs
          }
        }
      SkipThisWalmartSKU:
        index++;
      } // End of while

      return serviceResponse;
    }

    // Inventory Feeds Export for Walmart
    // 6/20/21
    public async Task<List<WalmartFeedDTO>> GetInvFeedsWalmart(int locId, DateTime historyDate)
    {
      List<WalmartFeedDTO> serviceResponse = new List<WalmartFeedDTO>();

      // Get Latest Inventory (Feeds) Report
      // Try to get Today's report
      int walmartCustId = 26, walmartMkId = 16;//, bancId = 4, mainslId = 25;
      DateTime beginningDate = new DateTime(historyDate.AddDays(-1).Year, historyDate.AddDays(-1).Month, historyDate.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(historyDate.AddDays(1).Year, historyDate.AddDays(1).Month, historyDate.AddDays(1).Day, 0, 0, 0);
      InvFeedsReport invFeedReport = await _kc.InvFeedsReports
        .Where(ifr => (DateTime)ifr.CreatedDate > beginningDate && (DateTime)ifr.CreatedDate < afterDate)
        .Where(ifr => ifr.IsApproved == true)
        .Include(x => x.InvFeedsItems)
        .OrderByDescending(x => x.CreatedDate)
        .FirstOrDefaultAsync();
      /*
      List<NsIcr> walmartIcrs = await _kc.NsIcrs
        .Where(icrs => icrs.CustomerId == walmartCustId && icrs.IsInvFeed == 1)
        .ToListAsync();
      */
      List<MkIcr> walmartIcrs = await _kc.MkIcrs
        .Where(icrs => icrs.MarketId == walmartMkId && icrs.IsInvFeed == true)
        .ToListAsync();

      if (invFeedReport == null) return serviceResponse;

      WalmartFeedDTO walmartDTO = new WalmartFeedDTO();

      List<InvFeedsReportItem> invFeedsReportItemList = await _kc.InvFeedsReportItems
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .Include(i => i.InvFeedsRepItemDetails)
        .ToListAsync();

      BpmLocation bpmLoc = await _kc.BpmLocations
        .Where(b => b.LocationId == locId)
        .FirstOrDefaultAsync();
      int index = 0;
      InvFeedsReportItem tmpDTO = new InvFeedsReportItem();
      InvFeedsRepItemLoc tmpLoc = new InvFeedsRepItemLoc();

      serviceResponse = walmartIcrs.Select(wi =>
      new WalmartFeedDTO()
      {
        SKU = wi.CustSku,
        Qty = 0,
        AvailabilityCode = "AC (Standard Availability Code)",
        FulfillmentLagTime = "",
      }).ToList();
      WalmartFeedDTO tmpWalmartDTO = new WalmartFeedDTO();
      /*
      foreach(WalmartFeedDTO tmpWalmartDTO in serviceResponse)
      {
       

      }
      */
      InvFeedsRepItemDetail invFeedsRepItem = new InvFeedsRepItemDetail();
      BpmItem bpmItem = new BpmItem();
      //NsIcr custItem = new NsIcr();
      MkIcr custItem = new MkIcr();

      while (index < invFeedsReportItemList.Count)
      {
        tmpDTO = invFeedsReportItemList[index];
        if (tmpDTO != null)
        {
          invFeedsRepItem = await _kc.InvFeedsRepItemDetails
            .Where(i => i.InvFeedsReportItemId == tmpDTO.InvFeedsReportItemId && i.CustomerId == walmartCustId)
            .Include(i => i.InvFeedsRepItemLocs)
            .FirstOrDefaultAsync();
          if (invFeedsRepItem != null)
          {
            bpmItem = await _kc.BpmItems
              .Where(b => b.ItemNoId == tmpDTO.ItemNoId)
              .FirstOrDefaultAsync();
            custItem = await _kc.MkIcrs
              .Where(c => c.ItemNoId == tmpDTO.ItemNoId)
              .Where(c => c.MarketId == walmartMkId)
              .Where(c => c.IsInvFeed == true)
              .FirstOrDefaultAsync();
            //.Where(c => c.CustomerId == walmartCustId)
            //.Where(c => c.IsInvFeed == 1)

            if (custItem != null) // NEED TO RE VISIT for Custom SKU!!!
            {
              tmpLoc = invFeedsRepItem.InvFeedsRepItemLocs.Where(i => i.LocationId == locId).FirstOrDefault();
              if (tmpLoc != null)
              {
                walmartDTO = new WalmartFeedDTO()
                {
                  SKU = custItem.CustSku,
                  AvailabilityCode = "AC (Standard Availability Code)",
                  Qty = (invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0),
                  FulfillmentLagTime = ""
                };
              }
              else
              {
                walmartDTO = new WalmartFeedDTO()
                {
                  SKU = custItem.CustSku,
                  AvailabilityCode = "AC (Standard Availability Code)",
                  Qty = 0,
                  FulfillmentLagTime = ""
                };
              }
              tmpWalmartDTO = serviceResponse.FindLast(x => x.SKU == walmartDTO.SKU);
              if (tmpWalmartDTO != null)
              {
                serviceResponse.Remove(tmpWalmartDTO);
                if (walmartDTO.Qty < 0) walmartDTO.Qty = 0;
                serviceResponse.Add(walmartDTO);
              }
            }
          }
          //invFeedsReportItemList.Remove(tmpDTO);
        }
        index++;
      } // End of while

      return serviceResponse;
    }


    // Get inventory feeding export for ebay
    // unfinished - Finished by Brian Yi on 09/17/2021
    public async Task<List<eBayMIPFeedDTO>> GetInvFeedseBay(DateTime historyDate)
    {

      List<eBayMIPFeedDTO> serviceResponse = new List<eBayMIPFeedDTO>();

      int ebayCustId = 12, eBayMkId = 5;
      string channelId = "EBAY_US";
      DateTime beginningDate = new DateTime(historyDate.AddDays(-1).Year, historyDate.AddDays(-1).Month, historyDate.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(historyDate.AddDays(1).Year, historyDate.AddDays(1).Month, historyDate.AddDays(1).Day, 0, 0, 0);
      InvFeedsReport invFeedReport = await _kc.InvFeedsReports
        .Where(ifr => (DateTime)ifr.CreatedDate > beginningDate && (DateTime)ifr.CreatedDate < afterDate)
        .Where(ifr => ifr.IsApproved == true)
        .Include(x => x.InvFeedsItems)
        .OrderByDescending(x => x.CreatedDate)
        .FirstOrDefaultAsync();

      /*
      List<NsIcr> ebayIcrs = await _kc.NsIcrs
        .Where(icrs => icrs.CustomerId == ebayCustId && icrs.IsInvFeed == 1)
        .Include(icr => icr.ItemNo)
        .ToListAsync();
      */

      List<MkIcr> ebayIcrs = await _kc.MkIcrs
        .Where(icrs => icrs.MarketId == eBayMkId && icrs.IsInvFeed == true)
        .Include(icr => icr.ItemNo)
        .ToListAsync();

      if (invFeedReport == null) return serviceResponse;

      eBayMIPFeedDTO ebayDTO = new eBayMIPFeedDTO();

      List<InvFeedsReportItem> invFeedsReportItemList = await _kc.InvFeedsReportItems
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .Include(i => i.InvFeedsRepItemDetails)
        .ToListAsync();

      /*
      BpmLocation bpmBancLoc = await _kc.BpmLocations
        .Where(b => b.LocationId == bancId)
        .FirstOrDefaultAsync();

      BpmLocation bpmMainslLoc = await _kc.BpmLocations
        .Where(b => b.LocationId == mainslId)
        .FirstOrDefaultAsync();
      */
      List<ItemStatus> bpmItemStatus = await _kc.ItemStatuses
        .ToListAsync();

      int index = 0;
      InvFeedsReportItem tmpDTO = new InvFeedsReportItem();
      List<InvFeedsRepItemLoc> tmpLocs = new List<InvFeedsRepItemLoc>();

      serviceResponse = ebayIcrs.Select(ei =>
      new eBayMIPFeedDTO()
      {
        eBaysku = ei.CustSku,
        qty = 0,
        channelId = channelId
      }).ToList();

      /*
      Status = (bpmItemStatus.FindLast(bis => bis.ItemStatusId == ei.ItemNo.ItemStatusId).StatusItem != null ?
      bpmItemStatus.FindLast(bis => bis.ItemStatusId == ei.ItemNo.ItemStatusId).StatusItem : ""),
        Description = ei.ItemNo.Description,
        */
      eBayMIPFeedDTO tmpeBayDTO = new eBayMIPFeedDTO();
      InvFeedsRepItemDetail invFeedsRepItem = new InvFeedsRepItemDetail();
      BpmItem bpmItem = new BpmItem();
      //NsIcr custItem = new NsIcr();
      MkIcr custItem = new MkIcr();

      while (index < invFeedsReportItemList.Count)
      {
        tmpDTO = invFeedsReportItemList[index];
        if (tmpDTO != null)
        {
          invFeedsRepItem = await _kc.InvFeedsRepItemDetails
            .Where(i => i.InvFeedsReportItemId == tmpDTO.InvFeedsReportItemId && i.CustomerId == ebayCustId)
            .Include(i => i.InvFeedsRepItemLocs)
            .FirstOrDefaultAsync();

          if (invFeedsRepItem != null)
          {
            bpmItem = await _kc.BpmItems
              .Where(b => b.ItemNoId == tmpDTO.ItemNoId)
              .FirstOrDefaultAsync();
            /*
            custItem = await _kc.NsIcrs
              //.Where(c => c.NsIntId == bpmItem.NsIntId)
              .Where(c => c.ItemNoId == tmpDTO.ItemNoId)
              .Where(c => c.CustomerId == ebayCustId)
              .Where(c => c.IsInvFeed == 1)
              .FirstOrDefaultAsync();
            */
            custItem = await _kc.MkIcrs
              .Where(c => c.ItemNoId == tmpDTO.ItemNoId)
              .Where(c => c.MarketId == eBayMkId)
              .Where(c => c.IsInvFeed == true)
              .FirstOrDefaultAsync();



            if (custItem != null) // NEED TO RE VISIT for Custom SKU!!!
            {
              tmpLocs = invFeedsRepItem.InvFeedsRepItemLocs.ToList();//.Where(i => i.LocationId == locId).FirstOrDefault();

              if (tmpLocs != null)
              {
                foreach (InvFeedsRepItemLoc tmpEachLoc in tmpLocs)
                {
                  ebayDTO = serviceResponse.FindLast(x => x.eBaysku == custItem.CustSku);
                  if (ebayDTO != null)
                  {
                    ebayDTO.qty += (invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpEachLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0);
                  }
                }
              }
            }
          }
          //invFeedsReportItemList.Remove(tmpDTO);
        }
        index++;
      } // End of while

      return serviceResponse;
    }

    public async Task<List<HomeDepotFeedDTO>> GetHomeDepotInvFeeds(DateTime historyDate)
    {
      List<HomeDepotFeedDTO> serviceResponse = new List<HomeDepotFeedDTO>();
      int homeDepotMarketID = 340, homeDepotID = 40, bancId = 4, mainslId = 25, swcaftId = 54, bascId = 62;
      //Get info. for 'Warehouse 1' & 'Warehouse 2'
      BpmLocation warehouse1 = await _kc.BpmLocations.Where(x => x.LocationId == bancId).FirstOrDefaultAsync();
      BpmLocation warehouse2 = await _kc.BpmLocations.Where(x => x.LocationId == swcaftId).FirstOrDefaultAsync();


      DateTime beginningDate = new DateTime(historyDate.AddDays(-1).Year, historyDate.AddDays(-1).Month, historyDate.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(historyDate.AddDays(1).Year, historyDate.AddDays(1).Month, historyDate.AddDays(1).Day, 0, 0, 0);
      InvFeedsReport invFeedReport = await _kc.InvFeedsReports
        .Where(ifr => (DateTime)ifr.CreatedDate > beginningDate && (DateTime)ifr.CreatedDate < afterDate)
        .Where(ifr => ifr.IsApproved == true)
        .Include(x => x.InvFeedsItems)
        .OrderByDescending(x => x.CreatedDate)
        .FirstOrDefaultAsync();


      List<MkIcr> homeDepotIcrs = await _kc.MkIcrs
        .Where(icrs => icrs.MarketId == homeDepotMarketID && icrs.IsInvFeed == true)
        .Include(icr => icr.ItemNo)
        .ToListAsync();

      if (invFeedReport == null) return serviceResponse;

      //eBayMIPFeedDTO ebayDTO = new eBayMIPFeedDTO();

      List<InvFeedsReportItem> invFeedsReportItemList = await _kc.InvFeedsReportItems
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .Include(i => i.InvFeedsRepItemDetails)
        .ToListAsync();


      List<ItemStatus> bpmItemStatus = await _kc.ItemStatuses
        .ToListAsync();

      int index = 0;
      //InvFeedsReportItem tmpDTO = new InvFeedsReportItem();
      //List<InvFeedsRepItemLoc> tmpLocs = new List<InvFeedsRepItemLoc>();

      serviceResponse = homeDepotIcrs.Select(ei =>
      new HomeDepotFeedDTO()
      {
        itemNoId = ei.ItemNoId,
        alwaysIn = "IN",
        homeDepotSku = ei.CustSku,
        sku = ei.ItemNo.ItemName,
        availability = "Yes",
        totalQtyOnHand = 0,
        homeDepotAssignedSku = (ei.CustAsin != null ? ei.CustAsin : ""),
        homeDepotMerchantName = "THEHOMEDEPOT",
        upc = "",
        warehouse01Id = "Mellow Inc",
        warehouse01Qty = 0,
        warehouse01NextAvailQty = "",
        warehouse01NextAvailDate = "",
        warehouse02Id = "Zinus_WH_Tracy",
        warehouse02Qty = 0,
        warehouse02NextAvailQty = "",
        warehouse02NextAvailDate = "",
        warehouse03Id = "Zinus_WH_CHS",
        warehouse03Qty = 0,
        warehouse03NextAvailQty = "",
        warehouse03NextAvailDate = ""//,
                                     // warehouse04Id = "BASC",
                                     // warehouse04Qty = 0,
                                     // warehouse04NextAvailQty = "",
                                     // warehouse04NextAvailDate = "",
                                     // warehouse05Id = "PRSM-CAST",
                                     //  warehouse05Qty = 0,
                                     //  warehouse05NextAvailQty = "",
                                     // warehouse05NextAvailDate = ""
      }).ToList();

      /*
      Status = (bpmItemStatus.FindLast(bis => bis.ItemStatusId == ei.ItemNo.ItemStatusId).StatusItem != null ?
      bpmItemStatus.FindLast(bis => bis.ItemStatusId == ei.ItemNo.ItemStatusId).StatusItem : ""),
        Description = ei.ItemNo.Description,
        */
      InvFeedsRepItemDetail invFeedsRepItem = new InvFeedsRepItemDetail();
      List<InvFeedsRepTableDetail> invFeedsRepTableDetails = await _kc.InvFeedsRepTableDetails
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .ToListAsync();
      InvFeedsRepTableDetail tmpRepTableDetail = new InvFeedsRepTableDetail();
      InvFeedsReportItem invFeedsreportItem = new InvFeedsReportItem();
      BpmItem bpmItem = new BpmItem();
      MkIcr custItem = new MkIcr();
      InvFeedsRepItemLoc tmpLoc = new InvFeedsRepItemLoc();

      foreach (HomeDepotFeedDTO tmpDto in serviceResponse)
      {
        tmpRepTableDetail = invFeedsRepTableDetails.Where(x => x.ItemNoId == tmpDto.itemNoId).FirstOrDefault();
        if (tmpRepTableDetail != null)
        {
          //tmpDto.totalQtyOnHand = (int)tmpRepTableDetail.HomeDepotQtyMainSl + (int)tmpRepTableDetail.HomeDepotQtySwcaft + (int)tmpRepTableDetail.HomeDepotQtyBanc + (int)tmpRepTableDetail.HomeDepotQtyBasc;
          tmpDto.warehouse01Qty = ((int)tmpRepTableDetail.HomeDepotQtyMainSl > 1 ? (int)tmpRepTableDetail.HomeDepotQtyMainSl : 0);
          tmpDto.warehouse02Qty = ((int)tmpRepTableDetail.HomeDepotQtyZinusTracy > 1 ? (int)tmpRepTableDetail.HomeDepotQtyZinusTracy : 0);
          tmpDto.warehouse03Qty = ((int)tmpRepTableDetail.HomeDepotQtyZinusChs > 1 ? (int)tmpRepTableDetail.HomeDepotQtyZinusChs : 0);
          tmpDto.warehouse04Qty = 0;//((int)tmpRepTableDetail.HomeDepotQtyBasc > 1 ? (int)tmpRepTableDetail.HomeDepotQtyBasc : 0);
          tmpDto.warehouse05Qty = 0;//((int)tmpRepTableDetail.HomeDepotQtyPrismCast > 1 ? (int)tmpRepTableDetail.HomeDepotQtyPrismCast : 0);
          tmpDto.totalQtyOnHand = tmpDto.warehouse01Qty + tmpDto.warehouse02Qty + tmpDto.warehouse03Qty + tmpDto.warehouse04Qty + tmpDto.warehouse05Qty;
        }
        /*
        invFeedsreportItem = invFeedsReportItemList.Where(x => x.ItemNoId == tmpDto.itemNoId).FirstOrDefault();
        if (invFeedsreportItem != null)
        {
          invFeedsRepItem = await _kc.InvFeedsRepItemDetails
            .Where(i => i.InvFeedsReportItemId == invFeedsreportItem.InvFeedsReportItemId && i.CustomerId == homeDepotID)
            .Include(i => i.InvFeedsRepItemLocs)
            .FirstOrDefaultAsync();

          if (invFeedsRepItem != null)
          {
            // Warehouse 1
            tmpLoc = invFeedsRepItem.InvFeedsRepItemLocs.Where(x => x.LocationId == mainslId).FirstOrDefault();
            if (tmpLoc != null)
            {
              tmpDto.warehouse01Qty = (int)tmpLoc.QtyAvail;
            }
            // Warehouse 2
            tmpLoc = invFeedsRepItem.InvFeedsRepItemLocs.Where(x => x.LocationId == swcaftId).FirstOrDefault();
            if (tmpLoc != null)
            {
              tmpDto.warehouse01Qty = (int)tmpLoc.QtyAvail;
            }
            //tmpLocs = invFeedsRepItem.InvFeedsRepItemLocs;
          }
        }*/
      }

      /*
      while (index < invFeedsReportItemList.Count)
      {
        tmpDTO = invFeedsReportItemList[index];
        if (tmpDTO != null)
        {
          invFeedsRepItem = await _kc.InvFeedsRepItemDetails
            .Where(i => i.InvFeedsReportItemId == tmpDTO.InvFeedsReportItemId && i.CustomerId == homeDepotID)
            .Include(i => i.InvFeedsRepItemLocs)
            .FirstOrDefaultAsync();

          if (invFeedsRepItem != null)
          {
            bpmItem = await _kc.BpmItems
              .Where(b => b.ItemNoId == tmpDTO.ItemNoId)
              .FirstOrDefaultAsync();
            custItem = await _kc.MkIcrs
              .Where(c => c.ItemNoId == tmpDTO.ItemNoId)
              .Where(c => c.MarketId == homeDepotMarketID)
              .Where(c => c.IsInvFeed == true)
              .FirstOrDefaultAsync();

            if (custItem != null) // NEED TO RE VISIT for Custom SKU!!!
            {
              tmpLocs = invFeedsRepItem.InvFeedsRepItemLocs.ToList();//.Where(i => i.LocationId == locId).FirstOrDefault();

              if (tmpLocs != null)
              {
                foreach (InvFeedsRepItemLoc tmpEachLoc in tmpLocs)
                {
                  if(tmpEachLoc.LocationId == mainslId)
                  ebayDTO = serviceResponse.FindLast(x => x.eBaysku == custItem.CustSku);
                  if (ebayDTO != null)
                  {
                    ebayDTO.qty += (invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpEachLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0);
                  }
                }
              }
            }
          }
          //invFeedsReportItemList.Remove(tmpDTO);
        }
        index++;
      } // End of while
      */
      return serviceResponse;
    }


    // Get inventory feeding export for Wayfair
    // By Brian Yi on 09/21/2022
    // Modified Brian Yi on 06/13/2023, 03/12/2024
    public async Task<List<WayfairFeedDTO>> GetInvFeedsWayfairRev(DateTime date)
    {
      int wayfairCustNo = 29, wayfairMkId = 4;
      DateTime beforeDate = new DateTime(date.AddDays(-1).Year, date.AddDays(-1).Month, date.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(date.AddDays(1).Year, date.AddDays(1).Month, date.AddDays(1).Day, 0, 0, 0);

      List<WayfairFeedDTO> serviceResponse = new List<WayfairFeedDTO>();

      //List<WayfairFeedDTO> wayfairFeedsBanc = new List<WayfairFeedDTO>();
      //List<WayfairFeedDTO> wayfairFeedsBasc = new List<WayfairFeedDTO>();
      List<WayfairFeedDTO> wayfairFeedsMainsl = new List<WayfairFeedDTO>();
      // List<WayfairFeedDTO> wayfairFeedsSWCAFT = new List<WayfairFeedDTO>();
      //List<WayfairFeedDTO> wayfairFeedsPrismCast = new List<WayfairFeedDTO>();
      List<WayfairFeedDTO> wayfairFeedsZinusTracy = new List<WayfairFeedDTO>();
      List<WayfairFeedDTO> wayfairFeedsZinusChs = new List<WayfairFeedDTO>();
      //List<WayfairFeedDTO> wayfairFeedsPrismCalt = new List<WayfairFeedDTO>();



      // Get Latest Inventory (Feeds) Report
      // Try to get Today's report
      InvFeedsReport invFeedReport = await _kc.InvFeedsReports
        .Where(ifr => (DateTime)ifr.CreatedDate > beforeDate && (DateTime)ifr.CreatedDate < afterDate)
        .Where(ifr => ifr.IsApproved == true)
        .Include(x => x.InvFeedsItems)
        .OrderByDescending(x => x.CreatedDate)
        .FirstOrDefaultAsync();

      if (invFeedReport == null) return serviceResponse;

      WayfairFeedDTO tmpWayfair = new WayfairFeedDTO();

      List<InvFeedsRepTableDetail> invFeedsRepTableDetails = await _kc.InvFeedsRepTableDetails
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .ToListAsync();

      /*
      List<InvFeedsReportItem> invFeedsReportItemList = await _kc.InvFeedsReportItems
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .Include(i => i.InvFeedsRepItemDetails)
        .ToListAsync();
      */

      // Get Info. about BANC
      /*BpmLocation bancWayfair = await _kc.BpmLocations
        .Where(b => b.LocationId == 4)
        .FirstOrDefaultAsync();
      // Get Info. about BASC
      BpmLocation bascWayfair = await _kc.BpmLocations
        .Where(b => b.LocationId == 62)
        .FirstOrDefaultAsync(); */
      // Get Info. about Mainsl
      BpmLocation mainslWayfair = await _kc.BpmLocations
        .Where(m => m.LocationId == 25)
        .FirstOrDefaultAsync();
      // Get Info. about SWCA-FT
      /*BpmLocation swcaftWayfair = await _kc.BpmLocations
        .Where(m => m.LocationId == 54)
        .FirstOrDefaultAsync();*/
      // Get Info. about PRISM-CAST
      /*BpmLocation prismCastWayfair = await _kc.BpmLocations
        .Where(m => m.LocationId == 51)
        .FirstOrDefaultAsync();*/
      // Get Info. about ZINUS-TRACY
      BpmLocation zinusTracyWayfair = await _kc.BpmLocations
        .Where(m => m.LocationId == 57)
        .FirstOrDefaultAsync();
      // Get Info. about ZINUS-CHS
      BpmLocation zinusChsWayfair = await _kc.BpmLocations
        .Where(m => m.LocationId == 108)
        .FirstOrDefaultAsync();
      // Get Info. about PRISM-CALT
      /*
      BpmLocation prismCaltWayfair = await _kc.BpmLocations
        .Where(m => m.LocationId == 67)
        .FirstOrDefaultAsync();
      */
      /*
      // For BANC
      List<NsIcr> wayfairIcrsBanc = await _kc.NsIcrs
        .Where(icrs => icrs.CustomerId == wayfairCustNo && icrs.IsInvFeed == 1)
        .Include(icrs => icrs.ItemNo)
        .ToListAsync();

      // For BASC
      List<NsIcr> wayfairIcrsBasc = await _kc.NsIcrs
        .Where(icrs => icrs.CustomerId == wayfairCustNo && icrs.IsInvFeed == 1)
        .Include(icrs => icrs.ItemNo)
        .ToListAsync();

      // For Mainsl
      List<NsIcr> wayfairIcrsMainsl = await _kc.NsIcrs
        .Where(icrs => icrs.CustomerId == wayfairCustNo && icrs.IsInvFeed == 1)
        .Include(icrs => icrs.ItemNo)
        .ToListAsync();

      // For SWCAFT
      List<NsIcr> wayfairIcrsSWCAFT = await _kc.NsIcrs
        .Where(icrs => icrs.CustomerId == wayfairCustNo && icrs.IsInvFeed == 1)
        .Include(icrs => icrs.ItemNo)
        .ToListAsync();
      */
      // For BANC
      /*List<MkIcr> wayfairIcrsBanc = await _kc.MkIcrs
        .Where(icrs => icrs.MarketId == wayfairMkId && icrs.IsInvFeed == true)
        .Include(icrs => icrs.ItemNo)
        .ToListAsync();

      // For BASC
      List<MkIcr> wayfairIcrsBasc = await _kc.MkIcrs
        .Where(icrs => icrs.MarketId == wayfairMkId && icrs.IsInvFeed == true)
        .Include(icrs => icrs.ItemNo)
        .ToListAsync();*/

      // For Mainsl
      List<MkIcr> wayfairIcrsMainsl = await _kc.MkIcrs
        .Where(icrs => icrs.MarketId == wayfairMkId && icrs.IsInvFeed == true)
        .Include(icrs => icrs.ItemNo)
        .ToListAsync();

      // For SWCAFT
      /*List<MkIcr> wayfairIcrsSWCAFT = await _kc.MkIcrs
        .Where(icrs => icrs.MarketId == wayfairMkId && icrs.IsInvFeed == true)
        .Include(icrs => icrs.ItemNo)
        .ToListAsync();*/

      // For PRISM-CAST
      /*List<MkIcr> wayfairIcrsPrismCast = await _kc.MkIcrs
        .Where(icrs => icrs.MarketId == wayfairMkId && icrs.IsInvFeed == true)
        .Include(icrs => icrs.ItemNo)
        .ToListAsync();*/

      // For ZINUS-Tracy
      List<MkIcr> wayfairIcrsZinusTracy = await _kc.MkIcrs
        .Where(icrs => icrs.MarketId == wayfairMkId && icrs.IsInvFeed == true)
        .Include(icrs => icrs.ItemNo)
        .ToListAsync();

      // For ZINUS-CHS
      List<MkIcr> wayfairIcrsZinusChs = await _kc.MkIcrs
        .Where(icrs => icrs.MarketId == wayfairMkId && icrs.IsInvFeed == true)
        .Include(icrs => icrs.ItemNo)
        .ToListAsync();

      // For PRISM-CALT
      /*
      if (prismCaltWayfair != null)
      {
        List<MkIcr> wayfairIcrsPrismCalt = await _kc.MkIcrs
        .Where(icrs => icrs.MarketId == wayfairMkId && icrs.IsInvFeed == true)
        .Include(icrs => icrs.ItemNo)
        .ToListAsync();
      }*/
      /*
      wayfairFeedsBanc = wayfairIcrsBanc.Select(wib =>
      new WayfairFeedDTO()
      {
        SupplierId = bancWayfair.LocIdWayfair,
        SupplierPartNo = wib.CustSku,
        QtyOnHand = 0,
        QtyOnBackOrder = 0,
        QtyOnOrder = 0,
        ItemNextAvailDate = "",
        Discountinued = 0,
        ProductNameOptions = wib.ItemNo.Description
      }).ToList();

      wayfairFeedsBasc = wayfairIcrsBasc.Select(wib =>
      new WayfairFeedDTO()
      {
        SupplierId = bascWayfair.LocIdWayfair,
        SupplierPartNo = wib.CustSku,
        QtyOnHand = 0,
        QtyOnBackOrder = 0,
        QtyOnOrder = 0,
        ItemNextAvailDate = "",
        Discountinued = 0,
        ProductNameOptions = wib.ItemNo.Description
      }).ToList();
      */
      wayfairFeedsMainsl = wayfairIcrsMainsl.Select(wim =>
      new WayfairFeedDTO()
      {
        SupplierId = mainslWayfair.LocIdWayfair,
        SupplierPartNo = wim.CustSku,
        QtyOnHand = 0,
        QtyOnBackOrder = 0,
        QtyOnOrder = 0,
        ItemNextAvailDate = "",
        Discountinued = 0,
        ProductNameOptions = wim.ItemNo.Description
      }).ToList();
      /*
      wayfairFeedsSWCAFT = wayfairIcrsSWCAFT.Select(wim =>
      new WayfairFeedDTO()
      {
        SupplierId = swcaftWayfair.LocIdWayfair,
        SupplierPartNo = wim.CustSku,
        QtyOnHand = 0,
        QtyOnBackOrder = 0,
        QtyOnOrder = 0,
        ItemNextAvailDate = "",
        Discountinued = 0,
        ProductNameOptions = wim.ItemNo.Description
      }).ToList();
      */
      /*
      wayfairFeedsPrismCast = wayfairIcrsPrismCast.Select(wim =>
      new WayfairFeedDTO()
      {
        SupplierId = prismCastWayfair.LocIdWayfair,
        SupplierPartNo = wim.CustSku,
        QtyOnHand = 0,
        QtyOnBackOrder = 0,
        QtyOnOrder = 0,
        ItemNextAvailDate = "",
        Discountinued = 0,
        ProductNameOptions = wim.ItemNo.Description
      }).ToList();*/

      wayfairFeedsZinusTracy = wayfairIcrsZinusTracy.Select(wim =>
      new WayfairFeedDTO()
      {
        SupplierId = zinusTracyWayfair.LocIdWayfair,
        SupplierPartNo = wim.CustSku,
        QtyOnHand = 0,
        QtyOnBackOrder = 0,
        QtyOnOrder = 0,
        ItemNextAvailDate = "",
        Discountinued = 0,
        ProductNameOptions = wim.ItemNo.Description
      }).ToList();

      wayfairFeedsZinusChs = wayfairIcrsZinusChs.Select(wim =>
      new WayfairFeedDTO()
      {
        SupplierId = zinusChsWayfair.LocIdWayfair,
        SupplierPartNo = wim.CustSku,
        QtyOnHand = 0,
        QtyOnBackOrder = 0,
        QtyOnOrder = 0,
        ItemNextAvailDate = "",
        Discountinued = 0,
        ProductNameOptions = wim.ItemNo.Description
      }).ToList();

      int index = 0;
      WayfairFeedDTO tmpStored = new WayfairFeedDTO();
      //InvFeedsReportItem tmpDTO = new InvFeedsReportItem();
      InvFeedsRepTableDetail tmpDto = new InvFeedsRepTableDetail();
      InvFeedsRepItemLoc tmpLoc = new InvFeedsRepItemLoc();
      BpmItem bpmItem = new BpmItem();

      //NsIcr custItem = new NsIcr();
      MkIcr custItem01 = new MkIcr();
      MkIcr custItem02 = new MkIcr();
      int duplicateCounter = 0;
      while (index < invFeedsRepTableDetails.Count)
      {
        duplicateCounter = 1;
        tmpDto = invFeedsRepTableDetails[index];
        // if (tmpDto.ItemNoId == 2690)
        //{ Console.WriteLine("Found it!"); }
        if (tmpDto != null)
        {
          bpmItem = await _kc.BpmItems
            .Where(b => b.ItemNoId == tmpDto.ItemNoId)
            .FirstOrDefaultAsync();

          /* duplicateCounter = await _kc.MkIcrs
             .Where(c => c.ItemNoId == tmpDto.ItemNoId)
             .Where(c => c.MarketId == wayfairMkId)
             .CountAsync();
          */
          custItem01 = await _kc.MkIcrs
            .Where(c => c.ItemNoId == tmpDto.ItemNoId)
            .Where(c => c.MarketId == wayfairMkId && c.IsInvFeed == true)
            .OrderBy(c => c.ItemNoId)
            .FirstOrDefaultAsync();

          custItem02 = await _kc.MkIcrs
            .Where(c => c.ItemNoId == tmpDto.ItemNoId)
            .Where(c => c.MarketId == wayfairMkId && c.IsInvFeed == true)
            .OrderBy(c => c.ItemNoId)
            .LastOrDefaultAsync();

          if (custItem01 != null && custItem02 != null)
          {
            if (custItem01.CustSku != custItem02.CustSku)
            {
              duplicateCounter = 2;
            }
            else
            {
              duplicateCounter = 1;
            }
          }
          if (custItem01 == null && custItem02 == null)
          {
            goto SkipThisWayfairSKU;
          }

          if (custItem01 != null) // NEED TO RE VISIT for Custom SKU!!!
          {
            // For Mainsl
            if (tmpDto.WayfairQtyMainSl != 0)
            {
              tmpWayfair = new WayfairFeedDTO()
              {
                SupplierId = mainslWayfair.LocIdWayfair,
                SupplierPartNo = custItem01.CustSku,
                QtyOnHand = (int)(tmpDto.WayfairQtyMainSl / duplicateCounter),
                QtyOnBackOrder = 0,
                QtyOnOrder = 0,
                ItemNextAvailDate = "",
                Discountinued = 0,
                ProductNameOptions = bpmItem.Description
              };
            }
            else
            {
              tmpWayfair = new WayfairFeedDTO()
              {
                SupplierId = mainslWayfair.LocIdWayfair,
                SupplierPartNo = custItem01.CustSku,
                QtyOnHand = 0,
                QtyOnBackOrder = 0,
                QtyOnOrder = 0,
                ItemNextAvailDate = "",
                Discountinued = 0,
                ProductNameOptions = bpmItem.Description

              };

            }
            tmpStored = wayfairFeedsMainsl.FindLast(x => x.SupplierPartNo == tmpWayfair.SupplierPartNo);
            if (tmpStored != null)
            {
              wayfairFeedsMainsl.Remove(tmpStored);
              if (tmpWayfair.QtyOnHand < 0) tmpWayfair.QtyOnHand = 0;
              wayfairFeedsMainsl.Add(tmpWayfair);
            }

            if (duplicateCounter > 1)
            {
              if (tmpDto.WayfairQtyMainSl != 0)
              {
                tmpWayfair = new WayfairFeedDTO()
                {
                  SupplierId = mainslWayfair.LocIdWayfair,
                  SupplierPartNo = custItem02.CustSku,
                  QtyOnHand = (int)(tmpDto.WayfairQtyMainSl / duplicateCounter),
                  QtyOnBackOrder = 0,
                  QtyOnOrder = 0,
                  ItemNextAvailDate = "",
                  Discountinued = 0,
                  ProductNameOptions = bpmItem.Description
                };
              }
              else
              {
                tmpWayfair = new WayfairFeedDTO()
                {
                  SupplierId = mainslWayfair.LocIdWayfair,
                  SupplierPartNo = custItem02.CustSku,
                  QtyOnHand = 0,
                  QtyOnBackOrder = 0,
                  QtyOnOrder = 0,
                  ItemNextAvailDate = "",
                  Discountinued = 0,
                  ProductNameOptions = bpmItem.Description

                };

              }
              tmpStored = wayfairFeedsMainsl.FindLast(x => x.SupplierPartNo == tmpWayfair.SupplierPartNo);
              if (tmpStored != null)
              {
                wayfairFeedsMainsl.Remove(tmpStored);
                if (tmpWayfair.QtyOnHand < 0) tmpWayfair.QtyOnHand = 0;
                wayfairFeedsMainsl.Add(tmpWayfair);
              }
            }


            /*
            // For BANC
            if (tmpDto.WayfairQtyBanc != 0)
            {
              tmpWayfair = new WayfairFeedDTO()
              {
                SupplierId = bancWayfair.LocIdWayfair,
                SupplierPartNo = custItem01.CustSku,
                QtyOnHand = (int)(tmpDto.WayfairQtyBanc / duplicateCounter),
                QtyOnBackOrder = 0,
                QtyOnOrder = 0,
                ItemNextAvailDate = "",
                Discountinued = 0,
                ProductNameOptions = bpmItem.Description
              };
            }
            else
            {
              tmpWayfair = new WayfairFeedDTO()
              {
                SupplierId = bancWayfair.LocIdWayfair,
                SupplierPartNo = custItem01.CustSku,
                QtyOnHand = 0,
                QtyOnBackOrder = 0,
                QtyOnOrder = 0,
                ItemNextAvailDate = "",
                Discountinued = 0,
                ProductNameOptions = bpmItem.Description

              };

            }
            tmpStored = wayfairFeedsBanc.FindLast(x => x.SupplierPartNo == tmpWayfair.SupplierPartNo);
            if (tmpStored != null)
            {
              wayfairFeedsBanc.Remove(tmpStored);
              if (tmpWayfair.QtyOnHand < 0) tmpWayfair.QtyOnHand = 0;
              wayfairFeedsBanc.Add(tmpWayfair);
            }

            if (duplicateCounter > 1)
            {
              if (tmpDto.WayfairQtyBanc != 0)
              {
                tmpWayfair = new WayfairFeedDTO()
                {
                  SupplierId = bancWayfair.LocIdWayfair,
                  SupplierPartNo = custItem02.CustSku,
                  QtyOnHand = (int)(tmpDto.WayfairQtyBanc / duplicateCounter),
                  QtyOnBackOrder = 0,
                  QtyOnOrder = 0,
                  ItemNextAvailDate = "",
                  Discountinued = 0,
                  ProductNameOptions = bpmItem.Description
                };
              }
              else
              {
                tmpWayfair = new WayfairFeedDTO()
                {
                  SupplierId = bancWayfair.LocIdWayfair,
                  SupplierPartNo = custItem02.CustSku,
                  QtyOnHand = 0,
                  QtyOnBackOrder = 0,
                  QtyOnOrder = 0,
                  ItemNextAvailDate = "",
                  Discountinued = 0,
                  ProductNameOptions = bpmItem.Description

                };

              }
              tmpStored = wayfairFeedsBanc.FindLast(x => x.SupplierPartNo == tmpWayfair.SupplierPartNo);
              if (tmpStored != null)
              {
                wayfairFeedsBanc.Remove(tmpStored);
                if (tmpWayfair.QtyOnHand < 0) tmpWayfair.QtyOnHand = 0;
                wayfairFeedsBanc.Add(tmpWayfair);
              }
            }

            // For BASC
            if (tmpDto.WayfairQtyBasc != 0)
            {
              tmpWayfair = new WayfairFeedDTO()
              {
                SupplierId = bascWayfair.LocIdWayfair,
                SupplierPartNo = custItem01.CustSku,
                QtyOnHand = (int)(tmpDto.WayfairQtyBasc / duplicateCounter),
                QtyOnBackOrder = 0,
                QtyOnOrder = 0,
                ItemNextAvailDate = "",
                Discountinued = 0,
                ProductNameOptions = bpmItem.Description
              };
            }
            else
            {
              tmpWayfair = new WayfairFeedDTO()
              {
                SupplierId = bascWayfair.LocIdWayfair,
                SupplierPartNo = custItem01.CustSku,
                QtyOnHand = 0,
                QtyOnBackOrder = 0,
                QtyOnOrder = 0,
                ItemNextAvailDate = "",
                Discountinued = 0,
                ProductNameOptions = bpmItem.Description

              };

            }
            tmpStored = wayfairFeedsBasc.FindLast(x => x.SupplierPartNo == tmpWayfair.SupplierPartNo);
            if (tmpStored != null)
            {
              wayfairFeedsBasc.Remove(tmpStored);
              if (tmpWayfair.QtyOnHand < 0) tmpWayfair.QtyOnHand = 0;
              wayfairFeedsBasc.Add(tmpWayfair);
            }

            if (duplicateCounter > 1)
            {
              if (tmpDto.WayfairQtyBasc != 0)
              {
                tmpWayfair = new WayfairFeedDTO()
                {
                  SupplierId = bascWayfair.LocIdWayfair,
                  SupplierPartNo = custItem02.CustSku,
                  QtyOnHand = (int)(tmpDto.WayfairQtyBasc / duplicateCounter),
                  QtyOnBackOrder = 0,
                  QtyOnOrder = 0,
                  ItemNextAvailDate = "",
                  Discountinued = 0,
                  ProductNameOptions = bpmItem.Description
                };
              }
              else
              {
                tmpWayfair = new WayfairFeedDTO()
                {
                  SupplierId = bascWayfair.LocIdWayfair,
                  SupplierPartNo = custItem02.CustSku,
                  QtyOnHand = 0,
                  QtyOnBackOrder = 0,
                  QtyOnOrder = 0,
                  ItemNextAvailDate = "",
                  Discountinued = 0,
                  ProductNameOptions = bpmItem.Description

                };

              }
              tmpStored = wayfairFeedsBasc.FindLast(x => x.SupplierPartNo == tmpWayfair.SupplierPartNo);
              if (tmpStored != null)
              {
                wayfairFeedsBasc.Remove(tmpStored);
                if (tmpWayfair.QtyOnHand < 0) tmpWayfair.QtyOnHand = 0;
                wayfairFeedsBasc.Add(tmpWayfair);
              }
            }
            */
            /*
            // For SWCA-FT
            if (tmpDto.WayfairQtySwcaft != 0)
            {
              tmpWayfair = new WayfairFeedDTO()
              {
                SupplierId = swcaftWayfair.LocIdWayfair,
                SupplierPartNo = custItem01.CustSku,
                QtyOnHand = (int)(tmpDto.WayfairQtySwcaft / duplicateCounter),
                QtyOnBackOrder = 0,
                QtyOnOrder = 0,
                ItemNextAvailDate = "",
                Discountinued = 0,
                ProductNameOptions = bpmItem.Description
              };
            }
            else
            {
              tmpWayfair = new WayfairFeedDTO()
              {
                SupplierId = swcaftWayfair.LocIdWayfair,
                SupplierPartNo = custItem01.CustSku,
                QtyOnHand = 0,
                QtyOnBackOrder = 0,
                QtyOnOrder = 0,
                ItemNextAvailDate = "",
                Discountinued = 0,
                ProductNameOptions = bpmItem.Description

              };

            }
            tmpStored = wayfairFeedsSWCAFT.FindLast(x => x.SupplierPartNo == tmpWayfair.SupplierPartNo);
            if (tmpStored != null)
            {
              wayfairFeedsSWCAFT.Remove(tmpStored);
              if (tmpWayfair.QtyOnHand < 0) tmpWayfair.QtyOnHand = 0;
              wayfairFeedsSWCAFT.Add(tmpWayfair);
            }
            if (duplicateCounter > 1)
            {
              if (tmpDto.WayfairQtySwcaft != 0)
              {
                tmpWayfair = new WayfairFeedDTO()
                {
                  SupplierId = swcaftWayfair.LocIdWayfair,
                  SupplierPartNo = custItem02.CustSku,
                  QtyOnHand = (int)(tmpDto.WayfairQtySwcaft / duplicateCounter),
                  QtyOnBackOrder = 0,
                  QtyOnOrder = 0,
                  ItemNextAvailDate = "",
                  Discountinued = 0,
                  ProductNameOptions = bpmItem.Description
                };
              }
              else
              {
                tmpWayfair = new WayfairFeedDTO()
                {
                  SupplierId = swcaftWayfair.LocIdWayfair,
                  SupplierPartNo = custItem02.CustSku,
                  QtyOnHand = 0,
                  QtyOnBackOrder = 0,
                  QtyOnOrder = 0,
                  ItemNextAvailDate = "",
                  Discountinued = 0,
                  ProductNameOptions = bpmItem.Description

                };

              }
              tmpStored = wayfairFeedsSWCAFT.FindLast(x => x.SupplierPartNo == tmpWayfair.SupplierPartNo);
              if (tmpStored != null)
              {
                wayfairFeedsSWCAFT.Remove(tmpStored);
                if (tmpWayfair.QtyOnHand < 0) tmpWayfair.QtyOnHand = 0;
                wayfairFeedsSWCAFT.Add(tmpWayfair);
              }
            }
            */

            // For PRISM-CAST
            /* if (tmpDto.WayfairQtyPrismCast != 0)
             {
               tmpWayfair = new WayfairFeedDTO()
               {
                 SupplierId = prismCastWayfair.LocIdWayfair,
                 SupplierPartNo = custItem01.CustSku,
                 QtyOnHand = (int)(tmpDto.WayfairQtyPrismCast / duplicateCounter),
                 QtyOnBackOrder = 0,
                 QtyOnOrder = 0,
                 ItemNextAvailDate = "",
                 Discountinued = 0,
                 ProductNameOptions = bpmItem.Description
               };
             }
             else
             {
               tmpWayfair = new WayfairFeedDTO()
               {
                 SupplierId = prismCastWayfair.LocIdWayfair,
                 SupplierPartNo = custItem01.CustSku,
                 QtyOnHand = 0,
                 QtyOnBackOrder = 0,
                 QtyOnOrder = 0,
                 ItemNextAvailDate = "",
                 Discountinued = 0,
                 ProductNameOptions = bpmItem.Description

               };

             }
             tmpStored = wayfairFeedsPrismCast.FindLast(x => x.SupplierPartNo == tmpWayfair.SupplierPartNo);
             if (tmpStored != null)
             {
               wayfairFeedsPrismCast.Remove(tmpStored);
               if (tmpWayfair.QtyOnHand < 0) tmpWayfair.QtyOnHand = 0;
               wayfairFeedsPrismCast.Add(tmpWayfair);
             }

             if (duplicateCounter > 1)
             {
               if (tmpDto.WayfairQtyPrismCast != 0)
               {
                 tmpWayfair = new WayfairFeedDTO()
                 {
                   SupplierId = prismCastWayfair.LocIdWayfair,
                   SupplierPartNo = custItem02.CustSku,
                   QtyOnHand = (int)(tmpDto.WayfairQtyPrismCast / duplicateCounter),
                   QtyOnBackOrder = 0,
                   QtyOnOrder = 0,
                   ItemNextAvailDate = "",
                   Discountinued = 0,
                   ProductNameOptions = bpmItem.Description
                 };
               }
               else
               {
                 tmpWayfair = new WayfairFeedDTO()
                 {
                   SupplierId = prismCastWayfair.LocIdWayfair,
                   SupplierPartNo = custItem02.CustSku,
                   QtyOnHand = 0,
                   QtyOnBackOrder = 0,
                   QtyOnOrder = 0,
                   ItemNextAvailDate = "",
                   Discountinued = 0,
                   ProductNameOptions = bpmItem.Description

                 };

               }
               tmpStored = wayfairFeedsPrismCast.FindLast(x => x.SupplierPartNo == tmpWayfair.SupplierPartNo);
               if (tmpStored != null)
               {
                 wayfairFeedsPrismCast.Remove(tmpStored);
                 if (tmpWayfair.QtyOnHand < 0) tmpWayfair.QtyOnHand = 0;
                 wayfairFeedsPrismCast.Add(tmpWayfair);
               }
             }
            */

            // For ZINUS-Tracy
            if (tmpDto.WayfairQtyZinusTracy.HasValue)//(tmpDto.WayfairQtyZinusTracy != 0 || tmpDto.WayfairQtyZinusTracy.HasValue != null)
            {
              tmpWayfair = new WayfairFeedDTO()
              {
                SupplierId = zinusTracyWayfair.LocIdWayfair,
                SupplierPartNo = custItem01.CustSku,
                QtyOnHand = (int)(tmpDto.WayfairQtyZinusTracy / duplicateCounter),
                QtyOnBackOrder = 0,
                QtyOnOrder = 0,
                ItemNextAvailDate = "",
                Discountinued = 0,
                ProductNameOptions = bpmItem.Description
              };
            }
            else
            {
              tmpWayfair = new WayfairFeedDTO()
              {
                SupplierId = zinusTracyWayfair.LocIdWayfair,
                SupplierPartNo = custItem01.CustSku,
                QtyOnHand = 0,
                QtyOnBackOrder = 0,
                QtyOnOrder = 0,
                ItemNextAvailDate = "",
                Discountinued = 0,
                ProductNameOptions = bpmItem.Description

              };

            }
            tmpStored = wayfairFeedsZinusTracy.FindLast(x => x.SupplierPartNo == tmpWayfair.SupplierPartNo);
            if (tmpStored != null)
            {
              wayfairFeedsZinusTracy.Remove(tmpStored);
              if (tmpWayfair.QtyOnHand < 0) tmpWayfair.QtyOnHand = 0;
              wayfairFeedsZinusTracy.Add(tmpWayfair);
            }

            if (duplicateCounter > 1)
            {
              if (tmpDto.WayfairQtyZinusTracy.HasValue) //(tmpDto.WayfairQtyZinusTracy != 0)
              {
                tmpWayfair = new WayfairFeedDTO()
                {
                  SupplierId = zinusTracyWayfair.LocIdWayfair,
                  SupplierPartNo = custItem02.CustSku,
                  QtyOnHand = (int)(tmpDto.WayfairQtyZinusTracy / duplicateCounter),
                  QtyOnBackOrder = 0,
                  QtyOnOrder = 0,
                  ItemNextAvailDate = "",
                  Discountinued = 0,
                  ProductNameOptions = bpmItem.Description
                };
              }
              else
              {
                tmpWayfair = new WayfairFeedDTO()
                {
                  SupplierId = zinusTracyWayfair.LocIdWayfair,
                  SupplierPartNo = custItem02.CustSku,
                  QtyOnHand = 0,
                  QtyOnBackOrder = 0,
                  QtyOnOrder = 0,
                  ItemNextAvailDate = "",
                  Discountinued = 0,
                  ProductNameOptions = bpmItem.Description

                };

              }
              tmpStored = wayfairFeedsZinusTracy.FindLast(x => x.SupplierPartNo == tmpWayfair.SupplierPartNo);
              if (tmpStored != null)
              {
                wayfairFeedsZinusTracy.Remove(tmpStored);
                if (tmpWayfair.QtyOnHand < 0) tmpWayfair.QtyOnHand = 0;
                wayfairFeedsZinusTracy.Add(tmpWayfair);
              }
            }

            // For ZINUS-CHS
            if (tmpDto.WayfairQtyZinusChs.HasValue)//(tmpDto.WayfairQtyZinusChs != 0)
            {
              tmpWayfair = new WayfairFeedDTO()
              {
                SupplierId = zinusChsWayfair.LocIdWayfair,
                SupplierPartNo = custItem01.CustSku,
                QtyOnHand = (int)(tmpDto.WayfairQtyZinusChs / duplicateCounter),
                QtyOnBackOrder = 0,
                QtyOnOrder = 0,
                ItemNextAvailDate = "",
                Discountinued = 0,
                ProductNameOptions = bpmItem.Description
              };
            }
            else
            {
              tmpWayfair = new WayfairFeedDTO()
              {
                SupplierId = zinusChsWayfair.LocIdWayfair,
                SupplierPartNo = custItem01.CustSku,
                QtyOnHand = 0,
                QtyOnBackOrder = 0,
                QtyOnOrder = 0,
                ItemNextAvailDate = "",
                Discountinued = 0,
                ProductNameOptions = bpmItem.Description

              };

            }
            tmpStored = wayfairFeedsZinusChs.FindLast(x => x.SupplierPartNo == tmpWayfair.SupplierPartNo);
            if (tmpStored != null)
            {
              wayfairFeedsZinusChs.Remove(tmpStored);
              if (tmpWayfair.QtyOnHand < 0) tmpWayfair.QtyOnHand = 0;
              wayfairFeedsZinusChs.Add(tmpWayfair);
            }

            if (duplicateCounter > 1)
            {
              if (tmpDto.WayfairQtyZinusChs.HasValue)//(tmpDto.WayfairQtyZinusChs != 0)
              {
                tmpWayfair = new WayfairFeedDTO()
                {
                  SupplierId = zinusChsWayfair.LocIdWayfair,
                  SupplierPartNo = custItem02.CustSku,
                  QtyOnHand = (int)(tmpDto.WayfairQtyZinusChs / duplicateCounter),
                  QtyOnBackOrder = 0,
                  QtyOnOrder = 0,
                  ItemNextAvailDate = "",
                  Discountinued = 0,
                  ProductNameOptions = bpmItem.Description
                };
              }
              else
              {
                tmpWayfair = new WayfairFeedDTO()
                {
                  SupplierId = zinusChsWayfair.LocIdWayfair,
                  SupplierPartNo = custItem02.CustSku,
                  QtyOnHand = 0,
                  QtyOnBackOrder = 0,
                  QtyOnOrder = 0,
                  ItemNextAvailDate = "",
                  Discountinued = 0,
                  ProductNameOptions = bpmItem.Description

                };

              }
              tmpStored = wayfairFeedsZinusChs.FindLast(x => x.SupplierPartNo == tmpWayfair.SupplierPartNo);
              if (tmpStored != null)
              {
                wayfairFeedsZinusChs.Remove(tmpStored);
                if (tmpWayfair.QtyOnHand < 0) tmpWayfair.QtyOnHand = 0;
                wayfairFeedsZinusChs.Add(tmpWayfair);
              }
            }

            // End of warehouses


          }
        }
      SkipThisWayfairSKU:
        index++;

      } // End of while

      //serviceResponse.AddRange(wayfairFeedsBanc);
      //serviceResponse.AddRange(wayfairFeedsBasc);
      serviceResponse.AddRange(wayfairFeedsMainsl);
      // serviceResponse.AddRange(wayfairFeedsSWCAFT);
      //serviceResponse.AddRange(wayfairFeedsPrismCast);
      serviceResponse.AddRange(wayfairFeedsZinusTracy);
      serviceResponse.AddRange(wayfairFeedsZinusChs);
      serviceResponse.OrderBy(s => s.SupplierPartNo);
      return serviceResponse;
    }



    // Get inventory feeding export for Wayfair
    // By Brian Yi on 06/20/2021
    // DEPRECATED!!!
    public async Task<List<WayfairFeedDTO>> GetInvFeedsWayfair(DateTime date)
    {
      int wayfairCustNo = 29, wayfairMkId = 4;
      DateTime beforeDate = new DateTime(date.AddDays(-1).Year, date.AddDays(-1).Month, date.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(date.AddDays(1).Year, date.AddDays(1).Month, date.AddDays(1).Day, 0, 0, 0);

      List<WayfairFeedDTO> serviceResponse = new List<WayfairFeedDTO>();

      List<WayfairFeedDTO> wayfairFeedsBanc = new List<WayfairFeedDTO>();
      List<WayfairFeedDTO> wayfairFeedsBasc = new List<WayfairFeedDTO>();
      List<WayfairFeedDTO> wayfairFeedsMainsl = new List<WayfairFeedDTO>();
      List<WayfairFeedDTO> wayfairFeedsSWCAFT = new List<WayfairFeedDTO>();



      // Get Latest Inventory (Feeds) Report
      // Try to get Today's report
      InvFeedsReport invFeedReport = await _kc.InvFeedsReports
        .Where(ifr => (DateTime)ifr.CreatedDate > beforeDate && (DateTime)ifr.CreatedDate < afterDate)
        .Where(ifr => ifr.IsApproved == true)
        .Include(x => x.InvFeedsItems)
        .OrderByDescending(x => x.CreatedDate)
        .FirstOrDefaultAsync();

      if (invFeedReport == null) return serviceResponse;

      WayfairFeedDTO tmpWayfair = new WayfairFeedDTO();

      List<InvFeedsReportItem> invFeedsReportItemList = await _kc.InvFeedsReportItems
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)

        .Include(i => i.InvFeedsRepItemDetails)
        .ToListAsync();
      /*
      // Get Info. about BANC
      BpmLocation bancWayfair = await _kc.BpmLocations
        .Where(b => b.LocationId == 4)
        .FirstOrDefaultAsync();
      // Get Info. about BASC
      BpmLocation bascWayfair = await _kc.BpmLocations
        .Where(b => b.LocationId == 62)
        .FirstOrDefaultAsync();
      */
      // Get Info. about Mainsl
      BpmLocation mainslWayfair = await _kc.BpmLocations
        .Where(m => m.LocationId == 25)
        .FirstOrDefaultAsync();
      // Get Info. about SWCA-FT
      BpmLocation swcaftWayfair = await _kc.BpmLocations
        .Where(m => m.LocationId == 54)
        .FirstOrDefaultAsync();

      /*
      // For BANC
      List<NsIcr> wayfairIcrsBanc = await _kc.NsIcrs
        .Where(icrs => icrs.CustomerId == wayfairCustNo && icrs.IsInvFeed == 1)
        .Include(icrs => icrs.ItemNo)
        .ToListAsync();

      // For BASC
      List<NsIcr> wayfairIcrsBasc = await _kc.NsIcrs
        .Where(icrs => icrs.CustomerId == wayfairCustNo && icrs.IsInvFeed == 1)
        .Include(icrs => icrs.ItemNo)
        .ToListAsync();

      // For Mainsl
      List<NsIcr> wayfairIcrsMainsl = await _kc.NsIcrs
        .Where(icrs => icrs.CustomerId == wayfairCustNo && icrs.IsInvFeed == 1)
        .Include(icrs => icrs.ItemNo)
        .ToListAsync();

      // For SWCAFT
      List<NsIcr> wayfairIcrsSWCAFT = await _kc.NsIcrs
        .Where(icrs => icrs.CustomerId == wayfairCustNo && icrs.IsInvFeed == 1)
        .Include(icrs => icrs.ItemNo)
        .ToListAsync();
      */
      /*
      // For BANC
      List<MkIcr> wayfairIcrsBanc = await _kc.MkIcrs
        .Where(icrs => icrs.MarketId == wayfairMkId && icrs.IsInvFeed == true)
        .Include(icrs => icrs.ItemNo)
        .ToListAsync();

      // For BASC
      List<MkIcr> wayfairIcrsBasc = await _kc.MkIcrs
        .Where(icrs => icrs.MarketId == wayfairMkId && icrs.IsInvFeed == true)
        .Include(icrs => icrs.ItemNo)
        .ToListAsync();
      */
      // For Mainsl
      List<MkIcr> wayfairIcrsMainsl = await _kc.MkIcrs
        .Where(icrs => icrs.MarketId == wayfairMkId && icrs.IsInvFeed == true)
        .Include(icrs => icrs.ItemNo)
        .ToListAsync();

      // For SWCAFT
      List<MkIcr> wayfairIcrsSWCAFT = await _kc.MkIcrs
        .Where(icrs => icrs.MarketId == wayfairMkId && icrs.IsInvFeed == true)
        .Include(icrs => icrs.ItemNo)
        .ToListAsync();
      /*
      wayfairFeedsBanc = wayfairIcrsBanc.Select(wib =>
      new WayfairFeedDTO()
      {
        SupplierId = bancWayfair.LocIdWayfair,
        SupplierPartNo = wib.CustSku,
        QtyOnHand = 0,
        QtyOnBackOrder = 0,
        QtyOnOrder = 0,
        ItemNextAvailDate = "",
        Discountinued = 0,
        ProductNameOptions = wib.ItemNo.Description
      }).ToList();

      wayfairFeedsBasc = wayfairIcrsBasc.Select(wib =>
      new WayfairFeedDTO()
      {
        SupplierId = bancWayfair.LocIdWayfair,
        SupplierPartNo = wib.CustSku,
        QtyOnHand = 0,
        QtyOnBackOrder = 0,
        QtyOnOrder = 0,
        ItemNextAvailDate = "",
        Discountinued = 0,
        ProductNameOptions = wib.ItemNo.Description
      }).ToList();
      */
      wayfairFeedsMainsl = wayfairIcrsMainsl.Select(wim =>
      new WayfairFeedDTO()
      {
        SupplierId = mainslWayfair.LocIdWayfair,
        SupplierPartNo = wim.CustSku,
        QtyOnHand = 0,
        QtyOnBackOrder = 0,
        QtyOnOrder = 0,
        ItemNextAvailDate = "",
        Discountinued = 0,
        ProductNameOptions = wim.ItemNo.Description
      }).ToList();

      wayfairFeedsSWCAFT = wayfairIcrsSWCAFT.Select(wim =>
      new WayfairFeedDTO()
      {
        SupplierId = swcaftWayfair.LocIdWayfair,
        SupplierPartNo = wim.CustSku,
        QtyOnHand = 0,
        QtyOnBackOrder = 0,
        QtyOnOrder = 0,
        ItemNextAvailDate = "",
        Discountinued = 0,
        ProductNameOptions = wim.ItemNo.Description
      }).ToList();


      int index = 0;
      WayfairFeedDTO tmpStored = new WayfairFeedDTO();
      InvFeedsReportItem tmpDTO = new InvFeedsReportItem();
      InvFeedsRepItemLoc tmpLoc = new InvFeedsRepItemLoc();
      BpmItem bpmItem = new BpmItem();

      //NsIcr custItem = new NsIcr();
      MkIcr custItem = new MkIcr();
      while (index < invFeedsReportItemList.Count)
      {
        tmpDTO = invFeedsReportItemList[index];
        if (tmpDTO != null)
        {
          InvFeedsRepItemDetail invFeedsRepItem = await _kc.InvFeedsRepItemDetails
            .Where(i => i.InvFeedsReportItemId == tmpDTO.InvFeedsReportItemId && i.CustomerId == wayfairCustNo)
            .Include(i => i.InvFeedsRepItemLocs)
            .FirstOrDefaultAsync();
          if (invFeedsRepItem != null)
          {
            bpmItem = await _kc.BpmItems
              .Where(b => b.ItemNoId == tmpDTO.ItemNoId)
              .FirstOrDefaultAsync();
            /*
            custItem = await _kc.NsIcrs
              //.Where(c => c.NsIntId == bpmItem.NsIntId)
              .Where(c => c.ItemNoId == tmpDTO.ItemNoId)
              .Where(c => c.CustomerId == wayfairCustNo)
              .FirstOrDefaultAsync();*/
            custItem = await _kc.MkIcrs
              //.Where(c => c.NsIntId == bpmItem.NsIntId)
              .Where(c => c.ItemNoId == tmpDTO.ItemNoId)
              .Where(c => c.MarketId == wayfairMkId)
              .FirstOrDefaultAsync();
            if (custItem != null) // NEED TO RE VISIT for Custom SKU!!!
            {
              // For Mainsl
              tmpLoc = invFeedsRepItem.InvFeedsRepItemLocs.Where(i => i.LocationId == mainslWayfair.LocationId).FirstOrDefault();
              if (tmpLoc != null)
              {
                tmpWayfair = new WayfairFeedDTO()
                {
                  SupplierId = mainslWayfair.LocIdWayfair,
                  SupplierPartNo = custItem.CustSku,
                  QtyOnHand = (invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0),
                  QtyOnBackOrder = (int)tmpLoc.QtyOnBackOrder,
                  QtyOnOrder = 0,
                  ItemNextAvailDate = "",
                  Discountinued = 0,
                  ProductNameOptions = bpmItem.Description
                };
              }
              else
              {
                tmpWayfair = new WayfairFeedDTO()
                {
                  SupplierId = mainslWayfair.LocIdWayfair,
                  SupplierPartNo = custItem.CustSku,
                  QtyOnHand = 0,
                  QtyOnBackOrder = 0,
                  QtyOnOrder = 0,
                  ItemNextAvailDate = "",
                  Discountinued = 0,
                  ProductNameOptions = bpmItem.Description

                };
              }
              tmpStored = wayfairFeedsMainsl.FindLast(x => x.SupplierPartNo == tmpWayfair.SupplierPartNo);
              if (tmpStored != null)
              {
                wayfairFeedsMainsl.Remove(tmpStored);
                if (tmpWayfair.QtyOnHand < 0) tmpWayfair.QtyOnHand = 0;
                wayfairFeedsMainsl.Add(tmpWayfair);
              }
              /*
              // For BANC
              tmpLoc = invFeedsRepItem.InvFeedsRepItemLocs.Where(i => i.LocationId == bancWayfair.LocationId).FirstOrDefault();
              if (tmpLoc != null)
              {
                tmpWayfair = new WayfairFeedDTO()
                {
                  SupplierId = bancWayfair.LocIdWayfair,
                  SupplierPartNo = custItem.CustSku,
                  QtyOnHand = (invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0),
                  QtyOnBackOrder = (int)tmpLoc.QtyOnBackOrder,
                  QtyOnOrder = 0,
                  ItemNextAvailDate = "",
                  Discountinued = 0,
                  ProductNameOptions = bpmItem.Description
                };
              }
              else
              {
                tmpWayfair = new WayfairFeedDTO()
                {
                  SupplierId = bancWayfair.LocIdWayfair,
                  SupplierPartNo = custItem.CustSku,
                  QtyOnHand = 0,
                  QtyOnBackOrder = 0,
                  QtyOnOrder = 0,
                  ItemNextAvailDate = "",
                  Discountinued = 0,
                  ProductNameOptions = bpmItem.Description
                };
              }
              tmpStored = serviceResponse.FindLast(x => x.SupplierPartNo == tmpWayfair.SupplierPartNo);
              if (tmpStored != null)
              {
                wayfairFeedsBanc.Remove(tmpStored);
                if (tmpWayfair.QtyOnHand < 0) tmpWayfair.QtyOnHand = 0;
                wayfairFeedsBanc.Add(tmpWayfair);
              }

              // For BASC
              tmpLoc = invFeedsRepItem.InvFeedsRepItemLocs.Where(i => i.LocationId == bascWayfair.LocationId).FirstOrDefault();
              if (tmpLoc != null)
              {
                tmpWayfair = new WayfairFeedDTO()
                {
                  SupplierId = bascWayfair.LocIdWayfair,
                  SupplierPartNo = custItem.CustSku,
                  QtyOnHand = (invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0),
                  QtyOnBackOrder = (int)tmpLoc.QtyOnBackOrder,
                  QtyOnOrder = 0,
                  ItemNextAvailDate = "",
                  Discountinued = 0,
                  ProductNameOptions = bpmItem.Description
                };
              }
              else
              {
                tmpWayfair = new WayfairFeedDTO()
                {
                  SupplierId = bascWayfair.LocIdWayfair,
                  SupplierPartNo = custItem.CustSku,
                  QtyOnHand = 0,
                  QtyOnBackOrder = 0,
                  QtyOnOrder = 0,
                  ItemNextAvailDate = "",
                  Discountinued = 0,
                  ProductNameOptions = bpmItem.Description
                };
              }
              tmpStored = serviceResponse.FindLast(x => x.SupplierPartNo == tmpWayfair.SupplierPartNo);
              if (tmpStored != null)
              {
                wayfairFeedsBasc.Remove(tmpStored);
                if (tmpWayfair.QtyOnHand < 0) tmpWayfair.QtyOnHand = 0;
                wayfairFeedsBasc.Add(tmpWayfair);
              }
              */
              /*
              // For SWCA-FT
              tmpLoc = invFeedsRepItem.InvFeedsRepItemLocs.Where(i => i.LocationId == swcaftWayfair.LocationId).FirstOrDefault();
              if (tmpLoc != null)
              {
                tmpWayfair = new WayfairFeedDTO()
                {
                  SupplierId = swcaftWayfair.LocIdWayfair,
                  SupplierPartNo = custItem.CustSku,
                  QtyOnHand = (invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0),
                  QtyOnBackOrder = (int)tmpLoc.QtyOnBackOrder,
                  QtyOnOrder = 0,
                  ItemNextAvailDate = "",
                  Discountinued = 0,
                  ProductNameOptions = bpmItem.Description
                };
              }
              else
              {
                tmpWayfair = new WayfairFeedDTO()
                {
                  SupplierId = swcaftWayfair.LocIdWayfair,
                  SupplierPartNo = custItem.CustSku,
                  QtyOnHand = 0,
                  QtyOnBackOrder = 0,
                  QtyOnOrder = 0,
                  ItemNextAvailDate = "",
                  Discountinued = 0,
                  ProductNameOptions = bpmItem.Description

                };
              }
              tmpStored = wayfairFeedsSWCAFT.FindLast(x => x.SupplierPartNo == tmpWayfair.SupplierPartNo);
              if (tmpStored != null)
              {
                wayfairFeedsSWCAFT.Remove(tmpStored);
                if (tmpWayfair.QtyOnHand < 0) tmpWayfair.QtyOnHand = 0;
                wayfairFeedsSWCAFT.Add(tmpWayfair);
              }
              */

            }
          }
          //invFeedsReportItemList.Remove(tmpDTO);
        }
        index++;
      } // End of while
      //serviceResponse.AddRange(wayfairFeedsBanc);
      //serviceResponse.AddRange(wayfairFeedsBasc);
      serviceResponse.AddRange(wayfairFeedsMainsl);
      //serviceResponse.AddRange(wayfairFeedsSWCAFT);
      serviceResponse.OrderBy(s => s.SupplierPartNo);
      return serviceResponse;
    }

    // Get inventory feeding export for Overstock 
    // By Brian Yi on 09/22/2022; Modified on 03/12/2024
    public async Task<List<OverstockFeedDTO>> GetInvFeedsOverstockRev(int locId, DateTime date)
    {
      List<OverstockFeedDTO> serviceResponse = new List<OverstockFeedDTO>();

      DateTime beforeDate = new DateTime(date.AddDays(-1).Year, date.AddDays(-1).Month, date.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(date.AddDays(1).Year, date.AddDays(1).Month, date.AddDays(1).Day, 0, 0, 0);
      InvFeedsReport invFeedReport = await _kc.InvFeedsReports
        .Where(ifr => (DateTime)ifr.CreatedDate > beforeDate && (DateTime)ifr.CreatedDate < afterDate)
        .Where(ifr => ifr.IsApproved == true)
        .Include(x => x.InvFeedsItems)
        .OrderByDescending(x => x.CreatedDate)
        .FirstOrDefaultAsync();

      if (invFeedReport == null) return serviceResponse;

      int overstockCustNo = 21, overstockMkId = 12, mainslId = 25, zinusTracyId = 57, zinusChsId = 108;//, bancId = 4, mainslId = 25;bancId = 4, swcaftId = 54, bascId = 62, prsmCastId = 51, prsmCaltId = 67, 
      BpmLocation bpmLoc = await _kc.BpmLocations
        .Where(b => b.LocationId == locId)
        .FirstOrDefaultAsync();


      List<MkIcr> ostIcrs = await _kc.MkIcrs
        .Where(oi => oi.MarketId == overstockMkId && oi.IsInvFeed == true)
        .ToListAsync();

      serviceResponse = ostIcrs.Select(oi =>
      new OverstockFeedDTO()
      {
        SupplierSKU = oi.CustSku,
        Qty = 0,
        WarehouseName = bpmLoc.LocIdOverstock,
      }).ToList();
      // Get Latest Inventory (Feeds) Report
      // Try to get Today's report

      OverstockFeedDTO ostDTO = new OverstockFeedDTO();
      OverstockFeedDTO tmpOstDTO = new OverstockFeedDTO();

      List<InvFeedsRepTableDetail> invFeedsRepTableDetails = await _kc.InvFeedsRepTableDetails
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .ToListAsync();
      /*
      List<InvFeedsReportItem> invFeedsReportItemList = await _kc.InvFeedsReportItems
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .Include(i => i.InvFeedsRepItemDetails)
        .ToListAsync();
      */

      int index = 0;
      InvFeedsRepTableDetail tmpDto = new InvFeedsRepTableDetail();
      //InvFeedsReportItem tmpDTO = new InvFeedsReportItem();
      //InvFeedsRepItemLoc tmpLoc = new InvFeedsRepItemLoc();
      InvFeedsRepItemDetail invFeedsRepItem = new InvFeedsRepItemDetail();
      BpmItem bpmItem = new BpmItem();
      MkIcr custItem01 = new MkIcr();
      MkIcr custItem02 = new MkIcr();
      //NsIcr custItem = new NsIcr();

      int duplicateCounter = 1;

      while (index < invFeedsRepTableDetails.Count)
      {
        duplicateCounter = 1;
        tmpDto = invFeedsRepTableDetails[index];
        if (tmpDto != null)
        {
          bpmItem = await _kc.BpmItems
            .Where(b => b.ItemNoId == tmpDto.ItemNoId)
            .FirstOrDefaultAsync();
          custItem01 = await _kc.MkIcrs
            .Where(c => c.ItemNoId == tmpDto.ItemNoId)
            .Where(c => c.MarketId == overstockMkId)
            .Where(c => c.IsInvFeed == true)
            .OrderBy(c => c.ItemNoId)
            .FirstOrDefaultAsync();

          custItem02 = await _kc.MkIcrs
            .Where(c => c.ItemNoId == tmpDto.ItemNoId)
            .Where(c => c.MarketId == overstockMkId)
            .Where(c => c.IsInvFeed == true)
            .OrderBy(c => c.ItemNoId)
            .LastOrDefaultAsync();
          if (custItem01 != null && custItem02 != null)
          {
            if (custItem01.CustSku != custItem02.CustSku)
            {
              duplicateCounter = 2;
            }
            else
            {
              duplicateCounter = 1;
            }
          }

          if (custItem01 == null && custItem02 == null)
          {
            goto SkipThisOverstockSKU;
          }

          if (custItem01 != null) // NEED TO RE VISIT for Custom SKU!!!
          {
            /*if (locId == bancId)
            {
              if (tmpDto.OverstockQtyBanc > 0)
              {
                ostDTO = new OverstockFeedDTO()
                {
                  SupplierSKU = custItem01.CustSku,
                  Qty = (duplicateCounter != 0 ? (int)(tmpDto.OverstockQtyBanc / duplicateCounter) : 0),
                  WarehouseName = bpmLoc.LocIdOverstock
                };
              }
              else
              {
                ostDTO = new OverstockFeedDTO()
                {
                  SupplierSKU = custItem01.CustSku,
                  Qty = 0,
                  WarehouseName = bpmLoc.LocIdOverstock
                };
              }
              tmpOstDTO = serviceResponse.FindLast(x => x.SupplierSKU == ostDTO.SupplierSKU);
              if (tmpOstDTO != null)
              {
                serviceResponse.Remove(tmpOstDTO);
                if (ostDTO.Qty < 0) ostDTO.Qty = 0;
                serviceResponse.Add(ostDTO);
              }

              if (duplicateCounter > 1)
              {
                if (tmpDto.OverstockQtyBanc > 0)
                {
                  ostDTO = new OverstockFeedDTO()
                  {
                    SupplierSKU = custItem02.CustSku,
                    Qty = (duplicateCounter != 0 ? (int)(tmpDto.OverstockQtyBanc / duplicateCounter) : 0),
                    WarehouseName = bpmLoc.LocIdOverstock
                  };
                }
                else
                {
                  ostDTO = new OverstockFeedDTO()
                  {
                    SupplierSKU = custItem02.CustSku,
                    Qty = 0,
                    WarehouseName = bpmLoc.LocIdOverstock
                  };
                }
                tmpOstDTO = serviceResponse.FindLast(x => x.SupplierSKU == ostDTO.SupplierSKU);
                if (tmpOstDTO != null)
                {
                  serviceResponse.Remove(tmpOstDTO);
                  if (ostDTO.Qty < 0) ostDTO.Qty = 0;
                  serviceResponse.Add(ostDTO);
                }
              }
            }// end of banc
            else if (locId == bascId)
            {
              if (tmpDto.OverstockQtyBasc > 0)
              {
                ostDTO = new OverstockFeedDTO()
                {
                  SupplierSKU = custItem01.CustSku,
                  Qty = (duplicateCounter != 0 ? (int)(tmpDto.OverstockQtyBasc / duplicateCounter) : 0),
                  WarehouseName = bpmLoc.LocIdOverstock
                };
              }
              else
              {
                ostDTO = new OverstockFeedDTO()
                {
                  SupplierSKU = custItem01.CustSku,
                  Qty = 0,
                  WarehouseName = bpmLoc.LocIdOverstock
                };
              }
              tmpOstDTO = serviceResponse.FindLast(x => x.SupplierSKU == ostDTO.SupplierSKU);
              if (tmpOstDTO != null)
              {
                serviceResponse.Remove(tmpOstDTO);
                if (ostDTO.Qty < 0) ostDTO.Qty = 0;
                serviceResponse.Add(ostDTO);
              }

              if (duplicateCounter > 1)
              {
                if (tmpDto.OverstockQtyBasc > 0)
                {
                  ostDTO = new OverstockFeedDTO()
                  {
                    SupplierSKU = custItem02.CustSku,
                    Qty = (duplicateCounter != 0 ? (int)(tmpDto.OverstockQtyBasc / duplicateCounter) : 0),
                    WarehouseName = bpmLoc.LocIdOverstock
                  };
                }
                else
                {
                  ostDTO = new OverstockFeedDTO()
                  {
                    SupplierSKU = custItem02.CustSku,
                    Qty = 0,
                    WarehouseName = bpmLoc.LocIdOverstock
                  };
                }
                tmpOstDTO = serviceResponse.FindLast(x => x.SupplierSKU == ostDTO.SupplierSKU);
                if (tmpOstDTO != null)
                {
                  serviceResponse.Remove(tmpOstDTO);
                  if (ostDTO.Qty < 0) ostDTO.Qty = 0;
                  serviceResponse.Add(ostDTO);
                }
              }
            } // end of basc
            else*/
            if (locId == mainslId)
            {
              if (tmpDto.OverstockQtyMainSl > 0)
              {
                ostDTO = new OverstockFeedDTO()
                {
                  SupplierSKU = custItem01.CustSku,
                  Qty = (duplicateCounter != 0 ? (int)(tmpDto.OverstockQtyMainSl / duplicateCounter) : 0),
                  WarehouseName = bpmLoc.LocIdOverstock
                };
              }
              else
              {
                ostDTO = new OverstockFeedDTO()
                {
                  SupplierSKU = custItem01.CustSku,
                  Qty = 0,
                  WarehouseName = bpmLoc.LocIdOverstock
                };
              }
              tmpOstDTO = serviceResponse.FindLast(x => x.SupplierSKU == ostDTO.SupplierSKU);
              if (tmpOstDTO != null)
              {
                serviceResponse.Remove(tmpOstDTO);
                if (ostDTO.Qty < 0) ostDTO.Qty = 0;
                serviceResponse.Add(ostDTO);
              }

              if (duplicateCounter > 1)
              {
                if (tmpDto.OverstockQtyMainSl > 0)
                {
                  ostDTO = new OverstockFeedDTO()
                  {
                    SupplierSKU = custItem02.CustSku,
                    Qty = (duplicateCounter != 0 ? (int)(tmpDto.OverstockQtyMainSl / duplicateCounter) : 0),
                    WarehouseName = bpmLoc.LocIdOverstock
                  };
                }
                else
                {
                  ostDTO = new OverstockFeedDTO()
                  {
                    SupplierSKU = custItem02.CustSku,
                    Qty = 0,
                    WarehouseName = bpmLoc.LocIdOverstock
                  };
                }
                tmpOstDTO = serviceResponse.FindLast(x => x.SupplierSKU == ostDTO.SupplierSKU);
                if (tmpOstDTO != null)
                {
                  serviceResponse.Remove(tmpOstDTO);
                  if (ostDTO.Qty < 0) ostDTO.Qty = 0;
                  serviceResponse.Add(ostDTO);
                }
              }
            } // end of mainsl
            /*else if (locId == swcaftId)
            {
              if (tmpDto.OverstockQtySwcaft > 0)
              {
                ostDTO = new OverstockFeedDTO()
                {
                  SupplierSKU = custItem01.CustSku,
                  Qty = (duplicateCounter != 0 ? (int)(tmpDto.OverstockQtySwcaft / duplicateCounter) : 0),
                  WarehouseName = bpmLoc.LocIdOverstock
                };
              }
              else
              {
                ostDTO = new OverstockFeedDTO()
                {
                  SupplierSKU = custItem01.CustSku,
                  Qty = 0,
                  WarehouseName = bpmLoc.LocIdOverstock
                };
              }
              tmpOstDTO = serviceResponse.FindLast(x => x.SupplierSKU == ostDTO.SupplierSKU);
              if (tmpOstDTO != null)
              {
                serviceResponse.Remove(tmpOstDTO);
                if (ostDTO.Qty < 0) ostDTO.Qty = 0;
                serviceResponse.Add(ostDTO);
              }

              if (duplicateCounter > 1)
              {
                if (tmpDto.OverstockQtySwcaft > 0)
                {
                  ostDTO = new OverstockFeedDTO()
                  {
                    SupplierSKU = custItem02.CustSku,
                    Qty = (duplicateCounter != 0 ? (int)(tmpDto.OverstockQtySwcaft / duplicateCounter) : 0),
                    WarehouseName = bpmLoc.LocIdOverstock
                  };
                }
                else
                {
                  ostDTO = new OverstockFeedDTO()
                  {
                    SupplierSKU = custItem02.CustSku,
                    Qty = 0,
                    WarehouseName = bpmLoc.LocIdOverstock
                  };
                }
                tmpOstDTO = serviceResponse.FindLast(x => x.SupplierSKU == ostDTO.SupplierSKU);
                if (tmpOstDTO != null)
                {
                  serviceResponse.Remove(tmpOstDTO);
                  if (ostDTO.Qty < 0) ostDTO.Qty = 0;
                  serviceResponse.Add(ostDTO);
                }
              }
            } // end of swcaft
            else if (locId == prsmCastId)
            {
              if (tmpDto.OverstockQtyPrismCast > 0)
              {
                ostDTO = new OverstockFeedDTO()
                {
                  SupplierSKU = custItem01.CustSku,
                  Qty = (duplicateCounter != 0 ? (int)(tmpDto.OverstockQtyPrismCast / duplicateCounter) : 0),
                  WarehouseName = bpmLoc.LocIdOverstock
                };
              }
              else
              {
                ostDTO = new OverstockFeedDTO()
                {
                  SupplierSKU = custItem01.CustSku,
                  Qty = 0,
                  WarehouseName = bpmLoc.LocIdOverstock
                };
              }
              tmpOstDTO = serviceResponse.FindLast(x => x.SupplierSKU == ostDTO.SupplierSKU);
              if (tmpOstDTO != null)
              {
                serviceResponse.Remove(tmpOstDTO);
                if (ostDTO.Qty < 0) ostDTO.Qty = 0;
                serviceResponse.Add(ostDTO);
              }

              if (duplicateCounter > 1)
              {
                if (tmpDto.OverstockQtyPrismCast > 0)
                {
                  ostDTO = new OverstockFeedDTO()
                  {
                    SupplierSKU = custItem02.CustSku,
                    Qty = (duplicateCounter != 0 ? (int)(tmpDto.OverstockQtyPrismCast / duplicateCounter) : 0),
                    WarehouseName = bpmLoc.LocIdOverstock
                  };
                }
                else
                {
                  ostDTO = new OverstockFeedDTO()
                  {
                    SupplierSKU = custItem02.CustSku,
                    Qty = 0,
                    WarehouseName = bpmLoc.LocIdOverstock
                  };
                }
                tmpOstDTO = serviceResponse.FindLast(x => x.SupplierSKU == ostDTO.SupplierSKU);
                if (tmpOstDTO != null)
                {
                  serviceResponse.Remove(tmpOstDTO);
                  if (ostDTO.Qty < 0) ostDTO.Qty = 0;
                  serviceResponse.Add(ostDTO);
                }
              }
            } // end of prism-cast
            else if (locId == prsmCaltId)
            {
              if (tmpDto.OverstockQtyPrismCalt > 0)
              {
                ostDTO = new OverstockFeedDTO()
                {
                  SupplierSKU = custItem01.CustSku,
                  Qty = (duplicateCounter != 0 ? (int)(tmpDto.OverstockQtyPrismCalt / duplicateCounter) : 0),
                  WarehouseName = bpmLoc.LocIdOverstock
                };
              }
              else
              {
                ostDTO = new OverstockFeedDTO()
                {
                  SupplierSKU = custItem01.CustSku,
                  Qty = 0,
                  WarehouseName = bpmLoc.LocIdOverstock
                };
              }
              tmpOstDTO = serviceResponse.FindLast(x => x.SupplierSKU == ostDTO.SupplierSKU);
              if (tmpOstDTO != null)
              {
                serviceResponse.Remove(tmpOstDTO);
                if (ostDTO.Qty < 0) ostDTO.Qty = 0;
                serviceResponse.Add(ostDTO);
              }

              if (duplicateCounter > 1)
              {
                if (tmpDto.OverstockQtyPrismCalt > 0)
                {
                  ostDTO = new OverstockFeedDTO()
                  {
                    SupplierSKU = custItem02.CustSku,
                    Qty = (duplicateCounter != 0 ? (int)(tmpDto.OverstockQtyPrismCalt / duplicateCounter) : 0),
                    WarehouseName = bpmLoc.LocIdOverstock
                  };
                }
                else
                {
                  ostDTO = new OverstockFeedDTO()
                  {
                    SupplierSKU = custItem02.CustSku,
                    Qty = 0,
                    WarehouseName = bpmLoc.LocIdOverstock
                  };
                }
                tmpOstDTO = serviceResponse.FindLast(x => x.SupplierSKU == ostDTO.SupplierSKU);
                if (tmpOstDTO != null)
                {
                  serviceResponse.Remove(tmpOstDTO);
                  if (ostDTO.Qty < 0) ostDTO.Qty = 0;
                  serviceResponse.Add(ostDTO);
                }
              }
            } // end of prism-calt */
            else if (locId == zinusTracyId)
            {
              if (tmpDto.OverstockQtyZinusTracy > 0)
              {
                ostDTO = new OverstockFeedDTO()
                {
                  SupplierSKU = custItem01.CustSku,
                  Qty = (duplicateCounter != 0 ? (int)(tmpDto.OverstockQtyZinusTracy / duplicateCounter) : 0),
                  WarehouseName = bpmLoc.LocIdOverstock
                };
              }
              else
              {
                ostDTO = new OverstockFeedDTO()
                {
                  SupplierSKU = custItem01.CustSku,
                  Qty = 0,
                  WarehouseName = bpmLoc.LocIdOverstock
                };
              }
              tmpOstDTO = serviceResponse.FindLast(x => x.SupplierSKU == ostDTO.SupplierSKU);
              if (tmpOstDTO != null)
              {
                serviceResponse.Remove(tmpOstDTO);
                if (ostDTO.Qty < 0) ostDTO.Qty = 0;
                serviceResponse.Add(ostDTO);
              }

              if (duplicateCounter > 1)
              {
                if (tmpDto.OverstockQtyZinusTracy > 0)
                {
                  ostDTO = new OverstockFeedDTO()
                  {
                    SupplierSKU = custItem02.CustSku,
                    Qty = (duplicateCounter != 0 ? (int)(tmpDto.OverstockQtyZinusTracy / duplicateCounter) : 0),
                    WarehouseName = bpmLoc.LocIdOverstock
                  };
                }
                else
                {
                  ostDTO = new OverstockFeedDTO()
                  {
                    SupplierSKU = custItem02.CustSku,
                    Qty = 0,
                    WarehouseName = bpmLoc.LocIdOverstock
                  };
                }
                tmpOstDTO = serviceResponse.FindLast(x => x.SupplierSKU == ostDTO.SupplierSKU);
                if (tmpOstDTO != null)
                {
                  serviceResponse.Remove(tmpOstDTO);
                  if (ostDTO.Qty < 0) ostDTO.Qty = 0;
                  serviceResponse.Add(ostDTO);
                }
              }
            } // end of zinus-tracy
            else if (locId == zinusChsId)
            {
              if (tmpDto.OverstockQtyZinusChs > 0)
              {
                ostDTO = new OverstockFeedDTO()
                {
                  SupplierSKU = custItem01.CustSku,
                  Qty = (duplicateCounter != 0 ? (int)(tmpDto.OverstockQtyZinusChs / duplicateCounter) : 0),
                  WarehouseName = bpmLoc.LocIdOverstock
                };
              }
              else
              {
                ostDTO = new OverstockFeedDTO()
                {
                  SupplierSKU = custItem01.CustSku,
                  Qty = 0,
                  WarehouseName = bpmLoc.LocIdOverstock
                };
              }
              tmpOstDTO = serviceResponse.FindLast(x => x.SupplierSKU == ostDTO.SupplierSKU);
              if (tmpOstDTO != null)
              {
                serviceResponse.Remove(tmpOstDTO);
                if (ostDTO.Qty < 0) ostDTO.Qty = 0;
                serviceResponse.Add(ostDTO);
              }

              if (duplicateCounter > 1)
              {
                if (tmpDto.OverstockQtyZinusChs > 0)
                {
                  ostDTO = new OverstockFeedDTO()
                  {
                    SupplierSKU = custItem02.CustSku,
                    Qty = (duplicateCounter != 0 ? (int)(tmpDto.OverstockQtyZinusChs / duplicateCounter) : 0),
                    WarehouseName = bpmLoc.LocIdOverstock
                  };
                }
                else
                {
                  ostDTO = new OverstockFeedDTO()
                  {
                    SupplierSKU = custItem02.CustSku,
                    Qty = 0,
                    WarehouseName = bpmLoc.LocIdOverstock
                  };
                }
                tmpOstDTO = serviceResponse.FindLast(x => x.SupplierSKU == ostDTO.SupplierSKU);
                if (tmpOstDTO != null)
                {
                  serviceResponse.Remove(tmpOstDTO);
                  if (ostDTO.Qty < 0) ostDTO.Qty = 0;
                  serviceResponse.Add(ostDTO);
                }
              }
            } // end of zinus-chs

          }
        }
      SkipThisOverstockSKU:
        index++;
      } // End of while
      return serviceResponse;

    }

    // Get inventory feeding export for Overstock 
    // By Brian Yi on 06/20/2021
    // DEPRECATED
    public async Task<List<OverstockFeedDTO>> GetInvFeedsOverstock(int locId, DateTime date)
    {
      List<OverstockFeedDTO> serviceResponse = new List<OverstockFeedDTO>();

      DateTime beforeDate = new DateTime(date.AddDays(-1).Year, date.AddDays(-1).Month, date.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(date.AddDays(1).Year, date.AddDays(1).Month, date.AddDays(1).Day, 0, 0, 0);
      InvFeedsReport invFeedReport = await _kc.InvFeedsReports
        .Where(ifr => (DateTime)ifr.CreatedDate > beforeDate && (DateTime)ifr.CreatedDate < afterDate)
        .Where(ifr => ifr.IsApproved == true)
        .Include(x => x.InvFeedsItems)
        .OrderByDescending(x => x.CreatedDate)
        .FirstOrDefaultAsync();

      if (invFeedReport == null) return serviceResponse;

      int overstockCustNo = 21, overstockMkId = 12;//, bancId = 4, mainslId = 25;
      BpmLocation bpmLoc = await _kc.BpmLocations
        .Where(b => b.LocationId == locId)
        .FirstOrDefaultAsync();


      List<MkIcr> ostIcrs = await _kc.MkIcrs
        .Where(oi => oi.MarketId == overstockMkId && oi.IsInvFeed == true)
        .ToListAsync();
      /*
      List<NsIcr> ostIcrs = await _kc.NsIcrs
        .Where(oi => oi.CustomerId == overstockCustNo && oi.IsInvFeed == 1)
        .ToListAsync();
      */
      serviceResponse = ostIcrs.Select(oi =>
      new OverstockFeedDTO()
      {
        SupplierSKU = oi.CustSku,
        Qty = 0,
        WarehouseName = bpmLoc.LocIdOverstock,
      }).ToList();
      // Get Latest Inventory (Feeds) Report
      // Try to get Today's report

      OverstockFeedDTO ostDTO = new OverstockFeedDTO();
      OverstockFeedDTO tmpOstDTO = new OverstockFeedDTO();

      List<InvFeedsReportItem> invFeedsReportItemList = await _kc.InvFeedsReportItems
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .Include(i => i.InvFeedsRepItemDetails)
        .ToListAsync();

      int index = 0;
      InvFeedsReportItem tmpDTO = new InvFeedsReportItem();
      InvFeedsRepItemLoc tmpLoc = new InvFeedsRepItemLoc();
      InvFeedsRepItemDetail invFeedsRepItem = new InvFeedsRepItemDetail();
      BpmItem bpmItem = new BpmItem();
      MkIcr custItem = new MkIcr();
      //NsIcr custItem = new NsIcr();

      while (index < invFeedsReportItemList.Count)
      {
        tmpDTO = invFeedsReportItemList[index];
        if (tmpDTO != null)
        {
          invFeedsRepItem = await _kc.InvFeedsRepItemDetails
            .Where(i => i.InvFeedsReportItemId == tmpDTO.InvFeedsReportItemId && i.CustomerId == overstockCustNo)
            .Include(i => i.InvFeedsRepItemLocs)
            .FirstOrDefaultAsync();
          if (invFeedsRepItem != null)
          {
            bpmItem = await _kc.BpmItems
              .Where(b => b.ItemNoId == tmpDTO.ItemNoId)
              .FirstOrDefaultAsync();

            custItem = await _kc.MkIcrs
              .Where(c => c.ItemNoId == tmpDTO.ItemNoId)
              .Where(c => c.MarketId == overstockMkId)
              .Where(c => c.IsInvFeed == true)
              .FirstOrDefaultAsync();
            /*
            custItem = await _kc.NsIcrs
              .Where(c => c.ItemNoId == tmpDTO.ItemNoId)
              .Where(c => c.CustomerId == overstockCustNo)
              .Where(c => c.IsInvFeed == 1)
              .FirstOrDefaultAsync();*/
            if (custItem != null) // NEED TO RE VISIT for Custom SKU!!!
            {
              tmpLoc = invFeedsRepItem.InvFeedsRepItemLocs.Where(i => i.LocationId == locId).FirstOrDefault();
              if (tmpLoc != null)
              {
                ostDTO = new OverstockFeedDTO()
                {
                  SupplierSKU = custItem.CustSku,
                  Qty = (invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0),
                  WarehouseName = bpmLoc.LocIdOverstock
                };
              }
              else
              {
                ostDTO = new OverstockFeedDTO()
                {
                  SupplierSKU = custItem.CustSku,
                  Qty = 0,
                  WarehouseName = bpmLoc.LocIdOverstock
                };
              }
              tmpOstDTO = serviceResponse.FindLast(x => x.SupplierSKU == ostDTO.SupplierSKU);
              if (tmpOstDTO != null)
              {
                serviceResponse.Remove(tmpOstDTO);
                if (ostDTO.Qty < 0) ostDTO.Qty = 0;
                serviceResponse.Add(ostDTO);
              }

            }
          }
          //invFeedsReportItemList.Remove(tmpDTO);
        }
        index++;
      } // End of while
      return serviceResponse;
    }

    // Get inventory feeding export for Houzz
    // unfinished - Finished by Brian Yi on 09/17/2021
    public async Task<List<HouzzFeedDTO>> GetInvFeedsHouzz(DateTime historyDate)
    {

      List<HouzzFeedDTO> serviceResponse = new List<HouzzFeedDTO>();

      int houzzCustId = 14, houzzMkId = 7;//, bancId = 4, mainslId = 25;
      DateTime beginningDate = new DateTime(historyDate.AddDays(-1).Year, historyDate.AddDays(-1).Month, historyDate.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(historyDate.AddDays(1).Year, historyDate.AddDays(1).Month, historyDate.AddDays(1).Day, 0, 0, 0);
      InvFeedsReport invFeedReport = await _kc.InvFeedsReports
        .Where(ifr => (DateTime)ifr.CreatedDate > beginningDate && (DateTime)ifr.CreatedDate < afterDate)
        .Where(ifr => ifr.IsApproved == true)
        .Include(x => x.InvFeedsItems)
        .OrderByDescending(x => x.CreatedDate)
        .FirstOrDefaultAsync();

      /*
      List<NsIcr> HouzzIcrs = await _kc.NsIcrs
        .Where(icrs => icrs.CustomerId == houzzCustId && icrs.IsInvFeed == 1)
        .Include(icr => icr.ItemNo)
        .ToListAsync();
      */
      List<MkIcr> HouzzIcrs = await _kc.MkIcrs
        .Where(icrs => icrs.MarketId == houzzMkId && icrs.IsInvFeed == true)
        .Include(icr => icr.ItemNo)
        .ToListAsync();

      if (invFeedReport == null) return serviceResponse;

      HouzzFeedDTO houzzDTO = new HouzzFeedDTO();

      List<InvFeedsReportItem> invFeedsReportItemList = await _kc.InvFeedsReportItems
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .Include(i => i.InvFeedsRepItemDetails)
        .ToListAsync();

      /*
      BpmLocation bpmBancLoc = await _kc.BpmLocations
        .Where(b => b.LocationId == bancId)
        .FirstOrDefaultAsync();

      BpmLocation bpmMainslLoc = await _kc.BpmLocations
        .Where(b => b.LocationId == mainslId)
        .FirstOrDefaultAsync();
      */

      List<ItemStatus> bpmItemStatus = await _kc.ItemStatuses
        .ToListAsync();

      int index = 0;
      InvFeedsReportItem tmpDTO = new InvFeedsReportItem();
      List<InvFeedsRepItemLoc> tmpLocs = new List<InvFeedsRepItemLoc>();

      serviceResponse = HouzzIcrs.Select(hi =>
      new HouzzFeedDTO()
      {
        BpmSku = hi.ItemNo.ItemName,
        HouzzSku = hi.CustSku,
        UPC = hi.CustUpc,
        Qty = 0,
        Description = hi.ItemNo.Description
      }).ToList();

      HouzzFeedDTO tmpHouzzDTO = new HouzzFeedDTO();
      InvFeedsRepItemDetail invFeedsRepItem = new InvFeedsRepItemDetail();
      BpmItem bpmItem = new BpmItem();
      MkIcr custItem = new MkIcr();
      //NsIcr custItem = new NsIcr();

      while (index < invFeedsReportItemList.Count)
      {
        tmpDTO = invFeedsReportItemList[index];
        if (tmpDTO != null)
        {
          invFeedsRepItem = await _kc.InvFeedsRepItemDetails
            .Where(i => i.InvFeedsReportItemId == tmpDTO.InvFeedsReportItemId && i.CustomerId == houzzCustId)
            .Include(i => i.InvFeedsRepItemLocs)
            .FirstOrDefaultAsync();

          if (invFeedsRepItem != null)
          {
            bpmItem = await _kc.BpmItems
              .Where(b => b.ItemNoId == tmpDTO.ItemNoId)
              .FirstOrDefaultAsync();
            /*
            custItem = await _kc.NsIcrs
              .Where(c => c.ItemNoId == tmpDTO.ItemNoId)
              .Where(c => c.CustomerId == houzzCustId)
              .Where(c => c.IsInvFeed == 1)
              .FirstOrDefaultAsync();
            */
            custItem = await _kc.MkIcrs
              .Where(c => c.ItemNoId == tmpDTO.ItemNoId)
              .Where(c => c.MarketId == houzzMkId)
              .Where(c => c.IsInvFeed == true)
              .FirstOrDefaultAsync();
            if (custItem != null) // NEED TO RE VISIT for Custom SKU!!!
            {
              tmpLocs = invFeedsRepItem.InvFeedsRepItemLocs.ToList();//.Where(i => i.LocationId == locId).FirstOrDefault();

              if (tmpLocs != null)
              {
                foreach (InvFeedsRepItemLoc tmpEachLoc in tmpLocs)
                {
                  houzzDTO = serviceResponse.FindLast(x => x.HouzzSku == custItem.CustSku);
                  if (houzzDTO != null)
                  {
                    houzzDTO.Qty += (invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpEachLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0);
                  }
                }
              }
            }
          }
          //invFeedsReportItemList.Remove(tmpDTO);
        }
        index++;
      } // End of while

      return serviceResponse;
    }


    // Get inventory feeding export for Houzz
    // unfinished - Finished by Brian Yi on 09/17/2021
    // Need to fix this one first! on 04/10/2024
    public async Task<List<ShopifyFeedDTO>> GetInvFeedsShopify(int customerId, DateTime historyDate)
    {
      int bpmWeb = 9, mellowWeb = 18;
      List<ShopifyFeedDTO> serviceResponse = new List<ShopifyFeedDTO>();

      //int houzzCustId = customerId;//, bancId = 4, mainslId = 25;
      DateTime beginningDate = new DateTime(historyDate.AddDays(-1).Year, historyDate.AddDays(-1).Month, historyDate.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(historyDate.AddDays(1).Year, historyDate.AddDays(1).Month, historyDate.AddDays(1).Day, 0, 0, 0);
      InvFeedsReport invFeedReport = await _kc.InvFeedsReports
        .Where(ifr => (DateTime)ifr.CreatedDate > beginningDate && (DateTime)ifr.CreatedDate < afterDate)
        .Where(ifr => ifr.IsApproved == true)
        .Include(x => x.InvFeedsItems)
        .OrderByDescending(x => x.CreatedDate)
        .FirstOrDefaultAsync();

      if (invFeedReport == null) return serviceResponse;

      List<InvFeedsRepTableDetail> invFeedsRepTableDetails = await _kc.InvFeedsRepTableDetails
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .ToListAsync();

      List<InvFeedsShopify> invFeedsShopifies = await _kc.InvFeedsShopifies
        .Where(s => s.CustomerId == customerId && s.IsFeedable == true)
        .Where(s => s.ItemNoId != null)
        .ToListAsync();
      /*
      List<NsIcr> HouzzIcrs = await _kc.NsIcrs
        .Where(icrs => icrs.CustomerId == houzzCustId && icrs.IsInvFeed == 1)
        .Include(icr => icr.ItemNo)
        .ToListAsync();
      */


      ShopifyFeedDTO shopifyDTO = new ShopifyFeedDTO();

      List<InvFeedsReportItem> invFeedsReportItemList = await _kc.InvFeedsReportItems
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .Include(i => i.InvFeedsRepItemDetails)
        .ToListAsync();

      /*
      BpmLocation bpmBancLoc = await _kc.BpmLocations
        .Where(b => b.LocationId == bancId)
        .FirstOrDefaultAsync();

      BpmLocation bpmMainslLoc = await _kc.BpmLocations
        .Where(b => b.LocationId == mainslId)
        .FirstOrDefaultAsync();
      */
      List<InvFeedsShopifyOption> invFeedsShopifyOptions = await _kc.InvFeedsShopifyOptions
        .ToListAsync();

      List<ItemStatus> bpmItemStatus = await _kc.ItemStatuses
        .ToListAsync();

      int index = 0;
      InvFeedsReportItem tmpDTO = new InvFeedsReportItem();
      List<InvFeedsRepItemLoc> tmpLocs = new List<InvFeedsRepItemLoc>();

      serviceResponse = invFeedsShopifies.Select(sf =>
      new ShopifyFeedDTO()
      {
        Handle = sf.Handle,
        Title = sf.Title,
        SKU = sf.Sku,
        HSCode = sf.HsCode,
        COO = sf.Coo,
        QtyAvail = 0,
        Incoming = 0,
        Unavailable = 0,
        Committed = 0,
        Location = "1951 Fairway Drive",
        ItemNoId = (int)sf.ItemNoId,
        Option1Name = sf.Option1Name,
        Option1Value = sf.Option1Value,
        Option2Name = sf.Option2Name,
        Option2Value = sf.Option2Value,
        Option3Name = sf.Option3Name,
        Option3Value = sf.Option3Value
        /*
        Option1Name = (sf.InvFeedsShopifyOption1Id != null ? invFeedsShopifyOptions.FindLast(so => so.InvFeedsShopifyOptionId == sf.InvFeedsShopifyOption1Id).OptionName : ""),
        Option1Value = (sf.InvFeedsShopifyOption1Id != null ? invFeedsShopifyOptions.FindLast(so => so.InvFeedsShopifyOptionId == sf.InvFeedsShopifyOption1Id).OptionValue : ""),
        Option2Name = (sf.InvFeedsShopifyOption2Id != null ? invFeedsShopifyOptions.FindLast(so => so.InvFeedsShopifyOptionId == sf.InvFeedsShopifyOption2Id).OptionName : ""),
        Option2Value = (sf.InvFeedsShopifyOption2Id != null ? invFeedsShopifyOptions.FindLast(so => so.InvFeedsShopifyOptionId == sf.InvFeedsShopifyOption2Id).OptionValue : ""),
        Option3Name = (sf.InvFeedsShopifyOption3Id != null ? invFeedsShopifyOptions.FindLast(so => so.InvFeedsShopifyOptionId == sf.InvFeedsShopifyOption3Id).OptionName : ""),
        Option3Value = (sf.InvFeedsShopifyOption3Id != null ? invFeedsShopifyOptions.FindLast(so => so.InvFeedsShopifyOptionId == sf.InvFeedsShopifyOption3Id).OptionValue : "")*/
      }).ToList();

      ShopifyFeedDTO tmpShopifyDTO = new ShopifyFeedDTO();
      InvFeedsRepItemDetail invFeedsRepItem = new InvFeedsRepItemDetail();
      BpmItem bpmItem = new BpmItem();
      List<BpmItem> bpmItems = await _kc.BpmItems
        .ToListAsync();
      InvFeedsShopify custItem = new InvFeedsShopify();
      // invFeedsRepTableDetails

      InvFeedsRepTableDetail tmpTableDetail = new InvFeedsRepTableDetail();

      foreach (ShopifyFeedDTO tmpDto in serviceResponse)
      {
        /*
        bpmItem = await _kc.BpmItems
          .Where(b => b.ItemNoId == tmpDTO.ItemNoId)
          .FirstOrDefaultAsync();
        */
        tmpTableDetail = invFeedsRepTableDetails.Where(i => i.ItemNoId == tmpDto.ItemNoId).FirstOrDefault();
        if (tmpTableDetail != null)
        {
          if (customerId == bpmWeb)
          {
            tmpDto.QtyAvail = (int)(tmpTableDetail.BpmWebQtyMainSl + tmpTableDetail.BpmWebQtyZinusChs + tmpTableDetail.BpmWebQtyZinusTracy);
          }
          else if (customerId == mellowWeb)
          {
            tmpDto.QtyAvail = (int)(tmpTableDetail.MellowWebQtyMainSl + tmpTableDetail.MellowWebQtyZinusChs + tmpTableDetail.MellowWebQtyZinusTracy);
          }
          else
          {
            Console.WriteLine("No Shopify website Assigned!");
          }

        } // End of Table Detail

      } // End of foreach


      /*
      while (index < invFeedsReportItemList.Count)
      {
        tmpDTO = invFeedsReportItemList[index];
        if (tmpDTO != null)
        {
          invFeedsRepItem = await _kc.InvFeedsRepItemDetails
            .Where(i => i.InvFeedsReportItemId == tmpDTO.InvFeedsReportItemId && i.CustomerId == customerId)
            .Include(i => i.InvFeedsRepItemLocs)
            .FirstOrDefaultAsync();

          if (invFeedsRepItem != null)
          {
            bpmItem = await _kc.BpmItems
              .Where(b => b.ItemNoId == tmpDTO.ItemNoId)
              .FirstOrDefaultAsync();

            custItem = await _kc.InvFeedsShopifies
              .Where(c => c.Sku == bpmItem.ItemName)
              .Where(c => c.CustomerId == customerId)
              .Where(c => c.IsFeedable == true)
              .FirstOrDefaultAsync();


            if (custItem != null) // NEED TO RE VISIT for Custom SKU!!!
            {
              tmpLocs = invFeedsRepItem.InvFeedsRepItemLocs.ToList();//.Where(i => i.LocationId == locId).FirstOrDefault();

              if (tmpLocs != null)
              {
                foreach (InvFeedsRepItemLoc tmpEachLoc in tmpLocs)
                {
                  shopifyDTO = serviceResponse.FindLast(x => x.SKU == custItem.Sku);
                  if (shopifyDTO != null)
                  {
                    shopifyDTO.QtyAvail += (invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpEachLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0);
                  }
                }
              }
            }
          }
          //invFeedsReportItemList.Remove(tmpDTO);
        }
        index++;
      } // End of while
      */
      return serviceResponse;
    }



    // Get other markets export
    // Unfinished
    public async Task<List<eBayFeedDTO>> GetInvFeedsOthers(DateTime historyDate)
    {

      List<eBayFeedDTO> serviceResponse = new List<eBayFeedDTO>();

      return serviceResponse;
    }

    // Get Inventory Feeding Rules for Mainsl & Banc Inventory layout
    // By Brian Yi on 04/28/2021
    public async Task<GetInventoryFeedMarketRule> GetInventoryFeedingRule(int ruleId)
    {
      GetInventoryFeedMarketRule serviceResponse;
      InvFeedsRule invFeedsRule = await _kc.InvFeedsRules
        .Where(i => i.InvFeedRuleId == ruleId)
        .Include(i => i.Customer)
        .Include(i => i.LastModifiedByNavigation)
        .FirstOrDefaultAsync();
      serviceResponse = new GetInventoryFeedMarketRule()
      {
        InvFeedRuleId = invFeedsRule.InvFeedRuleId,
        CustomerId = (int)invFeedsRule.CustomerId,
        CustomerName = invFeedsRule.Customer.CustName,
        ZeroOutAt = (int)invFeedsRule.ZeroOutAt,
        CustomFeedRatio = (int)invFeedsRule.CustomFeedRatio,
        LastModifiedBy = (invFeedsRule.LastModifiedByNavigation.EmployeeName != null ? invFeedsRule.LastModifiedByNavigation.EmployeeName : ""),
        LastModifiedTime = (invFeedsRule.LastModifiedTime.HasValue ? (DateTime)invFeedsRule.LastModifiedTime : DateTime.Now),
        IsActivated = (bool)invFeedsRule.IsActivated,
        CustomFeedRatioText = ((int)invFeedsRule.CustomFeedRatio < 0 ? "None" : ((int)invFeedsRule.CustomFeedRatio + "%"))
      };
      return serviceResponse;
    }


    // Updating Inventory feeding rule for a SKU
    // By Brian Yi on 06/07/21
    // Modified on 08/10/2021
    public async Task<bool> UpdateInvFeedsItem(int empId, GetMainslBancInvItemDetailDTO itemDto)
    {
      int amazonID = 5, bpmWebID = 9, ebayID = 12, houzzID = 14, mellowWebID = 18, ostID = 21, walmartID = 26, wayfairID = 29, homeDepotID = 40, targetID = 51, bancId = 4, mainslId = 25, swcaftId = 54, bascId = 62;
      bool result = true;
      DateTime todayDate = DateTime.Now;
      string tmpStr = "";
      GetMainslBancInvItemDTO invItemDto = itemDto.GetMainslBancInvItemDTO;

      // First, Qty Update to each warehouse
      InvFeedsItem invFeedsItem = await _kc.InvFeedsItems
        .Where(i => i.InvFeedsItemId == invItemDto.InventoryItemId)
        .Include(i => i.InvFeedsItemLocQties)
        .FirstOrDefaultAsync();

      InvFeedsItemLocQty tmpLocQty = new InvFeedsItemLocQty();

      if (invFeedsItem.InvFeedsItemLocQties.Count > 0)
      {
        // BANC
        tmpLocQty = invFeedsItem.InvFeedsItemLocQties.Where(x => x.ItemLocId == bancId).FirstOrDefault();
        if (tmpLocQty != null)
        {
          tmpLocQty.QtyAvail = invItemDto.QtyAvailBanc;
          tmpLocQty.StagePoqtyModified = invItemDto.StagePOModBanc;
          _kc.InvFeedsItemLocQties.Update(tmpLocQty);
        }
        else if (tmpLocQty == null && (invItemDto.QtyAvailBanc > 0 || invItemDto.StagePOModBanc > 0))
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = bancId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invItemDto.QtyAvailBanc;
          tmpLocQty.StagePoqtyModified = invItemDto.StagePOModBanc;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }

        // BASC
        tmpLocQty = invFeedsItem.InvFeedsItemLocQties.Where(x => x.ItemLocId == bascId).FirstOrDefault();
        if (tmpLocQty != null)
        {
          tmpLocQty.QtyAvail = invItemDto.QtyAvailBasc;
          tmpLocQty.StagePoqtyModified = invItemDto.StagePOModBasc;
          _kc.InvFeedsItemLocQties.Update(tmpLocQty);
        }
        else if (tmpLocQty == null && (invItemDto.QtyAvailBasc > 0 || invItemDto.StagePOModBasc > 0))
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = bascId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invItemDto.QtyAvailBasc;
          tmpLocQty.StagePoqtyModified = invItemDto.StagePOModBasc;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }

        // Mainsl
        tmpLocQty = invFeedsItem.InvFeedsItemLocQties.Where(x => x.ItemLocId == mainslId).FirstOrDefault();
        if (tmpLocQty != null)
        {
          tmpLocQty.QtyAvail = invItemDto.QtyAvailMainsl;
          tmpLocQty.StagePoqtyModified = invItemDto.StagePOModMainsl;
          _kc.InvFeedsItemLocQties.Update(tmpLocQty);
        }
        else if (tmpLocQty == null && (invItemDto.QtyAvailMainsl > 0 || invItemDto.StagePOModMainsl > 0))
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = mainslId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invItemDto.QtyAvailMainsl;
          tmpLocQty.StagePoqtyModified = invItemDto.StagePOModMainsl;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }

        // Swcaft
        tmpLocQty = invFeedsItem.InvFeedsItemLocQties.Where(x => x.ItemLocId == swcaftId).FirstOrDefault();
        if (tmpLocQty != null)
        {
          tmpLocQty.QtyAvail = invItemDto.QtyAvailSwcaft;
          tmpLocQty.StagePoqtyModified = invItemDto.StagePOModSwcaft;
          _kc.InvFeedsItemLocQties.Update(tmpLocQty);
        }
        else if (tmpLocQty == null && (invItemDto.QtyAvailSwcaft > 0 || invItemDto.StagePOModSwcaft > 0))
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = swcaftId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invItemDto.QtyAvailSwcaft;
          tmpLocQty.StagePoqtyModified = invItemDto.StagePOModSwcaft;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }
        await _kc.SaveChangesAsync();
      }
      else if (invFeedsItem.InvFeedsItemLocQties.Count == 0)
      {

        // Banc
        if (invItemDto.QtyAvailBanc > 0 || invItemDto.StagePOModBanc > 0)
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = bancId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invItemDto.QtyAvailBanc;
          tmpLocQty.StagePoqtyModified = invItemDto.StagePOModBanc;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }

        // Basc
        if (invItemDto.QtyAvailBasc > 0 || invItemDto.StagePOModBasc > 0)
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = bascId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invItemDto.QtyAvailBasc;
          tmpLocQty.StagePoqtyModified = invItemDto.StagePOModBasc;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }

        // Mainsl
        if (invItemDto.QtyAvailMainsl > 0 || invItemDto.StagePOModMainsl > 0)
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = mainslId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invItemDto.QtyAvailMainsl;
          tmpLocQty.StagePoqtyModified = invItemDto.StagePOModMainsl;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }

        // SWCAFT
        if (invItemDto.QtyAvailSwcaft > 0 || invItemDto.StagePOModSwcaft > 0)
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = swcaftId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invItemDto.QtyAvailSwcaft;
          tmpLocQty.StagePoqtyModified = invItemDto.StagePOModSwcaft;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }
        await _kc.SaveChangesAsync();
      } // End of if update


      /*
      foreach (InvFeedsItemLocQty tmpDto in invFeedsItem.InvFeedsItemLocQties)
      {
        if (tmpDto.ItemLocId == bancId) //BANC
        {
          tmpDto.QtyAvail = invItemDto.QtyAvailBanc;
          tmpDto.QtyOnHand = invItemDto.QtyOnHandBanc;
          tmpDto.StagePoqtyModified = invItemDto.StagePOModBanc;
        }
        else if (tmpDto.ItemLocId == mainslId) // Mainsl
        {
          tmpDto.QtyAvail = invItemDto.QtyAvailMainsl;
          tmpDto.QtyOnHand = invItemDto.QtyOnHandMainsl;
          tmpDto.StagePoqtyModified = invItemDto.StagePOModMainsl;
        }
        else if (tmpDto.ItemLocId == swcaftId) // Swcaft
        {
          tmpDto.QtyAvail = invItemDto.QtyAvailSwcaft;
          tmpDto.QtyOnHand = invItemDto.QtyOnHandSwcaft;
          tmpDto.StagePoqtyModified = invItemDto.StagePOModSwcaft;
        }
        else if (tmpDto.ItemLocId == bascId) // BASC
        {
          tmpDto.QtyAvail = invItemDto.QtyAvailBasc;
          tmpDto.QtyOnHand = invItemDto.QtyOnHandBasc;
          tmpDto.StagePoqtyModified = invItemDto.StagePOModBasc;
        }
      }
      // Save Warehouse Qty. updates
      _kc.SaveChanges();
      */
      // 2. Update SKU's Remark but not attributes
      InvFeedsRemark invFeedsRemark = new InvFeedsRemark();
      List<InvFeedsRmrkCtgry> invFeedsRmrkCtgryList = await _kc.InvFeedsRmrkCtgries
        .Where(i => i.IsActivated == true)
        .ToListAsync();

      foreach (InvFeedsRemarkCategory tmpDto in itemDto.remarkList)
      {
        invFeedsRemark = await _kc.InvFeedsRemarks
          .Where(i => i.ItemNoId == invItemDto.ItemNoId && i.InvFeedsRmrkCtgryId == tmpDto.categoryId)
          .FirstOrDefaultAsync();
        if (invFeedsRemark == null && tmpDto.isActivatedOnThisSKU == true)
        {
          invFeedsRemark = new InvFeedsRemark()
          {
            ItemNoId = invItemDto.ItemNoId,
            InvFeedsRmrkCtgryId = tmpDto.categoryId,
            IsActivated = true,
            LastModifiedDate = todayDate,
            LastModifiedBy = empId
          };
          _kc.InvFeedsRemarks.Add(invFeedsRemark);
          await _kc.SaveChangesAsync();
        }
        else if (invFeedsRemark != null && invFeedsRemark.IsActivated != tmpDto.isActivatedOnThisSKU)
        {
          invFeedsRemark.IsActivated = tmpDto.isActivatedOnThisSKU;
          invFeedsRemark.LastModifiedBy = empId;
          invFeedsRemark.LastModifiedDate = todayDate;
          _kc.InvFeedsRemarks.Update(invFeedsRemark);
          await _kc.SaveChangesAsync();
        }
      }

      // 3.Checking Do Not Feed from a certain warehouse & to a certain market
      // Third, checking do not feed from a certain warehouse & to a certain market 
      InvFeedsRuleSku invFeedsRuleSku = await _kc.InvFeedsRuleSkus
        .Where(i => i.ItemNoId == invItemDto.ItemNoId)
        .Include(i => i.InvFeedsRuleSkumkts)
        .FirstOrDefaultAsync();
      List<InvFeedsRule> invFeedsRules = await _kc.InvFeedsRules
        .Where(i => i.IsActivated == true)
        .ToListAsync();
      InvFeedsRuleSkumkt invFeedsRuleSkumkt = new InvFeedsRuleSkumkt();
      List<InvFeedsRuleSkumkt> invFeedsRuleSkumktList = new List<InvFeedsRuleSkumkt>();
      string tmpStrRatio = "";
      int tmpInt = 0, customRatio = -1, customZeroOut = -1;

      if (invFeedsRuleSku == null) // Need to make new record
      {
        if ((itemDto.AmzDoNotFeed == true || itemDto.BPMDoNotFeed == true || itemDto.eBayDoNotFeed == true || itemDto.HouzzDoNotFeed ||
          itemDto.MellowDoNotFeed == true || itemDto.OstDoNotFeed == true || itemDto.WlmrtDoNotFeed == true || itemDto.WyfrDoNotFeed == true
          || itemDto.HomeDepotDoNotFeed == true || itemDto.TargetDoNotFeed == true) ||
            (itemDto.AmzSKUSpecific == true || itemDto.BPMSKUSpecific == true || itemDto.eBaySKUSpecific == true || itemDto.HouzzSKUSpecific == true
            || itemDto.MellowSKUSpecific == true || itemDto.OstSKUSpecific == true || itemDto.WlmrtSKUSpecific == true || itemDto.WyfrSKUSpecific == true
            || itemDto.HomeDepotSKUSpecific == true || itemDto.TargetSKUSpecific == true))
        {
          // Need to create InvFeedsRuleSKU
          invFeedsRuleSku = createInvFeedsRuleSku(new InvFeedsRuleSku(), invItemDto.ItemNoId, empId, todayDate,
            itemDto.DoNotFeedFromBanc, itemDto.DoNotFeedFromBasc, itemDto.DoNotFeedFromMainsl, itemDto.DoNotFeedFromSwcaft);
          _kc.Add(invFeedsRuleSku);
          await _kc.SaveChangesAsync();

          if (itemDto.AmzDoNotFeed == true || itemDto.AmzSKUSpecific == true)
          {
            if (itemDto.AmzSKUSpecific == true)
            {
              tmpStr = Regex.Replace(itemDto.AmzCustPercentageTxt, "[^0-9]", "");
              customRatio = int.Parse(tmpStr);
              customZeroOut = itemDto.AmzCustZeroOutAt;
            }
            else
            { customRatio = -1; customZeroOut = -1; }
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              amazonID, itemDto.AmzDoNotFeed, itemDto.AmzSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
            await _kc.SaveChangesAsync();
          }

          if (itemDto.BPMDoNotFeed == true || itemDto.BPMSKUSpecific == true)
          {
            if (itemDto.BPMSKUSpecific == true)
            {
              tmpStr = Regex.Replace(itemDto.BPMCustPercentageTxt, "[^0-9]", "");
              customRatio = int.Parse(tmpStr);
              customZeroOut = itemDto.BPMCustZeroOutAt;
            }
            else
            { customRatio = -1; customZeroOut = -1; }
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              bpmWebID, itemDto.BPMDoNotFeed, itemDto.BPMSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
            await _kc.SaveChangesAsync();
          }

          if (itemDto.eBayDoNotFeed == true || itemDto.eBaySKUSpecific == true)
          {
            if (itemDto.eBaySKUSpecific == true)
            {
              tmpStr = Regex.Replace(itemDto.eBayCustPercentageTxt, "[^0-9]", "");
              customRatio = int.Parse(tmpStr);
              customZeroOut = itemDto.eBayCustZeroOutAt;
            }
            else
            { customRatio = -1; customZeroOut = -1; }
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              ebayID, itemDto.eBayDoNotFeed, itemDto.eBaySKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
            await _kc.SaveChangesAsync();
          }

          if (itemDto.HouzzDoNotFeed == true || itemDto.HouzzSKUSpecific == true)
          {
            if (itemDto.HouzzSKUSpecific == true)
            {
              tmpStr = Regex.Replace(itemDto.HouzzCustPercentageTxt, "[^0-9]", "");
              customRatio = int.Parse(tmpStr);
              customZeroOut = itemDto.HouzzCustZeroOutAt;
            }
            else
            { customRatio = -1; customZeroOut = -1; }
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              houzzID, itemDto.HouzzDoNotFeed, itemDto.HouzzSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
            await _kc.SaveChangesAsync();
          }

          if (itemDto.MellowDoNotFeed == true || itemDto.MellowSKUSpecific == true)
          {
            if (itemDto.MellowSKUSpecific == true)
            {
              tmpStr = Regex.Replace(itemDto.MellowCustPercentageTxt, "[^0-9]", "");
              customRatio = int.Parse(tmpStr);
              customZeroOut = itemDto.MellowCustZeroOutAt;
            }
            else
            { customRatio = -1; customZeroOut = -1; }
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              mellowWebID, itemDto.MellowDoNotFeed, itemDto.MellowSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
            await _kc.SaveChangesAsync();
          }

          if (itemDto.OstDoNotFeed == true || itemDto.OstSKUSpecific == true)
          {
            if (itemDto.OstSKUSpecific == true)
            {
              tmpStr = Regex.Replace(itemDto.OstCustPercentageTxt, "[^0-9]", "");
              customRatio = int.Parse(tmpStr);
              customZeroOut = itemDto.OstCustZeroOutAt;
            }
            else
            { customRatio = -1; customZeroOut = -1; }
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              ostID, itemDto.OstSKUSpecific, itemDto.OstSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
            await _kc.SaveChangesAsync();
          }

          if (itemDto.WlmrtDoNotFeed == true || itemDto.WlmrtSKUSpecific == true)
          {
            if (itemDto.WlmrtSKUSpecific == true)
            {
              tmpStr = Regex.Replace(itemDto.WlmrtCustPercentageTxt, "[^0-9]", "");
              customRatio = int.Parse(tmpStr);
              customZeroOut = itemDto.WlmrtCustZeroOutAt;
            }
            else
            { customRatio = -1; customZeroOut = -1; }
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              walmartID, itemDto.WlmrtDoNotFeed, itemDto.WlmrtSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
            await _kc.SaveChangesAsync();
          }

          if (itemDto.WyfrDoNotFeed == true || itemDto.WyfrSKUSpecific == true)
          {
            if (itemDto.WyfrSKUSpecific == true)
            {
              tmpStr = Regex.Replace(itemDto.WyfrCustPercentageTxt, "[^0-9]", "");
              customRatio = int.Parse(tmpStr);
              customZeroOut = itemDto.WyfrCustZeroOutAt;
            }
            else
            { customRatio = -1; customZeroOut = -1; }
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              wayfairID, itemDto.WyfrDoNotFeed, itemDto.WyfrSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
            await _kc.SaveChangesAsync();
          }

          if (itemDto.HomeDepotDoNotFeed == true || itemDto.HomeDepotSKUSpecific == true)
          {
            if (itemDto.HomeDepotSKUSpecific == true)
            {
              tmpStr = Regex.Replace(itemDto.HomeDepotCustPercentageTxt, "[^0-9]", "");
              customRatio = int.Parse(tmpStr);
              customZeroOut = itemDto.HomeDepotCustZeroOutAt;
            }
            else
            { customRatio = -1; customZeroOut = -1; }
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              homeDepotID, itemDto.HomeDepotDoNotFeed, itemDto.HomeDepotSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
            await _kc.SaveChangesAsync();
          }

          if (itemDto.TargetDoNotFeed == true || itemDto.TargetSKUSpecific == true)
          {
            if (itemDto.TargetSKUSpecific == true)
            {
              tmpStr = Regex.Replace(itemDto.TargetCustPercentageTxt, "[^0-9]", "");
              customRatio = int.Parse(tmpStr);
              customZeroOut = itemDto.TargetCustZeroOutAt;
            }
            else
            { customRatio = -1; customZeroOut = -1; }
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              targetID, itemDto.TargetDoNotFeed, itemDto.TargetSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
            await _kc.SaveChangesAsync();
          }
        }// Checking Any SKU specific 'Do Not Feed' or 'Rules', like Ratio & Zero out
      }
      else // So, there is a InvFeedsRuleSku record
      {
        invFeedsRuleSku.DoNotFeedFromBanc = itemDto.DoNotFeedFromBanc;
        invFeedsRuleSku.DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl;
        invFeedsRuleSku.DoNotFeedFromBasc = itemDto.DoNotFeedFromBasc;
        invFeedsRuleSku.DoNotFeedFromSwcaft = itemDto.DoNotFeedFromSwcaft;
        invFeedsRuleSku.LastModifiedBy = empId;
        invFeedsRuleSku.LastModifiedDate = todayDate;
        await _kc.SaveChangesAsync();

        // InvFeedsRuleSkumkt tmpSkuMkt in invFeedsRuleSku.InvFeedsRuleSkumkts
        if (itemDto.AmzDoNotFeed == true)
        {
          invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == amazonID).FirstOrDefault();

          if (itemDto.AmzSKUSpecific == true)
          {
            tmpStr = Regex.Replace(itemDto.AmzCustPercentageTxt, "[^0-9]", "");
            customRatio = int.Parse(tmpStr);
            customZeroOut = itemDto.AmzCustZeroOutAt;
          }
          else
          { customRatio = -1; customZeroOut = -1; }
          if (invFeedsRuleSkumkt == null)
          {
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              amazonID, itemDto.AmzDoNotFeed, itemDto.AmzSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
          }
          else
          {
            invFeedsRuleSkumkt.CustomRuleForRatioZeroOut = itemDto.AmzSKUSpecific;
            invFeedsRuleSkumkt.CustomFixedPercentage = customRatio;
            invFeedsRuleSkumkt.CustomZeroOutAt = customZeroOut;
            invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.AmzDoNotFeed;
          }
          await _kc.SaveChangesAsync();
        }
        else
        {
          invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == amazonID).FirstOrDefault();
          if (itemDto.AmzSKUSpecific == true)
          {
            tmpStr = Regex.Replace(itemDto.AmzCustPercentageTxt, "[^0-9]", "");
            customRatio = int.Parse(tmpStr);
            customZeroOut = itemDto.AmzCustZeroOutAt;
          }
          else
          { customRatio = -1; customZeroOut = -1; }

          if (invFeedsRuleSkumkt == null && itemDto.AmzSKUSpecific == true)
          {
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              amazonID, itemDto.AmzDoNotFeed, itemDto.AmzSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
            await _kc.SaveChangesAsync();
          }
          else if (invFeedsRuleSkumkt != null)
          {
            invFeedsRuleSkumkt.CustomRuleForRatioZeroOut = itemDto.AmzSKUSpecific;
            invFeedsRuleSkumkt.CustomFixedPercentage = customRatio;
            invFeedsRuleSkumkt.CustomZeroOutAt = customZeroOut;
            invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.AmzDoNotFeed;
            await _kc.SaveChangesAsync();
          }
        } // End of Amazon SKU Specific

        if (itemDto.BPMDoNotFeed == true)
        {
          invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == bpmWebID).FirstOrDefault();

          if (itemDto.BPMSKUSpecific == true)
          {
            tmpStr = Regex.Replace(itemDto.BPMCustPercentageTxt, "[^0-9]", "");
            customRatio = int.Parse(tmpStr);
            customZeroOut = itemDto.BPMCustZeroOutAt;
          }
          else
          { customRatio = -1; customZeroOut = -1; }
          if (invFeedsRuleSkumkt == null)
          {
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              bpmWebID, itemDto.BPMDoNotFeed, itemDto.BPMSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
          }
          else
          {
            invFeedsRuleSkumkt.CustomRuleForRatioZeroOut = itemDto.BPMSKUSpecific;
            invFeedsRuleSkumkt.CustomFixedPercentage = customRatio;
            invFeedsRuleSkumkt.CustomZeroOutAt = customZeroOut;
            invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.BPMDoNotFeed;
          }
          await _kc.SaveChangesAsync();
        }
        else
        {
          invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == bpmWebID).FirstOrDefault();
          if (itemDto.BPMSKUSpecific == true)
          {
            tmpStr = Regex.Replace(itemDto.BPMCustPercentageTxt, "[^0-9]", "");
            customRatio = int.Parse(tmpStr);
            customZeroOut = itemDto.BPMCustZeroOutAt;
          }
          else
          { customRatio = -1; customZeroOut = -1; }

          if (invFeedsRuleSkumkt == null && itemDto.BPMSKUSpecific == true)
          {
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              bpmWebID, itemDto.BPMDoNotFeed, itemDto.BPMSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
            await _kc.SaveChangesAsync();
          }
          else if (invFeedsRuleSkumkt != null)
          {
            invFeedsRuleSkumkt.CustomRuleForRatioZeroOut = itemDto.BPMSKUSpecific;
            invFeedsRuleSkumkt.CustomFixedPercentage = customRatio;
            invFeedsRuleSkumkt.CustomZeroOutAt = customZeroOut;
            invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.BPMDoNotFeed;
            await _kc.SaveChangesAsync();
          }
        } // End of BPM SKU Specific

        if (itemDto.eBayDoNotFeed == true)
        {
          invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == ebayID).FirstOrDefault();

          if (itemDto.eBaySKUSpecific == true)
          {
            tmpStr = Regex.Replace(itemDto.eBayCustPercentageTxt, "[^0-9]", "");
            customRatio = int.Parse(tmpStr);
            customZeroOut = itemDto.eBayCustZeroOutAt;
          }
          else
          { customRatio = -1; customZeroOut = -1; }
          if (invFeedsRuleSkumkt == null)
          {
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              ebayID, itemDto.BPMDoNotFeed, itemDto.eBaySKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
          }
          else
          {
            invFeedsRuleSkumkt.CustomRuleForRatioZeroOut = itemDto.eBaySKUSpecific;
            invFeedsRuleSkumkt.CustomFixedPercentage = customRatio;
            invFeedsRuleSkumkt.CustomZeroOutAt = customZeroOut;
            invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.eBayDoNotFeed;
          }
          await _kc.SaveChangesAsync();
        }
        else
        {
          invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == ebayID).FirstOrDefault();
          if (itemDto.eBaySKUSpecific == true)
          {
            tmpStr = Regex.Replace(itemDto.eBayCustPercentageTxt, "[^0-9]", "");
            customRatio = int.Parse(tmpStr);
            customZeroOut = itemDto.eBayCustZeroOutAt;
          }
          else
          { customRatio = -1; customZeroOut = -1; }

          if (invFeedsRuleSkumkt == null && itemDto.eBaySKUSpecific == true)
          {
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              ebayID, itemDto.eBayDoNotFeed, itemDto.eBaySKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
            await _kc.SaveChangesAsync();
          }
          else if (invFeedsRuleSkumkt != null)
          {
            invFeedsRuleSkumkt.CustomRuleForRatioZeroOut = itemDto.eBaySKUSpecific;
            invFeedsRuleSkumkt.CustomFixedPercentage = customRatio;
            invFeedsRuleSkumkt.CustomZeroOutAt = customZeroOut;
            invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.eBayDoNotFeed;
            await _kc.SaveChangesAsync();
          }
        } // End of eBay SKU Specific

        if (itemDto.HouzzDoNotFeed == true)
        {
          invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == houzzID).FirstOrDefault();

          if (itemDto.HouzzSKUSpecific == true)
          {
            tmpStr = Regex.Replace(itemDto.HouzzCustPercentageTxt, "[^0-9]", "");
            customRatio = int.Parse(tmpStr);
            customZeroOut = itemDto.HouzzCustZeroOutAt;
          }
          else
          { customRatio = -1; customZeroOut = -1; }
          if (invFeedsRuleSkumkt == null)
          {
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              houzzID, itemDto.HouzzDoNotFeed, itemDto.HouzzSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
          }
          else
          {
            invFeedsRuleSkumkt.CustomRuleForRatioZeroOut = itemDto.HouzzSKUSpecific;
            invFeedsRuleSkumkt.CustomFixedPercentage = customRatio;
            invFeedsRuleSkumkt.CustomZeroOutAt = customZeroOut;
            invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.HouzzDoNotFeed;
          }
          await _kc.SaveChangesAsync();
        }
        else
        {
          invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == houzzID).FirstOrDefault();
          if (itemDto.HouzzSKUSpecific == true)
          {
            tmpStr = Regex.Replace(itemDto.HouzzCustPercentageTxt, "[^0-9]", "");
            customRatio = int.Parse(tmpStr);
            customZeroOut = itemDto.HouzzCustZeroOutAt;
          }
          else
          { customRatio = -1; customZeroOut = -1; }

          if (invFeedsRuleSkumkt == null && itemDto.HouzzSKUSpecific == true)
          {
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              houzzID, itemDto.HouzzDoNotFeed, itemDto.HouzzSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
            await _kc.SaveChangesAsync();
          }
          else if (invFeedsRuleSkumkt != null)
          {
            invFeedsRuleSkumkt.CustomRuleForRatioZeroOut = itemDto.HouzzSKUSpecific;
            invFeedsRuleSkumkt.CustomFixedPercentage = customRatio;
            invFeedsRuleSkumkt.CustomZeroOutAt = customZeroOut;
            invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.HouzzDoNotFeed;
            await _kc.SaveChangesAsync();
          }
        } // End of Houzz SKU Specific

        if (itemDto.MellowDoNotFeed == true)
        {
          invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == mellowWebID).FirstOrDefault();

          if (itemDto.MellowSKUSpecific == true)
          {
            tmpStr = Regex.Replace(itemDto.MellowCustPercentageTxt, "[^0-9]", "");
            customRatio = int.Parse(tmpStr);
            customZeroOut = itemDto.MellowCustZeroOutAt;
          }
          else
          { customRatio = -1; customZeroOut = -1; }
          if (invFeedsRuleSkumkt == null)
          {
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              mellowWebID, itemDto.MellowDoNotFeed, itemDto.MellowSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
          }
          else
          {
            invFeedsRuleSkumkt.CustomRuleForRatioZeroOut = itemDto.MellowSKUSpecific;
            invFeedsRuleSkumkt.CustomFixedPercentage = customRatio;
            invFeedsRuleSkumkt.CustomZeroOutAt = customZeroOut;
            invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.MellowDoNotFeed;
          }
          await _kc.SaveChangesAsync();
        }
        else
        {
          invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == mellowWebID).FirstOrDefault();
          if (itemDto.MellowSKUSpecific == true)
          {
            tmpStr = Regex.Replace(itemDto.MellowCustPercentageTxt, "[^0-9]", "");
            customRatio = int.Parse(tmpStr);
            customZeroOut = itemDto.MellowCustZeroOutAt;
          }
          else
          { customRatio = -1; customZeroOut = -1; }

          if (invFeedsRuleSkumkt == null && itemDto.MellowSKUSpecific == true)
          {
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              mellowWebID, itemDto.MellowDoNotFeed, itemDto.MellowSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
            await _kc.SaveChangesAsync();
          }
          else if (invFeedsRuleSkumkt != null)
          {
            invFeedsRuleSkumkt.CustomRuleForRatioZeroOut = itemDto.MellowSKUSpecific;
            invFeedsRuleSkumkt.CustomFixedPercentage = customRatio;
            invFeedsRuleSkumkt.CustomZeroOutAt = customZeroOut;
            invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.MellowDoNotFeed;
            await _kc.SaveChangesAsync();
          }
        } // End of Mellow SKU Specific

        if (itemDto.OstDoNotFeed == true)
        {
          invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == ostID).FirstOrDefault();

          if (itemDto.OstSKUSpecific == true)
          {
            tmpStr = Regex.Replace(itemDto.OstCustPercentageTxt, "[^0-9]", "");
            customRatio = int.Parse(tmpStr);
            customZeroOut = itemDto.OstCustZeroOutAt;
          }
          else
          { customRatio = -1; customZeroOut = -1; }
          if (invFeedsRuleSkumkt == null)
          {
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              ostID, itemDto.OstDoNotFeed, itemDto.OstSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
          }
          else
          {
            invFeedsRuleSkumkt.CustomRuleForRatioZeroOut = itemDto.OstSKUSpecific;
            invFeedsRuleSkumkt.CustomFixedPercentage = customRatio;
            invFeedsRuleSkumkt.CustomZeroOutAt = customZeroOut;
            invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.OstDoNotFeed;
          }
          await _kc.SaveChangesAsync();
        }
        else
        {
          invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == ostID).FirstOrDefault();
          if (itemDto.OstSKUSpecific == true)
          {
            tmpStr = Regex.Replace(itemDto.OstCustPercentageTxt, "[^0-9]", "");
            customRatio = int.Parse(tmpStr);
            customZeroOut = itemDto.OstCustZeroOutAt;
          }
          else
          { customRatio = -1; customZeroOut = -1; }

          if (invFeedsRuleSkumkt == null && itemDto.OstSKUSpecific == true)
          {
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              ostID, itemDto.OstDoNotFeed, itemDto.OstSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
            await _kc.SaveChangesAsync();
          }
          else if (invFeedsRuleSkumkt != null)
          {
            invFeedsRuleSkumkt.CustomRuleForRatioZeroOut = itemDto.OstSKUSpecific;
            invFeedsRuleSkumkt.CustomFixedPercentage = customRatio;
            invFeedsRuleSkumkt.CustomZeroOutAt = customZeroOut;
            invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.OstDoNotFeed;
            await _kc.SaveChangesAsync();
          }
        } // ENd of Overstock SKU Specific

        if (itemDto.WlmrtDoNotFeed == true)
        {
          invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == walmartID).FirstOrDefault();

          if (itemDto.WlmrtSKUSpecific == true)
          {
            tmpStr = Regex.Replace(itemDto.WlmrtCustPercentageTxt, "[^0-9]", "");
            customRatio = int.Parse(tmpStr);
            customZeroOut = itemDto.WlmrtCustZeroOutAt;
          }
          else
          { customRatio = -1; customZeroOut = -1; }
          if (invFeedsRuleSkumkt == null)
          {
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              walmartID, itemDto.WlmrtDoNotFeed, itemDto.WlmrtSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
          }
          else
          {
            invFeedsRuleSkumkt.CustomRuleForRatioZeroOut = itemDto.WlmrtSKUSpecific;
            invFeedsRuleSkumkt.CustomFixedPercentage = customRatio;
            invFeedsRuleSkumkt.CustomZeroOutAt = customZeroOut;
            invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.WlmrtDoNotFeed;
          }
          await _kc.SaveChangesAsync();
        }
        else
        {
          invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == walmartID).FirstOrDefault();
          if (itemDto.WlmrtSKUSpecific == true)
          {
            tmpStr = Regex.Replace(itemDto.WlmrtCustPercentageTxt, "[^0-9]", "");
            customRatio = int.Parse(tmpStr);
            customZeroOut = itemDto.WlmrtCustZeroOutAt;
          }
          else
          { customRatio = -1; customZeroOut = -1; }

          if (invFeedsRuleSkumkt == null && itemDto.WlmrtSKUSpecific == true)
          {
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              walmartID, itemDto.WlmrtDoNotFeed, itemDto.WlmrtSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
            await _kc.SaveChangesAsync();
          }
          else if (invFeedsRuleSkumkt != null)
          {
            invFeedsRuleSkumkt.CustomRuleForRatioZeroOut = itemDto.WlmrtSKUSpecific;
            invFeedsRuleSkumkt.CustomFixedPercentage = customRatio;
            invFeedsRuleSkumkt.CustomZeroOutAt = customZeroOut;
            invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.WlmrtDoNotFeed;
            await _kc.SaveChangesAsync();
          }
        } // End of Walmart SKU Specific

        if (itemDto.WyfrDoNotFeed == true)
        {
          invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == wayfairID).FirstOrDefault();

          if (itemDto.WyfrSKUSpecific == true)
          {
            tmpStr = Regex.Replace(itemDto.WyfrCustPercentageTxt, "[^0-9]", "");
            customRatio = int.Parse(tmpStr);
            customZeroOut = itemDto.WyfrCustZeroOutAt;
          }
          else
          { customRatio = -1; customZeroOut = -1; }
          if (invFeedsRuleSkumkt == null)
          {
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              wayfairID, itemDto.WyfrDoNotFeed, itemDto.WyfrSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
          }
          else
          {
            invFeedsRuleSkumkt.CustomRuleForRatioZeroOut = itemDto.WyfrSKUSpecific;
            invFeedsRuleSkumkt.CustomFixedPercentage = customRatio;
            invFeedsRuleSkumkt.CustomZeroOutAt = customZeroOut;
            invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.WyfrDoNotFeed;
          }
          await _kc.SaveChangesAsync();
        }
        else
        {
          invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == wayfairID).FirstOrDefault();
          if (itemDto.WyfrSKUSpecific == true)
          {
            tmpStr = Regex.Replace(itemDto.WyfrCustPercentageTxt, "[^0-9]", "");
            customRatio = int.Parse(tmpStr);
            customZeroOut = itemDto.WyfrCustZeroOutAt;
          }
          else
          { customRatio = -1; customZeroOut = -1; }

          if (invFeedsRuleSkumkt == null && itemDto.WyfrSKUSpecific == true)
          {
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              wayfairID, itemDto.WyfrDoNotFeed, itemDto.WyfrSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
            await _kc.SaveChangesAsync();
          }
          else if (invFeedsRuleSkumkt != null)
          {
            invFeedsRuleSkumkt.CustomRuleForRatioZeroOut = itemDto.WyfrSKUSpecific;
            invFeedsRuleSkumkt.CustomFixedPercentage = customRatio;
            invFeedsRuleSkumkt.CustomZeroOutAt = customZeroOut;
            invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.WyfrDoNotFeed;
            await _kc.SaveChangesAsync();
          }
        } // End of Wayfair SKU Specific


        if (itemDto.HomeDepotDoNotFeed == true)
        {
          invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == homeDepotID).FirstOrDefault();

          if (itemDto.HomeDepotSKUSpecific == true)
          {
            tmpStr = Regex.Replace(itemDto.HomeDepotCustPercentageTxt, "[^0-9]", "");
            customRatio = int.Parse(tmpStr);
            customZeroOut = itemDto.HomeDepotCustZeroOutAt;
          }
          else
          { customRatio = -1; customZeroOut = -1; }
          if (invFeedsRuleSkumkt == null)
          {
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              wayfairID, itemDto.HomeDepotDoNotFeed, itemDto.HomeDepotSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
          }
          else
          {
            invFeedsRuleSkumkt.CustomRuleForRatioZeroOut = itemDto.HomeDepotSKUSpecific;
            invFeedsRuleSkumkt.CustomFixedPercentage = customRatio;
            invFeedsRuleSkumkt.CustomZeroOutAt = customZeroOut;
            invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.HomeDepotDoNotFeed;
          }
          await _kc.SaveChangesAsync();
        }
        else
        {
          invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == homeDepotID).FirstOrDefault();
          if (itemDto.HomeDepotSKUSpecific == true)
          {
            tmpStr = Regex.Replace(itemDto.HomeDepotCustPercentageTxt, "[^0-9]", "");
            customRatio = int.Parse(tmpStr);
            customZeroOut = itemDto.HomeDepotCustZeroOutAt;
          }
          else
          { customRatio = -1; customZeroOut = -1; }

          if (invFeedsRuleSkumkt == null && itemDto.HomeDepotSKUSpecific == true)
          {
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              wayfairID, itemDto.HomeDepotDoNotFeed, itemDto.HomeDepotSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
            await _kc.SaveChangesAsync();
          }
          else if (invFeedsRuleSkumkt != null)
          {
            invFeedsRuleSkumkt.CustomRuleForRatioZeroOut = itemDto.HomeDepotSKUSpecific;
            invFeedsRuleSkumkt.CustomFixedPercentage = customRatio;
            invFeedsRuleSkumkt.CustomZeroOutAt = customZeroOut;
            invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.HomeDepotDoNotFeed;
            await _kc.SaveChangesAsync();
          }
        } // End of Home Depot SKU Specific


        if (itemDto.TargetDoNotFeed == true)
        {
          invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == targetID).FirstOrDefault();

          if (itemDto.TargetSKUSpecific == true)
          {
            tmpStr = Regex.Replace(itemDto.TargetCustPercentageTxt, "[^0-9]", "");
            customRatio = int.Parse(tmpStr);
            customZeroOut = itemDto.TargetCustZeroOutAt;
          }
          else
          { customRatio = -1; customZeroOut = -1; }
          if (invFeedsRuleSkumkt == null)
          {
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              wayfairID, itemDto.TargetDoNotFeed, itemDto.TargetSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
          }
          else
          {
            invFeedsRuleSkumkt.CustomRuleForRatioZeroOut = itemDto.TargetSKUSpecific;
            invFeedsRuleSkumkt.CustomFixedPercentage = customRatio;
            invFeedsRuleSkumkt.CustomZeroOutAt = customZeroOut;
            invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.TargetDoNotFeed;
          }
          await _kc.SaveChangesAsync();
        }
        else
        {
          invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == targetID).FirstOrDefault();
          if (itemDto.TargetSKUSpecific == true)
          {
            tmpStr = Regex.Replace(itemDto.TargetCustPercentageTxt, "[^0-9]", "");
            customRatio = int.Parse(tmpStr);
            customZeroOut = itemDto.TargetCustZeroOutAt;
          }
          else
          { customRatio = -1; customZeroOut = -1; }

          if (invFeedsRuleSkumkt == null && itemDto.TargetSKUSpecific == true)
          {
            invFeedsRuleSkumkt = createInvFeedsRuleSkuMkt(new InvFeedsRuleSkumkt(), invFeedsRuleSku.InvFeedsRuleSkuid,
              wayfairID, itemDto.TargetDoNotFeed, itemDto.TargetSKUSpecific, customRatio, customZeroOut);
            _kc.Add(invFeedsRuleSkumkt);
            await _kc.SaveChangesAsync();
          }
          else if (invFeedsRuleSkumkt != null)
          {
            invFeedsRuleSkumkt.CustomRuleForRatioZeroOut = itemDto.TargetSKUSpecific;
            invFeedsRuleSkumkt.CustomFixedPercentage = customRatio;
            invFeedsRuleSkumkt.CustomZeroOutAt = customZeroOut;
            invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.TargetDoNotFeed;
            await _kc.SaveChangesAsync();
          }
        } // End of Target SKU Specific

      }// End of invFeedsRuleSku
      return result;
    }




    // Upsrt InvFeedsRuleSku
    // By Brian Yi on 08/10/2021
    public InvFeedsRuleSku createInvFeedsRuleSku(InvFeedsRuleSku invFeedsRuleSku,
      int itemNoId, int empId, DateTime todayDate, bool doNotFeedFromBanc, bool doNotFeedFromBasc, bool doNotFeedFromMainsl, bool doNotFeedFromSwcaft)
    {
      invFeedsRuleSku.ItemNoId = itemNoId;
      invFeedsRuleSku.DoNotFeedFromBanc = doNotFeedFromBanc;
      invFeedsRuleSku.DoNotFeedFromMainsl = doNotFeedFromMainsl;
      invFeedsRuleSku.DoNotFeedFromBasc = doNotFeedFromBasc;
      invFeedsRuleSku.DoNotFeedFromSwcaft = doNotFeedFromSwcaft;
      invFeedsRuleSku.LastModifiedBy = empId;
      invFeedsRuleSku.LastModifiedDate = todayDate;
      return invFeedsRuleSku;
    }

    // Upsrt InvFeedsRuleSku
    // By Brian Yi on 08/10/2021
    public InvFeedsRuleSkumkt createInvFeedsRuleSkuMkt(InvFeedsRuleSkumkt invFeedsRuleSkumkt,
      long invFeedsRuleSkuId, int customerId, bool doNotFeedToHere, bool custRule, int custRatio, int custZeroOut)
    {
      invFeedsRuleSkumkt.InvFeedsRuleSkuid = invFeedsRuleSkuId;
      invFeedsRuleSkumkt.CustomerId = customerId;
      invFeedsRuleSkumkt.DoNotFeedToHere = doNotFeedToHere;
      invFeedsRuleSkumkt.CustomFixedPercentage = custRatio;
      invFeedsRuleSkumkt.CustomZeroOutAt = custZeroOut;
      invFeedsRuleSkumkt.CustomRuleForRatioZeroOut = custRule;
      return invFeedsRuleSkumkt;
    }

    // Depreciated
    /*
    public async Task<bool> UpdateInvFeedsItem(int empId, GetMainslBancInvItemDetailDTO itemDto)
    {
      int amazon = 5, bpmWeb = 9, ebay = 12, houzz = 14, mellowWeb = 18, ost = 21, walmart = 26, wayfair = 29;
      bool result = true;
      DateTime curDateTIme = DateTime.Now;
      
      GetMainslBancInvItemDTO invItemDto = itemDto.GetMainslBancInvItemDTO;
      // First, Qty Update to each warehouse
      InvFeedsItem invFeedsItem = await _kc.InvFeedsItems
        .Where(i => i.InvFeedsItemId == invItemDto.InventoryItemId)
        .Include(i => i.InvFeedsItemLocQties)
        .FirstOrDefaultAsync();
      foreach(InvFeedsItemLocQty tmpDto in invFeedsItem.InvFeedsItemLocQties)
      {
        if (tmpDto.InvFeedsItemLocQtyId == 4) //BANC
        {
          tmpDto.QtyAvail = invItemDto.QtyAvailBanc;
          tmpDto.QtyOnHand = invItemDto.QtyOnHandBanc;
        }
        else if (tmpDto.InvFeedsItemLocQtyId == 25) // Mainsl
        {
          tmpDto.QtyAvail = invItemDto.QtyAvailMainsl;
          tmpDto.QtyOnHand = invItemDto.QtyOnHandMainsl;
        }
      }

      // Second, remark updates
      //InvFeedsRemarkCategory> remarkList
      InvFeedsRemark invFeedsRemark = new InvFeedsRemark();
      List<InvFeedsRmrkCtgry> invFeedsRmrkCtgryList = await _kc.InvFeedsRmrkCtgries
        .Where(i => i.IsActivated == true)
        .ToListAsync();

      for(int i = 0; i < invFeedsRmrkCtgryList.Count; i++)
      {
        itemDto.remarkList[i].categoryId = invFeedsRmrkCtgryList[i].InvFeedsRmrkCtgryId;
      }
      foreach(InvFeedsRemarkCategory tmpDto in itemDto.remarkList)
      {
        invFeedsRemark = await _kc.InvFeedsRemarks
          .Where(i => i.ItemNoId == invItemDto.ItemNoId && i.InvFeedsRmrkCtgryId == tmpDto.categoryId)
          .FirstOrDefaultAsync();
        if(invFeedsRemark == null && tmpDto.isActivatedOnThisSKU == true)
        {
          invFeedsRemark = new InvFeedsRemark()
          {
            ItemNoId = invItemDto.ItemNoId,
            InvFeedsRmrkCtgryId = tmpDto.categoryId,
            IsActivated = true,
            LastModifiedDate = curDateTIme,
            LastModifiedBy = empId
          };
          _kc.InvFeedsRemarks.Add(invFeedsRemark);
          await _kc.SaveChangesAsync();
        } 
        else if (invFeedsRemark != null && invFeedsRemark.IsActivated != tmpDto.isActivatedOnThisSKU)
        {
          invFeedsRemark.IsActivated = tmpDto.isActivatedOnThisSKU;
          invFeedsRemark.LastModifiedBy = empId;
          invFeedsRemark.LastModifiedDate = curDateTIme;
          _kc.InvFeedsRemarks.Update(invFeedsRemark);
          await _kc.SaveChangesAsync();
        }
      }

      // Third, checking do not feed from a certain warehouse & to a certain market 
      InvFeedsRuleSku invFeedsRuleSku = await _kc.InvFeedsRuleSkus
        .Where(i => i.ItemNoId == invItemDto.ItemNoId)
        .FirstOrDefaultAsync();
      List<InvFeedsRule> invFeedsRules = await _kc.InvFeedsRules
        .Where(i => i.IsActivated == true)
        .ToListAsync();
      InvFeedsRuleSkumkt invFeedsRuleSkumkt = new InvFeedsRuleSkumkt();
      string tmpStrRatio = "";
      int tmpInt = 0;

      if(invFeedsRuleSku == null)
      {
        // 3-1, Do Not Feed From warehouse 
        if(itemDto.DoNotFeedFromBANC == true || itemDto.DoNotFeedFromMainsl == true)
        {
          invFeedsRuleSku = new InvFeedsRuleSku()
          {
            ItemNoId = invItemDto.ItemNoId,
            DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC,
            DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl,
            LastModifiedBy = empId,
            LastModifiedDate = curDateTIme
          };
          _kc.Add(invFeedsRuleSku);
          await _kc.SaveChangesAsync();
        }
        // Checking each rules for markets
        foreach (InvFeedsRule tmpDto in invFeedsRules)
        {
          switch (tmpDto.CustomerId)
          {
            case 5: // Amazon Drop Ship
              if(itemDto.AmzCustPercentageTxt != null && itemDto.AmzCustPercentageTxt.ToLower().CompareTo("none") != 0) 
              { 
                tmpStrRatio = Regex.Match(itemDto.AmzCustPercentageTxt, @"\d+").Value;
              } 
              else
              {
                tmpStrRatio ="-1";
              }
              tmpInt = Int32.Parse(tmpStrRatio);
              if(tmpDto.CustomFeedRatio != tmpInt || tmpDto.ZeroOutAt != tmpInt || itemDto.AmzDoNotFeed == true)
              {
                if (invFeedsRuleSku == null)
                {
                  invFeedsRuleSku = new InvFeedsRuleSku()
                  {
                    ItemNoId = invItemDto.ItemNoId,
                    DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC,
                    DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl,
                    LastModifiedBy = empId,
                    LastModifiedDate = curDateTIme
                  };
                  _kc.Add(invFeedsRuleSku);
                  await _kc.SaveChangesAsync();
                  invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                  {
                    InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                    CustomerId = amazon,
                    CustomFixedPercentage = tmpInt,
                    CustomZeroOutAt = tmpDto.CustomFeedRatio
                  };
                  _kc.Add(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }
                else
                {
                  invFeedsRuleSku.DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC;
                  invFeedsRuleSku.DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl;
                  invFeedsRuleSku.LastModifiedBy = empId;
                  invFeedsRuleSku.LastModifiedDate = curDateTIme;
                  _kc.Update(invFeedsRuleSku);
                  await _kc.SaveChangesAsync();
                  invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == amazon)
                    .FirstOrDefaultAsync();
                  if(invFeedsRuleSkumkt == null)
                  {
                    invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                    {
                      InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                      CustomerId = amazon,
                      DoNotFeedToHere = itemDto.AmzDoNotFeed,
                      CustomFixedPercentage = tmpInt,
                      CustomZeroOutAt = tmpDto.CustomFeedRatio
                    };
                    _kc.Add(invFeedsRuleSkumkt);
                    await _kc.SaveChangesAsync();
                  }
                  else
                  {
                    invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.AmzDoNotFeed;
                    invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                    invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                    _kc.Update(invFeedsRuleSkumkt);
                    await _kc.SaveChangesAsync();
                  }
                }
              }

              if (invFeedsRuleSku != null && invFeedsRuleSku.InvFeedsRuleSkumkts != null)
              {
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == amazon)
                    .FirstOrDefaultAsync();

                invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.AmzDoNotFeed;
                invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                _kc.Update(invFeedsRuleSkumkt);
                await _kc.SaveChangesAsync();
              }
              break;
            case 9: // BPM Website
              if(itemDto.BPMCustPercentageTxt != null && itemDto.BPMCustPercentageTxt.ToLower().CompareTo("none") != 0) 
              { 
                tmpStrRatio = Regex.Match(itemDto.BPMCustPercentageTxt, @"\d+").Value;
              } 
              else
              {
                tmpStrRatio ="-1";
              }
              tmpInt = Int32.Parse(tmpStrRatio);
              if(tmpDto.CustomFeedRatio != tmpInt || tmpDto.ZeroOutAt != tmpInt || itemDto.BPMDoNotFeed == true)
              {
                if (invFeedsRuleSku == null)
                {
                  invFeedsRuleSku = new InvFeedsRuleSku()
                  {
                    ItemNoId = invItemDto.ItemNoId,
                    DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC,
                    DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl,
                    LastModifiedBy = empId,
                    LastModifiedDate = curDateTIme
                  };
                  _kc.Add(invFeedsRuleSku);
                  await _kc.SaveChangesAsync();
                  invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                  {
                    InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                    CustomerId = bpmWeb,
                    CustomFixedPercentage = tmpInt,
                    CustomZeroOutAt = tmpDto.CustomFeedRatio
                  };
                  _kc.Add(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }
                else
                {
                  invFeedsRuleSku.DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC;
                  invFeedsRuleSku.DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl;
                  invFeedsRuleSku.LastModifiedBy = empId;
                  invFeedsRuleSku.LastModifiedDate = curDateTIme;
                  _kc.Update(invFeedsRuleSku);
                  await _kc.SaveChangesAsync();
                  invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == bpmWeb)
                    .FirstOrDefaultAsync();
                  if(invFeedsRuleSkumkt == null)
                  {
                    invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                    {
                      InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                      CustomerId = ebay,
                      DoNotFeedToHere = itemDto.BPMDoNotFeed,
                      CustomFixedPercentage = tmpInt,
                      CustomZeroOutAt = tmpDto.CustomFeedRatio
                    };
                    _kc.Add(invFeedsRuleSkumkt);
                    await _kc.SaveChangesAsync();
                  }
                  else
                  {
                    invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.BPMDoNotFeed;
                    invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                    invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                    _kc.Update(invFeedsRuleSkumkt);
                    await _kc.SaveChangesAsync();
                  }
                }
              }

              if (invFeedsRuleSku != null && invFeedsRuleSku.InvFeedsRuleSkumkts != null)
              {
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == bpmWeb)
                    .FirstOrDefaultAsync();

                invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.BPMDoNotFeed;
                invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                _kc.Update(invFeedsRuleSkumkt);
                await _kc.SaveChangesAsync();
              }
              break;
            case 12: // eBay
              if(itemDto.eBayCustPercentageTxt != null && itemDto.eBayCustPercentageTxt.ToLower().CompareTo("none") != 0) 
              { 
                tmpStrRatio = Regex.Match(itemDto.eBayCustPercentageTxt, @"\d+").Value;
              } 
              else
              {
                tmpStrRatio ="-1";
              }
              tmpInt = Int32.Parse(tmpStrRatio);
              if(tmpDto.CustomFeedRatio != tmpInt || tmpDto.ZeroOutAt != tmpInt || itemDto.eBayDoNotFeed == true)
              {
                if (invFeedsRuleSku == null)
                {
                  invFeedsRuleSku = new InvFeedsRuleSku()
                  {
                    ItemNoId = invItemDto.ItemNoId,
                    DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC,
                    DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl,
                    LastModifiedBy = empId,
                    LastModifiedDate = curDateTIme
                  };
                  _kc.Add(invFeedsRuleSku);
                  await _kc.SaveChangesAsync();
                  invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                  {
                    InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                    CustomerId = ebay,
                    CustomFixedPercentage = tmpInt,
                    CustomZeroOutAt = tmpDto.CustomFeedRatio
                  };
                  _kc.Add(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }
                else
                {
                  invFeedsRuleSku.DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC;
                  invFeedsRuleSku.DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl;
                  invFeedsRuleSku.LastModifiedBy = empId;
                  invFeedsRuleSku.LastModifiedDate = curDateTIme;
                  _kc.Update(invFeedsRuleSku);
                  await _kc.SaveChangesAsync();
                  invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == ebay)
                    .FirstOrDefaultAsync();
                  if(invFeedsRuleSkumkt == null)
                  {
                    invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                    {
                      InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                      CustomerId = ebay,
                      DoNotFeedToHere = itemDto.eBayDoNotFeed,
                      CustomFixedPercentage = tmpInt,
                      CustomZeroOutAt = tmpDto.CustomFeedRatio
                    };
                    _kc.Add(invFeedsRuleSkumkt);
                    await _kc.SaveChangesAsync();
                  }
                  else
                  {
                    invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.eBayDoNotFeed;
                    invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                    invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                    _kc.Update(invFeedsRuleSkumkt);
                    await _kc.SaveChangesAsync();
                  }
                }
              }

              if (invFeedsRuleSku != null && invFeedsRuleSku.InvFeedsRuleSkumkts != null)
              {
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == ebay)
                    .FirstOrDefaultAsync();

                invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.eBayDoNotFeed;
                invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                _kc.Update(invFeedsRuleSkumkt);
                await _kc.SaveChangesAsync();
              }
              break;
            case 14: // Houzz Drop Ship
              if(itemDto.HouzzCustPercentageTxt != null && itemDto.HouzzCustPercentageTxt.ToLower().CompareTo("none") != 0) 
              { 
                tmpStrRatio = Regex.Match(itemDto.HouzzCustPercentageTxt, @"\d+").Value;
              } 
              else
              {
                tmpStrRatio ="-1";
              }
              tmpInt = Int32.Parse(tmpStrRatio);
              if(tmpDto.CustomFeedRatio != tmpInt || tmpDto.ZeroOutAt != tmpInt || itemDto.HouzzDoNotFeed == true)
              {
                if (invFeedsRuleSku == null)
                {
                  invFeedsRuleSku = new InvFeedsRuleSku()
                  {
                    ItemNoId = invItemDto.ItemNoId,
                    DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC,
                    DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl,
                    LastModifiedBy = empId,
                    LastModifiedDate = curDateTIme
                  };
                  _kc.Add(invFeedsRuleSku);
                  await _kc.SaveChangesAsync();
                  invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                  {
                    InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                    CustomerId = houzz,
                    CustomFixedPercentage = tmpInt,
                    CustomZeroOutAt = tmpDto.CustomFeedRatio
                  };
                  _kc.Add(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }
                else
                {
                  invFeedsRuleSku.DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC;
                  invFeedsRuleSku.DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl;
                  invFeedsRuleSku.LastModifiedBy = empId;
                  invFeedsRuleSku.LastModifiedDate = curDateTIme;
                  _kc.Update(invFeedsRuleSku);
                  await _kc.SaveChangesAsync();
                  invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == houzz)
                    .FirstOrDefaultAsync();
                  if(invFeedsRuleSkumkt == null)
                  {
                    invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                    {
                      InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                      CustomerId = houzz,
                      DoNotFeedToHere = itemDto.HouzzDoNotFeed,
                      CustomFixedPercentage = tmpInt,
                      CustomZeroOutAt = tmpDto.CustomFeedRatio
                    };
                    _kc.Add(invFeedsRuleSkumkt);
                    await _kc.SaveChangesAsync();
                  }
                  else
                  {
                    invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.HouzzDoNotFeed;
                    invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                    invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                    _kc.Update(invFeedsRuleSkumkt);
                    await _kc.SaveChangesAsync();
                  }
                }
              }

              if (invFeedsRuleSku != null && invFeedsRuleSku.InvFeedsRuleSkumkts != null)
              {
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == houzz)
                    .FirstOrDefaultAsync();

                invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.HouzzDoNotFeed;
                invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                _kc.Update(invFeedsRuleSkumkt);
                await _kc.SaveChangesAsync();
              }
              break;
            case 18: // Mellow Website
              if(itemDto.MellowCustPercentageTxt != null && itemDto.MellowCustPercentageTxt.ToLower().CompareTo("none") != 0) 
              { 
                tmpStrRatio = Regex.Match(itemDto.MellowCustPercentageTxt, @"\d+").Value;
              } 
              else
              {
                tmpStrRatio ="-1";
              }
              tmpInt = Int32.Parse(tmpStrRatio);
              if(tmpDto.CustomFeedRatio != tmpInt || tmpDto.ZeroOutAt != tmpInt || itemDto.MellowDoNotFeed == true)
              {
                if (invFeedsRuleSku == null)
                {
                  invFeedsRuleSku = new InvFeedsRuleSku()
                  {
                    ItemNoId = invItemDto.ItemNoId,
                    DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC,
                    DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl,
                    LastModifiedBy = empId,
                    LastModifiedDate = curDateTIme
                  };
                  _kc.Add(invFeedsRuleSku);
                  await _kc.SaveChangesAsync();
                  invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                  {
                    InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                    CustomerId = mellowWeb,
                    CustomFixedPercentage = tmpInt,
                    CustomZeroOutAt = tmpDto.CustomFeedRatio
                  };
                  _kc.Add(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }
                else
                {
                  invFeedsRuleSku.DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC;
                  invFeedsRuleSku.DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl;
                  invFeedsRuleSku.LastModifiedBy = empId;
                  invFeedsRuleSku.LastModifiedDate = curDateTIme;
                  _kc.Update(invFeedsRuleSku);
                  await _kc.SaveChangesAsync();
                  invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == mellowWeb)
                    .FirstOrDefaultAsync();
                  if(invFeedsRuleSkumkt == null)
                  {
                    invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                    {
                      InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                      CustomerId = mellowWeb,
                      DoNotFeedToHere = itemDto.MellowDoNotFeed,
                      CustomFixedPercentage = tmpInt,
                      CustomZeroOutAt = tmpDto.CustomFeedRatio
                    };
                    _kc.Add(invFeedsRuleSkumkt);
                    await _kc.SaveChangesAsync();
                  }
                  else
                  {
                    invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.MellowDoNotFeed;
                    invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                    invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                    _kc.Update(invFeedsRuleSkumkt);
                    await _kc.SaveChangesAsync();
                  }
                }
              }

              if (invFeedsRuleSku != null && invFeedsRuleSku.InvFeedsRuleSkumkts != null)
              {
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == mellowWeb)
                    .FirstOrDefaultAsync();

                invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.MellowDoNotFeed;
                invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                _kc.Update(invFeedsRuleSkumkt);
                await _kc.SaveChangesAsync();
              }
              break;
            case 21: // Overstock Drop Ship
              if(itemDto.OstCustPercentageTxt != null && itemDto.OstCustPercentageTxt.ToLower().CompareTo("none") != 0) 
              { 
                tmpStrRatio = Regex.Match(itemDto.OstCustPercentageTxt, @"\d+").Value;
              } 
              else
              {
                tmpStrRatio ="-1";
              }
              tmpInt = Int32.Parse(tmpStrRatio);
              if(tmpDto.CustomFeedRatio != tmpInt || tmpDto.ZeroOutAt != tmpInt || itemDto.OstDoNotFeed == true)
              {
                if (invFeedsRuleSku == null)
                {
                  invFeedsRuleSku = new InvFeedsRuleSku()
                  {
                    ItemNoId = invItemDto.ItemNoId,
                    DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC,
                    DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl,
                    LastModifiedBy = empId,
                    LastModifiedDate = curDateTIme
                  };
                  _kc.Add(invFeedsRuleSku);
                  await _kc.SaveChangesAsync();
                  invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                  {
                    InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                    CustomerId = ost,
                    CustomFixedPercentage = tmpInt,
                    CustomZeroOutAt = tmpDto.CustomFeedRatio
                  };
                  _kc.Add(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }
                else
                {
                  invFeedsRuleSku.DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC;
                  invFeedsRuleSku.DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl;
                  invFeedsRuleSku.LastModifiedBy = empId;
                  invFeedsRuleSku.LastModifiedDate = curDateTIme;
                  _kc.Update(invFeedsRuleSku);
                  await _kc.SaveChangesAsync();
                  invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == ost)
                    .FirstOrDefaultAsync();
                  if(invFeedsRuleSkumkt == null)
                  {
                    invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                    {
                      InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                      CustomerId = ost,
                      DoNotFeedToHere = itemDto.OstDoNotFeed,
                      CustomFixedPercentage = tmpInt,
                      CustomZeroOutAt = tmpDto.CustomFeedRatio
                    };
                    _kc.Add(invFeedsRuleSkumkt);
                    await _kc.SaveChangesAsync();
                  }
                  else
                  {
                    invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.OstDoNotFeed;
                    invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                    invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                    _kc.Update(invFeedsRuleSkumkt);
                    await _kc.SaveChangesAsync();
                  }
                }
              }

              if (invFeedsRuleSku != null && invFeedsRuleSku.InvFeedsRuleSkumkts != null)
              {
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == ost)
                    .FirstOrDefaultAsync();

                invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.OstDoNotFeed;
                invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                _kc.Update(invFeedsRuleSkumkt);
                await _kc.SaveChangesAsync();
              }
              break;
            case 26: // Walmart DSV
              if(itemDto.WlmrtCustPercentageTxt != null && itemDto.WlmrtCustPercentageTxt.ToLower().CompareTo("none") != 0) 
              { 
                tmpStrRatio = Regex.Match(itemDto.WlmrtCustPercentageTxt, @"\d+").Value;
              } 
              else
              {
                tmpStrRatio ="-1";
              }
              tmpInt = Int32.Parse(tmpStrRatio);
              if(tmpDto.CustomFeedRatio != tmpInt || tmpDto.ZeroOutAt != tmpInt || itemDto.WlmrtDoNotFeed == true)
              {
                if (invFeedsRuleSku == null)
                {
                  invFeedsRuleSku = new InvFeedsRuleSku()
                  {
                    ItemNoId = invItemDto.ItemNoId,
                    DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC,
                    DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl,
                    LastModifiedBy = empId,
                    LastModifiedDate = curDateTIme
                  };
                  _kc.Add(invFeedsRuleSku);
                  await _kc.SaveChangesAsync();
                  invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                  {
                    InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                    CustomerId = walmart,
                    CustomFixedPercentage = tmpInt,
                    CustomZeroOutAt = tmpDto.CustomFeedRatio
                  };
                  _kc.Add(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }
                else
                {
                  invFeedsRuleSku.DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC;
                  invFeedsRuleSku.DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl;
                  invFeedsRuleSku.LastModifiedBy = empId;
                  invFeedsRuleSku.LastModifiedDate = curDateTIme;
                  _kc.Update(invFeedsRuleSku);
                  await _kc.SaveChangesAsync();
                  invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == walmart)
                    .FirstOrDefaultAsync();
                  if(invFeedsRuleSkumkt == null)
                  {
                    invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                    {
                      InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                      CustomerId = walmart,
                      DoNotFeedToHere = itemDto.WlmrtDoNotFeed,
                      CustomFixedPercentage = tmpInt,
                      CustomZeroOutAt = tmpDto.CustomFeedRatio
                    };
                    _kc.Add(invFeedsRuleSkumkt);
                    await _kc.SaveChangesAsync();
                  }
                  else
                  {
                    invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.WlmrtDoNotFeed;
                    invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                    invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                    _kc.Update(invFeedsRuleSkumkt);
                    await _kc.SaveChangesAsync();
                  }
                }
              }

              if (invFeedsRuleSku != null && invFeedsRuleSku.InvFeedsRuleSkumkts != null)
              {
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == walmart)
                    .FirstOrDefaultAsync();

                invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.WlmrtDoNotFeed;
                invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                _kc.Update(invFeedsRuleSkumkt);
                await _kc.SaveChangesAsync();
              }
              break;
            case 29: // Wayfair Drop Ship
              if(itemDto.WyfrCustPercentageTxt != null && itemDto.WyfrCustPercentageTxt.ToLower().CompareTo("none") != 0) 
              { 
                tmpStrRatio = Regex.Match(itemDto.WyfrCustPercentageTxt, @"\d+").Value;
              } 
              else
              {
                tmpStrRatio ="-1";
              }
              tmpInt = Int32.Parse(tmpStrRatio);
              if(tmpDto.CustomFeedRatio != tmpInt || tmpDto.ZeroOutAt != tmpInt || itemDto.WyfrDoNotFeed == true)
              {
                if (invFeedsRuleSku == null)
                {
                  invFeedsRuleSku = new InvFeedsRuleSku()
                  {
                    ItemNoId = invItemDto.ItemNoId,
                    DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC,
                    DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl,
                    LastModifiedBy = empId,
                    LastModifiedDate = curDateTIme
                  };
                  _kc.Add(invFeedsRuleSku);
                  await _kc.SaveChangesAsync();
                  invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                  {
                    InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                    CustomerId = wayfair,
                    CustomFixedPercentage = tmpInt,
                    CustomZeroOutAt = tmpDto.CustomFeedRatio
                  };
                  _kc.Add(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }
                else
                {
                  invFeedsRuleSku.DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC;
                  invFeedsRuleSku.DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl;
                  invFeedsRuleSku.LastModifiedBy = empId;
                  invFeedsRuleSku.LastModifiedDate = curDateTIme;
                  _kc.Update(invFeedsRuleSku);
                  await _kc.SaveChangesAsync();
                  invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == wayfair)
                    .FirstOrDefaultAsync();
                  if(invFeedsRuleSkumkt == null)
                  {
                    invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                    {
                      InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                      CustomerId = wayfair,
                      DoNotFeedToHere = itemDto.WyfrDoNotFeed,
                      CustomFixedPercentage = tmpInt,
                      CustomZeroOutAt = tmpDto.CustomFeedRatio
                    };
                    _kc.Add(invFeedsRuleSkumkt);
                    await _kc.SaveChangesAsync();
                  }
                  else
                  {
                    invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.WyfrDoNotFeed;
                    invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                    invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                    _kc.Update(invFeedsRuleSkumkt);
                    await _kc.SaveChangesAsync();
                  }
                }
              }

              if (invFeedsRuleSku != null && invFeedsRuleSku.InvFeedsRuleSkumkts != null)
              {
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == wayfair)
                    .FirstOrDefaultAsync();

                invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.WlmrtDoNotFeed;
                invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                _kc.Update(invFeedsRuleSkumkt);
                await _kc.SaveChangesAsync();
              }
              break;
          }
        }

      }
      else// If there is a record for this SKU rule
      {
        invFeedsRuleSku.DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC;
        invFeedsRuleSku.DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl;
        invFeedsRuleSku.LastModifiedBy = empId;
        invFeedsRuleSku.LastModifiedDate = curDateTIme;
        _kc.Update(invFeedsRuleSku);
        await _kc.SaveChangesAsync();
        // Checking each rules for markets
        foreach (InvFeedsRule tmpDto in invFeedsRules)
        {
          switch (tmpDto.CustomerId)
          {
            case 5: // Amazon Drop Ship
              if(itemDto.AmzCustPercentageTxt != null && itemDto.AmzCustPercentageTxt.ToLower().CompareTo("none") != 0) 
              { 
                tmpStrRatio = Regex.Match(itemDto.AmzCustPercentageTxt, @"\d+").Value;
              } 
              else
              {
                tmpStrRatio ="-1";
              }
              tmpInt = Int32.Parse(tmpStrRatio);
              if (tmpDto.CustomFeedRatio != tmpInt || tmpDto.ZeroOutAt != tmpInt || itemDto.AmzDoNotFeed == true)
              {

                invFeedsRuleSku.DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC;
                invFeedsRuleSku.DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl;
                invFeedsRuleSku.LastModifiedBy = empId;
                invFeedsRuleSku.LastModifiedDate = curDateTIme;
                _kc.Update(invFeedsRuleSku);
                await _kc.SaveChangesAsync();
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                  .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == amazon)
                  .FirstOrDefaultAsync();
                if (invFeedsRuleSkumkt == null)
                {
                  invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                  {
                    InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                    CustomerId = amazon,
                    DoNotFeedToHere = itemDto.AmzDoNotFeed,
                    CustomFixedPercentage = tmpInt,
                    CustomZeroOutAt = tmpDto.CustomFeedRatio
                  };
                  _kc.Add(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }
                else
                {
                  invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.AmzDoNotFeed;
                  invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                  invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                  _kc.Update(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }

              }

              if (invFeedsRuleSku != null && invFeedsRuleSku.InvFeedsRuleSkumkts != null)
              {
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == amazon)
                    .FirstOrDefaultAsync();

                invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.AmzDoNotFeed;
                invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                _kc.Update(invFeedsRuleSkumkt);
                await _kc.SaveChangesAsync();
              }
              break;

            case 9: // BPM Website
              if(itemDto.BPMCustPercentageTxt != null && itemDto.BPMCustPercentageTxt.ToLower().CompareTo("none") != 0) 
              { 
                tmpStrRatio = Regex.Match(itemDto.BPMCustPercentageTxt, @"\d+").Value;
              } 
              else
              {
                tmpStrRatio ="-1";
              }
              tmpInt = Int32.Parse(tmpStrRatio);
              if (tmpDto.CustomFeedRatio != tmpInt || tmpDto.ZeroOutAt != tmpInt || itemDto.BPMDoNotFeed == true)
              {
                invFeedsRuleSku.DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC;
                invFeedsRuleSku.DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl;
                invFeedsRuleSku.LastModifiedBy = empId;
                invFeedsRuleSku.LastModifiedDate = curDateTIme;
                _kc.Update(invFeedsRuleSku);
                await _kc.SaveChangesAsync();
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                  .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == bpmWeb)
                  .FirstOrDefaultAsync();
                if (invFeedsRuleSkumkt == null)
                {
                  invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                  {
                    InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                    CustomerId = ebay,
                    DoNotFeedToHere = itemDto.BPMDoNotFeed,
                    CustomFixedPercentage = tmpInt,
                    CustomZeroOutAt = tmpDto.CustomFeedRatio
                  };
                  _kc.Add(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }
                else
                {
                  invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.BPMDoNotFeed;
                  invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                  invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                  _kc.Update(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }
              }
              if (invFeedsRuleSku != null && invFeedsRuleSku.InvFeedsRuleSkumkts != null)
              {
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == bpmWeb)
                    .FirstOrDefaultAsync();

                invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.BPMDoNotFeed;
                invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                _kc.Update(invFeedsRuleSkumkt);
                await _kc.SaveChangesAsync();
              }
              break;

            case 12: // eBay
              if(itemDto.eBayCustPercentageTxt != null && itemDto.eBayCustPercentageTxt.ToLower().CompareTo("none") != 0) 
              { 
                tmpStrRatio = Regex.Match(itemDto.eBayCustPercentageTxt, @"\d+").Value;
              } 
              else
              {
                tmpStrRatio ="-1";
              }
              tmpInt = Int32.Parse(tmpStrRatio);
              if (tmpDto.CustomFeedRatio != tmpInt || tmpDto.ZeroOutAt != tmpInt || itemDto.eBayDoNotFeed == true)
              {

                invFeedsRuleSku.DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC;
                invFeedsRuleSku.DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl;
                invFeedsRuleSku.LastModifiedBy = empId;
                invFeedsRuleSku.LastModifiedDate = curDateTIme;
                _kc.Update(invFeedsRuleSku);
                await _kc.SaveChangesAsync();
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                  .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == ebay)
                  .FirstOrDefaultAsync();
                if (invFeedsRuleSkumkt == null)
                {
                  invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                  {
                    InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                    CustomerId = ebay,
                    DoNotFeedToHere = itemDto.eBayDoNotFeed,
                    CustomFixedPercentage = tmpInt,
                    CustomZeroOutAt = tmpDto.CustomFeedRatio
                  };
                  _kc.Add(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }
                else
                {
                  invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.eBayDoNotFeed;
                  invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                  invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                  _kc.Update(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }
              }
              if (invFeedsRuleSku != null && invFeedsRuleSku.InvFeedsRuleSkumkts != null)
              {
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == ebay)
                    .FirstOrDefaultAsync();

                invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.eBayDoNotFeed;
                invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                _kc.Update(invFeedsRuleSkumkt);
                await _kc.SaveChangesAsync();
              }
              break;

            case 14: // Houzz Drop Ship
              if(itemDto.HouzzCustPercentageTxt != null && itemDto.HouzzCustPercentageTxt.ToLower().CompareTo("none") != 0) 
              { 
                tmpStrRatio = Regex.Match(itemDto.HouzzCustPercentageTxt, @"\d+").Value;
              } 
              else
              {
                tmpStrRatio ="-1";
              }
              tmpInt = Int32.Parse(tmpStrRatio);
              if (tmpDto.CustomFeedRatio != tmpInt || tmpDto.ZeroOutAt != tmpInt || itemDto.HouzzDoNotFeed == true)
              {

                invFeedsRuleSku.DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC;
                invFeedsRuleSku.DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl;
                invFeedsRuleSku.LastModifiedBy = empId;
                invFeedsRuleSku.LastModifiedDate = curDateTIme;
                _kc.Update(invFeedsRuleSku);
                await _kc.SaveChangesAsync();
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                  .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == houzz)
                  .FirstOrDefaultAsync();
                if (invFeedsRuleSkumkt == null)
                {
                  invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                  {
                    InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                    CustomerId = houzz,
                    DoNotFeedToHere = itemDto.HouzzDoNotFeed,
                    CustomFixedPercentage = tmpInt,
                    CustomZeroOutAt = tmpDto.CustomFeedRatio
                  };
                  _kc.Add(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }
                else
                {
                  invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.HouzzDoNotFeed;
                  invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                  invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                  _kc.Update(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }
              }

              if (invFeedsRuleSku != null && invFeedsRuleSku.InvFeedsRuleSkumkts != null)
              {
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == houzz)
                    .FirstOrDefaultAsync();

                invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.HouzzDoNotFeed;
                invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                _kc.Update(invFeedsRuleSkumkt);
                await _kc.SaveChangesAsync();
              }
              break;

            case 18: // Mellow Website
              if(itemDto.MellowCustPercentageTxt != null && itemDto.MellowCustPercentageTxt.ToLower().CompareTo("none") != 0) 
              { 
                tmpStrRatio = Regex.Match(itemDto.MellowCustPercentageTxt, @"\d+").Value;
              } 
              else
              {
                tmpStrRatio ="-1";
              }
              tmpInt = Int32.Parse(tmpStrRatio);
              if(tmpDto.CustomFeedRatio != tmpInt || tmpDto.ZeroOutAt != tmpInt || itemDto.MellowDoNotFeed == true)
              {
                invFeedsRuleSku.DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC;
                invFeedsRuleSku.DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl;
                invFeedsRuleSku.LastModifiedBy = empId;
                invFeedsRuleSku.LastModifiedDate = curDateTIme;
                _kc.Update(invFeedsRuleSku);
                await _kc.SaveChangesAsync();
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                  .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == mellowWeb)
                  .FirstOrDefaultAsync();
                if (invFeedsRuleSkumkt == null)
                {
                  invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                  {
                    InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                    CustomerId = mellowWeb,
                    DoNotFeedToHere = itemDto.MellowDoNotFeed,
                    CustomFixedPercentage = tmpInt,
                    CustomZeroOutAt = tmpDto.CustomFeedRatio
                  };
                  _kc.Add(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }
                else
                {
                  invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.MellowDoNotFeed;
                  invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                  invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                  _kc.Update(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }
              }

              if (invFeedsRuleSku != null && invFeedsRuleSku.InvFeedsRuleSkumkts != null)
              {
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == mellowWeb)
                    .FirstOrDefaultAsync();

                invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.MellowDoNotFeed;
                invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                _kc.Update(invFeedsRuleSkumkt);
                await _kc.SaveChangesAsync();
              }
              break;

            case 21: // Overstock Drop Ship
              if(itemDto.OstCustPercentageTxt != null && itemDto.OstCustPercentageTxt.ToLower().CompareTo("none") != 0) 
              { 
                tmpStrRatio = Regex.Match(itemDto.OstCustPercentageTxt, @"\d+").Value;
              } 
              else
              {
                tmpStrRatio ="-1";
              }
              tmpInt = Int32.Parse(tmpStrRatio);
              if (tmpDto.CustomFeedRatio != tmpInt || tmpDto.ZeroOutAt != tmpInt || itemDto.OstDoNotFeed == true)
              {

                invFeedsRuleSku.DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC;
                invFeedsRuleSku.DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl;
                invFeedsRuleSku.LastModifiedBy = empId;
                invFeedsRuleSku.LastModifiedDate = curDateTIme;
                _kc.Update(invFeedsRuleSku);
                await _kc.SaveChangesAsync();
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                  .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == ost)
                  .FirstOrDefaultAsync();
                if (invFeedsRuleSkumkt == null)
                {
                  invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                  {
                    InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                    CustomerId = ost,
                    DoNotFeedToHere = itemDto.OstDoNotFeed,
                    CustomFixedPercentage = tmpInt,
                    CustomZeroOutAt = tmpDto.CustomFeedRatio
                  };
                  _kc.Add(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }
                else
                {
                  invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.OstDoNotFeed;
                  invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                  invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                  _kc.Update(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }
              }

              if (invFeedsRuleSku != null && invFeedsRuleSku.InvFeedsRuleSkumkts != null)
              {
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == ost)
                    .FirstOrDefaultAsync();

                invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.OstDoNotFeed;
                invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                _kc.Update(invFeedsRuleSkumkt);
                await _kc.SaveChangesAsync();
              }
              break;

            case 26: // Walmart DSV
              if(itemDto.WlmrtCustPercentageTxt != null && itemDto.WlmrtCustPercentageTxt.ToLower().CompareTo("none") != 0) 
              { 
                tmpStrRatio = Regex.Match(itemDto.WlmrtCustPercentageTxt, @"\d+").Value;
              } 
              else
              {
                tmpStrRatio ="-1";
              }
              tmpInt = Int32.Parse(tmpStrRatio);
              if (tmpDto.CustomFeedRatio != tmpInt || tmpDto.ZeroOutAt != tmpInt || itemDto.WlmrtDoNotFeed == true)
              {
                invFeedsRuleSku.DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC;
                invFeedsRuleSku.DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl;
                invFeedsRuleSku.LastModifiedBy = empId;
                invFeedsRuleSku.LastModifiedDate = curDateTIme;
                _kc.Update(invFeedsRuleSku);
                await _kc.SaveChangesAsync();
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                  .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == walmart)
                  .FirstOrDefaultAsync();
                if (invFeedsRuleSkumkt == null)
                {
                  invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                  {
                    InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                    CustomerId = walmart,
                    DoNotFeedToHere = itemDto.WlmrtDoNotFeed,
                    CustomFixedPercentage = tmpInt,
                    CustomZeroOutAt = tmpDto.CustomFeedRatio
                  };
                  _kc.Add(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }
                else
                {
                  invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.WlmrtDoNotFeed;
                  invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                  invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                  _kc.Update(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }
              }

              if (invFeedsRuleSku != null && invFeedsRuleSku.InvFeedsRuleSkumkts != null)
              {
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == walmart)
                    .FirstOrDefaultAsync();

                invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.WlmrtDoNotFeed;
                invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                _kc.Update(invFeedsRuleSkumkt);
                await _kc.SaveChangesAsync();
              }
              break;

            case 29: // Wayfair Drop Ship
              if(itemDto.WyfrCustPercentageTxt != null && itemDto.WyfrCustPercentageTxt.ToLower().CompareTo("none") != 0) 
              { 
                tmpStrRatio = Regex.Match(itemDto.WyfrCustPercentageTxt, @"\d+").Value;
              } 
              else
              {
                tmpStrRatio ="-1";
              }
              tmpInt = Int32.Parse(tmpStrRatio);
              if (tmpDto.CustomFeedRatio != tmpInt || tmpDto.ZeroOutAt != tmpInt || itemDto.WyfrDoNotFeed == true)
              {
                invFeedsRuleSku.DoNetFeedFromBanc = itemDto.DoNotFeedFromBANC;
                invFeedsRuleSku.DoNotFeedFromMainsl = itemDto.DoNotFeedFromMainsl;
                invFeedsRuleSku.LastModifiedBy = empId;
                invFeedsRuleSku.LastModifiedDate = curDateTIme;
                _kc.Update(invFeedsRuleSku);
                await _kc.SaveChangesAsync();
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                  .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == wayfair)
                  .FirstOrDefaultAsync();
                if (invFeedsRuleSkumkt == null)
                {
                  invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
                  {
                    InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
                    CustomerId = wayfair,
                    DoNotFeedToHere = itemDto.WyfrDoNotFeed,
                    CustomFixedPercentage = tmpInt,
                    CustomZeroOutAt = tmpDto.CustomFeedRatio
                  };
                  _kc.Add(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }
                else
                {
                  invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.WyfrDoNotFeed;
                  invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                  invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                  _kc.Update(invFeedsRuleSkumkt);
                  await _kc.SaveChangesAsync();
                }
              }

              if (invFeedsRuleSku != null && invFeedsRuleSku.InvFeedsRuleSkumkts != null)
              {
                invFeedsRuleSkumkt = await _kc.InvFeedsRuleSkumkts
                    .Where(i => i.InvFeedsRuleSkuid == invFeedsRuleSku.InvFeedsRuleSkuid && i.CustomerId == wayfair)
                    .FirstOrDefaultAsync();

                invFeedsRuleSkumkt.DoNotFeedToHere = itemDto.WlmrtDoNotFeed;
                invFeedsRuleSkumkt.CustomFixedPercentage = tmpInt;
                invFeedsRuleSkumkt.CustomZeroOutAt = tmpDto.CustomFeedRatio;
                _kc.Update(invFeedsRuleSkumkt);
                await _kc.SaveChangesAsync();
              }
              break;
          }
        }

      }

      return result;
    }
    */


    // Update Amazon Feeds List
    // By Brian Yi on 07/13/2021
    // Modified by Brian Yi on 06/17/2022 for MkICR
    public async Task<bool> UpdateAmazonFeedsList(int empId, AmazonFeedsListImportDTO amazonFeedsList)
    {
      int amazonId = 5, amazonMkId = 1;
      DateTime todayDate = DateTime.Now;

      /*
      List<NsIcr> activeAmazonFeedsList = await _kc.NsIcrs
        .Where(i => i.CustomerId == amazonId && i.IsInvFeed == 1)
        .ToListAsync();*/
      List<MkIcr> activeAmazonFeedsList = await _kc.MkIcrs
        .Where(i => i.MarketId == amazonMkId && i.IsInvFeed == true)
        .ToListAsync();
      // Need to disable all invFeeds 
      activeAmazonFeedsList.ForEach(a => a.IsInvFeed = false);
      activeAmazonFeedsList.ForEach(a => a.LastModKoE = empId);
      activeAmazonFeedsList.ForEach(a => a.LastModKoT = todayDate);

      //activeAmazonFeedsList.ForEach(a => a.LastFeedStatusUpdateBy = empId);
      //activeAmazonFeedsList.ForEach(a => a.LastFeedStatusUpdateDate = todayDate);

      //await _kc.SaveChangesAsync();

      await _kc.BulkUpdateAsync(activeAmazonFeedsList);

      List<BpmItem> bpmItems = await _kc.BpmItems
        .Where(bi => bi.ItemStatusId <= itemStatus && bi.ItemTypeId <= itemType && bi.IsFeedable == true)
        .ToListAsync();
      /*
      List<NsIcr> amazonSKUFeedsList = await _kc.NsIcrs
        .Where(i => i.CustomerId == amazonId)
        .ToListAsync();
      */
      List<MkIcr> amazonSKUFeedsList = await _kc.MkIcrs
        .Where(i => i.MarketId == amazonMkId)
        .ToListAsync();

      List<MkIcr> tmpIcrs = new List<MkIcr>();
      MkIcr tmpIcr = new MkIcr();

      // For conflicted SKUs
      InvFeedsSkuconflictReport invFeedsSkuconflictReport = new InvFeedsSkuconflictReport()
      {
        ImportedBy = empId,
        ImportedDate = todayDate,
        CustomerId = amazonId
      };
      await _kc.InvFeedsSkuconflictReports.AddAsync(invFeedsSkuconflictReport);
      await _kc.SaveChangesAsync();
      List<InvFeedsSkucnflctRepItem> invFeedsSkucnflctRepItems = new List<InvFeedsSkucnflctRepItem>();
      InvFeedsSkucnflctRepItem invFeedsSkucnflctRepItem = new InvFeedsSkucnflctRepItem();


      // For while loop
      int index = 0;
      AmazonFeedsListItemImportDTO tmpDto = new AmazonFeedsListItemImportDTO();
      while (index < amazonFeedsList.skuList.Count)
      {
        tmpDto = amazonFeedsList.skuList[index];
        // Checking duplicated import
        if (amazonFeedsList.skuList.FindAll(ak => ak.SKU == tmpDto.SKU && ak.ASIN == tmpDto.ASIN).Count > 1) // Checkin duplicated Import list
        {
          tmpIcr = amazonSKUFeedsList.Where(al => al.CustSku == tmpDto.SKU && al.CustAsin == tmpDto.ASIN).FirstOrDefault();
          invFeedsSkucnflctRepItem = new InvFeedsSkucnflctRepItem()
          {
            InvFeedsSkuconflictReport = invFeedsSkuconflictReport,
            InvFeedsSkuconflictReportId = invFeedsSkuconflictReport.InvFeedsSkuconflictReportId,
            ItemNoId = (bpmItems.Find(bi => bi.ItemNoId == tmpIcr.ItemNoId) != null ? bpmItems.Find(bi => bi.ItemNoId == tmpIcr.ItemNoId).ItemNoId : -1), // Since NO ICR, no BpmItem
            CustSku = tmpDto.SKU,
            Asin = tmpDto.ASIN,
            IsResolved = false,
            InvFeedsConflictTypeId = 4, // duplicated SKUs in list
          };
          invFeedsSkucnflctRepItems.Add(invFeedsSkucnflctRepItem);
          while (amazonFeedsList.skuList.FindAll(ak => ak.SKU == tmpDto.SKU && ak.ASIN == tmpDto.ASIN).Count > 2)
          { amazonFeedsList.skuList.RemoveAt(amazonFeedsList.skuList.FindLastIndex(ak => ak.SKU == tmpDto.SKU && ak.ASIN == tmpDto.ASIN)); }
        }

        tmpIcrs = amazonSKUFeedsList.Where(al => al.CustSku == tmpDto.SKU && al.CustAsin == tmpDto.ASIN).ToList();

        // Trying to find any conflict in NsICR, if not, make it feedable
        if (tmpIcrs.Count == 0)
        {
          invFeedsSkucnflctRepItem = new InvFeedsSkucnflctRepItem()
          {
            InvFeedsSkuconflictReport = invFeedsSkuconflictReport,
            InvFeedsSkuconflictReportId = invFeedsSkuconflictReport.InvFeedsSkuconflictReportId, // Give it a relationship
            ItemNoId = -1, // Since NO ICR, no BpmItem
            CustSku = tmpDto.SKU,
            Asin = tmpDto.ASIN,
            IsResolved = false,
            InvFeedsConflictTypeId = 2, // missing ICR
          };
          invFeedsSkucnflctRepItems.Add(invFeedsSkucnflctRepItem);
        }
        else if (tmpIcrs.Count == 1)
        {
          tmpIcrs[0].LastModKoT = todayDate;
          tmpIcrs[0].LastModKoE = empId;
          tmpIcrs[0].IsInvFeed = true;
        }
        else
        {
          tmpIcrs.ForEach(a => a.IsInvFeed = true);
          tmpIcrs.ForEach(a => a.LastModKoE = empId);
          tmpIcrs.ForEach(a => a.LastModKoT = todayDate);
          foreach (MkIcr tmpInsideIcr in tmpIcrs)
          {
            invFeedsSkucnflctRepItem = new InvFeedsSkucnflctRepItem()
            {
              InvFeedsSkuconflictReport = invFeedsSkuconflictReport,
              InvFeedsSkuconflictReportId = invFeedsSkuconflictReport.InvFeedsSkuconflictReportId, // Give it a relationship
              ItemNoId = (bpmItems.Find(bi => bi.ItemNoId == tmpInsideIcr.ItemNoId) != null ? bpmItems.Find(bi => bi.ItemNoId == tmpInsideIcr.ItemNoId).ItemNoId : -1),
              CustSku = tmpDto.SKU,
              Asin = tmpDto.ASIN,
              IsResolved = false,
              InvFeedsConflictTypeId = 3, // two records in DB
            };
            invFeedsSkucnflctRepItems.Add(invFeedsSkucnflctRepItem);
          }// End of inside foreach
        } // End of checking ICRs
        await _kc.BulkUpdateAsync(tmpIcrs);
        index++;
      } // End of while

      //await _kc.SaveChangesAsync();
      if (invFeedsSkucnflctRepItems.Count > 0)
      {
        await _kc.BulkInsertAsync(invFeedsSkucnflctRepItems);//, bulkConfig);
      }
      //_kc.amazonSKUFeedsList

      /*
      List<InvFeedsMrktSpecificSku> invFeedsMrktSpecificSkuList = await _kc.InvFeedsMrktSpecificSkus
        .Where(i => i.CustomerId == Int32.Parse(amazonFeedsList.customerId))
        .ToListAsync();

      string tmpStr = "Amazon";

      List<int> amazonCustIDs = new List<int>() {1, 2, 3, 4, 5, 6, 7};
      
      //??
      List<NsIcr> nsIcrs = await GetAmazonCustSKUs(amazonCustIDs);

      List<InvFeedsMrktSpecificSku> newSKUs = new List<InvFeedsMrktSpecificSku>();
      InvFeedsMrktSpecificSku tmpSKU = new InvFeedsMrktSpecificSku();
      NsIcr tmpModelForICR  = new NsIcr();

      foreach(AmazonFeedsListItemImportDTO tmpDTO in amazonFeedsList.skuList)
      {
        tmpSKU = invFeedsMrktSpecificSkuList
          .Where(i => String.Compare(i.Icr.CustSku, tmpDTO.SKU, true) == 0 && String.Compare(i.Icr.CustAsin, tmpDTO.ASIN, true) == 0)
          .FirstOrDefault();

        if(tmpSKU == null)
        {
          tmpModelForICR = nsIcrs
            .Where(i => String.Compare(i.CustSku, tmpDTO.SKU, true) == 0 && String.Compare(i.CustAsin, tmpDTO.ASIN, true) == 0 )
            .FirstOrDefault();

          if (tmpModelForICR == null) return false;

          tmpSKU = new InvFeedsMrktSpecificSku
          {
            CustomerId = Int32.Parse(amazonFeedsList.customerId),
            ItemNoId = tmpModelForICR.ItemNoId,
            IsActivated = true,
            LastModifiedBy = empId,
            LastModifiedDate = DateTime.Now,
            IcrId = tmpModelForICR.IcrId
          };
          newSKUs.Add(tmpSKU);
        }
        else
        {
          tmpSKU.IsActivated = true;
          invFeedsMrktSpecificSkuList.Remove(tmpSKU);
          await _kc.SaveChangesAsync();
        }
        // 1. Find a match in invFeedsMrktSpecificSkuList
        // if not make a record for it
        // 2. if found, update(?) (isActivated?)
        //tmpDTO.SKU
      }
      invFeedsMrktSpecificSkuList.ForEach(i => i.IsActivated = false);
      await _kc.SaveChangesAsync();
      _kc.BulkInsert(newSKUs);
      */
      return true;
    }


    // Creating & Updateing each market's feeding list
    // By Brian Yi on 09/03/2021
    public async Task<bool> UpdateMarketFeedsList(int empId, int customerId, List<MarketFeedsListItemImportDTO> marketFeedsListItemImportDTOs)
    {
      DateTime todayDate = DateTime.Now;

      int amazonMkId = 1, bpmMkId = 3, wayfairMkId = 4, eBayMkId = 5, houzzMkId = 7, mellowMkId = 10, overstockMkId = 12, walmartMkId = 16, homeDepotMkId = 340, targetMkId = 341;

      const int amazonID = 5, BPMID = 9, eBayID = 12, HouzzID = 14, MellowID = 18, OverstockID = 21, WalmartID = 26, WayfairID = 29, HomeDepotID = 40, TargetID = 51;
      int marketId = 0;

      switch (customerId)
      {
        case amazonID: // Amazon
          marketId = amazonMkId;
          break;
        case BPMID: // BPM Web
          marketId = bpmMkId;
          break;
        case eBayID: // eBay
          marketId = eBayMkId;
          break;
        case HouzzID: // Houzz
          marketId = houzzMkId;
          break;
        case MellowID: // Mellow
          marketId = mellowMkId;
          break;
        case OverstockID: // Overstock
          marketId = overstockMkId;
          break;
        case WalmartID: // Walmart
          marketId = walmartMkId;
          break;
        case WayfairID: // Wayfair
          marketId = wayfairMkId;
          break;
        case HomeDepotID: // Home Depot
          marketId = homeDepotMkId;
          break;
        case TargetID: // Target
          marketId = targetMkId;
          break;
        default:
          return false;

      }

      List<MkIcr> activeMarketFeedsList = await _kc.MkIcrs
        .Where(i => i.MarketId == marketId && i.IsInvFeed == true)
        .ToListAsync();

      activeMarketFeedsList.ForEach(a => a.IsInvFeed = false);
      activeMarketFeedsList.ForEach(a => a.LastModKoE = empId);
      activeMarketFeedsList.ForEach(a => a.LastModKoT = todayDate);

      /*
      List<NsIcr> activeMarketFeedsList = await _kc.NsIcrs
        .Where(i => i.CustomerId == customerId && i.IsInvFeed == 1)
        .ToListAsync();

      activeMarketFeedsList.ForEach(a => a.IsInvFeed = 0);
      activeMarketFeedsList.ForEach(a => a.LastFeedStatusUpdateBy = empId);
      activeMarketFeedsList.ForEach(a => a.LastFeedStatusUpdateDate = todayDate);
      */
      await _kc.BulkUpdateAsync(activeMarketFeedsList);


      List<BpmItem> bpmItems = await _kc.BpmItems
        .Where(bi => bi.ItemStatusId <= itemStatus && bi.ItemTypeId <= itemType && bi.IsFeedable == true)
        .ToListAsync();
      /*
      List<NsIcr> marketSKUFeedsList = await _kc.NsIcrs
        .Where(i => i.CustomerId == customerId)
        .ToListAsync();

      List<NsIcr> tmpIcrs = new List<NsIcr>();
      NsIcr tmpIcr = new NsIcr();
       */
      List<MkIcr> marketSKUFeedsList = await _kc.MkIcrs
        .Where(i => i.MarketId == marketId)
        .ToListAsync();

      List<MkIcr> tmpIcrs = new List<MkIcr>();
      MkIcr tmpIcr = new MkIcr();


      // For conflicted SKUs
      InvFeedsSkuconflictReport invFeedsSkuconflictReport = new InvFeedsSkuconflictReport()
      {
        ImportedBy = empId,
        ImportedDate = todayDate,
        CustomerId = customerId
      };

      await _kc.InvFeedsSkuconflictReports.AddAsync(invFeedsSkuconflictReport);
      //await _kc.BulkInsertAsync(invFeedsSkuconflictReport, cancellationToken);
      await _kc.SaveChangesAsync();

      List<InvFeedsSkucnflctRepItem> invFeedsSkucnflctRepItems = new List<InvFeedsSkucnflctRepItem>();
      InvFeedsSkucnflctRepItem invFeedsSkucnflctRepItem = new InvFeedsSkucnflctRepItem();


      // For while loop
      int index = 0;
      MarketFeedsListItemImportDTO tmpDto = new MarketFeedsListItemImportDTO();
      if (customerId == 26)
      {
        foreach (MarketFeedsListItemImportDTO tmpWalker in marketFeedsListItemImportDTOs)
        { tmpWalker.CustomerSKU = ScrubHtml(tmpWalker.CustomerSKU); }
      }

      while (index < marketFeedsListItemImportDTOs.Count)
      {
        tmpDto = marketFeedsListItemImportDTOs[index];
        //  if(tmpDto.CustomerSKU.Contains("Copy of OS-MFT-2.5F"))
        //{ Console.WriteLine("Something!"); }
        //  tmpDto.CustomerSKU = ScrubHtml(tmpDto.CustomerSKU);
        //  }
        // Checking duplicated import//WA-MLFMS-10F
        if (marketFeedsListItemImportDTOs.FindAll(ml => ml.CustomerSKU.ToUpper() == tmpDto.CustomerSKU.ToUpper()).Count > 1) // Checkin duplicated Import list
        {
          //tmpIcr = marketSKUFeedsList.Where(al => al.CustSku == ScrubHtml(tmpDto.CustomerSKU.ToUpper().Trim())).FirstOrDefault();
          tmpIcr = marketSKUFeedsList.Where(al => al.CustSku.ToUpper() == tmpDto.CustomerSKU.ToUpper()).FirstOrDefault();
          if (tmpIcr != null)
          {
            invFeedsSkucnflctRepItem = new InvFeedsSkucnflctRepItem()
            {
              InvFeedsSkuconflictReport = invFeedsSkuconflictReport,
              InvFeedsSkuconflictReportId = invFeedsSkuconflictReport.InvFeedsSkuconflictReportId,
              ItemNoId = (bpmItems.Find(bi => bi.ItemNoId == tmpIcr.ItemNoId) != null ? bpmItems.Find(bi => bi.ItemNoId == tmpIcr.ItemNoId).ItemNoId : -1), // Since NO ICR, no BpmItem
              CustSku = tmpDto.CustomerSKU,
              IsResolved = false,
              InvFeedsConflictTypeId = 4 // duplicated SKUs in list
            };
          }
          else
          {
            invFeedsSkucnflctRepItem = new InvFeedsSkucnflctRepItem()
            {
              InvFeedsSkuconflictReport = invFeedsSkuconflictReport,
              InvFeedsSkuconflictReportId = invFeedsSkuconflictReport.InvFeedsSkuconflictReportId,
              ItemNoId = -1,
              CustSku = tmpDto.CustomerSKU,
              IsResolved = false,
              InvFeedsConflictTypeId = 2 // duplicated SKUs in list
            };
          }

          invFeedsSkucnflctRepItems.Add(invFeedsSkucnflctRepItem);
          while (marketFeedsListItemImportDTOs.FindAll(ml => ml.CustomerSKU == tmpDto.CustomerSKU).Count > 2)
          { marketFeedsListItemImportDTOs.RemoveAt(marketFeedsListItemImportDTOs.FindLastIndex(ml => ml.CustomerSKU == tmpDto.CustomerSKU)); }
        }

        //tmpIcrs = marketSKUFeedsList.Where(al => al.CustSku == ScrubHtml(tmpDto.CustomerSKU.ToUpper().Trim())).ToList();
        tmpIcrs = marketSKUFeedsList.Where(al => al.CustSku.ToUpper() == tmpDto.CustomerSKU.ToUpper()).ToList();

        // Trying to find any conflict in NsICR, if not, make it feedable
        if (tmpIcrs.Count == 0)
        {
          invFeedsSkucnflctRepItem = new InvFeedsSkucnflctRepItem()
          {
            InvFeedsSkuconflictReport = invFeedsSkuconflictReport,
            InvFeedsSkuconflictReportId = invFeedsSkuconflictReport.InvFeedsSkuconflictReportId, // Give it a relationship
            ItemNoId = -1, // Since NO ICR, no BpmItem
            CustSku = tmpDto.CustomerSKU,
            IsResolved = false,
            InvFeedsConflictTypeId = 2, // missing ICR
          };
          invFeedsSkucnflctRepItems.Add(invFeedsSkucnflctRepItem);
        }
        else if (tmpIcrs.Count == 1)
        {
          tmpIcrs[0].LastModKoT = todayDate;
          tmpIcrs[0].LastModKoE = empId;
          tmpIcrs[0].IsInvFeed = true;
          if (customerId == HomeDepotID && tmpDto.CustomerASIN != null)
          { tmpIcrs[0].CustAsin = tmpDto.CustomerASIN; }
        }
        else
        {
          tmpIcrs.ForEach(a => a.IsInvFeed = true);
          tmpIcrs.ForEach(a => a.LastModKoE = empId);
          tmpIcrs.ForEach(a => a.LastModKoT = todayDate);
          foreach (MkIcr tmpInsideIcr in tmpIcrs)
          {
            invFeedsSkucnflctRepItem = new InvFeedsSkucnflctRepItem()
            {
              InvFeedsSkuconflictReport = invFeedsSkuconflictReport,
              InvFeedsSkuconflictReportId = invFeedsSkuconflictReport.InvFeedsSkuconflictReportId, // Give it a relationship
              ItemNoId = (bpmItems.Find(bi => bi.ItemNoId == tmpInsideIcr.ItemNoId) != null ? bpmItems.Find(bi => bi.ItemNoId == tmpInsideIcr.ItemNoId).ItemNoId : -1),
              CustSku = tmpDto.CustomerSKU,
              IsResolved = false,
              InvFeedsConflictTypeId = 3, // two records in DB
            };
            invFeedsSkucnflctRepItems.Add(invFeedsSkucnflctRepItem);
          }// End of inside foreach
        } // End of checking ICRs
        await _kc.BulkUpdateAsync(tmpIcrs);
        index++;
      } // End of while

      // await _kc.SaveChangesAsync();
      if (invFeedsSkucnflctRepItems.Count > 0)
      {
        await _kc.BulkInsertAsync(invFeedsSkucnflctRepItems);//, bulkConfig);
      }

      return true;
    }





    // Creating & Updating BPM & Mellow Inventory feeding related record
    // By Brian Yi on 08/17/2021
    public async Task<bool> UpdateBpmMellowFeedsList(int empId, BpmMellowFeedsListImportDTO bpmMellowFeedsList)
    {

      int customerId = int.Parse(bpmMellowFeedsList.customerId);
      DateTime todayDate = DateTime.Now;

      // Only get the items that still activated or some left in stock(but discountinued)
      List<BpmItem> bpmItems = await _kc.BpmItems
        .Where(bi => bi.ItemStatusId <= itemStatus && bi.ItemTypeId <= itemType && bi.IsFeedable == true)
        .ToListAsync();

      List<InvFeedsShopify> invFeedsShopifies = await _kc.InvFeedsShopifies
        .Where(ifs => ifs.CustomerId == customerId)
        .ToListAsync();
      invFeedsShopifies.ForEach(a => a.IsFeedable = false);
      invFeedsShopifies.ForEach(a => a.LastModifiedBy = empId);
      invFeedsShopifies.ForEach(a => a.LastModifiedDate = todayDate);

      //await _kc.SaveChangesAsync();
      await _kc.BulkUpdateAsync(invFeedsShopifies);


      List<InvFeedsShopifyOption> shopifyOptions = await _kc.InvFeedsShopifyOptions.ToListAsync();
      // For new Shopify Option
      InvFeedsShopifyOption tmpShopifyOption = new InvFeedsShopifyOption();
      // For new Shopify Item
      InvFeedsShopify invFeedsShopify = null;
      List<InvFeedsShopify> foundShopifies = new List<InvFeedsShopify>();
      // For new Shopify ItemS
      List<InvFeedsShopify> tmpShopifies = new List<InvFeedsShopify>();
      // For checking conflicts
      List<BpmItem> tmpItems = new List<BpmItem>();

      // For conflicted SKUs
      InvFeedsSkuconflictReport invFeedsSkuconflictReport = new InvFeedsSkuconflictReport()
      {
        ImportedBy = empId,
        ImportedDate = todayDate,
        CustomerId = customerId
      };
      await _kc.InvFeedsSkuconflictReports.AddAsync(invFeedsSkuconflictReport);
      await _kc.SaveChangesAsync();

      List<InvFeedsSkucnflctRepItem> invFeedsSkucnflctRepItems = new List<InvFeedsSkucnflctRepItem>();
      InvFeedsSkucnflctRepItem invFeedsSkucnflctRepItem = new InvFeedsSkucnflctRepItem();
      int index = 0, tmpCnt = 0;
      //bool returnResult = true;
      BpmMellowFeedsListItemImportDTO tmpDto = new BpmMellowFeedsListItemImportDTO();

      while (index < bpmMellowFeedsList.skuList.Count)
      {
        tmpDto = bpmMellowFeedsList.skuList[index];
        //foundShopifies = invFeedsShopifies.FindAll(s => s.CustomerId == customerId && s.Sku.Equals(tmpDto.SKU, StringComparison.OrdinalIgnoreCase));
        //if(tmpDto.SKU.Contains("AFMGT-10T"))
        //{ Console.WriteLine("Here!"); }
        foundShopifies = invFeedsShopifies.FindAll(s => s.CustomerId == customerId && s.Sku == ScrubHtml(tmpDto.SKU));
        if (foundShopifies.Count == 0) // Need to make new record
        {
          tmpCnt = bpmItems.FindAll(bi => bi.ItemName == ScrubHtml(tmpDto.SKU)).Count;
          if (tmpCnt == 1) // Everything is good here
          {
            invFeedsShopify = new InvFeedsShopify()
            {
              CustomerId = customerId,
              Sku = tmpDto.SKU,
              Handle = tmpDto.Handle,
              Title = tmpDto.Title,
              HsCode = (tmpDto.HSCode != null ? tmpDto.HSCode : ""),
              Coo = (tmpDto.COO != null ? tmpDto.COO : ""),
              IsFeedable = true,
              ItemNoId = (bpmItems.Find(bi => bi.ItemName == ScrubHtml(tmpDto.SKU)) != null ? bpmItems.Find(bi => bi.ItemName == ScrubHtml(tmpDto.SKU)).ItemNoId : null),
              LastModifiedBy = empId,
              LastModifiedDate = todayDate,
              Option1Name = (tmpDto.Option1Name != null ? tmpDto.Option1Name.Trim() : ""),
              Option1Value = (tmpDto.Option1Value != null ? tmpDto.Option1Value.Trim() : ""),
              Option2Name = (tmpDto.Option2Name != null ? tmpDto.Option2Name.Trim() : ""),
              Option2Value = (tmpDto.Option2Value != null ? tmpDto.Option2Value.Trim() : ""),
              Option3Name = (tmpDto.Option3Name != null ? tmpDto.Option3Name.Trim() : ""),
              Option3Value = (tmpDto.Option3Value != null ? tmpDto.Option3Value.Trim() : "")
            };
            /*
            if (tmpDto.Option1Name != null && tmpDto.Option1Name.Trim() != "")
            { invFeedsShopify.InvFeedsShopifyOption1Id = await UpdateShopifyOption(tmpDto.Option1Name, tmpDto.Option1Value, shopifyOptions); }
            if (tmpDto.Option2Name != null && tmpDto.Option2Name.Trim() != "")
            { invFeedsShopify.InvFeedsShopifyOption2Id = await UpdateShopifyOption(tmpDto.Option2Name, tmpDto.Option2Value, shopifyOptions); }
            if (tmpDto.Option3Name != null && tmpDto.Option3Name.Trim() != "")
            { invFeedsShopify.InvFeedsShopifyOption3Id = await UpdateShopifyOption(tmpDto.Option3Name, tmpDto.Option3Value, shopifyOptions); }
            */
            await _kc.InvFeedsShopifies.AddAsync(invFeedsShopify);
            await _kc.SaveChangesAsync();
          }
          else if (tmpCnt > 1) // More than one matched BPM SKU
          {
            invFeedsSkucnflctRepItem = new InvFeedsSkucnflctRepItem()
            {
              InvFeedsSkuconflictReport = invFeedsSkuconflictReport,
              InvFeedsSkuconflictReportId = invFeedsSkuconflictReport.InvFeedsSkuconflictReportId,
              ItemNoId = (invFeedsShopify != null ?
              (bpmItems.FindLast(bi => bi.ItemNoId == invFeedsShopify.ItemNoId) != null ? bpmItems.FindLast(bi => bi.ItemNoId == invFeedsShopify.ItemNoId).ItemNoId : null)
              : null), // Since NO ICR, no BpmItem
              CustSku = tmpDto.SKU,
              IsResolved = false,
              InvFeedsConflictTypeId = 6, // Multiple matched BPM SKUs
            };
            invFeedsSkucnflctRepItems.Add(invFeedsSkucnflctRepItem);

            //using last one to be matched
            invFeedsShopify = new InvFeedsShopify()
            {
              CustomerId = customerId,
              Sku = tmpDto.SKU,
              Handle = tmpDto.Handle,
              Title = tmpDto.Title,
              HsCode = (tmpDto.HSCode != null ? tmpDto.HSCode : ""),
              Coo = (tmpDto.COO != null ? tmpDto.COO : ""),
              IsFeedable = true,
              ItemNoId = (bpmItems.FindLast(bi => bi.ItemName == ScrubHtml(tmpDto.SKU)) != null ? bpmItems.FindLast(bi => bi.ItemName == ScrubHtml(tmpDto.SKU)).ItemNoId : null),
              LastModifiedBy = empId,
              LastModifiedDate = todayDate,
              Option1Name = (tmpDto.Option1Name != null ? tmpDto.Option1Name.Trim() : ""),
              Option1Value = (tmpDto.Option1Value != null ? tmpDto.Option1Value.Trim() : ""),
              Option2Name = (tmpDto.Option2Name != null ? tmpDto.Option2Name.Trim() : ""),
              Option2Value = (tmpDto.Option2Value != null ? tmpDto.Option2Value.Trim() : ""),
              Option3Name = (tmpDto.Option3Name != null ? tmpDto.Option3Name.Trim() : ""),
              Option3Value = (tmpDto.Option3Value != null ? tmpDto.Option3Value.Trim() : "")
            };
            /*
            if (tmpDto.Option1Name != null && tmpDto.Option1Name.Trim() != "")
            { invFeedsShopify.InvFeedsShopifyOption1Id = await UpdateShopifyOption(tmpDto.Option1Name, tmpDto.Option1Value, shopifyOptions); }
            if (tmpDto.Option2Name != null && tmpDto.Option2Name.Trim() != "")
            { invFeedsShopify.InvFeedsShopifyOption2Id = await UpdateShopifyOption(tmpDto.Option2Name, tmpDto.Option2Value, shopifyOptions); }
            if (tmpDto.Option3Name != null && tmpDto.Option3Name.Trim() != "")
            { invFeedsShopify.InvFeedsShopifyOption3Id = await UpdateShopifyOption(tmpDto.Option3Name, tmpDto.Option3Value, shopifyOptions); }
            */
            await _kc.InvFeedsShopifies.AddAsync(invFeedsShopify);
            await _kc.SaveChangesAsync();

          }
          else // No Matching in BPM SKU
          {
            invFeedsSkucnflctRepItem = new InvFeedsSkucnflctRepItem()
            {
              InvFeedsSkuconflictReport = invFeedsSkuconflictReport,
              InvFeedsSkuconflictReportId = invFeedsSkuconflictReport.InvFeedsSkuconflictReportId,
              //ItemNoId = (invFeedsShopify != null ?
              //(bpmItems.FindLast(bi => bi.ItemNoId == invFeedsShopify.ItemNoId) != null ? bpmItems.Find(bi => bi.ItemNoId == invFeedsShopify.ItemNoId).ItemNoId : null)
              //: -1), // Since NO ICR, no BpmItem
              ItemNoId = null,
              Description = (tmpDto.Handle != null ? tmpDto.Handle : ""),
              CustSku = tmpDto.SKU,
              IsResolved = false,

              InvFeedsConflictTypeId = 7, // Multiple matched BPM SKUs
            };
            invFeedsSkucnflctRepItems.Add(invFeedsSkucnflctRepItem);

          }// End of BPM Matching

        }// End of no record found in Shopify Table
        else if (foundShopifies.Count == 1) // Normal
        {
          tmpCnt = bpmItems.FindAll(bi => bi.ItemName == tmpDto.SKU).Count;
          if (tmpCnt == 1) // Everything is good here
          {
            //foundShopifies[0].CustomerId = customerId;
            foundShopifies[0].Handle = tmpDto.Handle;
            foundShopifies[0].Sku = tmpDto.SKU;
            foundShopifies[0].Title = tmpDto.Title;
            foundShopifies[0].HsCode = (tmpDto.HSCode != null ? tmpDto.HSCode : "");
            foundShopifies[0].Coo = (tmpDto.COO != null ? tmpDto.COO : "");
            foundShopifies[0].IsFeedable = true;
            foundShopifies[0].ItemNoId = (bpmItems.Find(bi => bi.ItemName == ScrubHtml(tmpDto.SKU)) != null ? bpmItems.Find(bi => bi.ItemName == ScrubHtml(tmpDto.SKU)).ItemNoId : null);
            foundShopifies[0].LastModifiedBy = empId;
            foundShopifies[0].LastModifiedDate = todayDate;
            foundShopifies[0].Option1Name = (tmpDto.Option1Name != null ? tmpDto.Option1Name.Trim() : "");
            foundShopifies[0].Option1Value = (tmpDto.Option1Value != null ? tmpDto.Option1Value.Trim() : "");
            foundShopifies[0].Option2Name = (tmpDto.Option2Name != null ? tmpDto.Option2Name.Trim() : "");
            foundShopifies[0].Option2Value = (tmpDto.Option2Value != null ? tmpDto.Option2Value.Trim() : "");
            foundShopifies[0].Option3Name = (tmpDto.Option3Name != null ? tmpDto.Option3Name.Trim() : "");
            foundShopifies[0].Option3Value = (tmpDto.Option3Value != null ? tmpDto.Option3Value.Trim() : "");
            /*
            if (tmpDto.Option1Name != null && tmpDto.Option1Name.Trim() != "")
            { foundShopifies[0].InvFeedsShopifyOption1Id = await UpdateShopifyOption(tmpDto.Option1Name, tmpDto.Option1Value, shopifyOptions); }
            if (tmpDto.Option2Name != null && tmpDto.Option2Name.Trim() != "")
            { foundShopifies[0].InvFeedsShopifyOption2Id = await UpdateShopifyOption(tmpDto.Option2Name, tmpDto.Option2Value, shopifyOptions); }
            if (tmpDto.Option3Name != null && tmpDto.Option3Name.Trim() != "")
            { foundShopifies[0].InvFeedsShopifyOption3Id = await UpdateShopifyOption(tmpDto.Option3Name, tmpDto.Option3Value, shopifyOptions); }*/
            await _kc.SaveChangesAsync();
          }
          else // Matched more than 1; No need to check about missing BPM SKU since DB already has a Shopify record
          {// Just using last BPM SKU

            foundShopifies[0].Handle = tmpDto.Handle;
            foundShopifies[0].Sku = tmpDto.SKU;
            foundShopifies[0].Title = tmpDto.Title;
            foundShopifies[0].HsCode = (tmpDto.HSCode != null ? tmpDto.HSCode : "");
            foundShopifies[0].Coo = (tmpDto.COO != null ? tmpDto.COO : "");
            foundShopifies[0].IsFeedable = true;
            foundShopifies[0].ItemNoId = (bpmItems.FindLast(bi => bi.ItemName == ScrubHtml(tmpDto.SKU)) != null ? bpmItems.FindLast(bi => bi.ItemName == ScrubHtml(tmpDto.SKU)).ItemNoId : null);
            foundShopifies[0].LastModifiedBy = empId;
            foundShopifies[0].LastModifiedDate = todayDate;
            foundShopifies[0].Option1Name = (tmpDto.Option1Name != null ? tmpDto.Option1Name.Trim() : "");
            foundShopifies[0].Option1Value = (tmpDto.Option1Value != null ? tmpDto.Option1Value.Trim() : "");
            foundShopifies[0].Option2Name = (tmpDto.Option2Name != null ? tmpDto.Option2Name.Trim() : "");
            foundShopifies[0].Option2Value = (tmpDto.Option2Value != null ? tmpDto.Option2Value.Trim() : "");
            foundShopifies[0].Option3Name = (tmpDto.Option3Name != null ? tmpDto.Option3Name.Trim() : "");
            foundShopifies[0].Option3Value = (tmpDto.Option3Value != null ? tmpDto.Option3Value.Trim() : "");

            /*
            if (tmpDto.Option1Name != null && tmpDto.Option1Name.Trim() != "")
            { foundShopifies[0].InvFeedsShopifyOption1Id = await UpdateShopifyOption(tmpDto.Option1Name, tmpDto.Option1Value, shopifyOptions); }
            if (tmpDto.Option2Name != null && tmpDto.Option2Name.Trim() != "")
            { foundShopifies[0].InvFeedsShopifyOption2Id = await UpdateShopifyOption(tmpDto.Option2Name, tmpDto.Option2Value, shopifyOptions); }
            if (tmpDto.Option3Name != null && tmpDto.Option3Name.Trim() != "")
            { foundShopifies[0].InvFeedsShopifyOption3Id = await UpdateShopifyOption(tmpDto.Option3Name, tmpDto.Option3Value, shopifyOptions); }*/
            await _kc.SaveChangesAsync();

            invFeedsSkucnflctRepItem = new InvFeedsSkucnflctRepItem()
            {
              InvFeedsSkuconflictReport = invFeedsSkuconflictReport,
              InvFeedsSkuconflictReportId = invFeedsSkuconflictReport.InvFeedsSkuconflictReportId,
              ItemNoId = (invFeedsShopify != null ?
              (bpmItems.FindLast(bi => bi.ItemNoId == invFeedsShopify.ItemNoId) != null ? bpmItems.FindLast(bi => bi.ItemNoId == invFeedsShopify.ItemNoId).ItemNoId : null)
              : null), // Since NO ICR, no BpmItem
              CustSku = tmpDto.SKU,
              IsResolved = false,
              InvFeedsConflictTypeId = 6, // Multiple matched BPM SKUs
            };
            invFeedsSkucnflctRepItems.Add(invFeedsSkucnflctRepItem);
          }
        } // End of one matched
        else  // More than 1
        {
          // Only will update first one
          tmpCnt = bpmItems.FindAll(bi => bi.ItemName == ScrubHtml(tmpDto.SKU)).Count;
          if (tmpCnt == 1) // Everything is good here
          {
            //foundShopifies[0].CustomerId = customerId;
            foundShopifies[0].Handle = tmpDto.Handle;
            foundShopifies[0].Title = tmpDto.Title;
            foundShopifies[0].Sku = tmpDto.SKU;
            foundShopifies[0].HsCode = (tmpDto.HSCode != null ? tmpDto.HSCode : "");
            foundShopifies[0].Coo = (tmpDto.COO != null ? tmpDto.COO : "");
            foundShopifies[0].IsFeedable = true;
            foundShopifies[0].ItemNoId = (bpmItems.Find(bi => bi.ItemName == ScrubHtml(tmpDto.SKU)) != null ? bpmItems.Find(bi => bi.ItemName == ScrubHtml(tmpDto.SKU)).ItemNoId : null);
            foundShopifies[0].LastModifiedBy = empId;
            foundShopifies[0].LastModifiedDate = todayDate;
            foundShopifies[0].Option1Name = (tmpDto.Option1Name != null ? tmpDto.Option1Name.Trim() : "");
            foundShopifies[0].Option1Value = (tmpDto.Option1Value != null ? tmpDto.Option1Value.Trim() : "");
            foundShopifies[0].Option2Name = (tmpDto.Option2Name != null ? tmpDto.Option2Name.Trim() : "");
            foundShopifies[0].Option2Value = (tmpDto.Option2Value != null ? tmpDto.Option2Value.Trim() : "");
            foundShopifies[0].Option3Name = (tmpDto.Option3Name != null ? tmpDto.Option3Name.Trim() : "");
            foundShopifies[0].Option3Value = (tmpDto.Option3Value != null ? tmpDto.Option3Value.Trim() : "");

            /*
            if (tmpDto.Option1Name != null && tmpDto.Option1Name.Trim() != "")
            { foundShopifies[0].InvFeedsShopifyOption1Id = await UpdateShopifyOption(tmpDto.Option1Name, tmpDto.Option1Value, shopifyOptions); }
            if (tmpDto.Option2Name != null && tmpDto.Option2Name.Trim() != "")
            { foundShopifies[0].InvFeedsShopifyOption2Id = await UpdateShopifyOption(tmpDto.Option2Name, tmpDto.Option2Value, shopifyOptions); }
            if (tmpDto.Option3Name != null && tmpDto.Option3Name.Trim() != "")
            { foundShopifies[0].InvFeedsShopifyOption3Id = await UpdateShopifyOption(tmpDto.Option3Name, tmpDto.Option3Value, shopifyOptions); }*/
            await _kc.SaveChangesAsync();
          }
          else // Matched more than 1; No need to check about missing BPM SKU since DB already has a Shopify record
          {// Just using last BPM SKU

            foundShopifies[0].Handle = tmpDto.Handle;
            foundShopifies[0].Title = tmpDto.Title;
            foundShopifies[0].Sku = tmpDto.SKU;
            foundShopifies[0].HsCode = (tmpDto.HSCode != null ? tmpDto.HSCode : "");
            foundShopifies[0].Coo = (tmpDto.COO != null ? tmpDto.COO : "");
            foundShopifies[0].IsFeedable = true;
            foundShopifies[0].ItemNoId = (bpmItems.FindLast(bi => bi.ItemName == ScrubHtml(tmpDto.SKU)) != null ? bpmItems.FindLast(bi => bi.ItemName == ScrubHtml(tmpDto.SKU)).ItemNoId : null);
            foundShopifies[0].LastModifiedBy = empId;
            foundShopifies[0].LastModifiedDate = todayDate;
            foundShopifies[0].Option1Name = (tmpDto.Option1Name != null ? tmpDto.Option1Name.Trim() : "");
            foundShopifies[0].Option1Value = (tmpDto.Option1Value != null ? tmpDto.Option1Value.Trim() : "");
            foundShopifies[0].Option2Name = (tmpDto.Option2Name != null ? tmpDto.Option2Name.Trim() : "");
            foundShopifies[0].Option2Value = (tmpDto.Option2Value != null ? tmpDto.Option2Value.Trim() : "");
            foundShopifies[0].Option3Name = (tmpDto.Option3Name != null ? tmpDto.Option3Name.Trim() : "");
            foundShopifies[0].Option3Value = (tmpDto.Option3Value != null ? tmpDto.Option3Value.Trim() : "");

            /*
            if (tmpDto.Option1Name != null && tmpDto.Option1Name.Trim() != "")
            { foundShopifies[0].InvFeedsShopifyOption1Id = await UpdateShopifyOption(tmpDto.Option1Name, tmpDto.Option1Value, shopifyOptions); }
            if (tmpDto.Option2Name != null && tmpDto.Option2Name.Trim() != "")
            { foundShopifies[0].InvFeedsShopifyOption2Id = await UpdateShopifyOption(tmpDto.Option2Name, tmpDto.Option2Value, shopifyOptions); }
            if (tmpDto.Option3Name != null && tmpDto.Option3Name.Trim() != "")
            { foundShopifies[0].InvFeedsShopifyOption3Id = await UpdateShopifyOption(tmpDto.Option3Name, tmpDto.Option3Value, shopifyOptions); }*/
            await _kc.SaveChangesAsync();

            invFeedsSkucnflctRepItem = new InvFeedsSkucnflctRepItem()
            {
              InvFeedsSkuconflictReport = invFeedsSkuconflictReport,
              InvFeedsSkuconflictReportId = invFeedsSkuconflictReport.InvFeedsSkuconflictReportId,
              ItemNoId = (invFeedsShopify != null ?
              (bpmItems.FindLast(bi => bi.ItemNoId == invFeedsShopify.ItemNoId) != null ? bpmItems.FindLast(bi => bi.ItemNoId == invFeedsShopify.ItemNoId).ItemNoId : null)
              : null), // Since NO ICR, no BpmItem
              CustSku = tmpDto.SKU,
              IsResolved = false,
              InvFeedsConflictTypeId = 6, // Multiple matched BPM SKUs
            };
            invFeedsSkucnflctRepItems.Add(invFeedsSkucnflctRepItem);
          }
          invFeedsSkucnflctRepItem = new InvFeedsSkucnflctRepItem()
          {
            InvFeedsSkuconflictReport = invFeedsSkuconflictReport,
            InvFeedsSkuconflictReportId = invFeedsSkuconflictReport.InvFeedsSkuconflictReportId,
            ItemNoId = (invFeedsShopify != null ?
            (bpmItems.FindLast(bi => bi.ItemNoId == invFeedsShopify.ItemNoId) != null ? bpmItems.FindLast(bi => bi.ItemNoId == invFeedsShopify.ItemNoId).ItemNoId : null)
            : null), // Since NO ICR, no BpmItem
            CustSku = tmpDto.SKU,
            IsResolved = false,
            InvFeedsConflictTypeId = 3, // Multiple matched BPM SKUs
          };
          invFeedsSkucnflctRepItems.Add(invFeedsSkucnflctRepItem);

        } // End of multiple Shopify records

        index++;
      }
      //invFeedsSkucnflctRepItems
      //await _kc.InvFeedsSkucnflctRepItems.AddRangeAsync(invFeedsSkucnflctRepItems);
      //await _kc.SaveChangesAsync();
      await _kc.BulkInsertAsync(invFeedsSkucnflctRepItems);


      return true;
    }

    // Update or create Shopify Option record
    // By Brian Yi on 8/31/2021
    public async Task<int> UpdateShopifyOption(string optionName, string optionValue, List<InvFeedsShopifyOption> invFeedsShopifyOptions)
    {
      int result = 0;

      InvFeedsShopifyOption tmpShopifyOption = invFeedsShopifyOptions.FindLast(s => s.OptionName == optionName && s.OptionValue == optionValue);
      //InvFeedsShopifyOption tmpShopifyOption = await _kc.InvFeedsShopifyOptions
      //.Where(so => so.OptionName.Equals(optionName, StringComparison.OrdinalIgnoreCase) 
      //&& so.OptionValue.Equals(optionValue, StringComparison.OrdinalIgnoreCase))
      //.FirstOrDefaultAsync();

      if (tmpShopifyOption != null)
      {
        result = (int)tmpShopifyOption.InvFeedsShopifyOptionId;
      }
      else // Need to make a record
      {
        tmpShopifyOption = new InvFeedsShopifyOption()
        {
          OptionName = optionName.ToUpperInvariant(),
          OptionValue = optionValue.ToUpperInvariant()
        };
        await _kc.InvFeedsShopifyOptions.AddAsync(tmpShopifyOption);
        await _kc.SaveChangesAsync();
        result = (int)tmpShopifyOption.InvFeedsShopifyOptionId;
      }
      return result;
    }




    // Overstock Feeding list update
    // By Brian Yi on 07/20/2021
    // Modified By Brian Yi on 06/17/2022
    public async Task<bool> UpdateOverstockFeedsList(int empId, OverstockFeedsListImportDTO overstockFeedsList)
    {
      List<InvFeedsMrktSpecificSku> invFeedsMrktSpecificSkuList = await _kc.InvFeedsMrktSpecificSkus
        .Where(i => i.CustomerId == Int32.Parse(overstockFeedsList.customerId))
        .ToListAsync();
      int ostCustId = 21, overstockMkId = 12;
      //List<int> amazonCustIDs = new List<int>() {1, 2, 3, 4, 5, 6, 7};
      /*
      List<NsIcr> nsIcrs = await _kc.NsIcrs
        .Where(i => i.CustomerId == ostCustId && i.CustAsin != null)
        .ToListAsync();
      */
      List<MkIcr> mkIcrs = await _kc.MkIcrs
        .Where(i => i.MarketId == overstockMkId && i.IsInvFeed == true)
        .ToListAsync();

      List<InvFeedsMrktSpecificSku> newSKUs = new List<InvFeedsMrktSpecificSku>();
      InvFeedsMrktSpecificSku tmpSKU = new InvFeedsMrktSpecificSku();
      //NsIcr tmpModelForICR = new NsIcr();
      MkIcr tmpModelForICR = new MkIcr();

      foreach (OverstockFeedsListItemImportDTO tmpDTO in overstockFeedsList.skuList)
      {
        tmpSKU = invFeedsMrktSpecificSkuList
          .Where(i => String.Equals(i.Icr.CustSku, tmpDTO.SupplierSku, StringComparison.CurrentCultureIgnoreCase))
          .FirstOrDefault();

        if (tmpSKU == null)
        {
          tmpModelForICR = mkIcrs
            .Where(i => String.Equals(i.CustSku, tmpDTO.SupplierSku, StringComparison.CurrentCultureIgnoreCase))
            .FirstOrDefault();

          if (tmpModelForICR == null)
            return false;

          tmpSKU = new InvFeedsMrktSpecificSku
          {
            CustomerId = Int32.Parse(overstockFeedsList.customerId),
            ItemNoId = tmpModelForICR.ItemNoId,
            IsActivated = true,
            LastModifiedBy = empId,
            LastModifiedDate = DateTime.Now,
            IcrId = tmpModelForICR.IcrId
          };
          newSKUs.Add(tmpSKU);
        }
        else
        {
          tmpSKU.IsActivated = true;
          invFeedsMrktSpecificSkuList.Remove(tmpSKU);
          await _kc.SaveChangesAsync();
        }
      }
      invFeedsMrktSpecificSkuList.ForEach(i => i.IsActivated = false);
      await _kc.SaveChangesAsync();
      _kc.BulkInsert(newSKUs);

      return true;
    }

    // Wayfair Feeding list update
    // By Brian Yi on 07/20/2021
    public async Task<bool> UpdateWayfairFeedsList(int empId, WayfairFeedsListImportDTO wayfairFeedsListImportDTO)
    {
      /*
      List<InvFeedsMrktSpecificSku> invFeedsMrktSpecificSkuList = await _kc.InvFeedsMrktSpecificSkus
        .Where(i => i.CustomerId == Int32.Parse(overstockFeedsList.customerId))
        .ToListAsync();
      int ostCustId = 21;
      //List<int> amazonCustIDs = new List<int>() {1, 2, 3, 4, 5, 6, 7};

      //??
      //List<NsIcr> nsIcrs = await GetAmazonCustSKUs(amazonCustIDs);
      List<NsIcr> nsIcrs = await _kc.NsIcrs
        .Where(i => i.CustomerId == ostCustId && i.CustAsin != null)
        .ToListAsync();

      List<InvFeedsMrktSpecificSku> newSKUs = new List<InvFeedsMrktSpecificSku>();
      InvFeedsMrktSpecificSku tmpSKU = new InvFeedsMrktSpecificSku();
      NsIcr tmpModelForICR = new NsIcr();

      foreach (OverstockFeedsListItemImportDTO tmpDTO in overstockFeedsList.skuList)
      {
        tmpSKU = invFeedsMrktSpecificSkuList
          .Where(i => String.Equals(i.Icr.CustSku, tmpDTO.SupplierSku, StringComparison.CurrentCultureIgnoreCase))
          .FirstOrDefault();

        if (tmpSKU == null)
        {
          tmpModelForICR = nsIcrs
            .Where(i => String.Equals(i.CustSku, tmpDTO.SupplierSku, StringComparison.CurrentCultureIgnoreCase))
            .FirstOrDefault();

          if (tmpModelForICR == null)
            return false;

          tmpSKU = new InvFeedsMrktSpecificSku
          {
            CustomerId = Int32.Parse(overstockFeedsList.customerId),
            ItemNoId = tmpModelForICR.ItemNoId,
            IsActivated = true,
            LastModifiedBy = empId,
            LastModifiedDate = DateTime.Now,
            IcrId = tmpModelForICR.IcrId
          };
          newSKUs.Add(tmpSKU);
        }
        else
        {
          tmpSKU.IsActivated = true;
          invFeedsMrktSpecificSkuList.Remove(tmpSKU);
          await _kc.SaveChangesAsync();
        }
      }
      invFeedsMrktSpecificSkuList.ForEach(i => i.IsActivated = false);
      await _kc.SaveChangesAsync();
      _kc.BulkInsert(newSKUs);
      */
      return true;
    }

    // Getting a list of Feeding status of each sku (market specific)
    // By Brian Yi on 07/22/2021
    public async Task<List<InvFeedsRemarkSKUGroupDTO>> GetSKUFeedingStatusList()
    {
      List<InvFeedsRemarkSKUGroupDTO> serviceResponse = await GetRemarkGroupItems(0);
      /*
      List<BpmItem> bpmItems = await _kc.BpmItems
        .Where(b => b.ItemTypeId < 3)
        .Include(b => b.NsIcrs)
        .ToListAsync();
      
      InvFeedsRemarkSKUGroupDTO tmpDTO = new InvFeedsRemarkSKUGroupDTO();

      foreach (BpmItem tmpModel in bpmItems)
      {
        if (tmpModel.NsIcrs != null)
        {
          tmpDTO = GetRemarkGroupItems(tmpModel.ItemNoId);
          serviceResponse.Add(tmpDTO);
        }
      }*/

      return serviceResponse;
    }


    // Getting a feeding status sku (market specific)
    // By Brian Yi on 07/22/2021
    public async Task<InvFeedsSKUStatusDTO> GetSKUFeedingStatus(int itemNoId)
    {
      BpmItem bpmItem = await _kc.BpmItems
        .Where(i => i.ItemNoId == itemNoId)
        .FirstOrDefaultAsync();

      int AmazonDropShip = 5, BPMWeb = 9, eBay = 12, Houzz = 14, Mellow = 18, OverstockDropShip = 21, WalmartDSV = 26, WayfairDropShip = 29;
      int amazonMkId = 1, bpmMkId = 3, wayfairMkId = 4, eBayMkId = 5, houzzMkId = 7, mellowMkId = 10, overstockMkId = 12, walmartMkId = 16, homeDepotMkId = 340, targetMkId = 341;

      InvFeedsSKUStatusDTO invFeedsSKUStatus = new InvFeedsSKUStatusDTO()
      {
        ItemNoId = itemNoId,
        ItemName = bpmItem.ItemName,
        Description = (bpmItem.Description != null ? bpmItem.Description : "")
      };
      /*
      List<NsIcr> nsIcrs = await _kc.NsIcrs
        .Where(i => i.ItemNoId == bpmItem.ItemNoId)
        .ToListAsync();
      */
      List<MkIcr> mkIcrs = await _kc.MkIcrs
        .Where(i => i.ItemNoId == bpmItem.ItemNoId)
        .ToListAsync();

      List<InvFeedsMrktSpecificSku> invFeedsMrktSpecificSkus = await _kc.InvFeedsMrktSpecificSkus
        .Where(i => i.ItemNoId == itemNoId)
        .ToListAsync();

      // Amazon Drop Ship
      //NsIcr tmpModel = nsIcrs.Where(n => n.CustomerId == AmazonDropShip).FirstOrDefault();
      MkIcr tmpModel = mkIcrs.Where(n => n.MarketId == amazonMkId).FirstOrDefault();
      if (tmpModel != null)
      {
        invFeedsSKUStatus.AmazonIcrId = tmpModel.IcrId;
        invFeedsSKUStatus.AmazonCustSKU = (tmpModel.CustSku != null ? tmpModel.CustSku : "");
        invFeedsSKUStatus.AmazonFeedsEnable = (tmpModel.IsInvFeed != null ? (tmpModel.IsInvFeed == false ? true : false) : false);
        invFeedsSKUStatus.AmazonUPC = (tmpModel.CustUpc != null ? tmpModel.CustUpc : "");
        invFeedsSKUStatus.ASIN = (tmpModel.CustAsin != null ? tmpModel.CustAsin : "");
        invFeedsSKUStatus.AmazonLastModifiedTime = (tmpModel.LastModKoT != null ?
          ((DateTime)tmpModel.LastModKoT).ToString("MM/dd/yyyy h:mm tt") : null);
        invFeedsSKUStatus.AmazonLastModifiedBy = (tmpModel.LastModKoE != null ?
          (await _kc.Employees.Where(e => e.EmployeeId == tmpModel.LastModKoE).FirstOrDefaultAsync()).LoginId : "");
      }
      else
      {
        invFeedsSKUStatus.AmazonIcrId = -1;
        invFeedsSKUStatus.AmazonCustSKU = "";
        invFeedsSKUStatus.AmazonFeedsEnable = false;
        invFeedsSKUStatus.AmazonUPC = "";
        invFeedsSKUStatus.ASIN = "";
        invFeedsSKUStatus.AmazonLastModifiedTime = null;
        invFeedsSKUStatus.AmazonLastModifiedBy = "";
      }

      // Overstock
      tmpModel = mkIcrs.Where(n => n.MarketId == overstockMkId).FirstOrDefault();
      if (tmpModel != null)
      {
        invFeedsSKUStatus.OverstockIcrId = tmpModel.IcrId;
        invFeedsSKUStatus.OverstockCustSKU = (tmpModel.CustSku != null ? tmpModel.CustSku : "");
        invFeedsSKUStatus.OverstockFeedsEnable = (tmpModel.IsInvFeed != null ? (tmpModel.IsInvFeed == false ? false : true) : false);
        invFeedsSKUStatus.OverstockUPC = (tmpModel.CustUpc != null ? tmpModel.CustUpc : "");
        invFeedsSKUStatus.OverstockLastModifiedTime = (tmpModel.LastModKoT != null ?
          ((DateTime)tmpModel.LastModKoT).ToString("MM/dd/yyyy h:mm tt") : null);
        invFeedsSKUStatus.OverstockLastModifiedBy = (tmpModel.LastModKoE != null ?
          (await _kc.Employees.Where(e => e.EmployeeId == tmpModel.LastModKoE).FirstOrDefaultAsync()).LoginId : "");
      }
      else
      {
        invFeedsSKUStatus.OverstockIcrId = -1;
        invFeedsSKUStatus.OverstockCustSKU = "";
        invFeedsSKUStatus.OverstockFeedsEnable = false;
        invFeedsSKUStatus.OverstockUPC = "";
        invFeedsSKUStatus.OverstockLastModifiedTime = null;
        invFeedsSKUStatus.OverstockLastModifiedBy = "";
      }

      // Walmart
      tmpModel = mkIcrs.Where(n => n.MarketId == walmartMkId).FirstOrDefault();
      if (tmpModel != null)
      {
        invFeedsSKUStatus.WalmartIcrId = tmpModel.IcrId;
        invFeedsSKUStatus.WalmartCustSKU = (tmpModel.CustSku != null ? tmpModel.CustSku : "");
        invFeedsSKUStatus.WalmartFeedsEnable = (tmpModel.IsInvFeed != null ? (tmpModel.IsInvFeed == false ? false : true) : false);
        invFeedsSKUStatus.WalmartUPC = (tmpModel.CustUpc != null ? tmpModel.CustUpc : "");
        invFeedsSKUStatus.WalmartLastModifiedTime = (tmpModel.LastModKoT != null ?
          ((DateTime)tmpModel.LastModKoT).ToString("MM/dd/yyyy h:mm tt") : null);
        invFeedsSKUStatus.WalmartLastModifiedBy = (tmpModel.LastModKoE != null ?
          (await _kc.Employees.Where(e => e.EmployeeId == tmpModel.LastModKoE).FirstOrDefaultAsync()).LoginId : "");
      }
      else
      {
        invFeedsSKUStatus.WalmartIcrId = -1;
        invFeedsSKUStatus.WalmartCustSKU = "";
        invFeedsSKUStatus.WalmartFeedsEnable = false;
        invFeedsSKUStatus.WalmartUPC = "";
        invFeedsSKUStatus.WalmartLastModifiedTime = null;
        invFeedsSKUStatus.WalmartLastModifiedBy = "";
      }

      // Wayfair
      tmpModel = mkIcrs.Where(n => n.MarketId == wayfairMkId).FirstOrDefault();
      if (tmpModel != null)
      {
        invFeedsSKUStatus.WayfairIcrId = tmpModel.IcrId;
        invFeedsSKUStatus.WayfairCustSKU = (tmpModel.CustSku != null ? tmpModel.CustSku : "");
        invFeedsSKUStatus.WayfairFeedsEnable = (tmpModel.IsInvFeed != null ? (tmpModel.IsInvFeed == false ? false : true) : false);
        invFeedsSKUStatus.WayfairUPC = (tmpModel.CustUpc != null ? tmpModel.CustUpc : "");
        invFeedsSKUStatus.WayfairLastModifiedTime = (tmpModel.LastModKoT != null ?
          ((DateTime)tmpModel.LastModKoT).ToString("MM/dd/yyyy h:mm tt") : null);
        invFeedsSKUStatus.WayfairLastModifiedBy = (tmpModel.LastModKoE != null ?
          (await _kc.Employees.Where(e => e.EmployeeId == tmpModel.LastModKoE).FirstOrDefaultAsync()).LoginId : "");
      }
      else
      {
        invFeedsSKUStatus.WayfairIcrId = -1;
        invFeedsSKUStatus.WayfairCustSKU = "";
        invFeedsSKUStatus.WayfairFeedsEnable = false;
        invFeedsSKUStatus.WayfairUPC = "";
        invFeedsSKUStatus.WayfairLastModifiedTime = null;
        invFeedsSKUStatus.WayfairLastModifiedBy = "";
      }

      // eBay
      tmpModel = mkIcrs.Where(n => n.MarketId == eBayMkId).FirstOrDefault();
      if (tmpModel != null)
      {
        invFeedsSKUStatus.eBayIcrId = tmpModel.IcrId;
        invFeedsSKUStatus.eBayCustSKU = (tmpModel.CustSku != null ? tmpModel.CustSku : "");
        invFeedsSKUStatus.eBayFeedsEnable = (tmpModel.IsInvFeed != null ? (tmpModel.IsInvFeed == false ? false : true) : false);
        //invFeedsSKUStatus.WayfairUPC = (tmpModel.CustUpc != null ? tmpModel.CustUpc : "");
        invFeedsSKUStatus.eBayLastModifiedTime = (tmpModel.LastModKoT != null ?
          ((DateTime)tmpModel.LastModKoT).ToString("MM/dd/yyyy h:mm tt") : null);
        invFeedsSKUStatus.eBayLastModifiedBy = (tmpModel.LastModKoE != null ?
          (await _kc.Employees.Where(e => e.EmployeeId == tmpModel.LastModKoE).FirstOrDefaultAsync()).LoginId : "");
      }
      else
      {
        invFeedsSKUStatus.eBayIcrId = -1;
        //invFeedsSKUStatus.WayfairCustSKU = "";
        invFeedsSKUStatus.eBayFeedsEnable = false;
        //invFeedsSKUStatus.WayfairUPC = "";
        invFeedsSKUStatus.eBayLastModifiedTime = null;
        invFeedsSKUStatus.eBayLastModifiedBy = "";
      }

      // Houzz
      tmpModel = mkIcrs.Where(n => n.MarketId == houzzMkId).FirstOrDefault();
      if (tmpModel != null)
      {
        invFeedsSKUStatus.HouzzIcrId = tmpModel.IcrId;
        invFeedsSKUStatus.HouzzCustSKU = (tmpModel.CustSku != null ? tmpModel.CustSku : "");
        invFeedsSKUStatus.HouzzFeedsEnable = (tmpModel.IsInvFeed != null ? (tmpModel.IsInvFeed == false ? false : true) : false);
        //invFeedsSKUStatus.WayfairUPC = (tmpModel.CustUpc != null ? tmpModel.CustUpc : "");
        invFeedsSKUStatus.HouzzLastModifiedTime = (tmpModel.LastModKoT != null ?
          ((DateTime)tmpModel.LastModKoT).ToString("MM/dd/yyyy h:mm tt") : null);
        invFeedsSKUStatus.HouzzLastModifiedBy = (tmpModel.LastModKoE != null ?
          (await _kc.Employees.Where(e => e.EmployeeId == tmpModel.LastModKoE).FirstOrDefaultAsync()).LoginId : "");
      }
      else
      {
        invFeedsSKUStatus.HouzzIcrId = -1;
        invFeedsSKUStatus.HouzzCustSKU = "";
        invFeedsSKUStatus.HouzzFeedsEnable = false;
        //invFeedsSKUStatus.WayfairUPC = "";
        invFeedsSKUStatus.HouzzLastModifiedTime = null;
        invFeedsSKUStatus.HouzzLastModifiedBy = "";
      }

      // BPM
      tmpModel = mkIcrs.Where(n => n.MarketId == bpmMkId).FirstOrDefault();
      if (tmpModel != null)
      {
        invFeedsSKUStatus.BPMIcrId = tmpModel.IcrId;
        invFeedsSKUStatus.BPMCustSKU = (tmpModel.CustSku != null ? tmpModel.CustSku : "");
        invFeedsSKUStatus.BPMFeedsEnable = (tmpModel.IsInvFeed != null ? (tmpModel.IsInvFeed == false ? false : true) : false);
        //invFeedsSKUStatus.WayfairUPC = (tmpModel.CustUpc != null ? tmpModel.CustUpc : "");
        invFeedsSKUStatus.BPMLastModifiedTime = (tmpModel.LastModKoT != null ?
          ((DateTime)tmpModel.LastModKoT).ToString("MM/dd/yyyy h:mm tt") : null);
        invFeedsSKUStatus.BPMLastModifiedBy = (tmpModel.LastModKoE != null ?
          (await _kc.Employees.Where(e => e.EmployeeId == tmpModel.LastModKoE).FirstOrDefaultAsync()).LoginId : "");
      }
      else
      {
        invFeedsSKUStatus.BPMIcrId = -1;
        invFeedsSKUStatus.BPMCustSKU = "";
        invFeedsSKUStatus.BPMFeedsEnable = false;
        //invFeedsSKUStatus.WayfairUPC = "";
        invFeedsSKUStatus.BPMLastModifiedTime = null;
        invFeedsSKUStatus.BPMLastModifiedBy = "";
      }

      // Mellow
      tmpModel = mkIcrs.Where(n => n.MarketId == mellowMkId).FirstOrDefault();
      if (tmpModel != null)
      {
        invFeedsSKUStatus.MellowIcrId = tmpModel.IcrId;
        invFeedsSKUStatus.MellowCustSKU = (tmpModel.CustSku != null ? tmpModel.CustSku : "");
        invFeedsSKUStatus.MellowFeedsEnable = (tmpModel.IsInvFeed != null ? (tmpModel.IsInvFeed == false ? false : true) : false);
        //invFeedsSKUStatus.WayfairUPC = (tmpModel.CustUpc != null ? tmpModel.CustUpc : "");
        invFeedsSKUStatus.MellowLastModifiedTime = (tmpModel.LastModKoT != null ?
          ((DateTime)tmpModel.LastModKoT).ToString("MM/dd/yyyy h:mm tt") : null);
        invFeedsSKUStatus.MellowLastModifiedBy = (tmpModel.LastModKoE != null ?
          (await _kc.Employees.Where(e => e.EmployeeId == tmpModel.LastModKoE).FirstOrDefaultAsync()).LoginId : "");
      }
      else
      {
        invFeedsSKUStatus.MellowIcrId = -1;
        invFeedsSKUStatus.MellowCustSKU = "";
        invFeedsSKUStatus.MellowFeedsEnable = false;
        //invFeedsSKUStatus.WayfairUPC = "";
        invFeedsSKUStatus.MellowLastModifiedTime = null;
        invFeedsSKUStatus.MellowLastModifiedBy = "";
      }

      return invFeedsSKUStatus;
    }

    // Modified by Brian Yi on 06/17/2022
    public async Task<List<InvFeedsMarketSKUStatusDTO>> GetInvFeedsSKUFeedingStatusList(int custId, bool returnConflictedList)
    {
      //List<InvFeedsMarketSKUStatusDTO> serviceResponse = new List<InvFeedsMarketSKUStatusDTO>();

      //int amazonId = 5;
      List<InvFeedsMarketSKUStatusDTO> serviceResponse = new List<InvFeedsMarketSKUStatusDTO>();
      //List<NsIcr> nsIcrs = new List<NsIcr>();
      List<MkIcr> mkIcrs = new List<MkIcr>();
      List<InvFeedsShopify> invFeedsShopifies = new List<InvFeedsShopify>();
      List<Bom> boms = new List<Bom>();
      List<Employee> employees = await _kc.Employees
        .ToListAsync();

      List<ItemStatus> itemStatuses = await _kc.ItemStatuses
        .ToListAsync();

      BpmItem tmpItem = new BpmItem();
      InvFeedsMarketSKUStatusDTO tmpStatusDto = new InvFeedsMarketSKUStatusDTO();

      int amazonMkId = 1, bpmMkId = 3, wayfairMkId = 4, eBayMkId = 5, houzzMkId = 7, mellowMkId = 10, overstockMkId = 12, walmartMkId = 16, homeDepotMkId = 340, targetMkId = 341;

      const int amazonID = 5, BPMID = 9, eBayID = 12, HouzzID = 14, MellowID = 18, OverstockID = 21, WalmartID = 26, WayfairID = 29, HomeDepotID = 40, TargetID = 51, SetsID = 10000;
      int marketId = 0;

      switch (custId)
      {
        case amazonID: // Amazon
          marketId = amazonMkId;
          break;
        case BPMID: // BPM Web
          marketId = bpmMkId;
          break;
        case eBayID: // eBay
          marketId = eBayMkId;
          break;
        case HouzzID: // Houzz
          marketId = houzzMkId;
          break;
        case MellowID: // Mellow
          marketId = mellowMkId;
          break;
        case OverstockID: // Overstock
          marketId = overstockMkId;
          break;
        case WalmartID: // Walmart
          marketId = walmartMkId;
          break;
        case WayfairID: // Wayfair
          marketId = wayfairMkId;
          break;
        case HomeDepotID: // Home Depot
          marketId = homeDepotMkId;
          break;
        case TargetID: // Target
          marketId = targetMkId;
          break;
        case SetsID: // For Sets
          marketId = custId;
          break;
        default:
          return serviceResponse;

      }


      if (returnConflictedList == true) // Get Conflicted SKUs // Need to modify
      {
        List<BpmItem> bpmItems = await _kc.BpmItems
         .Where(bi => bi.ItemStatusId <= itemStatus && bi.ItemTypeId <= itemType && bi.IsFeedable == true)
         .Include(bi => bi.NsIcrs)
         .Include(bi => bi.ItemStatus)
         .ToListAsync();

        InvFeedsSkuconflictReport invFeedsSkuconflictReport = await _kc.InvFeedsSkuconflictReports
          .Where(i => i.CustomerId == custId)
          .OrderBy(i => i.InvFeedsSkuconflictReportId)
          .Include(i => i.InvFeedsSkucnflctRepItems)
          .LastOrDefaultAsync();

        List<InvFeedsConflictType> invFeedsConflictTypes = await _kc.InvFeedsConflictTypes
          .ToListAsync();

        if (invFeedsSkuconflictReport == null) return serviceResponse;
        //Check here  05/06/2022
        foreach (InvFeedsSkucnflctRepItem tmpDto in invFeedsSkuconflictReport.InvFeedsSkucnflctRepItems)
        {
          tmpItem = bpmItems.Where(x => x.ItemNoId == tmpDto.ItemNoId).FirstOrDefault();

          if (tmpItem != null)
          {
            tmpStatusDto = new InvFeedsMarketSKUStatusDTO()
            {
              ItemName = tmpItem.ItemName,
              ItemStatus = tmpItem.ItemStatus.StatusItem,
              ConflictType = tmpDto.InvFeedsConflictType.Description,
              Description = tmpItem.Description,
              IsResolved = (tmpDto.IsResolved != null ? (bool)tmpDto.IsResolved : false),
              CustSKU = tmpDto.CustSku,
              ASIN = (tmpDto.Asin != null ? tmpDto.Asin : "None"),
              LastModifiedBy = (invFeedsSkuconflictReport.ImportedBy != null ?
                (employees.Where(e => e.EmployeeId == invFeedsSkuconflictReport.ImportedBy).FirstOrDefault()).LoginId : ""),
              LastModifiedTime = (invFeedsSkuconflictReport.ImportedDate != null ?
                ((DateTime)invFeedsSkuconflictReport.ImportedDate).ToString("MM/dd/yyyy h:mm tt") : null)
            };
          }
          else
          {
            tmpStatusDto = new InvFeedsMarketSKUStatusDTO()
            {
              ItemName = "No Matched Item",
              ItemStatus = "No Matched Item",
              ConflictType = tmpDto.InvFeedsConflictType.Description,
              Description = "No Matched Item",
              IsResolved = (tmpDto.IsResolved != null ? (bool)tmpDto.IsResolved : false),
              CustSKU = tmpDto.CustSku,
              ASIN = (tmpDto.Asin != null ? tmpDto.Asin : "None"),
              LastModifiedBy = (invFeedsSkuconflictReport.ImportedBy != null ?
                (employees.Where(e => e.EmployeeId == invFeedsSkuconflictReport.ImportedBy).FirstOrDefault()).LoginId : ""),
              LastModifiedTime = (invFeedsSkuconflictReport.ImportedDate != null ?
                ((DateTime)invFeedsSkuconflictReport.ImportedDate).ToString("MM/dd/yyyy h:mm tt") : null)
            };
          }
          serviceResponse.Add(tmpStatusDto);
        }
        return serviceResponse;

      }
      else // Import
      {

        if (custId == 9 || custId == 18)
        {
          invFeedsShopifies = await _kc.InvFeedsShopifies
            .Where(s => s.CustomerId == custId)
            .Where(s => s.ItemNoId != null)
            .Include(s => s.ItemNo)
            .ToListAsync();

          if (invFeedsShopifies == null) return serviceResponse;

          serviceResponse = invFeedsShopifies.Select(i =>
           new InvFeedsMarketSKUStatusDTO()
           {
             ItemNoId = (i.ItemNo != null ? (int)i.ItemNoId : -1),
             ItemName = (i.ItemNo != null ? i.ItemNo.ItemName : ""),
             ItemStatus = (i.ItemNo.ItemStatus.StatusItem),
             Description = i.ItemNo.Description,
             icrId = 0,
             FeedsEnable = (bool)i.IsFeedable,
             CustSKU = i.Sku,
             CustUPC = "",
             ASIN = "",
             LastModifiedBy = (i.LastModifiedBy != null ?
          (_kc.Employees.Where(e => e.EmployeeId == i.LastModifiedBy).FirstOrDefault()).LoginId : ""),
             LastModifiedTime = (i.LastModifiedDate != null ?
          ((DateTime)i.LastModifiedDate).ToString("MM/dd/yyyy h:mm tt") : null)

           }
          ).ToList();

        }
        else if (custId == 10000)
        {

          List<BpmItem> bpmItems = await _kc.BpmItems
           .Where(b => b.ItemTypeId == 2)
           .ToListAsync();

          /*
            boms = await _kc.Boms
              .Include(b => b.ParentItem)
              //.Include(b => b.ChildItem)
              .ToListAsync();
          */
          if (bpmItems == null) return serviceResponse;
          try
          {
            serviceResponse = bpmItems.Select(i =>
          new InvFeedsMarketSKUStatusDTO()
          {
            ItemNoId = i.ItemNoId,
            ItemName = (i.ItemName != null ? i.ItemName : ""),
            ItemStatus = (i.ItemStatus.StatusItem != null ? i.ItemStatus.StatusItem : ""),
            Description = (i.Description != null ? i.Description : ""),
            icrId = 0,
            FeedsEnable = (i.IsFeedable != null ? (bool)i.IsFeedable : false),
            CustSKU = "",
            CustUPC = "",
            ASIN = "",
            LastModifiedBy = (i.LastModKoE != null ?
         (_kc.Employees.Where(e => e.EmployeeId == i.LastModKoE).FirstOrDefault()).LoginId : ""),
            LastModifiedTime = (i.LastModTime != null ?
         ((DateTime)i.LastModTime).ToString("MM/dd/yyyy h:mm tt") : null)

          }
          ).ToList();
          }
          catch (Exception ex)
          {
            Console.WriteLine(ex);
            //JsonResult jsonReturn = Json(ex);
            //return jsonReturn;
          }
        }
        else
        {
          if (custId == 5)
          {
            //marketId
            /*
            nsIcrs = await _kc.NsIcrs
            .Where(n => n.CustAsin != null && n.CustomerId == custId)
            .Include(n => n.ItemNo)
            .ToListAsync();
            */

            mkIcrs = await _kc.MkIcrs
            .Where(n => n.CustAsin != null && n.MarketId == marketId)
            .Include(n => n.ItemNo)
            .ToListAsync();
          }
          else
          {
            /*
            nsIcrs = await _kc.NsIcrs
            .Where(n => n.CustomerId == custId)
            .Include(n => n.ItemNo)
            .ToListAsync();
            */
            mkIcrs = await _kc.MkIcrs
            .Where(n => n.MarketId == marketId)
            .Include(n => n.ItemNo)
            .ToListAsync();
          }

          if (mkIcrs == null) return serviceResponse;

          serviceResponse = mkIcrs.Select(i =>
           new InvFeedsMarketSKUStatusDTO()
           {
             ItemNoId = i.ItemNoId,
             ItemName = i.ItemNo.ItemName,
             ItemStatus = (i.ItemNo.ItemStatus.StatusItem),
             Description = i.ItemNo.Description,
             icrId = i.IcrId,
             FeedsEnable = (i.IsInvFeed != null ? (i.IsInvFeed == true ? true : false) : false),
             CustSKU = i.CustSku,
             CustUPC = (i.CustUpc != null ? i.CustUpc : ""),
             ASIN = (i.CustAsin != null ? i.CustAsin : ""),
             LastModifiedBy = (i.LastModKoE != null ?
             (employees.Where(e => e.EmployeeId == i.LastModKoE).FirstOrDefault()).LoginId : ""),
             LastModifiedTime = (i.LastModKoT != null ?
             ((DateTime)i.LastModKoT).ToString("MM/dd/yyyy h:mm tt") : null),
             WayfairCGStockRule = (i.WayfairCgstockRule.HasValue ? (bool)(i.WayfairCgstockRule) : false)

           }
          ).ToList();
        }
      }

      /*
      List<NsIcr> nsIcrs = await _kc.NsIcrs
        .Where(n => n.CustAsin != null && n.CustomerId == amazonId)
        .Include(n => n.ItemNo)
        .ToListAsync();
      */


      return serviceResponse;
    }

    // Updating each SKU for whether (inventory) feedable or not
    // By Brian Yi on 07/30/2021; Modified by Brian Yi on 08/16/2021; 06/17/2022
    public async Task<bool> UpdateCustomerSKUFeedingStatusList(int empId, InvFeedsStatusUpdatingListDTO invFeedsStatusUpdatingListDTO)
    {
      //switch ()

      /*
      List<NsIcr> nsIcrs = await _kc.NsIcrs
       .Where(n => n.CustAsin != null && n.CustomerId == int.Parse(invFeedsStatusUpdatingListDTO.customerId))
       .Include(n => n.ItemNo)
       .ToListAsync();
      */
      int amazonMkId = 1, bpmMkId = 3, wayfairMkId = 4, eBayMkId = 5, houzzMkId = 7, mellowMkId = 10, overstockMkId = 12, walmartMkId = 16, homeDepotMkId = 340, targetMkId = 341;

      const int amazonID = 5, BPMID = 9, eBayID = 12, HouzzID = 14, MellowID = 18, OverstockID = 21, WalmartID = 26, WayfairID = 29, HomeDepotID = 40, TargetID = 51;
      int marketId = 0;

      switch (int.Parse(invFeedsStatusUpdatingListDTO.customerId))
      {
        case amazonID: // Amazon
          marketId = amazonMkId;
          break;
        case BPMID: // BPM Web
          marketId = bpmMkId;
          break;
        case eBayID: // eBay
          marketId = eBayMkId;
          break;
        case HouzzID: // Houzz
          marketId = houzzMkId;
          break;
        case MellowID: // Mellow
          marketId = mellowMkId;
          break;
        case OverstockID: // Overstock
          marketId = overstockMkId;
          break;
        case WalmartID: // Walmart
          marketId = walmartMkId;
          break;
        case WayfairID: // Wayfair
          marketId = wayfairMkId;
          break;
        case HomeDepotID: // Home Depot
          marketId = homeDepotMkId;
          break;
        case TargetID: // Target
          marketId = targetMkId;
          break;
          //default:
          //return false;

      }

      if (int.Parse(invFeedsStatusUpdatingListDTO.customerId) == 10000)
      {
        // 10/31/2022
        List<BpmItem> bomSets = await _kc.BpmItems
          .Where(b => b.ItemTypeId == 2)
          .ToListAsync();

        BpmItem tmpBpmItem = new BpmItem();
        foreach (InvFeedsMarketSKUStatusDTO tmpDTO in invFeedsStatusUpdatingListDTO.skuList)
        {
          tmpBpmItem = bomSets.Where(b => b.ItemNoId == tmpDTO.ItemNoId).FirstOrDefault();
          if (tmpBpmItem != null)
          {
            if (tmpDTO.FeedsEnable != tmpBpmItem.IsFeedable)
            {
              tmpBpmItem.IsFeedable = tmpDTO.FeedsEnable;
              tmpBpmItem.LastModKoE = empId;
              tmpBpmItem.LastModKoT = DateTime.Now;
            }
          }
        }
        await _kc.SaveChangesAsync();
        return true;
      }


      List<MkIcr> mkIcrs = await _kc.MkIcrs
       //.Where(n => n.CustAsin != null && n.MarketId == marketId)
       .Where(n => n.MarketId == marketId)
       .Include(n => n.ItemNo)
       .ToListAsync();

      //NsIcr tmpModel = new NsIcr();
      MkIcr tmpModel = new MkIcr();
      foreach (InvFeedsMarketSKUStatusDTO tmpDTO in invFeedsStatusUpdatingListDTO.skuList)
      {
        tmpModel = mkIcrs.Where(n => n.IcrId == tmpDTO.icrId).FirstOrDefault();
        tmpModel.LastModKoE = (tmpModel.IsInvFeed != tmpDTO.FeedsEnable ? empId : tmpModel.LastModKoE);
        tmpModel.LastModKoT = (tmpModel.IsInvFeed != tmpDTO.FeedsEnable ? DateTime.Now : tmpModel.LastModKoT);
        tmpModel.IsInvFeed = tmpDTO.FeedsEnable;
        if (marketId == homeDepotMkId)
        {
          tmpModel.CustSku = tmpDTO.CustSKU;
        }
        else if (marketId == wayfairMkId)
        {
          tmpModel.WayfairCgstockRule = tmpDTO.WayfairCGStockRule;
        }
      }
      await _kc.SaveChangesAsync();
      return true;
    }

    // Getting Inventory Feeds General Setting
    // By Brian Yi on 7/27/2021
    public async Task<InvFeedsGeneralSettingDTO> GetInvFeedsGeneralSetting()
    {
      int amazonID = 5, BPMID = 9, eBayID = 12, HouzzID = 14, MellowID = 18, OverstockID = 21, WalmartID = 26, WayfairID = 29;

      InventoryConfig inventoryConfig = await _kc.InventoryConfigs
        .FirstOrDefaultAsync();

      List<InvFeedsRule> marketList = await _kc.InvFeedsRules
        .Include(i => i.Customer)
        .ToListAsync();

      InvFeedsGeneralSettingDTO serviceResponse;

      serviceResponse = new InvFeedsGeneralSettingDTO()
      {
        AmazonRatioOnLowData = (int)(marketList.Where(m => m.CustomerId == amazonID).FirstOrDefault()).RatioOnLowData,
        eBayRatioOnLowData = (int)(marketList.Where(m => m.CustomerId == eBayID).FirstOrDefault()).RatioOnLowData,
        OverstockRatioOnLowData = (int)(marketList.Where(m => m.CustomerId == OverstockID).FirstOrDefault()).RatioOnLowData,
        WalmartRatioOnLowData = (int)(marketList.Where(m => m.CustomerId == WalmartID).FirstOrDefault()).RatioOnLowData,
        WayfairRatioOnLowData = (int)(marketList.Where(m => m.CustomerId == WayfairID).FirstOrDefault()).RatioOnLowData,
        BpmRatioOnLowData = (int)(marketList.Where(m => m.CustomerId == BPMID).FirstOrDefault()).RatioOnLowData,
        MellowRatioOnLowData = (int)(marketList.Where(m => m.CustomerId == MellowID).FirstOrDefault()).RatioOnLowData,
        HouzzRatioOnLowData = (int)(marketList.Where(m => m.CustomerId == HouzzID).FirstOrDefault()).RatioOnLowData,
        ZeroOutBufferMainSL = (int)inventoryConfig.ZeroOutBufferMainSl,
        ZeroOutBufferBANC = (int)inventoryConfig.ZeroOutBufferBanc,
        LastModifiedDate = (inventoryConfig.LastModifiedDate != null ?
          ((DateTime)inventoryConfig.LastModifiedDate).ToString("MM/dd/yyyy h:mm tt") : null),
        LastModifiedBy = (inventoryConfig.LastModifiedBy != null ?
          (_kc.Employees.Where(e => e.EmployeeId == inventoryConfig.LastModifiedBy).FirstOrDefault()).LoginId : ""),
        SalesHistoryLowDataSwitchQty = (int)inventoryConfig.SalesHistoryLowDataSwitchQty,
        SetBOMRatio = (int)inventoryConfig.SetBomratio,
        AmazonLowStockQty = (int)inventoryConfig.AmazonLowStockQty,
        IsAmazonLowStockOn = (bool)inventoryConfig.IsAmazonLowStockOn,
        AbcRatioA = inventoryConfig.AbcRatioA.Value,
        AbcRatioB = inventoryConfig.AbcRatioB.Value,
        AbcRatioC = inventoryConfig.AbcRatioC.Value,
        AbcRatioAnoB = inventoryConfig.AbcRatioAnoB.Value,
        AbcRatioAnoC = inventoryConfig.AbcRatioAnoC.Value,
        AbcRatioBnoC = inventoryConfig.AbcRatioBnoC.Value,
        AbcOthersOverstock = inventoryConfig.AbcOthersOverstock.Value,
        AbcOtherseBay = inventoryConfig.AbcOtherseBay.Value,
        AbcOthersBPMWeb = inventoryConfig.AbcOthersBpmweb.Value,
        AbcOthersMellowWeb = inventoryConfig.AbcOthersMellowWeb.Value,
        AbcOthersHouzz = inventoryConfig.AbcOthersHouzz.Value,
        AbcOthersHomeDepot = inventoryConfig.AbcOthersHomeDepot.Value,
        WmtminQtyAllowance = inventoryConfig.WmtminQtyAllowance.Value,
        WalmartTopSellers = inventoryConfig.WalmartTopSellers.Value,
        WalmartTopSellersDistributionRatio = inventoryConfig.WalmartTopSellersDistributionRatio.Value,
        IsActivatedWmttopSellers = inventoryConfig.IsActivatedWmttopSellers.Value,
        TotalOfRatioOnLowData = 100,
        IsActivatedWFSvsWHs = inventoryConfig.IsActivatedWfsvsWhs.Value,
        WFSvsWHsBufferQty = (int)inventoryConfig.WfsvsWhsBufferQty
      };

      return serviceResponse;
    }

    // Updating SKU Feeding Status
    // By Brian Yi on 07/30/21
    // Need to finish; Revisit!!!!
    public async Task<bool> UpdateSKUFeedingStatus(InvFeedsSKUStatusDTO invFeedsSKUStatusDTO)
    {
      // 1. Update
      // 2. Create
      // Amazon
      // If Feeds enable, then check there is a record for that market(customer) SKU
      // If Feeds dis
      if (invFeedsSKUStatusDTO.AmazonFeedsEnable == true)
      {

      }


      return true;
    }

    // Get a list of SKUs for remark grouping
    // By Brian Yi on 07/30/2021
    public async Task<List<InvFeedsRemarkSKUGroupDTO>> GetRemarkGroupItems(int remarkCategoryId)
    {
      List<InvFeedsRemarkSKUGroupDTO> result = null;

      List<BpmItem> bpmItems = await _kc.BpmItems
        .Where(b => b.ItemStatusId <= itemStatus && b.ItemTypeId <= itemType && b.IsFeedable == true)
        .Include(b => b.NsIcrs)
        .ToListAsync();

      /*
      List<NsIcr> nsIcrs = await _kc.NsIcrs
        .Include(n => n.ItemNo)
        .ToListAsync();
      */
      List<MkIcr> mkIcrs = await _kc.MkIcrs
        .Include(n => n.ItemNo)
        .ToListAsync();

      List<InvFeedsRemark> invFeedsRemarks = await _kc.InvFeedsRemarks
        .Where(i => i.IsActivated == true)
        .Include(i => i.InvFeedsRmrkCtgry)
        .ToListAsync();
      List<InvFeedsRemark> tmpList = null;

      if (remarkCategoryId < 0)
      {
        result = bpmItems.Select(i =>
          new InvFeedsRemarkSKUGroupDTO()
          {
            IsInGroup = false,
            ItemNoId = i.ItemNoId,
            BpmSKU = i.ItemName,
            Description = i.Description
          }
        ).ToList();
      }
      else if (remarkCategoryId == 0)
      {
        result = bpmItems.Select(i =>
          new InvFeedsRemarkSKUGroupDTO()
          {
            ItemNoId = i.ItemNoId,
            BpmSKU = i.ItemName,
            Description = i.Description
          }
        ).ToList();
        foreach (InvFeedsRemarkSKUGroupDTO tmpDTO in result)
        {
          tmpList = invFeedsRemarks.Where(ifr => ifr.ItemNoId == tmpDTO.ItemNoId).ToList();
          if (tmpList != null)
          {
            foreach (InvFeedsRemark tmpRemark in tmpList)
            {
              if (tmpDTO.remarkGroup == null)
              { tmpDTO.remarkGroup = tmpRemark.InvFeedsRmrkCtgry.CategoryName; tmpDTO.remarkGroupList = tmpRemark.InvFeedsRmrkCtgryId.ToString(); }
              else
              {
                tmpDTO.remarkGroup = tmpDTO.remarkGroup + " " + tmpRemark.InvFeedsRmrkCtgry.CategoryName;
                tmpDTO.remarkGroupList = tmpDTO.remarkGroupList + " " + tmpRemark.InvFeedsRmrkCtgryId.ToString();
              }

            }
          }
        }

        // End of 'else if'
      }
      else if (remarkCategoryId > 0)
      {

        result = bpmItems.Select(i =>
          new InvFeedsRemarkSKUGroupDTO()
          {
            IsInGroup = (bool)(invFeedsRemarks
            .Where(ifr => ifr.ItemNoId == i.ItemNoId && ifr.InvFeedsRmrkCtgryId == remarkCategoryId)
            .FirstOrDefault().IsActivated),
            ItemNoId = i.ItemNoId,
            BpmSKU = i.ItemName,
            Description = i.Description
          }
        ).ToList();
      }

      return result;
    }

    public async Task<bool> UpdateInvFeedsRemarkGroupList(int empId, InvFeedsRemarkSKUGroupListDTO updatedList)
    {
      DateTime todayDate = DateTime.Now;

      //int amazonID = 5, BPMID = 9, eBayID = 12, HouzzID = 14, MellowID = 18, OverstockID = 21, WalmartID = 26, WayfairID = 29;

      List<BpmItem> bpmItems = await _kc.BpmItems
        .Where(b => b.ItemStatusId <= itemStatus && b.ItemTypeId <= itemType && b.IsFeedable == true)
        .Include(b => b.NsIcrs)
        .ToListAsync();

      List<InvFeedsRmrkCtgry> invFeedsRmrkCtgries = await _kc.InvFeedsRmrkCtgries
        .Where(i => i.IsActivated == true)
        .ToListAsync();
      List<InvFeedsRemark> invFeedsRemarks;
      List<InvFeedsRuleSkumkt> invFeedsRuleSkumkts = new List<InvFeedsRuleSkumkt>();
      long tmpLong;
      InvFeedsRmrkCtgry invFeedsRmrkCtgry = new InvFeedsRmrkCtgry();
      InvFeedsRuleSku invFeedsRuleSku = new InvFeedsRuleSku();
      InvFeedsRuleSkumkt invFeedsRuleSkumkt = new InvFeedsRuleSkumkt();
      InvFeedsRemark invFeedsRemark = new InvFeedsRemark();
      List<InvFeedsRemark> newInvFeedsRemarks = new List<InvFeedsRemark>();
      string tmpStr = "";
      bool resultUpdate = false;
      foreach (InvFeedsRemarkSKUGroupDTO tmpDTO in updatedList.skuList)
      {
        if (tmpDTO.IsEdited == true)
        {
          tmpStr = tmpDTO.remarkGroupList.Replace(" ", "");

          if (tmpDTO.remarkGroupList != null && tmpStr != "")
          {
            List<long> cateIds = tmpDTO.remarkGroupList.Trim().Split(' ').Select(Int64.Parse).ToList();
            invFeedsRemarks = await _kc.InvFeedsRemarks
              .Where(i => i.ItemNoId == tmpDTO.ItemNoId)
              .ToListAsync();

            if (invFeedsRemarks.Count > 0)
            {
              // From DB first
              foreach (InvFeedsRemark tmpRemark in invFeedsRemarks)
              {
                tmpLong = (long)tmpRemark.InvFeedsRmrkCtgryId;
                if (cateIds.Contains(tmpLong))
                {
                  if (tmpRemark.IsActivated == false)
                  {
                    resultUpdate = true;
                  }
                  else // Removed by the user
                  {
                    resultUpdate = false;
                  }
                  tmpRemark.IsActivated = resultUpdate;
                  tmpRemark.LastModifiedBy = empId;
                  tmpRemark.LastModifiedDate = todayDate;
                  await _kc.SaveChangesAsync();
                  invFeedsRmrkCtgry = tmpRemark.InvFeedsRmrkCtgry;
                  invFeedsRuleSku = await _kc.InvFeedsRuleSkus
                    .Where(r => r.ItemNoId == tmpRemark.ItemNoId)
                    .Include(r => r.InvFeedsRuleSkumkts).FirstOrDefaultAsync();

                  InvFeedsRuleSkumkt(empId, todayDate, resultUpdate,
                    invFeedsRmrkCtgry, invFeedsRuleSku, invFeedsRuleSkumkt, invFeedsRuleSkumkts);
                }


              }// From DB
            }// Remark

            // From a user
            // InvFeedsRuleSKU(itemNoId) -> InvFeedsRuleSKUMkt(for each market)
            foreach (int idx in cateIds)
            {
              invFeedsRemark = await _kc.InvFeedsRemarks
                .Where(i => i.InvFeedsRmrkCtgryId == (long)idx && i.ItemNoId == tmpDTO.ItemNoId)
                .FirstOrDefaultAsync();

              if (invFeedsRemark == null)
              {
                invFeedsRemark = new InvFeedsRemark()
                {
                  ItemNoId = tmpDTO.ItemNoId,
                  InvFeedsRmrkCtgryId = (long)idx,
                  LastModifiedBy = empId,
                  LastModifiedDate = todayDate,
                  IsActivated = true
                };
                newInvFeedsRemarks.Add(invFeedsRemark);
              }
              else
              {
                invFeedsRemark.LastModifiedBy = empId;
                invFeedsRemark.LastModifiedDate = todayDate;
                invFeedsRemark.IsActivated = true;
                _kc.SaveChanges();
              }


              invFeedsRmrkCtgry = await _kc.InvFeedsRmrkCtgries
                .Where(i => i.InvFeedsRmrkCtgryId == (long)idx)
                .FirstOrDefaultAsync();

              invFeedsRuleSku = await _kc.InvFeedsRuleSkus
                .Where(i => i.ItemNoId == tmpDTO.ItemNoId)
                .Include(i => i.InvFeedsRuleSkumkts)
                .FirstOrDefaultAsync();

              if (invFeedsRuleSku == null)
              {
                invFeedsRuleSku = new InvFeedsRuleSku()
                {
                  ItemNoId = tmpDTO.ItemNoId,
                  LastModifiedBy = empId,
                  LastModifiedDate = todayDate
                };
                _kc.InvFeedsRuleSkus.Add(invFeedsRuleSku);
                await _kc.SaveChangesAsync();

                invFeedsRuleSku = await _kc.InvFeedsRuleSkus
                .Where(i => i.ItemNoId == tmpDTO.ItemNoId)
                .Include(i => i.InvFeedsRuleSkumkts)
                .FirstOrDefaultAsync();
              }
              resultUpdate = true;
              InvFeedsRuleSkumkt(empId, todayDate, resultUpdate,
                invFeedsRmrkCtgry, invFeedsRuleSku, invFeedsRuleSkumkt, invFeedsRuleSkumkts);
            }
          }// Category IDs 
          else // No Grouping but modified
          {
            invFeedsRemarks = await _kc.InvFeedsRemarks
              .Where(i => i.ItemNoId == tmpDTO.ItemNoId)
              .ToListAsync();

            if (invFeedsRemarks.Count > 0)
            {
              // From DB first
              foreach (InvFeedsRemark tmpRemark in invFeedsRemarks)
              {
                tmpLong = (long)tmpRemark.InvFeedsRmrkCtgryId;
                if (tmpRemark.IsActivated == true) //the skip
                {
                  resultUpdate = false;
                  tmpRemark.IsActivated = resultUpdate;
                  tmpRemark.LastModifiedBy = empId;
                  tmpRemark.LastModifiedDate = todayDate;
                  await _kc.SaveChangesAsync();
                  invFeedsRmrkCtgry = tmpRemark.InvFeedsRmrkCtgry;
                  invFeedsRuleSku = await _kc.InvFeedsRuleSkus
                    .Where(r => r.ItemNoId == tmpRemark.ItemNoId)
                    .Include(r => r.InvFeedsRuleSkumkts)
                    .FirstOrDefaultAsync();

                  InvFeedsRuleSkumkt(empId, todayDate, resultUpdate,
                    invFeedsRmrkCtgry, invFeedsRuleSku, invFeedsRuleSkumkt, invFeedsRuleSkumkts);
                }

              }// From DB
            }// Remark
          }
        }
      }// For each
      if (newInvFeedsRemarks.Count > 0) _kc.BulkInsert(newInvFeedsRemarks);
      if (invFeedsRuleSkumkts.Count > 0) _kc.BulkInsert(invFeedsRuleSkumkts);

      return true;
    }

    // Update Inventory Feeds SKU for market details
    // By Brian Yi on 07/30/2021
    // Modified by Brian Yi on 09/27/2022 for Remark Grouping
    public void InvFeedsRuleSkumkt(int empId, DateTime todayDate, bool resultUpdate,
      InvFeedsRmrkCtgry invFeedsRmrkCtgry, InvFeedsRuleSku invFeedsRuleSku, InvFeedsRuleSkumkt invFeedsRuleSkumkt,
      List<InvFeedsRuleSkumkt> invFeedsRuleSkumkts)
    {
      int amazonID = 5, BPMID = 9, eBayID = 12, HouzzID = 14, MellowID = 18, OverstockID = 21, WalmartID = 26, WayfairID = 29, HomeDepotID = 40, TargetID = 51;

      if (invFeedsRmrkCtgry.DoNotFeedFromMainsl == true)
      { invFeedsRuleSku.DoNotFeedFromMainsl = true; }
      else { invFeedsRuleSku.DoNotFeedFromMainsl = false; }

      if (invFeedsRmrkCtgry.DoNotFeedFromSwcaft == true)
      { invFeedsRuleSku.DoNotFeedFromSwcaft = true; }
      else { invFeedsRuleSku.DoNotFeedFromSwcaft = false; }

      if (invFeedsRmrkCtgry.DoNotFeedFromBanc == true)
      { invFeedsRuleSku.DoNotFeedFromBanc = true; }
      else { invFeedsRuleSku.DoNotFeedFromBanc = false; }

      if (invFeedsRmrkCtgry.DoNotFeedFromBasc == true)
      { invFeedsRuleSku.DoNotFeedFromBasc = true; }
      else { invFeedsRuleSku.DoNotFeedFromBasc = false; }


      if (invFeedsRmrkCtgry.DoNotFeedToAmazon == true) // Amazon
      {
        invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == amazonID).FirstOrDefault();
        if (invFeedsRuleSkumkt == null)
        {
          invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
          {
            InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
            CustomerId = amazonID,
            DoNotFeedToHere = resultUpdate
          };
          invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
        }
        else
        {
          invFeedsRuleSkumkt.DoNotFeedToHere = resultUpdate;
          _kc.SaveChanges();
        }
      }
      if (invFeedsRmrkCtgry.DoNotFeedToOverstock == true) // Overstock
      {
        invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == OverstockID).FirstOrDefault();
        if (invFeedsRuleSkumkt == null)
        {
          invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
          {
            InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
            CustomerId = OverstockID,
            DoNotFeedToHere = resultUpdate
          };
          invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
        }
        else
        {
          invFeedsRuleSkumkt.DoNotFeedToHere = resultUpdate;
          _kc.SaveChanges();
        }
      }
      if (invFeedsRmrkCtgry.DoNotFeedToWalmart == true) // Walmart
      {
        invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == WalmartID).FirstOrDefault();
        if (invFeedsRuleSkumkt == null)
        {
          invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
          {
            InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
            CustomerId = WalmartID,
            DoNotFeedToHere = resultUpdate
          };
          invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
        }
        else
        {
          invFeedsRuleSkumkt.DoNotFeedToHere = resultUpdate;
          _kc.SaveChanges();
        }
      }
      if (invFeedsRmrkCtgry.DoNotFeedToWayfair == true) // Wayfair
      {
        invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == WayfairID).FirstOrDefault();
        if (invFeedsRuleSkumkt == null)
        {
          invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
          {
            InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
            CustomerId = WayfairID,
            DoNotFeedToHere = resultUpdate
          };
          invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
        }
        else
        {
          invFeedsRuleSkumkt.DoNotFeedToHere = resultUpdate;
          _kc.SaveChanges();
        }
      }
      if (invFeedsRmrkCtgry.DoNotFeedToeBay == true) // eBay
      {
        invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == eBayID).FirstOrDefault();
        if (invFeedsRuleSkumkt == null)
        {
          invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
          {
            InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
            CustomerId = eBayID,
            DoNotFeedToHere = resultUpdate
          };
          invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
        }
        else
        {
          invFeedsRuleSkumkt.DoNotFeedToHere = resultUpdate;
          _kc.SaveChanges();
        }
      }
      if (invFeedsRmrkCtgry.DoNotFeedToHouzz == true)
      {
        invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == HouzzID).FirstOrDefault();
        if (invFeedsRuleSkumkt == null)
        {
          invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
          {
            InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
            CustomerId = HouzzID,
            DoNotFeedToHere = resultUpdate
          };
          invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
        }
        else
        {
          invFeedsRuleSkumkt.DoNotFeedToHere = resultUpdate;
          _kc.SaveChanges();
        }
      }
      if (invFeedsRmrkCtgry.DoNotFeedToBpm == true) // BPM Web
      {
        invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == BPMID).FirstOrDefault();
        if (invFeedsRuleSkumkt == null)
        {
          invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
          {
            InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
            CustomerId = BPMID,
            DoNotFeedToHere = resultUpdate
          };
          invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
        }
        else
        {
          invFeedsRuleSkumkt.DoNotFeedToHere = resultUpdate;
          _kc.SaveChanges();
        }
      }
      if (invFeedsRmrkCtgry.DoNotFeedToMellow == true) // Mellow Web
      {
        invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == MellowID).FirstOrDefault();
        if (invFeedsRuleSkumkt == null)
        {
          invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
          {
            InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
            CustomerId = MellowID,
            DoNotFeedToHere = resultUpdate
          };
          invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
        }
        else
        {
          invFeedsRuleSkumkt.DoNotFeedToHere = resultUpdate;
          _kc.SaveChanges();
        }
      }

      if (invFeedsRmrkCtgry.DoNotFeedToHomeDepot == true) // HomeDepot
      {
        invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == HomeDepotID).FirstOrDefault();
        if (invFeedsRuleSkumkt == null)
        {
          invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
          {
            InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
            CustomerId = HomeDepotID,
            DoNotFeedToHere = resultUpdate
          };
          invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
        }
        else
        {
          invFeedsRuleSkumkt.DoNotFeedToHere = resultUpdate;
          _kc.SaveChanges();
        }
      }


      if (invFeedsRmrkCtgry.DoNotFeedToTarget == true) // Target
      {
        invFeedsRuleSkumkt = invFeedsRuleSku.InvFeedsRuleSkumkts.Where(i => i.CustomerId == TargetID).FirstOrDefault();
        if (invFeedsRuleSkumkt == null)
        {
          invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
          {
            InvFeedsRuleSkuid = invFeedsRuleSku.InvFeedsRuleSkuid,
            CustomerId = TargetID,
            DoNotFeedToHere = resultUpdate
          };
          invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
        }
        else
        {
          invFeedsRuleSkumkt.DoNotFeedToHere = resultUpdate;
          _kc.SaveChanges();
        }
      }


      // End of 'Do Not Feed To...'

      invFeedsRuleSku.LastModifiedBy = empId;
      invFeedsRuleSku.LastModifiedDate = todayDate;
      _kc.SaveChanges();
    }

    // Updating Inventory Feeds Configuration
    // By Brian Yi on 08/08/2021
    public async Task<bool> UpdateInvFeedsSetting(int empId, InvFeedsGeneralSettingDTO invFeedsGeneralSettingDTO)
    {
      DateTime todayDate = DateTime.Now;

      const int AmazonID = 5, BPMID = 9, eBayID = 12, HouzzID = 14, MellowID = 18, OverstockID = 21, WalmartID = 26, WayfairID = 29;

      InventoryConfig inventoryConfig = await _kc.InventoryConfigs
        .FirstOrDefaultAsync();

      List<InvFeedsRule> marketList = await _kc.InvFeedsRules
        .Include(i => i.Customer)
        .ToListAsync();

      // 1. Inventory Config Update
      inventoryConfig.SetBomratio = invFeedsGeneralSettingDTO.SetBOMRatio;
      inventoryConfig.ZeroOutBufferMainSl = invFeedsGeneralSettingDTO.ZeroOutBufferMainSL;
      inventoryConfig.ZeroOutBufferBanc = invFeedsGeneralSettingDTO.ZeroOutBufferBANC;
      inventoryConfig.LastModifiedBy = empId;
      inventoryConfig.LastModifiedDate = todayDate;
      inventoryConfig.SalesHistoryLowDataSwitchQty = invFeedsGeneralSettingDTO.SalesHistoryLowDataSwitchQty;
      inventoryConfig.AmazonLowStockQty = invFeedsGeneralSettingDTO.AmazonLowStockQty;
      inventoryConfig.IsAmazonLowStockOn = invFeedsGeneralSettingDTO.IsAmazonLowStockOn;
      inventoryConfig.AbcRatioA = invFeedsGeneralSettingDTO.AbcRatioA;
      inventoryConfig.AbcRatioB = invFeedsGeneralSettingDTO.AbcRatioB;
      inventoryConfig.AbcRatioC = invFeedsGeneralSettingDTO.AbcRatioC;
      inventoryConfig.AbcRatioAnoB = invFeedsGeneralSettingDTO.AbcRatioAnoB;
      inventoryConfig.AbcRatioAnoC = invFeedsGeneralSettingDTO.AbcRatioAnoC;
      inventoryConfig.AbcRatioBnoC = invFeedsGeneralSettingDTO.AbcRatioBnoC;
      inventoryConfig.AbcOthersOverstock = invFeedsGeneralSettingDTO.AbcOthersOverstock;
      inventoryConfig.AbcOtherseBay = invFeedsGeneralSettingDTO.AbcOtherseBay;
      inventoryConfig.AbcOthersBpmweb = invFeedsGeneralSettingDTO.AbcOthersBPMWeb;
      inventoryConfig.AbcOthersMellowWeb = invFeedsGeneralSettingDTO.AbcOthersMellowWeb;
      inventoryConfig.AbcOthersHouzz = invFeedsGeneralSettingDTO.AbcOthersHouzz;
      inventoryConfig.AbcOthersHomeDepot = invFeedsGeneralSettingDTO.AbcOthersHomeDepot;
      inventoryConfig.IsActivatedWmttopSellers = invFeedsGeneralSettingDTO.IsActivatedWmttopSellers;
      inventoryConfig.WalmartTopSellersDistributionRatio = invFeedsGeneralSettingDTO.WalmartTopSellersDistributionRatio;
      inventoryConfig.WalmartTopSellers = invFeedsGeneralSettingDTO.WalmartTopSellers;

      inventoryConfig.IsActivatedWfsvsWhs = invFeedsGeneralSettingDTO.IsActivatedWFSvsWHs;
      inventoryConfig.WfsvsWhsBufferQty = invFeedsGeneralSettingDTO.WFSvsWHsBufferQty;
      // 1. Inventory Config Update
      foreach (InvFeedsRule tmpDto in marketList)
      {
        switch (tmpDto.CustomerId)
        {
          case AmazonID: // Amazon
            if (tmpDto.RatioOnLowData != invFeedsGeneralSettingDTO.AmazonRatioOnLowData)
            {
              tmpDto.RatioOnLowData = invFeedsGeneralSettingDTO.AmazonRatioOnLowData;
              tmpDto.LastModifiedBy = empId;
              tmpDto.LastModifiedTime = todayDate;
            }
            break;
          case BPMID: // BPM Web
            if (tmpDto.RatioOnLowData != invFeedsGeneralSettingDTO.BpmRatioOnLowData)
            {
              tmpDto.RatioOnLowData = invFeedsGeneralSettingDTO.BpmRatioOnLowData;
              tmpDto.LastModifiedBy = empId;
              tmpDto.LastModifiedTime = todayDate;
            }
            break;
          case eBayID: // eBay
            if (tmpDto.RatioOnLowData != invFeedsGeneralSettingDTO.eBayRatioOnLowData)
            {
              tmpDto.RatioOnLowData = invFeedsGeneralSettingDTO.eBayRatioOnLowData;
              tmpDto.LastModifiedBy = empId;
              tmpDto.LastModifiedTime = todayDate;
            }
            break;
          case HouzzID: // Houzz
            if (tmpDto.RatioOnLowData != invFeedsGeneralSettingDTO.HouzzRatioOnLowData)
            {
              tmpDto.RatioOnLowData = invFeedsGeneralSettingDTO.HouzzRatioOnLowData;
              tmpDto.LastModifiedBy = empId;
              tmpDto.LastModifiedTime = todayDate;
            }
            break;
          case MellowID: // Mellow
            if (tmpDto.RatioOnLowData != invFeedsGeneralSettingDTO.MellowRatioOnLowData)
            {
              tmpDto.RatioOnLowData = invFeedsGeneralSettingDTO.MellowRatioOnLowData;
              tmpDto.LastModifiedBy = empId;
              tmpDto.LastModifiedTime = todayDate;
            }
            break;
          case OverstockID: // Overstock
            if (tmpDto.RatioOnLowData != invFeedsGeneralSettingDTO.OverstockRatioOnLowData)
            {
              tmpDto.RatioOnLowData = invFeedsGeneralSettingDTO.OverstockRatioOnLowData;
              tmpDto.LastModifiedBy = empId;
              tmpDto.LastModifiedTime = todayDate;
            }
            break;
          case WalmartID: // Walmart
            if (tmpDto.RatioOnLowData != invFeedsGeneralSettingDTO.WalmartRatioOnLowData)
            {
              tmpDto.RatioOnLowData = invFeedsGeneralSettingDTO.WalmartRatioOnLowData;
              tmpDto.LastModifiedBy = empId;
              tmpDto.LastModifiedTime = todayDate;
            }
            break;
          case WayfairID: // Wayfair
            if (tmpDto.RatioOnLowData != invFeedsGeneralSettingDTO.WayfairRatioOnLowData)
            {
              tmpDto.RatioOnLowData = invFeedsGeneralSettingDTO.WayfairRatioOnLowData;
              tmpDto.LastModifiedBy = empId;
              tmpDto.LastModifiedTime = todayDate;
            }
            break;

        }
      }

      await _kc.SaveChangesAsync();
      return true;
    }


    public async Task<List<NsIcr>> GetAmazonCustSKUs(List<int> ids)
    {
      return await _kc.NsIcrs
        .Where(n => ids.Contains(n.CustomerId))
        .ToListAsync();
    }

    public static string ScrubHtml(string value)
    {
      var step1 = Regex.Replace(value, @"<[^>]+>|&nbsp;", "").Trim();
      var step2 = Regex.Replace(step1, @"\s{2,}", " ");
      return step2;
    }

    // Comparing two inventory feeds(one from the user and one from the Chameleon)
    // By Brian Yi on 09/23/2021
    // Modified by Brian Yi on 09/05/2022
    public async Task<List<ComparedInvFeedsDTO>> CompareInvFeeds(InvFeedsFromUserDTO invFeedsFromUserDTO)
    {
      DateTime today = DateTime.Parse(invFeedsFromUserDTO.historyDate);
      int customerId = int.Parse(invFeedsFromUserDTO.CustomerId);
      int bpmLocId = int.Parse(invFeedsFromUserDTO.BpmLocId);

      List<ComparedInvFeedsDTO> serviceResponse = new List<ComparedInvFeedsDTO>();
      DateTime beforeDate = new DateTime(today.AddDays(-1).Year, today.AddDays(-1).Month, today.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(today.AddDays(1).Year, today.AddDays(1).Month, today.AddDays(1).Day, 0, 0, 0);
      InvFeedsReport invFeedReport = await _kc.InvFeedsReports
        .Where(ifr => (DateTime)ifr.CreatedDate > beforeDate && (DateTime)ifr.CreatedDate < afterDate && ifr.IsApproved == true)
        .Include(x => x.InvFeedsItems)
        .OrderByDescending(x => x.CreatedDate)
        .FirstOrDefaultAsync();


      // If there is no today's report, return nothing.
      if (invFeedReport == null) return serviceResponse;


      int amazonMkId = 1, bpmMkId = 3, wayfairMkId = 4, eBayMkId = 5, houzzMkId = 7, mellowMkId = 10, overstockMkId = 12, walmartMkId = 16, homeDepotMkId = 340, targetMkId = 341;

      const int amazonID = 5, BPMID = 9, eBayID = 12, HouzzID = 14, MellowID = 18, OverstockID = 21, WalmartID = 26, WayfairID = 29, HomeDepotID = 40, TargetID = 51;
      int marketId = 0;

      switch (customerId)
      {
        case amazonID: // Amazon
          marketId = amazonMkId;
          break;
        case BPMID: // BPM Web
          marketId = bpmMkId;
          break;
        case eBayID: // eBay
          marketId = eBayMkId;
          break;
        case HouzzID: // Houzz
          marketId = houzzMkId;
          break;
        case MellowID: // Mellow
          marketId = mellowMkId;
          break;
        case OverstockID: // Overstock
          marketId = overstockMkId;
          break;
        case WalmartID: // Walmart
          marketId = walmartMkId;
          break;
        case WayfairID: // Wayfair
          marketId = wayfairMkId;
          break;
        case HomeDepotID: // Home Depot
          marketId = homeDepotMkId;
          break;
        case TargetID: // Target
          marketId = targetMkId;
          break;
        default:
          return serviceResponse;

      }

      List<InvFeedsReportItem> invFeedsReportItemList = await _kc.InvFeedsReportItems
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .Include(i => i.InvFeedsRepItemDetails)
        .ToListAsync();

      BpmLocation bpmLoc = await _kc.BpmLocations
        .Where(b => b.LocationId == bpmLocId)
        .FirstOrDefaultAsync();

      /*
      List<NsIcr> nsIcrs = await _kc.NsIcrs
        .Where(n => n.CustomerId == customerId && n.IsInvFeed == 1)
        .Include(n => n.ItemNo)
        .ToListAsync();
      */
      List<MkIcr> mkIcrs = await _kc.MkIcrs
        .Where(n => n.MarketId == marketId && n.IsInvFeed == true)
        .Include(n => n.ItemNo)
        .ToListAsync();

      List<ItemStatus> itemStatuses = await _kc.ItemStatuses
        .ToListAsync();

      List<InvFeedsAppliedRule> invFeedsAppliedRules = await _kc.InvFeedsAppliedRules
        .ToListAsync();

      List<ComparedInvFeedsDTO> userInvFeeds = invFeedsFromUserDTO.feedsList.Select(fd =>
      new ComparedInvFeedsDTO()
      {
        bpmSku = "Not Available",
        ItemStatus = "Not Available",
        Description = "Not Available",
        appliedRule = "Not Available",
        totalQty = 0,
        custSku = fd.CustomerSku,
        manualFeedsQty = int.Parse(fd.Qty),
        chameleonFeedsQty = 0,
        etc = ""
      }).ToList();

      serviceResponse = mkIcrs.Select(icr =>
      new ComparedInvFeedsDTO()
      {
        bpmSku = icr.ItemNo.ItemName,
        ItemNoId = icr.ItemNoId,
        ItemStatus = (icr.ItemNo.ItemStatus != null ? (itemStatuses.FindLast(i => i.ItemStatusId == icr.ItemNo.ItemStatusId).StatusItem) : "Not Available"),
        Description = icr.ItemNo.Description,
        totalQty = 0,
        custSku = icr.CustSku,
        manualFeedsQty = 0,
        chameleonFeedsQty = 0,
        appliedRule = "",
        etc = ""
      }).ToList();

      int index = 0;

      ComparedInvFeedsDTO tmpUsersDTO = new ComparedInvFeedsDTO();
      ComparedInvFeedsDTO tmpChasDTO = new ComparedInvFeedsDTO();

      InvFeedsReportItem tmpDTO = new InvFeedsReportItem();
      InvFeedsRepItemLoc tmpLoc = new InvFeedsRepItemLoc();
      InvFeedsRepItemDetail invFeedsRepItem = new InvFeedsRepItemDetail();
      InvFeedsItem invFeedsItem = new InvFeedsItem();
      InvFeedsItemLocQty tmpItemLoc = new InvFeedsItemLocQty();
      NsIcr tmpIcr = new NsIcr();

      while (index < serviceResponse.Count)
      {
        tmpUsersDTO = serviceResponse[index];
        tmpDTO = invFeedsReportItemList.Where(i => i.ItemNoId == tmpUsersDTO.ItemNoId).FirstOrDefault();

        if (tmpDTO != null)
        {
          invFeedsRepItem = await _kc.InvFeedsRepItemDetails
            .Where(i => i.InvFeedsReportItemId == tmpDTO.InvFeedsReportItemId && i.CustomerId == customerId)
            .Include(i => i.InvFeedsRepItemLocs)
            .FirstOrDefaultAsync();
          if (invFeedsRepItem != null)
          {
            tmpLoc = invFeedsRepItem.InvFeedsRepItemLocs.Where(i => i.LocationId == bpmLocId).FirstOrDefault();
            if (tmpLoc != null && tmpLoc.QtyAvail != 0)
            {
              invFeedsItem = await _kc.InvFeedsItems
                .Where(fi => fi.ItemNoId == tmpUsersDTO.ItemNoId && fi.InvFeedsReportId == invFeedReport.InvFeedsReportId)
                .Include(fi => fi.InvFeedsItemLocQties)
                .FirstOrDefaultAsync();

              tmpUsersDTO.totalQty = (int)invFeedsItem.InvFeedsItemLocQties.Where(lq => lq.ItemLocId == tmpLoc.LocationId).FirstOrDefault().QtyAvail;
              tmpUsersDTO.chameleonFeedsQty = (invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0);
              tmpUsersDTO.appliedRule = invFeedsAppliedRules.FindLast(r => r.InvFeedsAppliedRuleId == tmpLoc.InvFeedsAppliedRuleId).Description;
              if (tmpUsersDTO.chameleonFeedsQty < 0) tmpUsersDTO.chameleonFeedsQty = 0;

              tmpChasDTO = userInvFeeds.FindLast(uf => uf.custSku == tmpUsersDTO.custSku);
              if (tmpChasDTO != null)
              {
                tmpUsersDTO.manualFeedsQty = tmpChasDTO.manualFeedsQty;
                userInvFeeds.Remove(tmpChasDTO);
              }
            }
          }
        }
        index++;
      }

      if (userInvFeeds.Count > 0)
      {
        while (index < userInvFeeds.Count)
        {
          tmpUsersDTO = userInvFeeds[index];
          tmpIcr = await _kc.NsIcrs
            .Where(i => i.CustSku == tmpUsersDTO.custSku)
            .Include(i => i.ItemNo)
            .FirstOrDefaultAsync();
          if (tmpIcr != null)
          {
            tmpUsersDTO.ItemNoId = tmpIcr.ItemNoId;
            tmpUsersDTO.Description = tmpIcr.ItemNo.Description;
            tmpUsersDTO.ItemStatus = (tmpIcr.ItemNo.ItemStatus != null ? (itemStatuses.FindLast(i => i.ItemStatusId == tmpIcr.ItemNo.ItemStatusId).StatusItem) : "Not Available");

            invFeedsRepItem = await _kc.InvFeedsRepItemDetails
            .Where(i => i.InvFeedsReportItemId == tmpIcr.ItemNoId && i.CustomerId == customerId)
            .Include(i => i.InvFeedsRepItemLocs)
            .FirstOrDefaultAsync();

            invFeedsItem = await _kc.InvFeedsItems
              .Where(fi => fi.ItemNoId == tmpUsersDTO.ItemNoId && fi.InvFeedsReportId == invFeedReport.InvFeedsReportId)
              .Include(fi => fi.InvFeedsItemLocQties)
              .FirstOrDefaultAsync();
            if (invFeedsItem != null && invFeedsItem.InvFeedsItemLocQties.Where(i => i.ItemLocId == bpmLocId).FirstOrDefault() != null)
            {
              tmpLoc = invFeedsRepItem.InvFeedsRepItemLocs.Where(i => i.LocationId == bpmLocId).FirstOrDefault();
              //tmpItemLoc = invFeedsItem.InvFeedsItemLocQties.Where(i => i.ItemLocId == bpmLocId).FirstOrDefault();
              tmpUsersDTO.totalQty = (int)invFeedsItem.InvFeedsItemLocQties.Where(lq => lq.ItemLocId == tmpLoc.LocationId).FirstOrDefault().QtyAvail;
              //tmpUsersDTO.appliedRule = (tmpLoc.QtyAvail != 0 ? invFeedsAppliedRules.FindLast(r => r.RuleNo == tmpLoc.InvFeedsAppliedRuleId).Description : "");
            }
            tmpUsersDTO.etc = "Not Feeded";
            serviceResponse.Add(tmpUsersDTO);
          }
          else
          {
            tmpUsersDTO.etc = "No Matched ICR";
            serviceResponse.Add(tmpUsersDTO);
          }
          index++;
        }

      }

      return serviceResponse;
    }

    // Comparing Chameleon Feeds with manual Feeds
    // By Brian Yi on 09/22/2021; "BASC" was added on 09/05/2022
    public async Task<List<ComparedInvFeedsDTO>> CompareWayfairInvFeeds(InvFeedsWayfairFromUserDTO invFeedsWayfairFromUserDTO)
    {
      DateTime today = DateTime.Parse(invFeedsWayfairFromUserDTO.historyDate);
      int customerId = int.Parse(invFeedsWayfairFromUserDTO.CustomerId), bancId = 4, bascId = 62, mainslId = 25, swcaftId = 54;

      List<ComparedInvFeedsDTO> serviceResponse = new List<ComparedInvFeedsDTO>();

      DateTime beforeDate = new DateTime(today.AddDays(-1).Year, today.AddDays(-1).Month, today.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(today.AddDays(1).Year, today.AddDays(1).Month, today.AddDays(1).Day, 0, 0, 0);

      InvFeedsReport invFeedReport = await _kc.InvFeedsReports
        .Where(ifr => (DateTime)ifr.CreatedDate > beforeDate && (DateTime)ifr.CreatedDate < afterDate && ifr.IsApproved == true)
        .Include(x => x.InvFeedsItems)
        .OrderByDescending(x => x.CreatedDate)
        .FirstOrDefaultAsync();

      // If there is no today's report, return nothing.
      if (invFeedReport == null) return serviceResponse;

      List<InvFeedsReportItem> invFeedsReportItemList = await _kc.InvFeedsReportItems
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .Include(i => i.InvFeedsRepItemDetails)
        .ToListAsync();

      BpmLocation bpmLocBanc = await _kc.BpmLocations
        .Where(b => b.LocationId == bancId)
        .FirstOrDefaultAsync();

      BpmLocation bpmLocBasc = await _kc.BpmLocations
        .Where(b => b.LocationId == bascId)
        .FirstOrDefaultAsync();

      BpmLocation bpmLocMainsl = await _kc.BpmLocations
        .Where(b => b.LocationId == mainslId)
        .FirstOrDefaultAsync();

      BpmLocation bpmLocSWCAFT = await _kc.BpmLocations
        .Where(b => b.LocationId == swcaftId)
        .FirstOrDefaultAsync();

      int amazonMkId = 1, bpmMkId = 3, wayfairMkId = 4, eBayMkId = 5, houzzMkId = 7, mellowMkId = 10, overstockMkId = 12, walmartMkId = 16, homeDepotMkId = 340, targetMkId = 341;

      const int amazonID = 5, BPMID = 9, eBayID = 12, HouzzID = 14, MellowID = 18, OverstockID = 21, WalmartID = 26, WayfairID = 29, HomeDepotID = 40, TargetID = 51;
      int marketId = 0;

      switch (customerId)
      {
        case amazonID: // Amazon
          marketId = amazonMkId;
          break;
        case BPMID: // BPM Web
          marketId = bpmMkId;
          break;
        case eBayID: // eBay
          marketId = eBayMkId;
          break;
        case HouzzID: // Houzz
          marketId = houzzMkId;
          break;
        case MellowID: // Mellow
          marketId = mellowMkId;
          break;
        case OverstockID: // Overstock
          marketId = overstockMkId;
          break;
        case WalmartID: // Walmart
          marketId = walmartMkId;
          break;
        case WayfairID: // Wayfair
          marketId = wayfairMkId;
          break;
        case HomeDepotID: // Home Depot
          marketId = homeDepotMkId;
          break;
        case TargetID: // Target
          marketId = targetMkId;
          break;
        default:
          return serviceResponse;

      }
      /*
      List<NsIcr> nsIcrs = await _kc.NsIcrs
        .Where(n => n.CustomerId == customerId && n.IsInvFeed == 1)
        .Include(n => n.ItemNo)
        .ToListAsync();
      */
      List<MkIcr> mkIcrs = await _kc.MkIcrs
        .Where(n => n.MarketId == marketId && n.IsInvFeed == true)
        .Include(n => n.ItemNo)
        .ToListAsync();

      List<ItemStatus> itemStatuses = await _kc.ItemStatuses
        .ToListAsync();

      List<InvFeedsAppliedRule> invFeedsAppliedRules = await _kc.InvFeedsAppliedRules
        .ToListAsync();

      List<ComparedInvFeedsDTO> userInvFeeds = invFeedsWayfairFromUserDTO.feedsList.Select(fd =>
      new ComparedInvFeedsDTO()
      {
        bpmSku = "Not Available",
        ItemStatus = "Not Available",
        Description = "Not Available",
        totalQty = 0,
        totalQtyBanc = 0,
        totalQtyMainsl = 0,
        totalQtySWCAFT = 0,
        custSku = fd.SupplierPartNo,
        manualFeedsQtyBanc = (fd.SupplierID == bpmLocBanc.LocIdWayfair ? int.Parse(fd.QuantityOnHand) : 0),
        manualFeedsQtyBasc = (fd.SupplierID == bpmLocBasc.LocIdWayfair ? int.Parse(fd.QuantityOnHand) : 0),
        manualFeedsQtyMainsl = (fd.SupplierID == bpmLocMainsl.LocIdWayfair ? int.Parse(fd.QuantityOnHand) : 0),
        manualFeedsQtySWCAFT = (fd.SupplierID == bpmLocSWCAFT.LocIdWayfair ? int.Parse(fd.QuantityOnHand) : 0),
        manualFeedsQty = 0,
        chameleonFeedsQty = 0,
        chameleonFeedsQtyBanc = 0,
        chameleonFeedsQtyBasc = 0,
        chameleonFeedsQtyMainsl = 0,
        chameleonFeedsQtySWCAFT = 0,
        appliedRule = "",
        appliedRuleBanc = "",
        appliedRuleBasc = "",
        appliedRuleMainsl = "",
        appliedRuleSWCAFT = "",
        etc = ""
      }).ToList();

      serviceResponse = mkIcrs.Select(icr =>
      new ComparedInvFeedsDTO()
      {
        bpmSku = icr.ItemNo.ItemName,
        ItemNoId = icr.ItemNoId,
        ItemStatus = (icr.ItemNo.ItemStatus != null ? (itemStatuses.FindLast(i => i.ItemStatusId == icr.ItemNo.ItemStatusId).StatusItem) : "Not Available"),
        Description = icr.ItemNo.Description,
        totalQty = 0,
        totalQtyBanc = 0,
        totalQtyBasc = 0,
        totalQtyMainsl = 0,
        totalQtySWCAFT = 0,
        custSku = icr.CustSku,
        manualFeedsQty = 0,
        manualFeedsQtyBanc = 0,
        manualFeedsQtyBasc = 0,
        manualFeedsQtyMainsl = 0,
        manualFeedsQtySWCAFT = 0,
        chameleonFeedsQty = 0,
        chameleonFeedsQtyBanc = 0,
        chameleonFeedsQtyBasc = 0,
        chameleonFeedsQtyMainsl = 0,
        chameleonFeedsQtySWCAFT = 0,
        appliedRule = "",
        appliedRuleBanc = "",
        appliedRuleBasc = "",
        appliedRuleMainsl = "",
        appliedRuleSWCAFT = "",
        etc = ""
      }).ToList();

      int index = 0;

      ComparedInvFeedsDTO tmpUsersDTO = new ComparedInvFeedsDTO();
      ComparedInvFeedsDTO tmpChasDTO = new ComparedInvFeedsDTO();

      InvFeedsReportItem tmpDTO = new InvFeedsReportItem();
      List<InvFeedsRepItemLoc> tmpLocs = new List<InvFeedsRepItemLoc>();
      InvFeedsRepItemLoc tmpLoc = new InvFeedsRepItemLoc();
      InvFeedsRepItemDetail invFeedsRepItem = new InvFeedsRepItemDetail();
      InvFeedsItem invFeedsItem = new InvFeedsItem();
      InvFeedsItemLocQty tmpItemLoc = new InvFeedsItemLocQty();
      //NsIcr tmpIcr = new NsIcr();
      MkIcr tmpIcr = new MkIcr();
      while (index < serviceResponse.Count)
      {
        tmpUsersDTO = serviceResponse[index];
        tmpDTO = invFeedsReportItemList.Where(i => i.ItemNoId == tmpUsersDTO.ItemNoId).FirstOrDefault();

        if (tmpDTO != null)
        {
          invFeedsRepItem = await _kc.InvFeedsRepItemDetails
            .Where(i => i.InvFeedsReportItemId == tmpDTO.InvFeedsReportItemId && i.CustomerId == customerId)
            .Include(i => i.InvFeedsRepItemLocs)
            .FirstOrDefaultAsync();

          // Need to modify here!!!
          tmpLocs = invFeedsRepItem.InvFeedsRepItemLocs.ToList();
          if (tmpLocs != null)
          {
            foreach (InvFeedsRepItemLoc tmpRepItemLoc in tmpLocs)
            {
              invFeedsItem = await _kc.InvFeedsItems
                .Where(fi => fi.ItemNoId == tmpUsersDTO.ItemNoId && fi.InvFeedsReportId == invFeedReport.InvFeedsReportId)
                .Include(fi => fi.InvFeedsItemLocQties)
                .FirstOrDefaultAsync();
              if (invFeedsItem != null)
              {
                foreach (InvFeedsItemLocQty tmpItemLocQty in invFeedsItem.InvFeedsItemLocQties)
                {
                  if (tmpItemLocQty.ItemLocId == bancId)
                  {
                    tmpUsersDTO.totalQtyBanc = (int)tmpItemLocQty.QtyAvail;
                    tmpUsersDTO.chameleonFeedsQtyBanc = (invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpRepItemLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0);
                    tmpUsersDTO.appliedRuleBanc = invFeedsAppliedRules.FindLast(r => r.InvFeedsAppliedRuleId == tmpRepItemLoc.InvFeedsAppliedRuleId).Description;
                    if (tmpUsersDTO.chameleonFeedsQtyBanc < 0) tmpUsersDTO.chameleonFeedsQtyBanc = 0;

                    tmpChasDTO = userInvFeeds.FindLast(uf => uf.custSku == tmpUsersDTO.custSku);
                    if (tmpChasDTO != null)
                    {
                      tmpUsersDTO.manualFeedsQtyBanc = tmpChasDTO.manualFeedsQtyBanc;
                      userInvFeeds.Remove(tmpChasDTO);
                    }

                  }
                  else if (tmpItemLocQty.ItemLocId == bascId)
                  {
                    tmpUsersDTO.totalQtyBasc = (int)tmpItemLocQty.QtyAvail;
                    tmpUsersDTO.chameleonFeedsQtyBasc = (invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpRepItemLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0);
                    tmpUsersDTO.appliedRuleBasc = invFeedsAppliedRules.FindLast(r => r.InvFeedsAppliedRuleId == tmpRepItemLoc.InvFeedsAppliedRuleId).Description;
                    if (tmpUsersDTO.chameleonFeedsQtyBasc < 0) tmpUsersDTO.chameleonFeedsQtyBasc = 0;

                    tmpChasDTO = userInvFeeds.FindLast(uf => uf.custSku == tmpUsersDTO.custSku);
                    if (tmpChasDTO != null)
                    {
                      tmpUsersDTO.manualFeedsQtyBasc = tmpChasDTO.manualFeedsQtyBasc;
                      userInvFeeds.Remove(tmpChasDTO);
                    }

                  }
                  else if (tmpItemLocQty.ItemLocId == mainslId)
                  {
                    tmpUsersDTO.totalQtyMainsl = (int)tmpItemLocQty.QtyAvail;
                    tmpUsersDTO.chameleonFeedsQtyMainsl = (invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpRepItemLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0);
                    tmpUsersDTO.appliedRuleMainsl = invFeedsAppliedRules.FindLast(r => r.InvFeedsAppliedRuleId == tmpRepItemLoc.InvFeedsAppliedRuleId).Description;
                    if (tmpUsersDTO.chameleonFeedsQtyMainsl < 0) tmpUsersDTO.chameleonFeedsQtyMainsl = 0;

                    tmpChasDTO = userInvFeeds.FindLast(uf => uf.custSku == tmpUsersDTO.custSku);
                    if (tmpChasDTO != null)
                    {
                      tmpUsersDTO.manualFeedsQtyMainsl = tmpChasDTO.manualFeedsQtyMainsl;
                      userInvFeeds.Remove(tmpChasDTO);
                    }
                  }
                  else if (tmpItemLocQty.ItemLocId == swcaftId)
                  {
                    tmpUsersDTO.totalQtySWCAFT = (int)tmpItemLocQty.QtyAvail;
                    tmpUsersDTO.chameleonFeedsQtySWCAFT = (invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpRepItemLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0);
                    tmpUsersDTO.appliedRuleSWCAFT = invFeedsAppliedRules.FindLast(r => r.InvFeedsAppliedRuleId == tmpRepItemLoc.InvFeedsAppliedRuleId).Description;
                    if (tmpUsersDTO.chameleonFeedsQtySWCAFT < 0) tmpUsersDTO.chameleonFeedsQtySWCAFT = 0;

                    tmpChasDTO = userInvFeeds.FindLast(uf => uf.custSku == tmpUsersDTO.custSku);
                    if (tmpChasDTO != null)
                    {
                      tmpUsersDTO.manualFeedsQtySWCAFT = tmpChasDTO.manualFeedsQtySWCAFT;
                      userInvFeeds.Remove(tmpChasDTO);
                    }
                  }

                }
              }
            }
          }

        }
        index++;
      }

      if (userInvFeeds.Count > 0)
      {
        while (index < userInvFeeds.Count)
        {
          tmpUsersDTO = userInvFeeds[index];
          /*
          tmpIcr = await _kc.NsIcrs
            .Where(i => i.CustSku == tmpUsersDTO.custSku)
            .Include(i => i.ItemNo)
            .FirstOrDefaultAsync();
          */
          tmpIcr = await _kc.MkIcrs
            .Where(i => i.CustSku == tmpUsersDTO.custSku)
            .Include(i => i.ItemNo)
            .FirstOrDefaultAsync();
          if (tmpIcr != null)
          {
            tmpUsersDTO.ItemNoId = tmpIcr.ItemNoId;
            tmpUsersDTO.Description = tmpIcr.ItemNo.Description;
            tmpUsersDTO.ItemStatus = (tmpIcr.ItemNo.ItemStatus != null ? (itemStatuses.FindLast(i => i.ItemStatusId == tmpIcr.ItemNo.ItemStatusId).StatusItem) : "Not Available");

            invFeedsRepItem = await _kc.InvFeedsRepItemDetails
            .Where(i => i.InvFeedsReportItemId == tmpIcr.ItemNoId && i.CustomerId == customerId)
            .Include(i => i.InvFeedsRepItemLocs)
            .FirstOrDefaultAsync();

            invFeedsItem = await _kc.InvFeedsItems
              .Where(fi => fi.ItemNoId == tmpUsersDTO.ItemNoId && fi.InvFeedsReportId == invFeedReport.InvFeedsReportId)
              .Include(fi => fi.InvFeedsItemLocQties)
              .FirstOrDefaultAsync();
            if (invFeedsItem != null)
            {
              foreach (InvFeedsItemLocQty tmpItemLocQty in invFeedsItem.InvFeedsItemLocQties)
              {
                if (tmpItemLocQty.ItemLocId == bancId)
                {
                  tmpLoc = invFeedsRepItem.InvFeedsRepItemLocs.Where(i => i.LocationId == bancId).FirstOrDefault();
                  tmpUsersDTO.totalQtyBanc = (int)invFeedsItem.InvFeedsItemLocQties.Where(lq => lq.ItemLocId == bancId).FirstOrDefault().QtyAvail;
                  //tmpUsersDTO.appliedRuleBanc = (tmpItemLocQty.QtyAvail != 0 ? invFeedsAppliedRules.FindLast(r => r.RuleNo == tmpLoc.InvFeedsAppliedRuleId).Description : "");
                }
                else if (tmpItemLocQty.ItemLocId == bascId)
                {
                  tmpLoc = invFeedsRepItem.InvFeedsRepItemLocs.Where(i => i.LocationId == bascId).FirstOrDefault();
                  tmpUsersDTO.totalQtyBasc = (int)invFeedsItem.InvFeedsItemLocQties.Where(lq => lq.ItemLocId == bancId).FirstOrDefault().QtyAvail;
                  //tmpUsersDTO.appliedRuleBanc = (tmpItemLocQty.QtyAvail != 0 ? invFeedsAppliedRules.FindLast(r => r.RuleNo == tmpLoc.InvFeedsAppliedRuleId).Description : "");
                }
                else if (tmpItemLocQty.ItemLocId == mainslId)
                {
                  tmpLoc = invFeedsRepItem.InvFeedsRepItemLocs.Where(i => i.LocationId == mainslId).FirstOrDefault();
                  tmpUsersDTO.totalQtyMainsl = (int)invFeedsItem.InvFeedsItemLocQties.Where(lq => lq.ItemLocId == mainslId).FirstOrDefault().QtyAvail;
                  //tmpUsersDTO.appliedRuleMainsl = (tmpItemLocQty.QtyAvail != 0 ? invFeedsAppliedRules.FindLast(r => r.RuleNo == tmpLoc.InvFeedsAppliedRuleId).Description : "");
                }
                else if (tmpItemLocQty.ItemLocId == swcaftId)
                {
                  tmpLoc = invFeedsRepItem.InvFeedsRepItemLocs.Where(i => i.LocationId == swcaftId).FirstOrDefault();
                  tmpUsersDTO.totalQtySWCAFT = (int)invFeedsItem.InvFeedsItemLocQties.Where(lq => lq.ItemLocId == swcaftId).FirstOrDefault().QtyAvail;
                  //tmpUsersDTO.appliedRuleMainsl = (tmpItemLocQty.QtyAvail != 0 ? invFeedsAppliedRules.FindLast(r => r.RuleNo == tmpLoc.InvFeedsAppliedRuleId).Description : "");
                }
              }
            }

            tmpUsersDTO.etc = "Not Feeded";
            serviceResponse.Add(tmpUsersDTO);
          }
          else
          {
            tmpUsersDTO.etc = "No Matched ICR";
            serviceResponse.Add(tmpUsersDTO);
          }
          index++;
        }

      }

      return serviceResponse;
    }


    // For comparing inventory feeds(HomeDepot Only)
    // By Brian Yi on 09/05/2021
    public async Task<List<ComparedInvFeedsDTO>> CompareHomeDepotInvFeeds(InvFeedsHomeDepotFromUserDTO invFeedsHomeDepotFromUserDTO)
    {
      DateTime today = DateTime.Parse(invFeedsHomeDepotFromUserDTO.historyDate);
      int customerId = int.Parse(invFeedsHomeDepotFromUserDTO.CustomerId), bancId = 4, bascId = 62, mainslId = 25, swcaftId = 54;

      List<ComparedInvFeedsDTO> serviceResponse = new List<ComparedInvFeedsDTO>();

      DateTime beforeDate = new DateTime(today.AddDays(-1).Year, today.AddDays(-1).Month, today.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(today.AddDays(1).Year, today.AddDays(1).Month, today.AddDays(1).Day, 0, 0, 0);

      InvFeedsReport invFeedReport = await _kc.InvFeedsReports
        .Where(ifr => (DateTime)ifr.CreatedDate > beforeDate && (DateTime)ifr.CreatedDate < afterDate && ifr.IsApproved == true)
        .Include(x => x.InvFeedsItems)
        .OrderByDescending(x => x.CreatedDate)
        .FirstOrDefaultAsync();

      // If there is no today's report, return nothing.
      if (invFeedReport == null) return serviceResponse;

      List<InvFeedsReportItem> invFeedsReportItemList = await _kc.InvFeedsReportItems
        .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .Include(i => i.InvFeedsRepItemDetails)
        .ToListAsync();

      BpmLocation bpmLocBanc = await _kc.BpmLocations
        .Where(b => b.LocationId == bancId)
        .FirstOrDefaultAsync();

      BpmLocation bpmLocBasc = await _kc.BpmLocations
        .Where(b => b.LocationId == bascId)
        .FirstOrDefaultAsync();

      BpmLocation bpmLocMainsl = await _kc.BpmLocations
        .Where(b => b.LocationId == mainslId)
        .FirstOrDefaultAsync();

      BpmLocation bpmLocSWCAFT = await _kc.BpmLocations
        .Where(b => b.LocationId == swcaftId)
        .FirstOrDefaultAsync();

      int amazonMkId = 1, bpmMkId = 3, wayfairMkId = 4, eBayMkId = 5, houzzMkId = 7, mellowMkId = 10, overstockMkId = 12, walmartMkId = 16, homeDepotMkId = 340, targetMkId = 341;

      const int amazonID = 5, BPMID = 9, eBayID = 12, HouzzID = 14, MellowID = 18, OverstockID = 21, WalmartID = 26, WayfairID = 29, HomeDepotID = 40, TargetID = 51;
      int marketId = 0;

      switch (customerId)
      {
        case amazonID: // Amazon
          marketId = amazonMkId;
          break;
        case BPMID: // BPM Web
          marketId = bpmMkId;
          break;
        case eBayID: // eBay
          marketId = eBayMkId;
          break;
        case HouzzID: // Houzz
          marketId = houzzMkId;
          break;
        case MellowID: // Mellow
          marketId = mellowMkId;
          break;
        case OverstockID: // Overstock
          marketId = overstockMkId;
          break;
        case WalmartID: // Walmart
          marketId = walmartMkId;
          break;
        case WayfairID: // Wayfair
          marketId = wayfairMkId;
          break;
        case HomeDepotID: // Home Depot
          marketId = homeDepotMkId;
          break;
        case TargetID: // Target
          marketId = targetMkId;
          break;
        default:
          return serviceResponse;

      }
      /*
      List<NsIcr> nsIcrs = await _kc.NsIcrs
        .Where(n => n.CustomerId == customerId && n.IsInvFeed == 1)
        .Include(n => n.ItemNo)
        .ToListAsync();
      */
      List<MkIcr> mkIcrs = await _kc.MkIcrs
        .Where(n => n.MarketId == marketId && n.IsInvFeed == true)
        .Include(n => n.ItemNo)
        .ToListAsync();

      List<ItemStatus> itemStatuses = await _kc.ItemStatuses
        .ToListAsync();

      List<InvFeedsAppliedRule> invFeedsAppliedRules = await _kc.InvFeedsAppliedRules
        .ToListAsync();

      List<ComparedInvFeedsDTO> userInvFeeds = invFeedsHomeDepotFromUserDTO.feedsList.Select(fd =>
      new ComparedInvFeedsDTO()
      {
        bpmSku = "Not Available",
        ItemStatus = "Not Available",
        Description = "Not Available",
        totalQty = 0,
        totalQtyBanc = 0,
        totalQtyBasc = 0,
        totalQtyMainsl = 0,
        totalQtySWCAFT = 0,
        custSku = fd.yourSku,
        manualFeedsQtyBanc = (fd.warehouse3qty != null ? int.Parse(fd.warehouse3qty) : 0),
        manualFeedsQtyBasc = (fd.warehouse4qty != null ? int.Parse(fd.warehouse4qty) : 0),
        manualFeedsQtyMainsl = (fd.warehouse1qty != null ? int.Parse(fd.warehouse1qty) : 0),
        manualFeedsQtySWCAFT = (fd.warehouse2qty != null ? int.Parse(fd.warehouse2qty) : 0),
        manualFeedsQty = 0,
        chameleonFeedsQty = 0,
        chameleonFeedsQtyBanc = 0,
        chameleonFeedsQtyBasc = 0,
        chameleonFeedsQtyMainsl = 0,
        chameleonFeedsQtySWCAFT = 0,
        appliedRule = "",
        appliedRuleBanc = "",
        appliedRuleBasc = "",
        appliedRuleMainsl = "",
        appliedRuleSWCAFT = "",
        etc = ""
      }).ToList();

      serviceResponse = mkIcrs.Select(icr =>
      new ComparedInvFeedsDTO()
      {
        bpmSku = icr.ItemNo.ItemName,
        ItemNoId = icr.ItemNoId,
        ItemStatus = (icr.ItemNo.ItemStatus != null ? (itemStatuses.FindLast(i => i.ItemStatusId == icr.ItemNo.ItemStatusId).StatusItem) : "Not Available"),
        Description = icr.ItemNo.Description,
        totalQty = 0,
        totalQtyBanc = 0,
        totalQtyBasc = 0,
        totalQtyMainsl = 0,
        totalQtySWCAFT = 0,
        custSku = icr.CustSku,
        manualFeedsQty = 0,
        manualFeedsQtyBanc = 0,
        manualFeedsQtyBasc = 0,
        manualFeedsQtyMainsl = 0,
        manualFeedsQtySWCAFT = 0,
        chameleonFeedsQty = 0,
        chameleonFeedsQtyBanc = 0,
        chameleonFeedsQtyBasc = 0,
        chameleonFeedsQtyMainsl = 0,
        chameleonFeedsQtySWCAFT = 0,
        appliedRule = "",
        appliedRuleBanc = "",
        appliedRuleBasc = "",
        appliedRuleMainsl = "",
        appliedRuleSWCAFT = "",
        etc = ""
      }).ToList();

      int index = 0;

      ComparedInvFeedsDTO tmpUsersDTO = new ComparedInvFeedsDTO();
      ComparedInvFeedsDTO tmpChasDTO = new ComparedInvFeedsDTO();

      InvFeedsReportItem tmpDTO = new InvFeedsReportItem();
      List<InvFeedsRepItemLoc> tmpLocs = new List<InvFeedsRepItemLoc>();
      InvFeedsRepItemLoc tmpLoc = new InvFeedsRepItemLoc();
      InvFeedsRepItemDetail invFeedsRepItem = new InvFeedsRepItemDetail();
      InvFeedsItem invFeedsItem = new InvFeedsItem();
      InvFeedsItemLocQty tmpItemLoc = new InvFeedsItemLocQty();
      //NsIcr tmpIcr = new NsIcr();
      MkIcr tmpIcr = new MkIcr();
      while (index < serviceResponse.Count)
      {
        tmpUsersDTO = serviceResponse[index];
        tmpDTO = invFeedsReportItemList.Where(i => i.ItemNoId == tmpUsersDTO.ItemNoId).FirstOrDefault();

        if (tmpDTO != null)
        {
          invFeedsRepItem = await _kc.InvFeedsRepItemDetails
            .Where(i => i.InvFeedsReportItemId == tmpDTO.InvFeedsReportItemId && i.CustomerId == customerId)
            .Include(i => i.InvFeedsRepItemLocs)
            .FirstOrDefaultAsync();

          // Need to modify here!!!
          tmpLocs = invFeedsRepItem.InvFeedsRepItemLocs.ToList();
          if (tmpLocs != null)
          {
            foreach (InvFeedsRepItemLoc tmpRepItemLoc in tmpLocs)
            {
              invFeedsItem = await _kc.InvFeedsItems
                .Where(fi => fi.ItemNoId == tmpUsersDTO.ItemNoId && fi.InvFeedsReportId == invFeedReport.InvFeedsReportId)
                .Include(fi => fi.InvFeedsItemLocQties)
                .FirstOrDefaultAsync();
              if (invFeedsItem != null)
              {
                foreach (InvFeedsItemLocQty tmpItemLocQty in invFeedsItem.InvFeedsItemLocQties)
                {
                  if (tmpItemLocQty.ItemLocId == bancId)
                  {
                    tmpUsersDTO.totalQtyBanc = (int)tmpItemLocQty.QtyAvail;
                    tmpUsersDTO.chameleonFeedsQtyBanc = (invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpRepItemLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0);
                    tmpUsersDTO.appliedRuleBanc = invFeedsAppliedRules.FindLast(r => r.InvFeedsAppliedRuleId == tmpRepItemLoc.InvFeedsAppliedRuleId).Description;
                    if (tmpUsersDTO.chameleonFeedsQtyBanc < 0) tmpUsersDTO.chameleonFeedsQtyBanc = 0;

                    tmpChasDTO = userInvFeeds.FindLast(uf => uf.custSku == tmpUsersDTO.custSku);
                    if (tmpChasDTO != null)
                    {
                      tmpUsersDTO.manualFeedsQtyBanc = tmpChasDTO.manualFeedsQtyBanc;
                      userInvFeeds.Remove(tmpChasDTO);
                    }

                  }
                  else if (tmpItemLocQty.ItemLocId == bascId)
                  {
                    tmpUsersDTO.totalQtyBasc = (int)tmpItemLocQty.QtyAvail;
                    tmpUsersDTO.chameleonFeedsQtyBasc = (invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpRepItemLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0);
                    tmpUsersDTO.appliedRuleBasc = invFeedsAppliedRules.FindLast(r => r.InvFeedsAppliedRuleId == tmpRepItemLoc.InvFeedsAppliedRuleId).Description;
                    if (tmpUsersDTO.chameleonFeedsQtyBasc < 0) tmpUsersDTO.chameleonFeedsQtyBasc = 0;

                    tmpChasDTO = userInvFeeds.FindLast(uf => uf.custSku == tmpUsersDTO.custSku);
                    if (tmpChasDTO != null)
                    {
                      tmpUsersDTO.manualFeedsQtyBasc = tmpChasDTO.manualFeedsQtyBasc;
                      userInvFeeds.Remove(tmpChasDTO);
                    }

                  }
                  else if (tmpItemLocQty.ItemLocId == mainslId)
                  {
                    tmpUsersDTO.totalQtyMainsl = (int)tmpItemLocQty.QtyAvail;
                    tmpUsersDTO.chameleonFeedsQtyMainsl = (invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpRepItemLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0);
                    tmpUsersDTO.appliedRuleMainsl = invFeedsAppliedRules.FindLast(r => r.InvFeedsAppliedRuleId == tmpRepItemLoc.InvFeedsAppliedRuleId).Description;
                    if (tmpUsersDTO.chameleonFeedsQtyMainsl < 0) tmpUsersDTO.chameleonFeedsQtyMainsl = 0;

                    tmpChasDTO = userInvFeeds.FindLast(uf => uf.custSku == tmpUsersDTO.custSku);
                    if (tmpChasDTO != null)
                    {
                      tmpUsersDTO.manualFeedsQtyMainsl = tmpChasDTO.manualFeedsQtyMainsl;
                      userInvFeeds.Remove(tmpChasDTO);
                    }
                  }
                  else if (tmpItemLocQty.ItemLocId == swcaftId)
                  {
                    tmpUsersDTO.totalQtySWCAFT = (int)tmpItemLocQty.QtyAvail;
                    tmpUsersDTO.chameleonFeedsQtySWCAFT = (invFeedsRepItem.DuplicateCounter != 0 ? (int)(tmpRepItemLoc.QtyAvail / invFeedsRepItem.DuplicateCounter) : 0);
                    tmpUsersDTO.appliedRuleSWCAFT = invFeedsAppliedRules.FindLast(r => r.InvFeedsAppliedRuleId == tmpRepItemLoc.InvFeedsAppliedRuleId).Description;
                    if (tmpUsersDTO.chameleonFeedsQtySWCAFT < 0) tmpUsersDTO.chameleonFeedsQtySWCAFT = 0;

                    tmpChasDTO = userInvFeeds.FindLast(uf => uf.custSku == tmpUsersDTO.custSku);
                    if (tmpChasDTO != null)
                    {
                      tmpUsersDTO.manualFeedsQtySWCAFT = tmpChasDTO.manualFeedsQtySWCAFT;
                      userInvFeeds.Remove(tmpChasDTO);
                    }
                  }

                }
              }
            }
          }

        }
        index++;
      }

      if (userInvFeeds.Count > 0)
      {
        while (index < userInvFeeds.Count)
        {
          tmpUsersDTO = userInvFeeds[index];
          /*
          tmpIcr = await _kc.NsIcrs
            .Where(i => i.CustSku == tmpUsersDTO.custSku)
            .Include(i => i.ItemNo)
            .FirstOrDefaultAsync();
          */
          tmpIcr = await _kc.MkIcrs
            .Where(i => i.CustSku == tmpUsersDTO.custSku)
            .Include(i => i.ItemNo)
            .FirstOrDefaultAsync();
          if (tmpIcr != null)
          {
            tmpUsersDTO.ItemNoId = tmpIcr.ItemNoId;
            tmpUsersDTO.Description = tmpIcr.ItemNo.Description;
            tmpUsersDTO.ItemStatus = (tmpIcr.ItemNo.ItemStatus != null ? (itemStatuses.FindLast(i => i.ItemStatusId == tmpIcr.ItemNo.ItemStatusId).StatusItem) : "Not Available");

            invFeedsRepItem = await _kc.InvFeedsRepItemDetails
            .Where(i => i.InvFeedsReportItemId == tmpIcr.ItemNoId && i.CustomerId == customerId)
            .Include(i => i.InvFeedsRepItemLocs)
            .FirstOrDefaultAsync();

            invFeedsItem = await _kc.InvFeedsItems
              .Where(fi => fi.ItemNoId == tmpUsersDTO.ItemNoId && fi.InvFeedsReportId == invFeedReport.InvFeedsReportId)
              .Include(fi => fi.InvFeedsItemLocQties)
              .FirstOrDefaultAsync();
            if (invFeedsItem != null)
            {
              foreach (InvFeedsItemLocQty tmpItemLocQty in invFeedsItem.InvFeedsItemLocQties)
              {
                if (tmpItemLocQty.ItemLocId == bancId)
                {
                  tmpLoc = invFeedsRepItem.InvFeedsRepItemLocs.Where(i => i.LocationId == bancId).FirstOrDefault();
                  tmpUsersDTO.totalQtyBanc = (int)invFeedsItem.InvFeedsItemLocQties.Where(lq => lq.ItemLocId == bancId).FirstOrDefault().QtyAvail;
                  //tmpUsersDTO.appliedRuleBanc = (tmpItemLocQty.QtyAvail != 0 ? invFeedsAppliedRules.FindLast(r => r.RuleNo == tmpLoc.InvFeedsAppliedRuleId).Description : "");
                }
                else if (tmpItemLocQty.ItemLocId == bascId)
                {
                  tmpLoc = invFeedsRepItem.InvFeedsRepItemLocs.Where(i => i.LocationId == bascId).FirstOrDefault();
                  tmpUsersDTO.totalQtyBasc = (int)invFeedsItem.InvFeedsItemLocQties.Where(lq => lq.ItemLocId == bascId).FirstOrDefault().QtyAvail;
                  //tmpUsersDTO.appliedRuleBanc = (tmpItemLocQty.QtyAvail != 0 ? invFeedsAppliedRules.FindLast(r => r.RuleNo == tmpLoc.InvFeedsAppliedRuleId).Description : "");
                }
                else if (tmpItemLocQty.ItemLocId == mainslId)
                {
                  tmpLoc = invFeedsRepItem.InvFeedsRepItemLocs.Where(i => i.LocationId == mainslId).FirstOrDefault();
                  tmpUsersDTO.totalQtyMainsl = (int)invFeedsItem.InvFeedsItemLocQties.Where(lq => lq.ItemLocId == mainslId).FirstOrDefault().QtyAvail;
                  //tmpUsersDTO.appliedRuleMainsl = (tmpItemLocQty.QtyAvail != 0 ? invFeedsAppliedRules.FindLast(r => r.RuleNo == tmpLoc.InvFeedsAppliedRuleId).Description : "");
                }
                else if (tmpItemLocQty.ItemLocId == swcaftId)
                {
                  tmpLoc = invFeedsRepItem.InvFeedsRepItemLocs.Where(i => i.LocationId == swcaftId).FirstOrDefault();
                  tmpUsersDTO.totalQtySWCAFT = (int)invFeedsItem.InvFeedsItemLocQties.Where(lq => lq.ItemLocId == swcaftId).FirstOrDefault().QtyAvail;
                  //tmpUsersDTO.appliedRuleMainsl = (tmpItemLocQty.QtyAvail != 0 ? invFeedsAppliedRules.FindLast(r => r.RuleNo == tmpLoc.InvFeedsAppliedRuleId).Description : "");
                }
              }
            }

            tmpUsersDTO.etc = "Not Feeded";
            serviceResponse.Add(tmpUsersDTO);
          }
          else
          {
            tmpUsersDTO.etc = "No Matched ICR";
            serviceResponse.Add(tmpUsersDTO);
          }
          index++;
        }

      }

      return serviceResponse;
    }

    // Get an inventory SKU item for preview input
    // By Brian Yi on 09/30/2021
    public async Task<InvFeedsStockItemDetailDTO> GetInvFeedsSKUStockRule(long id)
    {
      InvFeedsStockItemDetailDTO serviceResponse = new InvFeedsStockItemDetailDTO();

      int bancLocId = 4, mainslLocId = 25, swcaftId = 54, bascId = 62, prsmCastId = 51, prsmCaltId = 67, zinusTracyId = 57, zinusChsId = 108;//, qtyOnAvMainsl = 0, qtyOnHndMainsl = 0, qtyOnAvBanc = 0, qtyOnHndBanc = 0;
      bool generalRule = true;
      InvFeedsItem invFeedsItem = await _kc.InvFeedsItems
        .Include(x => x.ItemNo)
        .Include(x => x.InvFeedsItemLocQties)
        .FirstOrDefaultAsync(ifi => ifi.InvFeedsItemId == id);
      if (invFeedsItem == null) return serviceResponse;

      // BpmItem bpmItem = await _kc.BpmItems
      //  .Where(i => i.ItemNoId == serviceResponse.ItemNoId)
      //  .FirstOrDefaultAsync();

      serviceResponse = new InvFeedsStockItemDetailDTO()
      {
        InventoryItemId = invFeedsItem.InvFeedsItemId,
        ItemNoId = (int)invFeedsItem.ItemNoId,
        ItemName = invFeedsItem.ItemNo.ItemName,
        QtyAvailBanc = 0,
        QtyOnHandBanc = 0,
        QtyAvailMainsl = 0,
        QtyOnHandMainsl = 0,
        //QtyAvailSwcaft = 0,
        //QtyOnHandSwcaft = 0,
        QtyAvailBasc = 0,
        QtyOnHandBasc = 0,
        QtyAvailPrismCast = 0,
        QtyOnHandPrismCast = 0,
        QtyAvailPrismCalt = 0,
        QtyOnHandPrismCalt = 0,
        QtyAvailZinusTracy = 0,
        QtyOnHandZinusTracy = 0,
        QtyAvailZinusChs = 0,
        QtyOnHandZinusChs = 0,
        StagePOOrigBanc = 0,
        StagePOOrigBasc = 0,
        StagePOOrigMainsl = 0,
        //StagePOOrigSwcaft = 0,
        StagePOOrigPrismCast = 0,
        StagePOOrigPrismCalt = 0,
        StagePOOrigZinusTracy = 0,
        StagePOOrigZinusChs = 0,
        StagePOModBanc = 0,
        StagePOModBasc = 0,
        StagePOModMainsl = 0,
        StagePOModSwcaft = 0,
        StagePOModPrismCast = 0,
        StagePOModPrismCalt = 0,
        StagePOModZinusTracy = 0,
        StagePOModZinusChs = 0,
        StagePOModBanc60 = 0,
        StagePOModBasc60 = 0,
        StagePOModMainsl60 = 0,
        //StagePOModSwcaft60 = 0,
        StagePOModPrismCast60 = 0,
        StagePOModPrismCalt60 = 0,
        StagePOModZinusTracy60 = 0,
        StagePOModZinusChs60 = 0,
        StagePOModBanc90 = 0,
        StagePOModBasc90 = 0,
        StagePOModMainsl90 = 0,
        //StagePOModSwcaft90 = 0,
        StagePOModPrismCast90 = 0,
        StagePOModPrismCalt90 = 0,
        StagePOModZinusTracy90 = 0,
        StagePOModZinusChs90 = 0,
        DoNotFeedFromMainsl = false,
        DoNotFeedFromBanc = false,
        //DoNotFeedFromSwcaft = false,
        DoNotFeedFromBasc = false,
        DoNotFeedFromPrismCast = false,
        DoNotFeedFromPrismCalt = false,
        DoNotFeedFromZinusTracy = false,
        DoNotFeedFromZinusChs = false,
        AmzDoNotFeed = false,
        BPMDoNotFeed = false,
        eBayDoNotFeed = false,
        HouzzDoNotFeed = false,
        MellowDoNotFeed = false,
        OstDoNotFeed = false,
        WlmrtDoNotFeed = false,
        WyfrDoNotFeed = false,
        HomeDepotDoNotFeed = false,
        TargetDoNotFeed = false,
        Remark = "",
        CheckBackOrderLeadTimeMainsl = (invFeedsItem.ItemNo.CheckBackOrderLeadTimeMainSlid != null ? (int)invFeedsItem.ItemNo.CheckBackOrderLeadTimeMainSlid : 2),
        //CheckBackOrderLeadTimeSwcaft = (invFeedsItem.ItemNo.CheckBackOrderLeadTimeSwcaftid != null ? (int)invFeedsItem.ItemNo.CheckBackOrderLeadTimeSwcaftid : 2),
        CheckBackOrderLeadTimeBanc = (invFeedsItem.ItemNo.CheckBackOrderLeadTimeBancid != null ? (int)invFeedsItem.ItemNo.CheckBackOrderLeadTimeBancid : 2),
        CheckBackOrderLeadTimeBasc = (invFeedsItem.ItemNo.CheckBackOrderLeadTimeBascid != null ? (int)invFeedsItem.ItemNo.CheckBackOrderLeadTimeBascid : 2),
        CheckBackOrderLeadTimePrismCastId = (invFeedsItem.ItemNo.CheckBackOrderLeadTimePrsmStcktnId != null ? (int)invFeedsItem.ItemNo.CheckBackOrderLeadTimePrsmStcktnId : 2),
        CheckBackOrderLeadTimePrismCaltId = (invFeedsItem.ItemNo.CheckBackOrderLeadTimePrsmLthrpId != null ? (int)invFeedsItem.ItemNo.CheckBackOrderLeadTimePrsmLthrpId : 2),
        CheckBackOrderLeadTimeZinusTracyId = (invFeedsItem.ItemNo.CheckBackOrderLeadTimeZnsTracyId != null ? (int)invFeedsItem.ItemNo.CheckBackOrderLeadTimeZnsTracyId : 2),
        CheckBackOrderLeadTimeZinusChsId = (invFeedsItem.ItemNo.CheckBackOrderLeadTimeZnsChsId != null ? (int)invFeedsItem.ItemNo.CheckBackOrderLeadTimeZnsChsId : 2)
      };

      List<InvFeedsRemark> invFeedsRemarks = await _kc.InvFeedsRemarks
        .Include(ifr => ifr.InvFeedsRmrkCtgry)
        .Where(ifr => (int)ifr.ItemNoId == serviceResponse.ItemNoId)
        .ToListAsync();

      List<InvFeedsRmrkCtgry> invFeedsRmrkCtgries = await _kc.InvFeedsRmrkCtgries
        .Where(i => i.IsActivated == true)
        .ToListAsync();

      List<InvFeedsRemarkCategory> invFeedsRemarkCategories = invFeedsRmrkCtgries.Select(i =>
      new InvFeedsRemarkCategory()
      {
        categoryId = i.InvFeedsRmrkCtgryId,
        categoryName = i.CategoryName,
        isActivatedOnThisSKU = false
      }).ToList();

      // For "Set" item
      InvFeedsRemarkCategory forSetItem = new InvFeedsRemarkCategory()
      {
        categoryId = -1,
        categoryName = "Set",
        isActivatedOnThisSKU = (bool)invFeedsItem.IsSet
      };
      invFeedsRemarkCategories.Add(forSetItem);
      foreach (InvFeedsRemark tmpDto in invFeedsRemarks)
      {
        InvFeedsRemarkCategory tmpCat = invFeedsRemarkCategories.Find(i => i.categoryId == tmpDto.InvFeedsRmrkCtgryId);
        if (tmpCat != null) { tmpCat.isActivatedOnThisSKU = (bool)tmpDto.IsActivated; }
      }
      serviceResponse.remarkList = invFeedsRemarkCategories; // Done with Remark!

      foreach (InvFeedsItemLocQty ilq in invFeedsItem.InvFeedsItemLocQties)
      {
        if (ilq.ItemLocId == bancLocId) // Get BANC Qty
        {
          serviceResponse.QtyAvailBanc = (int)(ilq.QtyAvail.HasValue ? ilq.QtyAvail : 0);
          serviceResponse.QtyOnHandBanc = (int)(ilq.QtyOnHand.HasValue ? ilq.QtyOnHand : 0);
          serviceResponse.StagePOOrigBanc = (int)(ilq.StagePoqtyOrig.HasValue ? ilq.StagePoqtyOrig : 0);
          serviceResponse.StagePOModBanc = (int)(ilq.StagePoqtyModified.HasValue ? ilq.StagePoqtyModified : 0);
          serviceResponse.StagePOModBanc60 = (int)(ilq.StagePoqty60.HasValue ? ilq.StagePoqty60 : 0);
          serviceResponse.StagePOModBanc90 = (int)(ilq.StagePoqty90.HasValue ? ilq.StagePoqty90 : 0);
        }
        else if (ilq.ItemLocId == mainslLocId) // Get Mainsl Qty
        {
          serviceResponse.QtyAvailMainsl = (int)(ilq.QtyAvail.HasValue ? ilq.QtyAvail : 0);
          serviceResponse.QtyOnHandMainsl = (int)(ilq.QtyOnHand.HasValue ? ilq.QtyOnHand : 0);
          serviceResponse.StagePOOrigMainsl = (int)(ilq.StagePoqtyOrig.HasValue ? ilq.StagePoqtyOrig : 0);
          serviceResponse.StagePOModMainsl = (int)(ilq.StagePoqtyModified.HasValue ? ilq.StagePoqtyModified : 0);
          serviceResponse.StagePOModMainsl60 = (int)(ilq.StagePoqty60.HasValue ? ilq.StagePoqty60 : 0);
          serviceResponse.StagePOModMainsl90 = (int)(ilq.StagePoqty90.HasValue ? ilq.StagePoqty90 : 0);
        }/*
        else if (ilq.ItemLocId == swcaftId) // Get SWCAFT Qty
        {
          serviceResponse.QtyAvailSwcaft = (int)(ilq.QtyAvail.HasValue ? ilq.QtyAvail : 0);
          serviceResponse.QtyOnHandSwcaft = (int)(ilq.QtyOnHand.HasValue ? ilq.QtyOnHand : 0);
          serviceResponse.StagePOOrigSwcaft = (int)(ilq.StagePoqtyOrig.HasValue ? ilq.StagePoqtyOrig : 0);
          serviceResponse.StagePOModSwcaft = (int)(ilq.StagePoqtyModified.HasValue ? ilq.StagePoqtyModified : 0);
          serviceResponse.StagePOModSwcaft60 = (int)(ilq.StagePoqty60.HasValue ? ilq.StagePoqty60 : 0);
          serviceResponse.StagePOModSwcaft90 = (int)(ilq.StagePoqty90.HasValue ? ilq.StagePoqty90 : 0);
        }*/
        else if (ilq.ItemLocId == bascId) // Get BASC Qty
        {
          serviceResponse.QtyAvailBasc = (int)(ilq.QtyAvail.HasValue ? ilq.QtyAvail : 0);
          serviceResponse.QtyOnHandBasc = (int)(ilq.QtyOnHand.HasValue ? ilq.QtyOnHand : 0);
          serviceResponse.StagePOOrigBasc = (int)(ilq.StagePoqtyOrig.HasValue ? ilq.StagePoqtyOrig : 0);
          serviceResponse.StagePOModBasc = (int)(ilq.StagePoqtyModified.HasValue ? ilq.StagePoqtyModified : 0);
          serviceResponse.StagePOModBasc60 = (int)(ilq.StagePoqty60.HasValue ? ilq.StagePoqty60 : 0);
          serviceResponse.StagePOModBasc90 = (int)(ilq.StagePoqty90.HasValue ? ilq.StagePoqty90 : 0);
        }
        else if (ilq.ItemLocId == prsmCastId) // Get Prism CAST Qty
        {
          serviceResponse.QtyAvailPrismCast = (int)(ilq.QtyAvail.HasValue ? ilq.QtyAvail : 0);
          serviceResponse.QtyOnHandPrismCast = (int)(ilq.QtyOnHand.HasValue ? ilq.QtyOnHand : 0);
          serviceResponse.StagePOOrigPrismCast = (int)(ilq.StagePoqtyOrig.HasValue ? ilq.StagePoqtyOrig : 0);
          serviceResponse.StagePOModPrismCast = (int)(ilq.StagePoqtyModified.HasValue ? ilq.StagePoqtyModified : 0);
          serviceResponse.StagePOModPrismCast60 = (int)(ilq.StagePoqty60.HasValue ? ilq.StagePoqty60 : 0);
          serviceResponse.StagePOModPrismCast90 = (int)(ilq.StagePoqty90.HasValue ? ilq.StagePoqty90 : 0);
        }
        else if (ilq.ItemLocId == prsmCaltId) // Get Prism CALT Qty
        {
          serviceResponse.QtyAvailPrismCalt = (int)(ilq.QtyAvail.HasValue ? ilq.QtyAvail : 0);
          serviceResponse.QtyOnHandPrismCalt = (int)(ilq.QtyOnHand.HasValue ? ilq.QtyOnHand : 0);
          serviceResponse.StagePOOrigPrismCalt = (int)(ilq.StagePoqtyOrig.HasValue ? ilq.StagePoqtyOrig : 0);
          serviceResponse.StagePOModPrismCalt = (int)(ilq.StagePoqtyModified.HasValue ? ilq.StagePoqtyModified : 0);
          serviceResponse.StagePOModPrismCalt60 = (int)(ilq.StagePoqty60.HasValue ? ilq.StagePoqty60 : 0);
          serviceResponse.StagePOModPrismCalt90 = (int)(ilq.StagePoqty90.HasValue ? ilq.StagePoqty90 : 0);
        }
        else if (ilq.ItemLocId == zinusTracyId) // Get ZINUS Tracy Qty
        {
          serviceResponse.QtyAvailZinusTracy = (int)(ilq.QtyAvail.HasValue ? ilq.QtyAvail : 0);
          serviceResponse.QtyOnHandZinusTracy = (int)(ilq.QtyOnHand.HasValue ? ilq.QtyOnHand : 0);
          serviceResponse.StagePOOrigZinusTracy = (int)(ilq.StagePoqtyOrig.HasValue ? ilq.StagePoqtyOrig : 0);
          serviceResponse.StagePOModZinusTracy = (int)(ilq.StagePoqtyModified.HasValue ? ilq.StagePoqtyModified : 0);
          serviceResponse.StagePOModZinusTracy60 = (int)(ilq.StagePoqty60.HasValue ? ilq.StagePoqty60 : 0);
          serviceResponse.StagePOModZinusTracy90 = (int)(ilq.StagePoqty90.HasValue ? ilq.StagePoqty90 : 0);
        }
        else if (ilq.ItemLocId == zinusChsId) // Get ZINUS Chs Qty
        {
          serviceResponse.QtyAvailZinusChs = (int)(ilq.QtyAvail.HasValue ? ilq.QtyAvail : 0);
          serviceResponse.QtyOnHandZinusChs = (int)(ilq.QtyOnHand.HasValue ? ilq.QtyOnHand : 0);
          serviceResponse.StagePOOrigZinusChs = (int)(ilq.StagePoqtyOrig.HasValue ? ilq.StagePoqtyOrig : 0);
          serviceResponse.StagePOModZinusChs = (int)(ilq.StagePoqtyModified.HasValue ? ilq.StagePoqtyModified : 0);
          serviceResponse.StagePOModZinusChs60 = (int)(ilq.StagePoqty60.HasValue ? ilq.StagePoqty60 : 0);
          serviceResponse.StagePOModZinusChs90 = (int)(ilq.StagePoqty90.HasValue ? ilq.StagePoqty90 : 0);
        }
      }
      //serviceResponse.remarkList

      InvFeedsRuleSku invFeedsRuleSkus = await _kc.InvFeedsRuleSkus
        .Include(ifrs => ifrs.InvFeedsRuleSkumkts)
        .Where(ifrs => ifrs.ItemNoId == serviceResponse.ItemNoId)
        .FirstOrDefaultAsync();

      if (invFeedsRuleSkus != null)
        if (invFeedsRuleSkus.InvFeedsRuleSkumkts.Count > 0) generalRule = false;

      List<InvFeedsRule> invFeedsRules = await _kc.InvFeedsRules
        .Where(ifr => ifr.IsActivated == true)
        .ToListAsync();
      if (invFeedsRuleSkus != null)
      {
        serviceResponse.DoNotFeedFromMainsl = (invFeedsRuleSkus.DoNotFeedFromMainsl != null ? (bool)invFeedsRuleSkus.DoNotFeedFromMainsl : false);
        serviceResponse.DoNotFeedFromBanc = (invFeedsRuleSkus.DoNotFeedFromBanc != null ? (bool)invFeedsRuleSkus.DoNotFeedFromBanc : false);
        //serviceResponse.DoNotFeedFromSwcaft = (invFeedsRuleSkus.DoNotFeedFromSwcaft != null ? (bool)invFeedsRuleSkus.DoNotFeedFromSwcaft : false); // Need to be fixed
        serviceResponse.DoNotFeedFromBasc = (invFeedsRuleSkus.DoNotFeedFromBasc != null ? (bool)invFeedsRuleSkus.DoNotFeedFromBasc : false); // Need to be fixed
        serviceResponse.DoNotFeedFromPrismCast = (invFeedsRuleSkus.DoNotFeedFromPrismCast != null ? (bool)invFeedsRuleSkus.DoNotFeedFromPrismCast : false);
        serviceResponse.DoNotFeedFromPrismCalt = (invFeedsRuleSkus.DoNotFeedFromPrismCalt != null ? (bool)invFeedsRuleSkus.DoNotFeedFromPrismCalt : false);
        serviceResponse.DoNotFeedFromZinusTracy = (invFeedsRuleSkus.DoNotFeedFromZinusTracy != null ? (bool)invFeedsRuleSkus.DoNotFeedFromZinusTracy : false);
        serviceResponse.DoNotFeedFromZinusChs = (invFeedsRuleSkus.DoNotFeedFromZinusChs != null ? (bool)invFeedsRuleSkus.DoNotFeedFromZinusChs : false);
        foreach (InvFeedsRuleSkumkt tmpSkuRule in invFeedsRuleSkus.InvFeedsRuleSkumkts)
        {
          switch (tmpSkuRule.CustomerId)
          {
            case 5: // Amazon Drop Ship
              serviceResponse.AmzDoNotFeed = (tmpSkuRule.DoNotFeedToHere.HasValue ? (bool)tmpSkuRule.DoNotFeedToHere : false);
              break;
            case 9: // BPM Website
              serviceResponse.BPMDoNotFeed = (tmpSkuRule.DoNotFeedToHere.HasValue ? (bool)tmpSkuRule.DoNotFeedToHere : false);
              break;
            case 12: // eBay
              serviceResponse.eBayDoNotFeed = (tmpSkuRule.DoNotFeedToHere.HasValue ? (bool)tmpSkuRule.DoNotFeedToHere : false);
              break;
            case 14: // Houzz Drop Ship 
              serviceResponse.HouzzDoNotFeed = (tmpSkuRule.DoNotFeedToHere.HasValue ? (bool)tmpSkuRule.DoNotFeedToHere : false);
              break;
            case 18: // Mellow Website
              serviceResponse.MellowDoNotFeed = (tmpSkuRule.DoNotFeedToHere.HasValue ? (bool)tmpSkuRule.DoNotFeedToHere : false);
              break;
            case 21: // Overstock Drop Ship
              serviceResponse.OstDoNotFeed = (tmpSkuRule.DoNotFeedToHere.HasValue ? (bool)tmpSkuRule.DoNotFeedToHere : false);
              break;
            case 26: // Walmart DSV
              serviceResponse.WlmrtDoNotFeed = (tmpSkuRule.DoNotFeedToHere.HasValue ? (bool)tmpSkuRule.DoNotFeedToHere : false);
              break;
            case 29: // Wayfair Drop Ship
              serviceResponse.WyfrDoNotFeed = (tmpSkuRule.DoNotFeedToHere.HasValue ? (bool)tmpSkuRule.DoNotFeedToHere : false);
              break;
            case 40: // Home Depot
              serviceResponse.HomeDepotDoNotFeed = (tmpSkuRule.DoNotFeedToHere.HasValue ? (bool)tmpSkuRule.DoNotFeedToHere : false);
              break;
            case 51: // Target
              serviceResponse.TargetDoNotFeed = (tmpSkuRule.DoNotFeedToHere.HasValue ? (bool)tmpSkuRule.DoNotFeedToHere : false);
              break;
          }
        }
      }
      foreach (InvFeedsRemarkCategory tmpModel in serviceResponse.remarkList)
      {
        if (serviceResponse.Remark == "")
        { serviceResponse.Remark = (tmpModel.isActivatedOnThisSKU == true ? tmpModel.categoryName : ""); }
        else
        { serviceResponse.Remark += (tmpModel.isActivatedOnThisSKU == true ? (", " + tmpModel.categoryName) : ""); }
      }

      //&& serviceResponse.DoNotFeedFromSwcaft == true
      if (serviceResponse.DoNotFeedFromBanc == true && serviceResponse.DoNotFeedFromMainsl == true && serviceResponse.DoNotFeedFromBasc == true
         && serviceResponse.DoNotFeedFromPrismCast == true && serviceResponse.DoNotFeedFromPrismCalt == true && serviceResponse.DoNotFeedFromZinusTracy == true && serviceResponse.DoNotFeedFromZinusChs == true)
      { serviceResponse.DoNotFeedFromAll = true; }

      return serviceResponse;
    }

    // Update details of SKU on warehouses' stock checking screen
    // By Brian Yi on 09/30/2021
    // Updated by Brian Yi on 11/08/2022; 3/13/2024
    public async Task<bool> UpdateInvFeedsSKUStockRule(int empId, InvFeedsStockItemDetailDTO invFeedsStockItemDetailDTO)
    {
      int bancId = 4, mainslId = 25, swcaftId = 54, bascId = 62, prsmCastId = 51, prsmCaltId = 67, zinusTracyId = 57, zinusChsId = 108,
        amazonID = 5, bpmWebID = 9, ebayID = 12, houzzID = 14, mellowWebID = 18, ostID = 21, walmartID = 26, wayfairID = 29, homeDepotID = 40, targetID = 51;

      InvFeedsItem invFeedsItem = await _kc.InvFeedsItems
        .Include(x => x.ItemNo)
        .Include(x => x.InvFeedsItemLocQties)
        .FirstOrDefaultAsync(ifi => ifi.InvFeedsItemId == invFeedsStockItemDetailDTO.InventoryItemId);

      List<MkIcr> mkIcrs = await _kc.MkIcrs
        .ToListAsync();
      /*
      List<NsIcr> nsIcrs = await _kc.NsIcrs
        .ToListAsync();
      */
      //List<BpmItem> bpmItems = await _kc.BpmItems
      //.Include(bi => bi.MkIcrs)
      //.ToListAsync();

      BpmItem bpmItem = await _kc.BpmItems
        .Where(b => b.ItemNoId == invFeedsStockItemDetailDTO.ItemNoId)
        .FirstOrDefaultAsync();

      BpmItem tmpBpmItem = new BpmItem();
      //List<NsIcr> tmpIcrs = new List<NsIcr>();
      //List<NsIcr> tmpCustIcrs = new List<NsIcr>();

      InvFeedsRuleSkumkt invFeedsRuleSkumkt = new InvFeedsRuleSkumkt();
      List<InvFeedsRuleSkumkt> invFeedsRuleSkumkts = new List<InvFeedsRuleSkumkt>();

      if (invFeedsItem == null) return false;
      // Need to update qty on invFeedsItem
      // Need codes here!!!!
      List<InvFeedsItemLocQty> tmpLocQties = new List<InvFeedsItemLocQty>();
      //invFeedsItem.InvFeedsItemLocQties
      InvFeedsItemLocQty tmpLocQty = new InvFeedsItemLocQty();

      BpmItem updateBpmItem = await _kc.BpmItems
        .Where(b => b.ItemNoId == invFeedsStockItemDetailDTO.ItemNoId)
        .FirstOrDefaultAsync();

      updateBpmItem.CheckBackOrderLeadTimeMainSlid = invFeedsStockItemDetailDTO.CheckBackOrderLeadTimeMainsl;
      //updateBpmItem.CheckBackOrderLeadTimeSwcaftid = invFeedsStockItemDetailDTO.CheckBackOrderLeadTimeSwcaft;
      updateBpmItem.CheckBackOrderLeadTimeBancid = invFeedsStockItemDetailDTO.CheckBackOrderLeadTimeBanc;
      updateBpmItem.CheckBackOrderLeadTimeBascid = invFeedsStockItemDetailDTO.CheckBackOrderLeadTimeBasc;
      updateBpmItem.CheckBackOrderLeadTimePrsmStcktnId = invFeedsStockItemDetailDTO.CheckBackOrderLeadTimePrismCastId;
      updateBpmItem.CheckBackOrderLeadTimePrsmLthrpId = invFeedsStockItemDetailDTO.CheckBackOrderLeadTimePrismCaltId;
      updateBpmItem.CheckBackOrderLeadTimeZnsTracyId = invFeedsStockItemDetailDTO.CheckBackOrderLeadTimeZinusTracyId;
      updateBpmItem.CheckBackOrderLeadTimeZnsChsId = invFeedsStockItemDetailDTO.CheckBackOrderLeadTimeZinusChsId;
      updateBpmItem.LastModKoE = empId;
      updateBpmItem.LastModKoT = DateTime.Now;
      await _kc.SaveChangesAsync();

      if (invFeedsItem.InvFeedsItemLocQties.Count > 0)
      {
        // BANC
        tmpLocQty = invFeedsItem.InvFeedsItemLocQties.Where(x => x.ItemLocId == bancId).FirstOrDefault();
        if (tmpLocQty != null)
        {
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailBanc;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandBanc;
          if (updateBpmItem.CheckBackOrderLeadTimeBancid == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModBanc60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBanc60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBanc90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimeBancid == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModBanc90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBanc90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBanc60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModBanc60 >= invFeedsStockItemDetailDTO.StagePOModBanc90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBanc60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBanc90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBanc;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModBanc60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModBanc90;
          _kc.InvFeedsItemLocQties.Update(tmpLocQty);
        }
        else if (tmpLocQty == null && (invFeedsStockItemDetailDTO.QtyAvailBanc > 0 || invFeedsStockItemDetailDTO.StagePOModBanc > 0))
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = bancId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailBanc;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandBanc;
          if (updateBpmItem.CheckBackOrderLeadTimeBancid == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModBanc60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBanc60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBanc90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimeBancid == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModBanc90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBanc90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBanc60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModBanc60 >= invFeedsStockItemDetailDTO.StagePOModBanc90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBanc60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBanc90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBanc;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModBanc60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModBanc90;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }

        // BASC
        tmpLocQty = invFeedsItem.InvFeedsItemLocQties.Where(x => x.ItemLocId == bascId).FirstOrDefault();
        if (tmpLocQty != null)
        {
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailBasc;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandBasc;
          if (updateBpmItem.CheckBackOrderLeadTimeBascid == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModBasc60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBasc60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBasc90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimeBascid == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModBasc90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBasc90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBasc60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModBasc60 >= invFeedsStockItemDetailDTO.StagePOModBasc90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBasc60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBasc90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBasc;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModBasc60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModBasc90;
          _kc.InvFeedsItemLocQties.Update(tmpLocQty);
        }
        else if (tmpLocQty == null && (invFeedsStockItemDetailDTO.QtyAvailBasc > 0 || invFeedsStockItemDetailDTO.StagePOModBasc > 0))
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = bascId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailBasc;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandBasc;
          if (updateBpmItem.CheckBackOrderLeadTimeBascid == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModBasc60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBasc60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBasc90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimeBascid == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModBasc90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBasc90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBasc60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModBasc60 >= invFeedsStockItemDetailDTO.StagePOModBasc90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBasc60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBasc90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBasc;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModBasc60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModBasc90;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }

        // Mainsl
        tmpLocQty = invFeedsItem.InvFeedsItemLocQties.Where(x => x.ItemLocId == mainslId).FirstOrDefault();
        if (tmpLocQty != null)
        {
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailMainsl;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandMainsl;
          if (updateBpmItem.CheckBackOrderLeadTimeMainSlid == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModMainsl60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModMainsl60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModMainsl90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimeMainSlid == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModMainsl90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModMainsl90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModMainsl60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModMainsl60 >= invFeedsStockItemDetailDTO.StagePOModMainsl90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModMainsl60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModMainsl90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModMainsl;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModMainsl60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModMainsl90;
          _kc.InvFeedsItemLocQties.Update(tmpLocQty);
        }
        else if (tmpLocQty == null && (invFeedsStockItemDetailDTO.QtyAvailMainsl > 0 || invFeedsStockItemDetailDTO.StagePOModMainsl > 0))
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = mainslId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailMainsl;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandMainsl;
          if (updateBpmItem.CheckBackOrderLeadTimeMainSlid == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModMainsl60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModMainsl60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModMainsl90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimeMainSlid == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModMainsl90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModMainsl90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModMainsl60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModMainsl60 >= invFeedsStockItemDetailDTO.StagePOModMainsl90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModMainsl60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModMainsl90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModMainsl;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModMainsl60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModMainsl90;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }
        /*
        // Swcaft
        tmpLocQty = invFeedsItem.InvFeedsItemLocQties.Where(x => x.ItemLocId == swcaftId).FirstOrDefault();
        if (tmpLocQty != null)
        {
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailSwcaft;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandSwcaft;
          if (updateBpmItem.CheckBackOrderLeadTimeSwcaftid == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModSwcaft60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimeSwcaftid == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModSwcaft90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModSwcaft60 >= invFeedsStockItemDetailDTO.StagePOModSwcaft90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModSwcaft60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModSwcaft90;
          _kc.InvFeedsItemLocQties.Update(tmpLocQty);
        }
        else if (tmpLocQty == null && (invFeedsStockItemDetailDTO.QtyAvailSwcaft > 0 || invFeedsStockItemDetailDTO.StagePOModSwcaft > 0))
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = swcaftId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailSwcaft;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandSwcaft;
          if (updateBpmItem.CheckBackOrderLeadTimeSwcaftid == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModSwcaft60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimeSwcaftid == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModSwcaft90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModSwcaft60 >= invFeedsStockItemDetailDTO.StagePOModSwcaft90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModSwcaft60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModSwcaft90;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }
        */

        // Prism-CAST
        tmpLocQty = invFeedsItem.InvFeedsItemLocQties.Where(x => x.ItemLocId == prsmCastId).FirstOrDefault();
        if (tmpLocQty != null)
        {
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailPrismCast;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandPrismCast;
          if (updateBpmItem.CheckBackOrderLeadTimePrsmStcktnId == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModPrismCast60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCast60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCast90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimePrsmStcktnId == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModPrismCast90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCast90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCast60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModPrismCast60 >= invFeedsStockItemDetailDTO.StagePOModPrismCast90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCast60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCast90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModPrismCast60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModPrismCast90;
          _kc.InvFeedsItemLocQties.Update(tmpLocQty);
        }
        else if (tmpLocQty == null && (invFeedsStockItemDetailDTO.QtyAvailPrismCast > 0 || invFeedsStockItemDetailDTO.StagePOModPrismCast > 0))
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = prsmCastId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailPrismCast;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandPrismCast;
          if (updateBpmItem.CheckBackOrderLeadTimePrsmStcktnId == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModPrismCast60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCast60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCast90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimePrsmStcktnId == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModPrismCast90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCast90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCast60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModPrismCast60 >= invFeedsStockItemDetailDTO.StagePOModPrismCast90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCast60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCast90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModPrismCast60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModPrismCast90;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }

        // Prism-CALT
        tmpLocQty = invFeedsItem.InvFeedsItemLocQties.Where(x => x.ItemLocId == prsmCaltId).FirstOrDefault();
        if (tmpLocQty != null)
        {
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailPrismCalt;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandPrismCalt;
          if (updateBpmItem.CheckBackOrderLeadTimePrsmLthrpId == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModPrismCalt60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCalt60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCalt90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimePrsmLthrpId == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModPrismCalt90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCalt90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCalt60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModPrismCalt60 >= invFeedsStockItemDetailDTO.StagePOModPrismCalt90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCalt60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCalt90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModPrismCalt60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModPrismCalt90;
          _kc.InvFeedsItemLocQties.Update(tmpLocQty);
        }
        else if (tmpLocQty == null && (invFeedsStockItemDetailDTO.QtyAvailPrismCalt > 0 || invFeedsStockItemDetailDTO.StagePOModPrismCalt > 0))
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = prsmCaltId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailPrismCalt;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandPrismCalt;
          if (updateBpmItem.CheckBackOrderLeadTimePrsmLthrpId == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModPrismCalt60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCalt60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCalt90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimePrsmLthrpId == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModPrismCast90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCalt90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCalt60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModPrismCalt60 >= invFeedsStockItemDetailDTO.StagePOModPrismCalt90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCalt60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCalt90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModPrismCalt60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModPrismCalt90;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }


        // ZINUS-Tracy
        tmpLocQty = invFeedsItem.InvFeedsItemLocQties.Where(x => x.ItemLocId == zinusTracyId).FirstOrDefault();
        if (tmpLocQty != null)
        {
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailZinusTracy;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandZinusTracy;
          if (updateBpmItem.CheckBackOrderLeadTimeZnsTracyId == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModZinusTracy60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusTracy60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusTracy90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimeZnsTracyId == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModZinusTracy90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusTracy90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusTracy60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModZinusTracy60 >= invFeedsStockItemDetailDTO.StagePOModZinusTracy90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusTracy60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusTracy90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModZinusTracy60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModZinusTracy90;
          _kc.InvFeedsItemLocQties.Update(tmpLocQty);
        }
        else if (tmpLocQty == null && (invFeedsStockItemDetailDTO.QtyAvailZinusTracy > 0 || invFeedsStockItemDetailDTO.StagePOModZinusTracy > 0))
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = zinusTracyId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailZinusTracy;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandZinusTracy;
          if (updateBpmItem.CheckBackOrderLeadTimeZnsTracyId == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModZinusTracy60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusTracy60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusTracy90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimeZnsTracyId == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModZinusTracy90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusTracy90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusTracy60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModZinusTracy60 >= invFeedsStockItemDetailDTO.StagePOModZinusTracy90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusTracy60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusTracy90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModZinusTracy60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModZinusTracy90;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }


        // ZINUS-CHS
        tmpLocQty = invFeedsItem.InvFeedsItemLocQties.Where(x => x.ItemLocId == zinusChsId).FirstOrDefault();
        if (tmpLocQty != null)
        {
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailZinusChs;//
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandZinusChs;
          if (updateBpmItem.CheckBackOrderLeadTimeZnsChsId == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModZinusChs60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusChs60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusChs90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimeZnsChsId == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModZinusChs90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusChs90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusChs60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModZinusChs60 >= invFeedsStockItemDetailDTO.StagePOModZinusChs90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusChs60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusChs90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModZinusChs60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModZinusChs90;
          _kc.InvFeedsItemLocQties.Update(tmpLocQty);
        }
        else if (tmpLocQty == null && (invFeedsStockItemDetailDTO.QtyAvailZinusChs > 0 || invFeedsStockItemDetailDTO.StagePOModZinusChs > 0))
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = zinusChsId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailZinusChs;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandZinusChs;
          if (updateBpmItem.CheckBackOrderLeadTimeZnsChsId == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModZinusChs60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusChs60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusChs90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimeZnsChsId == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModZinusChs90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusChs90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusChs60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModZinusChs60 >= invFeedsStockItemDetailDTO.StagePOModZinusChs90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusChs60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusChs90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModZinusChs60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModZinusChs90;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }


        await _kc.SaveChangesAsync();
      }
      else if (invFeedsItem.InvFeedsItemLocQties.Count == 0)
      {

        // Banc
        if (invFeedsStockItemDetailDTO.QtyAvailBanc > 0 || invFeedsStockItemDetailDTO.StagePOModBanc > 0)
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = bancId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailBanc;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandBanc;
          if (updateBpmItem.CheckBackOrderLeadTimeBancid == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModBanc60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBanc60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBanc90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimeBancid == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModBanc90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBanc90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBanc60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModBanc60 >= invFeedsStockItemDetailDTO.StagePOModBanc90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBanc60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBanc90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBanc;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModBanc60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModBanc90;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }

        // Basc
        if (invFeedsStockItemDetailDTO.QtyAvailBasc > 0 || invFeedsStockItemDetailDTO.StagePOModBasc > 0)
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = bascId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailBasc;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandBasc;
          if (updateBpmItem.CheckBackOrderLeadTimeBascid == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModBasc60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBasc60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBasc90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimeBascid == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModBasc90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBasc90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBasc60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModBasc60 >= invFeedsStockItemDetailDTO.StagePOModBasc90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBasc60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBasc90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBasc;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModBasc60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModBasc90;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }

        // Mainsl
        if (invFeedsStockItemDetailDTO.QtyAvailMainsl > 0 || invFeedsStockItemDetailDTO.StagePOModMainsl > 0)
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = mainslId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailMainsl;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandMainsl;
          if (updateBpmItem.CheckBackOrderLeadTimeMainSlid == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModMainsl60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModMainsl60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModMainsl90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimeMainSlid == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModMainsl90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModMainsl90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModMainsl60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModMainsl60 >= invFeedsStockItemDetailDTO.StagePOModMainsl90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModMainsl60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModMainsl90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModMainsl;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModMainsl60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModMainsl90;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }
        /*
        // SWCAFT
        if (invFeedsStockItemDetailDTO.QtyAvailSwcaft > 0 || invFeedsStockItemDetailDTO.StagePOModSwcaft > 0)
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = swcaftId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailSwcaft;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandSwcaft;
          if (updateBpmItem.CheckBackOrderLeadTimeSwcaftid == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModSwcaft60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimeSwcaftid == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModSwcaft90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModSwcaft60 >= invFeedsStockItemDetailDTO.StagePOModSwcaft90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModSwcaft60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModSwcaft90;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }
        */
        // Prism-CAST
        if (invFeedsStockItemDetailDTO.QtyAvailPrismCast > 0 || invFeedsStockItemDetailDTO.StagePOModPrismCast > 0)
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = prsmCastId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailPrismCast;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandPrismCast;
          if (updateBpmItem.CheckBackOrderLeadTimePrsmStcktnId == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModPrismCast60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCast60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCast90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimePrsmStcktnId == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModPrismCast90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCast90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCast60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModPrismCast60 >= invFeedsStockItemDetailDTO.StagePOModPrismCast90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCast60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCast90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModPrismCast60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModPrismCast90;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }

        // Prism-CALT
        if (invFeedsStockItemDetailDTO.QtyAvailPrismCalt > 0 || invFeedsStockItemDetailDTO.StagePOModPrismCalt > 0)
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = prsmCaltId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailPrismCalt;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandPrismCalt;
          if (updateBpmItem.CheckBackOrderLeadTimePrsmLthrpId == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModPrismCalt60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCalt60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCalt90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimePrsmLthrpId == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModPrismCalt90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCalt90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCalt60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModPrismCalt60 >= invFeedsStockItemDetailDTO.StagePOModPrismCalt90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCalt60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModPrismCalt90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModPrismCalt60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModPrismCalt90;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }

        // ZINUS-Tracy
        if (invFeedsStockItemDetailDTO.QtyAvailZinusTracy > 0 || invFeedsStockItemDetailDTO.StagePOModZinusTracy > 0)
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = zinusTracyId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailZinusTracy;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandZinusTracy;
          if (updateBpmItem.CheckBackOrderLeadTimeZnsTracyId == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModZinusTracy60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusTracy60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusTracy90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimeZnsTracyId == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModZinusTracy90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusTracy90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusTracy60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModZinusTracy60 >= invFeedsStockItemDetailDTO.StagePOModZinusTracy90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusTracy60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusTracy90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModZinusTracy60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModZinusTracy90;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }

        // ZINUS-CHS
        if (invFeedsStockItemDetailDTO.QtyAvailZinusChs > 0 || invFeedsStockItemDetailDTO.StagePOModZinusChs > 0)
        {
          tmpLocQty = new InvFeedsItemLocQty();
          tmpLocQty.ItemLocId = zinusChsId;
          tmpLocQty.InvFeedsItemId = invFeedsItem.InvFeedsItemId;
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailZinusChs;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandZinusChs;
          if (updateBpmItem.CheckBackOrderLeadTimeZnsChsId == 2)
          {
            if (invFeedsStockItemDetailDTO.StagePOModZinusChs60 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusChs60; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusChs90; }
          }
          else if (updateBpmItem.CheckBackOrderLeadTimeZnsChsId == 3)
          {
            if (invFeedsStockItemDetailDTO.StagePOModZinusChs90 > 0)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusChs90; }
            else { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusChs60; }
          }
          else
          {
            if (invFeedsStockItemDetailDTO.StagePOModZinusChs60 >= invFeedsStockItemDetailDTO.StagePOModZinusChs90)
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusChs60; }
            else
            { tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModZinusChs90; }
          }
          //tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft;
          tmpLocQty.StagePoqty60 = invFeedsStockItemDetailDTO.StagePOModZinusChs60;
          tmpLocQty.StagePoqty90 = invFeedsStockItemDetailDTO.StagePOModZinusChs90;
          await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
        }


        await _kc.SaveChangesAsync();
      } // End of if update

      /*
      foreach (InvFeedsItemLocQty tmpLocQty in invFeedsItem.InvFeedsItemLocQties)
      {
        if(tmpLocQty.ItemLocId == bancId) 
        {
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailBanc;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandBanc;
          tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBanc;
          tmpLocQties.Add(tmpLocQty);
        }
        if (tmpLocQty.ItemLocId == mainslId)
        {
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailMainsl;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandMainsl;
          tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModMainsl;
          tmpLocQties.Add(tmpLocQty);
        }
        if (tmpLocQty.ItemLocId == swcaftId)
        {
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailSwcaft;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandSwcaft;
          tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModSwcaft;
          tmpLocQties.Add(tmpLocQty);
        }
        if (tmpLocQty.ItemLocId == bascId)
        {
          tmpLocQty.QtyAvail = invFeedsStockItemDetailDTO.QtyAvailBasc;
          tmpLocQty.QtyOnHand = invFeedsStockItemDetailDTO.QtyOnHandBasc;
          tmpLocQty.StagePoqtyModified = invFeedsStockItemDetailDTO.StagePOModBasc;
          tmpLocQties.Add(tmpLocQty);
        }
      }

      if(tmpLocQties != null) { await _kc.BulkUpdateAsync(tmpLocQties); }
      */
      InvFeedsRuleSku invFeedsRuleSkus = await _kc.InvFeedsRuleSkus
        .Include(ifrs => ifrs.InvFeedsRuleSkumkts)
        .Where(ifrs => ifrs.ItemNoId == invFeedsStockItemDetailDTO.ItemNoId)
        .FirstOrDefaultAsync();
      // Need InvFeedsRuleSkumkt
      if (invFeedsRuleSkus == null)
      {
        invFeedsRuleSkus = new InvFeedsRuleSku()
        {
          ItemNoId = invFeedsStockItemDetailDTO.ItemNoId,
          DoNotFeedFromBanc = invFeedsStockItemDetailDTO.DoNotFeedFromBanc,
          DoNotFeedFromMainsl = invFeedsStockItemDetailDTO.DoNotFeedFromMainsl,
          DoNotFeedFromBasc = invFeedsStockItemDetailDTO.DoNotFeedFromBasc,
          //DoNotFeedFromSwcaft = invFeedsStockItemDetailDTO.DoNotFeedFromSwcaft,
          DoNotFeedFromPrismCast = invFeedsStockItemDetailDTO.DoNotFeedFromPrismCast,
          DoNotFeedFromPrismCalt = invFeedsStockItemDetailDTO.DoNotFeedFromPrismCalt,
          DoNotFeedFromZinusTracy = invFeedsStockItemDetailDTO.DoNotFeedFromZinusTracy,
          DoNotFeedFromZinusChs = invFeedsStockItemDetailDTO.DoNotFeedFromZinusChs,
          LastModifiedBy = empId,
          LastModifiedDate = DateTime.Now
        };
        await _kc.InvFeedsRuleSkus.AddAsync(invFeedsRuleSkus);
        await _kc.SaveChangesAsync();
        // Need to finish InvFeedsRuleSkumkt
        // Use NsICR for each market's feedable status <- bad idea
        /*
        tmpBpmItem = bpmItems.FindLast(bi => bi.ItemNoId == invFeedsStockItemDetailDTO.ItemNoId);
        tmpIcrs = await _kc.NsIcrs.Where(ni => ni.ItemNoId == tmpBpmItem.ItemNoId).ToListAsync();
        foreach(NsIcr tmpDto in tmpIcrs)
        {
          if(tmpDto.CustomerId == amazonID) 
          {
            
          }
          if(tmpDto.CustomerId == ostID) { }
          if(tmpDto.CustomerId == walmartID) { }
          if(tmpDto.CustomerId == wayfairID) { }
          if(tmpDto.CustomerId == ebayID) { }
          if(tmpDto.CustomerId == bpmWebID) { }
          if(tmpDto.CustomerId == mellowWebID) { }
          if(tmpDto.CustomerId == houzzID) { }
        }*/
        // Start from Amazon

        if (invFeedsStockItemDetailDTO.AmzDoNotFeed == true)
        {
          invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
          {
            InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
            CustomerId = amazonID,
            DoNotFeedToHere = true,
            CustomFixedPercentage = -1,
            CustomRuleForRatioZeroOut = false,
            CustomZeroOutAt = -1
          };
          invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
        }
        // Overstock
        if (invFeedsStockItemDetailDTO.OstDoNotFeed)
        {
          invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
          {
            InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
            CustomerId = ostID,
            DoNotFeedToHere = true,
            CustomFixedPercentage = -1,
            CustomRuleForRatioZeroOut = false,
            CustomZeroOutAt = -1
          };
          invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
        }
        // Walmart
        if (invFeedsStockItemDetailDTO.WlmrtDoNotFeed)
        {
          invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
          {
            InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
            CustomerId = walmartID,
            DoNotFeedToHere = true,
            CustomFixedPercentage = -1,
            CustomRuleForRatioZeroOut = false,
            CustomZeroOutAt = -1
          };
          invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
        }
        // Wayfair
        if (invFeedsStockItemDetailDTO.WyfrDoNotFeed)
        {
          invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
          {
            InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
            CustomerId = wayfairID,
            DoNotFeedToHere = true,
            CustomFixedPercentage = -1,
            CustomRuleForRatioZeroOut = false,
            CustomZeroOutAt = -1
          };
          invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
        }
        // eBay
        if (invFeedsStockItemDetailDTO.eBayDoNotFeed)
        {
          invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
          {
            InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
            CustomerId = ebayID,
            DoNotFeedToHere = true,
            CustomFixedPercentage = -1,
            CustomRuleForRatioZeroOut = false,
            CustomZeroOutAt = -1
          };
          invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
        }
        // BPM Web
        if (invFeedsStockItemDetailDTO.BPMDoNotFeed)
        {
          invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
          {
            InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
            CustomerId = bpmWebID,
            DoNotFeedToHere = true,
            CustomFixedPercentage = -1,
            CustomRuleForRatioZeroOut = false,
            CustomZeroOutAt = -1
          };
          invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
        }
        // Mellow Web
        if (invFeedsStockItemDetailDTO.MellowDoNotFeed)
        {
          invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
          {
            InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
            CustomerId = mellowWebID,
            DoNotFeedToHere = true,
            CustomFixedPercentage = -1,
            CustomRuleForRatioZeroOut = false,
            CustomZeroOutAt = -1
          };
          invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
        }
        // House
        if (invFeedsStockItemDetailDTO.HouzzDoNotFeed)
        {
          invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
          {
            InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
            CustomerId = houzzID,
            DoNotFeedToHere = true,
            CustomFixedPercentage = -1,
            CustomRuleForRatioZeroOut = false,
            CustomZeroOutAt = -1
          };
          invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
        }
        // Home Depot
        if (invFeedsStockItemDetailDTO.HomeDepotDoNotFeed)
        {
          invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
          {
            InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
            CustomerId = homeDepotID,
            DoNotFeedToHere = true,
            CustomFixedPercentage = -1,
            CustomRuleForRatioZeroOut = false,
            CustomZeroOutAt = -1
          };
          invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
        }
        // Target
        if (invFeedsStockItemDetailDTO.TargetDoNotFeed)
        {
          invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
          {
            InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
            CustomerId = targetID,
            DoNotFeedToHere = true,
            CustomFixedPercentage = -1,
            CustomRuleForRatioZeroOut = false,
            CustomZeroOutAt = -1
          };
          invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
        }

        await _kc.BulkInsertAsync(invFeedsRuleSkumkts);
      }// End of no record
      else
      {
        invFeedsRuleSkus.DoNotFeedFromBanc = invFeedsStockItemDetailDTO.DoNotFeedFromBanc;
        invFeedsRuleSkus.DoNotFeedFromMainsl = invFeedsStockItemDetailDTO.DoNotFeedFromMainsl;
        invFeedsRuleSkus.DoNotFeedFromBasc = invFeedsStockItemDetailDTO.DoNotFeedFromBasc;
        //invFeedsRuleSkus.DoNotFeedFromSwcaft = invFeedsStockItemDetailDTO.DoNotFeedFromSwcaft;
        invFeedsRuleSkus.DoNotFeedFromPrismCast = invFeedsStockItemDetailDTO.DoNotFeedFromPrismCast;
        invFeedsRuleSkus.DoNotFeedFromPrismCalt = invFeedsStockItemDetailDTO.DoNotFeedFromPrismCalt;
        invFeedsRuleSkus.DoNotFeedFromZinusTracy = invFeedsStockItemDetailDTO.DoNotFeedFromZinusTracy;
        invFeedsRuleSkus.DoNotFeedFromZinusChs = invFeedsStockItemDetailDTO.DoNotFeedFromZinusChs;
        invFeedsRuleSkus.LastModifiedBy = empId;
        invFeedsRuleSkus.LastModifiedDate = DateTime.Now;
        _kc.InvFeedsRuleSkus.Update(invFeedsRuleSkus);
        await _kc.SaveChangesAsync();
        // Need to finish InvFeedsRuleSkumkt
        // Use NsICR for each market's feedable status
        if (invFeedsRuleSkus.InvFeedsRuleSkumkts != null)
        {
          // For Amazon
          if (invFeedsStockItemDetailDTO.AmzDoNotFeed == true)
          {
            invFeedsRuleSkumkt = invFeedsRuleSkus.InvFeedsRuleSkumkts.FirstOrDefault(rs => rs.CustomerId == amazonID);
            if (invFeedsRuleSkumkt != null)
            {
              invFeedsRuleSkumkt.DoNotFeedToHere = true;
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
            else
            {
              invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
              {
                InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
                CustomerId = amazonID,
                DoNotFeedToHere = true,
                CustomFixedPercentage = -1,
                CustomRuleForRatioZeroOut = false,
                CustomZeroOutAt = -1
              };
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
          }
          else
          {
            invFeedsRuleSkumkt = invFeedsRuleSkus.InvFeedsRuleSkumkts.FirstOrDefault(rs => rs.CustomerId == amazonID);
            if (invFeedsRuleSkumkt != null)
            {
              invFeedsRuleSkumkt.DoNotFeedToHere = false;
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
          }
          // For Overstock
          if (invFeedsStockItemDetailDTO.OstDoNotFeed == true)
          {
            invFeedsRuleSkumkt = invFeedsRuleSkus.InvFeedsRuleSkumkts.FirstOrDefault(rs => rs.CustomerId == ostID);
            if (invFeedsRuleSkumkt != null)
            {
              invFeedsRuleSkumkt.DoNotFeedToHere = true;
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
            else
            {
              invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
              {
                InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
                CustomerId = ostID,
                DoNotFeedToHere = true,
                CustomFixedPercentage = -1,
                CustomRuleForRatioZeroOut = false,
                CustomZeroOutAt = -1
              };
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
          }
          else
          {
            invFeedsRuleSkumkt = invFeedsRuleSkus.InvFeedsRuleSkumkts.FirstOrDefault(rs => rs.CustomerId == ostID);
            if (invFeedsRuleSkumkt != null)
            {
              invFeedsRuleSkumkt.DoNotFeedToHere = false;
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
          }
          // For Walmart
          if (invFeedsStockItemDetailDTO.WlmrtDoNotFeed == true)
          {
            invFeedsRuleSkumkt = invFeedsRuleSkus.InvFeedsRuleSkumkts.FirstOrDefault(rs => rs.CustomerId == walmartID);
            if (invFeedsRuleSkumkt != null)
            {
              invFeedsRuleSkumkt.DoNotFeedToHere = true;
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
            else
            {
              invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
              {
                InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
                CustomerId = walmartID,
                DoNotFeedToHere = true,
                CustomFixedPercentage = -1,
                CustomRuleForRatioZeroOut = false,
                CustomZeroOutAt = -1
              };
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
          }
          else
          {
            invFeedsRuleSkumkt = invFeedsRuleSkus.InvFeedsRuleSkumkts.FirstOrDefault(rs => rs.CustomerId == walmartID);
            if (invFeedsRuleSkumkt != null)
            {
              invFeedsRuleSkumkt.DoNotFeedToHere = false;
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
          }
          // For Wayfair
          if (invFeedsStockItemDetailDTO.WyfrDoNotFeed == true)
          {
            invFeedsRuleSkumkt = invFeedsRuleSkus.InvFeedsRuleSkumkts.FirstOrDefault(rs => rs.CustomerId == wayfairID);
            if (invFeedsRuleSkumkt != null)
            {
              invFeedsRuleSkumkt.DoNotFeedToHere = true;
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
            else
            {
              invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
              {
                InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
                CustomerId = wayfairID,
                DoNotFeedToHere = true,
                CustomFixedPercentage = -1,
                CustomRuleForRatioZeroOut = false,
                CustomZeroOutAt = -1
              };
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
          }
          else
          {
            invFeedsRuleSkumkt = invFeedsRuleSkus.InvFeedsRuleSkumkts.FirstOrDefault(rs => rs.CustomerId == wayfairID);
            if (invFeedsRuleSkumkt != null)
            {
              invFeedsRuleSkumkt.DoNotFeedToHere = false;
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
          }
          // For eBay
          if (invFeedsStockItemDetailDTO.eBayDoNotFeed == true)
          {
            invFeedsRuleSkumkt = invFeedsRuleSkus.InvFeedsRuleSkumkts.FirstOrDefault(rs => rs.CustomerId == ebayID);
            if (invFeedsRuleSkumkt != null)
            {
              invFeedsRuleSkumkt.DoNotFeedToHere = true;
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
            else
            {
              invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
              {
                InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
                CustomerId = ebayID,
                DoNotFeedToHere = true,
                CustomFixedPercentage = -1,
                CustomRuleForRatioZeroOut = false,
                CustomZeroOutAt = -1
              };
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
          }
          else
          {
            invFeedsRuleSkumkt = invFeedsRuleSkus.InvFeedsRuleSkumkts.FirstOrDefault(rs => rs.CustomerId == ebayID);
            if (invFeedsRuleSkumkt != null)
            {
              invFeedsRuleSkumkt.DoNotFeedToHere = false;
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
          }
          // For BPM
          if (invFeedsStockItemDetailDTO.BPMDoNotFeed == true)
          {
            invFeedsRuleSkumkt = invFeedsRuleSkus.InvFeedsRuleSkumkts.FirstOrDefault(rs => rs.CustomerId == bpmWebID);
            if (invFeedsRuleSkumkt != null)
            {
              invFeedsRuleSkumkt.DoNotFeedToHere = true;
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
            else
            {
              invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
              {
                InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
                CustomerId = bpmWebID,
                DoNotFeedToHere = true,
                CustomFixedPercentage = -1,
                CustomRuleForRatioZeroOut = false,
                CustomZeroOutAt = -1
              };
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
          }
          else
          {
            invFeedsRuleSkumkt = invFeedsRuleSkus.InvFeedsRuleSkumkts.FirstOrDefault(rs => rs.CustomerId == bpmWebID);
            if (invFeedsRuleSkumkt != null)
            {
              invFeedsRuleSkumkt.DoNotFeedToHere = false;
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
          }
          // For Mellow
          if (invFeedsStockItemDetailDTO.MellowDoNotFeed == true)
          {
            invFeedsRuleSkumkt = invFeedsRuleSkus.InvFeedsRuleSkumkts.FirstOrDefault(rs => rs.CustomerId == mellowWebID);
            if (invFeedsRuleSkumkt != null)
            {
              invFeedsRuleSkumkt.DoNotFeedToHere = true;
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
            else
            {
              invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
              {
                InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
                CustomerId = mellowWebID,
                DoNotFeedToHere = true,
                CustomFixedPercentage = -1,
                CustomRuleForRatioZeroOut = false,
                CustomZeroOutAt = -1
              };
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
          }
          else
          {
            invFeedsRuleSkumkt = invFeedsRuleSkus.InvFeedsRuleSkumkts.FirstOrDefault(rs => rs.CustomerId == mellowWebID);
            if (invFeedsRuleSkumkt != null)
            {
              invFeedsRuleSkumkt.DoNotFeedToHere = false;
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
          }
          // For Houzz
          if (invFeedsStockItemDetailDTO.HouzzDoNotFeed == true)
          {
            invFeedsRuleSkumkt = invFeedsRuleSkus.InvFeedsRuleSkumkts.FirstOrDefault(rs => rs.CustomerId == houzzID);
            if (invFeedsRuleSkumkt != null)
            {
              invFeedsRuleSkumkt.DoNotFeedToHere = true;
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
            else
            {
              invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
              {
                InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
                CustomerId = houzzID,
                DoNotFeedToHere = true,
                CustomFixedPercentage = -1,
                CustomRuleForRatioZeroOut = false,
                CustomZeroOutAt = -1
              };
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
          }
          else
          {
            invFeedsRuleSkumkt = invFeedsRuleSkus.InvFeedsRuleSkumkts.FirstOrDefault(rs => rs.CustomerId == houzzID);
            if (invFeedsRuleSkumkt != null)
            {
              invFeedsRuleSkumkt.DoNotFeedToHere = false;
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
          }
          // For Home Depot
          if (invFeedsStockItemDetailDTO.HomeDepotDoNotFeed == true)
          {
            invFeedsRuleSkumkt = invFeedsRuleSkus.InvFeedsRuleSkumkts.FirstOrDefault(rs => rs.CustomerId == homeDepotID);
            if (invFeedsRuleSkumkt != null)
            {
              invFeedsRuleSkumkt.DoNotFeedToHere = true;
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
            else
            {
              invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
              {
                InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
                CustomerId = homeDepotID,
                DoNotFeedToHere = true,
                CustomFixedPercentage = -1,
                CustomRuleForRatioZeroOut = false,
                CustomZeroOutAt = -1
              };
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
          }
          else
          {
            invFeedsRuleSkumkt = invFeedsRuleSkus.InvFeedsRuleSkumkts.FirstOrDefault(rs => rs.CustomerId == homeDepotID);
            if (invFeedsRuleSkumkt != null)
            {
              invFeedsRuleSkumkt.DoNotFeedToHere = false;
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
          }
          // For Target
          if (invFeedsStockItemDetailDTO.TargetDoNotFeed == true)
          {
            invFeedsRuleSkumkt = invFeedsRuleSkus.InvFeedsRuleSkumkts.FirstOrDefault(rs => rs.CustomerId == targetID);
            if (invFeedsRuleSkumkt != null)
            {
              invFeedsRuleSkumkt.DoNotFeedToHere = true;
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
            else
            {
              invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
              {
                InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
                CustomerId = targetID,
                DoNotFeedToHere = true,
                CustomFixedPercentage = -1,
                CustomRuleForRatioZeroOut = false,
                CustomZeroOutAt = -1
              };
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
          }
          else
          {
            invFeedsRuleSkumkt = invFeedsRuleSkus.InvFeedsRuleSkumkts.FirstOrDefault(rs => rs.CustomerId == targetID);
            if (invFeedsRuleSkumkt != null)
            {
              invFeedsRuleSkumkt.DoNotFeedToHere = false;
              invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
            }
          }

          await _kc.BulkInsertOrUpdateAsync(invFeedsRuleSkumkts);

        }
        else
        {
          // Amazon
          if (invFeedsStockItemDetailDTO.AmzDoNotFeed == true)
          {
            invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
            {
              InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
              CustomerId = amazonID,
              DoNotFeedToHere = true,
              CustomFixedPercentage = -1,
              CustomRuleForRatioZeroOut = false,
              CustomZeroOutAt = -1
            };
            invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
          }
          // Overstock
          if (invFeedsStockItemDetailDTO.OstDoNotFeed)
          {
            invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
            {
              InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
              CustomerId = ostID,
              DoNotFeedToHere = true,
              CustomFixedPercentage = -1,
              CustomRuleForRatioZeroOut = false,
              CustomZeroOutAt = -1
            };
            invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
          }
          // Walmart
          if (invFeedsStockItemDetailDTO.WlmrtDoNotFeed)
          {
            invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
            {
              InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
              CustomerId = walmartID,
              DoNotFeedToHere = true,
              CustomFixedPercentage = -1,
              CustomRuleForRatioZeroOut = false,
              CustomZeroOutAt = -1
            };
            invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
          }
          // Wayfair
          if (invFeedsStockItemDetailDTO.WyfrDoNotFeed)
          {
            invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
            {
              InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
              CustomerId = wayfairID,
              DoNotFeedToHere = true,
              CustomFixedPercentage = -1,
              CustomRuleForRatioZeroOut = false,
              CustomZeroOutAt = -1
            };
            invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
          }
          // eBay
          if (invFeedsStockItemDetailDTO.eBayDoNotFeed)
          {
            invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
            {
              InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
              CustomerId = ebayID,
              DoNotFeedToHere = true,
              CustomFixedPercentage = -1,
              CustomRuleForRatioZeroOut = false,
              CustomZeroOutAt = -1
            };
            invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
          }
          // BPM Web
          if (invFeedsStockItemDetailDTO.BPMDoNotFeed)
          {
            invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
            {
              InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
              CustomerId = bpmWebID,
              DoNotFeedToHere = true,
              CustomFixedPercentage = -1,
              CustomRuleForRatioZeroOut = false,
              CustomZeroOutAt = -1
            };
            invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
          }
          // Mellow Web
          if (invFeedsStockItemDetailDTO.MellowDoNotFeed)
          {
            invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
            {
              InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
              CustomerId = mellowWebID,
              DoNotFeedToHere = true,
              CustomFixedPercentage = -1,
              CustomRuleForRatioZeroOut = false,
              CustomZeroOutAt = -1
            };
            invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
          }
          // House
          if (invFeedsStockItemDetailDTO.HouzzDoNotFeed)
          {
            invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
            {
              InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
              CustomerId = houzzID,
              DoNotFeedToHere = true,
              CustomFixedPercentage = -1,
              CustomRuleForRatioZeroOut = false,
              CustomZeroOutAt = -1
            };
            invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
          }

          // Home Depot
          if (invFeedsStockItemDetailDTO.HomeDepotDoNotFeed)
          {
            invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
            {
              InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
              CustomerId = homeDepotID,
              DoNotFeedToHere = true,
              CustomFixedPercentage = -1,
              CustomRuleForRatioZeroOut = false,
              CustomZeroOutAt = -1
            };
            invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
          }
          // Target
          if (invFeedsStockItemDetailDTO.TargetDoNotFeed)
          {
            invFeedsRuleSkumkt = new InvFeedsRuleSkumkt()
            {
              InvFeedsRuleSkuid = invFeedsRuleSkus.InvFeedsRuleSkuid,
              CustomerId = targetID,
              DoNotFeedToHere = true,
              CustomFixedPercentage = -1,
              CustomRuleForRatioZeroOut = false,
              CustomZeroOutAt = -1
            };
            invFeedsRuleSkumkts.Add(invFeedsRuleSkumkt);
          }
          await _kc.BulkInsertAsync(invFeedsRuleSkumkts);
        }
      }// End of adding and updating rules

      return true;
    }

    // Restored from compiled file
    // New Inventory Feeds with Pareto rule(80/20)
    // USE THIS
    // By Brian Yi on ??/??/2022; Modified by Brian Yi on 03/07/2023; Modified by Brian Yi on 03/28/2024 for removing Smart Warehousing
    public async Task<List<GetInventoryFeedsItemDTO>> GetNewInvFeeds(DateTime startDate, DateTime endDate, DateTime today)
    {
      //int bancId = 4;
      int mainslId = 25;
      //int swcaftId = 54;
      //int bascId = 62;
      //int prsmCastId = 51;
      //int prsmCaltId = 67;
      int zinusTracyId = 57;
      int zinusChsId = 108;
      int amazonID = 5;
      int bpmWebID = 9;
      int ebayID = 12;
      int houzzID = 14;
      int mellowWebID = 18;
      int ostID = 21;
      int walmartID = 26;
      int wayfairID = 29;
      int homedepotId = 40;
      int targetId = 51;
      int walmartTopSellers = 25;
      int wfsId = 102;
      /*
      List<TplInvRptT> tplInvRpts = await _kc.TplInvRptTs
        .Where(i => i.LocationId == wfsId)
        .OrderByDescending(i => i.TplInvRptTId)
        .ToListAsync();
      */
      TplInvRptT wfsInvReport = await _kc.TplInvRptTs
        .Where(i => i.LocationId == wfsId)
        .OrderByDescending(i => i.TplInvRptTId)
        .Include(i => i.TplInvRptDs)
        .FirstOrDefaultAsync();

      List<TplInvRptD> wfsInvRepDetails = wfsInvReport.TplInvRptDs.ToList();

      // Walmart Top Sellers; Default was 25
      InventoryConfig inventoryConfig = await _kc.InventoryConfigs
        .Where((InventoryConfig i) => i.InventoryConfigId == 1)
        .FirstOrDefaultAsync();

      int smallMarketsCnt = await _kc.InvFeedsRules
        .Where(c => c.CustomerId != amazonID && c.CustomerId != walmartID && c.CustomerId != wayfairID && c.CustomerId != ostID)
        .Where(c => c.IsActivated == true)
        .CountAsync();

      List<ItemTrkCoO> itemTrkCoOs = await _kc.ItemTrkCoOs
        .ToListAsync();

      // Added for Zero Out SKUs on 9/26/2023
      List<InvFeedsDailyZeroOutSku> invFeedsDailyZeroOuts = await _kc.InvFeedsDailyZeroOutSkus
        .Where(z => z.ZeroOutDate.Value.Date == DateTime.Now.Date)
        .ToListAsync();

      ItemTrkCoO tmpCoo = new ItemTrkCoO();
      walmartTopSellers = (int)inventoryConfig.WalmartTopSellers;

      List<int> cgIds = new List<int>
        {
            5, 6, 8, 9, 10, 11, 12, 13, 14, 15,
            16, 17, 18, 20, 41, 59, 60
        };
      List<int> bpmIds = new List<int> { 4, 25, 222, 224 };
      List<GetInventoryFeedsItemDTO> serviceResponse = new List<GetInventoryFeedsItemDTO>();

      // For COO Slave SKUs
      GetInventoryFeedsItemDTO cooInvFeedsItem = new GetInventoryFeedsItemDTO();
      List<GetInventoryFeedsItemDTO> cooInvFeedsItems = new List<GetInventoryFeedsItemDTO>();
      // _ = today;
      DateTime beforeDate = new DateTime(today.AddDays(-1.0).Year, today.AddDays(-1.0).Month, today.AddDays(-1.0).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(today.AddDays(1.0).Year, today.AddDays(1.0).Month, today.AddDays(1.0).Day, 0, 0, 0);
      InvFeedsReport invFeedReport = await (from x in _kc.InvFeedsReports
                                            .Where((InvFeedsReport ifr) => (DateTime)ifr.CreatedDate > beforeDate && (DateTime)ifr.CreatedDate < afterDate)
                                            .Include((InvFeedsReport x) => x.InvFeedsItems)
                                            .Include(x => x.InvFeedsReportItems)
                                            orderby x.CreatedDate descending
                                            select x).FirstOrDefaultAsync();

      // No Inventory Report: Get Inventory Updates from NetSuite
      if (invFeedReport == null)
      {
        return serviceResponse;
      }
      List<InvFeedsItemLocQty> tmpFeedsItemLocQties;

      //int tmpQtyAvailBanc = 0;
      //int tmpQtyOnHandBanc = 0;
      int tmpQtyAvailMainsl = 0;
      int tmpQtyOnHandMainsl = 0;
      //int tmpQtyAvailSwcaft = 0;
      //int tmpQtyOnHandSwcaft = 0;
      //int tmpQtyAvailBasc = 0;
      //int tmpQtyOnHandBasc = 0;
      //int tmpQtyAvailPrismCast = 0;
      //int tmpQtyOnHandPrismCast = 0;
      //int tmpQtyAvailPrismCalt = 0;
      //int tmpQtyOnHandPrismCalt = 0;
      int tmpQtyAvailZinusTracy = 0;
      int tmpQtyOnHandZinusTracy = 0;
      int tmpQtyAvailZinusChs = 0;
      int tmpQtyOnHandZinusChs = 0;
      int countArray = 0;
      InvFeedsRepItemLoc tmpItemLoc = new InvFeedsRepItemLoc();
      BpmItem tmpItem = new BpmItem();
      GetInventoryFeedsItemDTO newItem = new GetInventoryFeedsItemDTO();
      // Here is for testing
      //if ((today.Day != DateTime.Now.Day || today.Year != DateTime.Now.Year || today.Month != DateTime.Now.Month) && invFeedReport.IsApproved == true)
      if (((today.Day != DateTime.Now.Day || today.Year != DateTime.Now.Year || today.Month != DateTime.Now.Month) && invFeedReport.IsApproved == true)
        || ((today.Day == DateTime.Now.Day || today.Year == DateTime.Now.Year || today.Month == DateTime.Now.Month) && invFeedReport.InvFeedsReportItems.Count != 0))
      {
        List<InvFeedsRepTableDetail> invFeedsRepTableDetails = await _kc.InvFeedsRepTableDetails
          .Where(i => i.InvFeedsReportId == invFeedReport.InvFeedsReportId)
          .ToListAsync();

        if (invFeedsRepTableDetails.Any() == true)
        {
          //try {
          //tmpCoo = itemTrkCoOs.Where(c => c.ItemNoId == invFeedsRepTableDetails.itemno) // Need to start from here on 3/6/2024
          serviceResponse = invFeedsRepTableDetails.Select(i =>
          new GetInventoryFeedsItemDTO()
          {
            ItemNoId = (int)i.ItemNoId,
            ItemStatus = "",
            ItemName = i.ItemName,
            //AppliedFeedingRuleNoBanc = 0,
            //AppliedFeedingRuleTypeBanc = "",
            AppliedFeedingRuleNoMainsl = 0,
            AppliedFeedingRuleTypeMainsl = "",
            //AppliedFeedingRuleNoSWCAFT = 0,
            //AppliedFeedingRuleTypeSWCAFT = "",
            //AppliedFeedingRuleNoPrismCast = 0,
            //AppliedFeedingRuleTypePrismCast = "",
            //AppliedFeedingRuleNoPrismCalt = 0,
            //AppliedFeedingRuleTypePrismCalt = "",
            AppliedFeedingRuleNoZinusTracy = 0,
            AppliedFeedingRuleTypeZinusTracy = "",
            AppliedFeedingRuleNoZinusChs = 0,
            AppliedFeedingRuleTypeZinusChs = "",
            //QtyAvailBanc = (int)i.QtyAvailBanc,
            QtyAvailMainsl = (int)i.QtyAvailMainSl,
            //QtyAvailSWCAFT = (int)i.QtyAvailSwcaft,
            //QtyAvailBasc = (int)i.QtyAvailBasc,
            //QtyAvailPrismCast = (i.QtyAvailPrismCast.HasValue ? (int)i.QtyAvailPrismCast : 0),
            //QtyAvailPrismCalt = (i.QtyAvailPrismCalt.HasValue ? (int)i.QtyAvailPrismCalt : 0),
            QtyAvailZinusTracy = (i.QtyAvailZinusTracy.HasValue ? (int)i.QtyAvailZinusTracy : 0),
            QtyAvailZinusChs = (i.QtyAvailZinusChs.HasValue ? (int)i.QtyAvailZinusChs : 0),
            //QtyAvailActualBanc = (int)i.QtyAvailBanc,
            QtyAvailActualMainsl = (int)i.QtyAvailMainSl,
            // QtyAvailActualSWCAFT = (int)i.QtyAvailSwcaft,
            //QtyAvailActualBasc = (int)i.QtyAvailBasc,
            //QtyAvailActualPrismCast = (i.QtyAvailPrismCast.HasValue ? (int)i.QtyAvailPrismCast : 0),
            //QtyAvailActualPrismCalt = (i.QtyAvailPrismCalt.HasValue ? (int)i.QtyAvailPrismCalt : 0),
            QtyAvailActualZinusTracy = (i.QtyAvailZinusTracy.HasValue ? (int)i.QtyAvailZinusTracy : 0),
            QtyAvailActualZinusChs = (i.QtyAvailZinusChs.HasValue ? (int)i.QtyAvailZinusChs : 0),
            QtyAvailCGInv = (int)i.QtyAvailCastleGate,
            //QtyOnHandBanc = 0,
            QtyOnHandMainsl = 0,
            //QtyOnHandSWCAFT = 0,
            //QtyOnHandBasc = 0,
            //QtyOnHandPrismCast = 0,
            //QtyOnHandPrismCalt = 0,
            QtyOnHandZinusTracy = 0,
            QtyOnHandZinusChs = 0,
            //BancFeedable = true,
            MainslFeedable = true,
            //SWCAFTFeedable = false,
            //BascFeedable = true,
            //PrismCastFeedable = true,
            //PrismCaltFeedable = true,
            ZinusTracyFeedable = true,
            ZinusChsFeedable = true,
            AmazonCustSKU = "",
            //AmazonQtyBanc = (int)i.AmazonQtyBanc,
            AmazonQtyMainsl = (int)i.AmazonQtyMainSl,
            //AmazonQtySWCAFT = (int)i.AmazonQtySwcaft,
            //AmazonQtyBasc = (int)i.AmazonQtyBasc,
            //AmazonQtyPrismCast = (i.AmazonQtyPrismCast.HasValue ? (int)i.AmazonQtyPrismCast : 0),
            //AmazonQtyPrismCalt = (i.AmazonQtyPrismCalt.HasValue ? (int)i.AmazonQtyPrismCalt : 0),
            AmazonQtyZinusTracy = (i.AmazonQtyZinusTracy.HasValue ? (int)i.AmazonQtyZinusTracy : 0),
            AmazonQtyZinusChs = (i.AmazonQtyZinusChs.HasValue ? (int)i.AmazonQtyZinusChs : 0),
            AmazonPercentage = 0,
            //AmazonBancPercentage = 0,
            AmazonMainslPercentage = 0,
            //AmazonSWCAFTPercentage = 0,
            //AmazonBascPercentage = 0,
            //AmazonPrismCastPercentage = 0,
            //AmazonPrismCaltPercentage = 0,
            AmazonZinusTracyPercentage = 0,
            AmazonZinusChsPercentage = 0,
            AmazonFeedable = false,
            AmazonDupCount = 0,
            WayfairCustSKU = "",
            //WayfairQtyBanc = (int)i.WayfairQtyBanc,
            WayfairQtyMainsl = (int)i.WayfairQtyMainSl,
            //WayfairQtySWCAFT = (int)i.WayfairQtySwcaft,
            //WayfairQtyBasc = (int)i.WayfairQtyBasc,
            //WayfairQtyPrismCast = (i.WayfairQtyPrismCast.HasValue ? (int)i.WayfairQtyPrismCast : 0),
            //WayfairQtyPrismCalt = (i.WayfairQtyPrismCalt.HasValue ? (int)i.WayfairQtyPrismCalt : 0),
            WayfairQtyZinusTracy = (i.WayfairQtyZinusTracy.HasValue ? (int)i.WayfairQtyZinusTracy : 0),
            WayfairQtyZinusChs = (i.WayfairQtyZinusChs.HasValue ? (int)i.WayfairQtyZinusChs : 0),
            WayfairPercentage = 0,
            //WayfairBancPercentage = 0,
            WayfairMainslPercentage = 0,
            //WayfairSWCAFTPercentage = 0,
            //WayfairBascPercentage = 0,
            //WayfairPrismCastPercentage = 0,
            //WayfairPrismCaltPercentage = 0,
            WayfairZinusTracyPercentage = 0,
            WayfairZinusChsPercentage = 0,
            WayfairFeedable = false,
            WayfairDupCount = 0,
            WalmartCustSKU = "",
            //WalmartQtyBanc = (int)i.WalmartQtyBanc,
            WalmartQtyMainsl = (int)i.WalmartQtyMainSl,
            //WalmartQtySWCAFT = (int)i.WalmartQtySwcaft,
            //WalmartQtyBasc = (int)i.WalmartQtyBasc,
            //WalmartQtyPrismCast = (i.WalmartQtyPrismCast.HasValue ? (int)i.WalmartQtyPrismCast : 0),
            //WalmartQtyPrismCalt = (i.WalmartQtyPrismCalt.HasValue ? (int)i.WalmartQtyPrismCalt : 0),
            WalmartQtyZinusTracy = (i.WalmartQtyZinusTracy.HasValue ? (int)i.WalmartQtyZinusTracy : 0),
            WalmartQtyZinusChs = (i.WalmartQtyZinusChs.HasValue ? (int)i.WalmartQtyZinusChs : 0),
            WalmartPercentage = 0,
            //WalmartBancPercentage = 0,
            WalmartMainslPercentage = 0,
            //WalmartSWCAFTPercentage = 0,
            //WalmartBascPercentage = 0,
            //WalmartPrismCastPercentage = 0,
            //WalmartPrismCaltPercentage = 0,
            WalmartZinusTracyPercentage = 0,
            WalmartZinusChsPercentage = 0,
            WalmartFeedable = false,
            WalmartDupCount = 1,
            OverstockCustSKU = "",
            //OverstockQtyBanc = (int)i.OverstockQtyBanc,
            OverstockQtyMainsl = (int)i.OverstockQtyMainSl,
            //OverstockQtySWCAFT = (int)i.OverstockQtySwcaft,
            //OverstockQtyBasc = (int)i.OverstockQtyBasc,
            //OverstockQtyPrismCast = (i.OverstockQtyPrismCast.HasValue ? (int)i.OverstockQtyPrismCast : 0),
            //OverstockQtyPrismCalt = (i.OverstockQtyPrismCalt.HasValue ? (int)i.OverstockQtyPrismCalt : 0),
            OverstockQtyZinusTracy = (i.OverstockQtyZinusTracy.HasValue ? (int)i.OverstockQtyZinusTracy : 0),
            OverstockQtyZinusChs = (i.OverstockQtyZinusChs.HasValue ? (int)i.OverstockQtyZinusChs : 0),
            OverstockPercentage = 0,
            //OverstockBancPercentage = 0,
            OverstockMainslPercentage = 0,
            //OverstockSWCAFTPercentage = 0,
            //OverstockBascPercentage = 0,
            //OverstockPrismCastPercentage = 0,
            //OverstockPrismCaltPercentage = 0,
            OverstockZinusTracyPercentage = 0,
            OverstockZinusChsPercentage = 0,
            OverstockFeedable = false,
            OverstockDupCount = 0,
            eBayCustSKU = "",
            //eBayQtyBanc = (int)i.EBayQtyBanc,
            eBayQtyMainsl = (int)i.EBayQtyMainSl,
            //eBayQtySWCAFT = (int)i.EBayQtySwcaft,
            //eBayQtyBasc = (int)i.EBayQtyBasc,
            //eBayQtyPrismCast = (i.EBayQtyPrismCast.HasValue ? (int)i.EBayQtyPrismCast : 0),
            //eBayQtyPrismCalt = (i.EBayQtyPrismCalt.HasValue ? (int)i.EBayQtyPrismCalt : 0),
            eBayQtyZinusTracy = (i.EBayQtyZinusTracy.HasValue ? (int)i.EBayQtyZinusTracy : 0),
            eBayQtyZinusChs = (i.EBayQtyZinusChs.HasValue ? (int)i.EBayQtyZinusChs : 0),
            eBayPercentage = 0,
            //eBayBancPercentage = 0,
            eBayMainslPercentage = 0,
            //eBaySWCAFTPercentage = 0,
            //eBayBascPercentage = 0,
            //eBayPrismCastPercentage = 0,
            //eBayPrismCaltPercentage = 0,
            eBayZinusTracyPercentage = 0,
            eBayZinusChsPercentage = 0,
            eBayFeedable = false,
            eBayDupCount = 0,
            BPMWebCustSKU = "",
            //BPMWebQtyBanc = (int)i.BpmWebQtyBanc,
            BPMWebQtyMainsl = (int)i.BpmWebQtyMainSl,
            //BPMWebQtySWCAFT = (int)i.BpmWebQtySwcaft,
            //BPMWebQtyBasc = (int)i.BpmWebQtyBasc,
            //BPMWebQtyPrismCast = (i.BpmWebQtyPrismCast.HasValue ? (int)i.BpmWebQtyPrismCast : 0),
            //BPMWebQtyPrismCalt = (i.BpmWebQtyPrismCalt.HasValue ? (int)i.BpmWebQtyPrismCalt : 0),
            BPMWebQtyZinusTracy = (i.BpmWebQtyZinusTracy.HasValue ? (int)i.BpmWebQtyZinusTracy : 0),
            BPMWebQtyZinusChs = (i.BpmWebQtyZinusChs.HasValue ? (int)i.BpmWebQtyZinusChs : 0),
            BPMWebPercentage = 0,
            //BPMWebBancPercentage = 0,
            BPMWebMainslPercentage = 0,
            //BPMWebSWCAFTPercentage = 0,
            //BPMWebBascPercentage = 0,
            //BPMWebPrismCastPercentage = 0,
            //BPMWebPrismCaltPercentage = 0,
            BPMWebZinusTracyPercentage = 0,
            BPMWebZinusChsPercentage = 0,
            BPMFeedable = false,
            BPMDupCount = 0,
            MellowWebCustSKU = "",
            //MellowWebQtyBanc = (int)i.MellowWebQtyBanc,
            MellowWebQtyMainsl = (int)i.MellowWebQtyMainSl,
            //MellowWebQtySWCAFT = (int)i.MellowWebQtySwcaft,
            //MellowWebQtyBasc = (int)i.MellowWebQtyBasc,
            //MellowWebQtyPrismCast = (i.MellowWebQtyPrismCast.HasValue ? (int)i.MellowWebQtyPrismCast : 0),
            //MellowWebQtyPrismCalt = (i.MellowWebQtyPrismCalt.HasValue ? (int)i.MellowWebQtyPrismCalt : 0),
            MellowWebQtyZinusTracy = (i.MellowWebQtyZinusTracy.HasValue ? (int)i.MellowWebQtyZinusTracy : 0),
            MellowWebQtyZinusChs = (i.MellowWebQtyZinusChs.HasValue ? (int)i.MellowWebQtyZinusChs : 0),
            MellowWebPercentage = 0,
            //MellowWebBancPercentage = 0,
            MellowWebMainslPercentage = 0,
            //MellowWebSWCAFTPercentage = 0,
            //MellowWebPrismCastPercentage = 0,
            //MellowWebPrismCaltPercentage = 0,
            MellowWebZinusTracyPercentage = 0,
            MellowWebZinusChsPercentage = 0,
            //MellowWebBascPercentage = 0,
            MellowFeedable = false,
            MellowDupCount = 0,
            TargetCustSKU = "",
            //TargetQtyBanc = (int)i.TargetQtyBanc,
            TargetQtyMainsl = (int)i.TargetQtyMainSl,
            //TargetQtySWCAFT = (int)i.TargetQtySwcaft,
            //TargetQtyBasc = (int)i.TargetQtyBasc,
            //TargetQtyPrismCast = (i.TargetQtyPrismCast.HasValue ? (int)i.TargetQtyPrismCast : 0),
            //TargetQtyPrismCalt = (i.TargetQtyPrismCalt.HasValue ? (int)i.TargetQtyPrismCalt : 0),
            TargetQtyZinusTracy = (i.TargetQtyZinusTracy.HasValue ? (int)i.TargetQtyZinusTracy : 0),
            TargetQtyZinusChs = (i.TargetQtyZinusChs.HasValue ? (int)i.TargetQtyZinusChs : 0),
            TargetPercentage = 0,
            //TargetBancPercentage = 0,
            TargetMainslPercentage = 0,
            //TargetSWCAFTPercentage = 0,
            //TargetBascPercentage = 0,
            //TargetPrismCastPercentage = 0,
            //TargetPrismCaltPercentage = 0,
            TargetZinusTracyPercentage = 0,
            TargetZinusChsPercentage = 0,
            TargetFeedable = false,
            TargetDupCount = 0,
            HouzzCustSKU = "",
            //HouzzQtyBanc = (int)i.HouzzQtyBanc,
            HouzzQtyMainsl = (int)i.HouzzQtyMainSl,
            //HouzzQtySWCAFT = (int)i.HouzzQtySwcaft,
            //HouzzQtyBasc = (int)i.HouzzQtyBasc,
            HouzzPercentage = 0,
            HouzzBancPercentage = 0,
            HouzzMainslPercentage = 0,
            //HouzzSWCAFTPercentage = 0,
            HouzzBascPercentage = 0,
            HouzzFeedable = false,
            HouzzDupCount = 0,
            HomeDepotCustSKU = "",
            HomeDepotQtyBanc = 0,//(int)i.HomeDepotQtyBanc,
            HomeDepotQtyMainsl = (int)i.HomeDepotQtyMainSl,
            //HomeDepotQtySWCAFT = (int)i.HomeDepotQtySwcaft,
            HomeDepotQtyBasc = 0, //(int)i.HomeDepotQtyBasc,
            //HomeDepotQtyPrismCast = (i.HomeDepotQtyPrismCast.HasValue ? (int)i.HomeDepotQtyPrismCast : 0),
            //HomeDepotQtyPrismCalt = (i.HomeDepotQtyPrismCalt.HasValue ? (int)i.HomeDepotQtyPrismCalt : 0),
            HomeDepotQtyZinusTracy = (i.HomeDepotQtyZinusTracy.HasValue ? (int)i.HomeDepotQtyZinusTracy : 0),
            HomeDepotQtyZinusChs = (i.HomeDepotQtyZinusChs.HasValue ? (int)i.HomeDepotQtyZinusChs : 0),
            HomeDepotPercentage = 0,
            HomeDepotBancPercentage = 0,
            HomeDepotMainslPercentage = 0,
            //HomeDepotSWCAFTPercentage = 0,
            HomeDepotBascPercentage = 0,
            HomeDepotPrismCastPercentage = 0,
            HomeDepotPrismCaltPercentage = 0,
            HomeDepotZinusTracyPercentage = 0,
            HomeDepotZinusChsPercentage = 0,
            HomeDepotFeedable = false,
            HomeDepotDupCount = 0,
            etcMarketQty = 0,
            etcMarketPercentage = 0,
            //totalStagePOQtyBanc = (int)i.TotalStagePoqtyBanc,
            totalStagePOQtyMainsl = (int)i.TotalStagePoqtyMainSl,
            //totalStagePOQtyBasc = (int)i.TotalStagePoqtyBasc,
            //totalStagePOQtySWCAFT = (int)i.TotalStagePoqtySwcaft,
            //totalStagePOQtyPrismCast = (i.TotalStagePoqtyPrismCast.HasValue ? (int)i.TotalStagePoqtyPrismCast : 0),
            //totalStagePOQtyPrismCalt = (i.TotalStagePoqtyPrismCalt.HasValue ? (int)i.TotalStagePoqtyPrismCalt : 0),
            totalStagePOQtyZinusTracy = (i.TotalStagePoqtyZinusTracy.HasValue ? (int)i.TotalStagePoqtyZinusTracy : 0),
            totalStagePOQtyZinusChs = (i.TotalStagePoqtyZinusChs.HasValue ? (int)i.TotalStagePoqtyZinusChs : 0),
            //leftOverQtyBanc = 0,
            leftOverQtyMainsl = 0,
            //leftOverQtySWCAFT = 0,
            //leftOverQtyBasc = 0,
            //leftOverQtyPrismCast = 0,
            //leftOverQtyPrismCalt = 0,
            leftOverQtyZinusTracy = 0,
            leftOverQtyZinusChs = 0,
            isCooMasterSku = (((itemTrkCoOs.Where(tc => tc.CoItemNoId == (int)i.ItemNoId).FirstOrDefault()) != null) ? false : true),
            HasMkIcrNotCooMaster = (((itemTrkCoOs.Where(tc => tc.CoItemNoId == (int)i.ItemNoId).FirstOrDefault()) != null) ? true : false),
            //cooMasterSkuId = (((itemTrkCoOs.Where(tc => tc.CoItemNoId == (int)i.ItemNoId).FirstOrDefault()) != null) ?
            //itemTrkCoOs.Where(tc => tc.CoItemNoId == (int)i.ItemNoId).FirstOrDefault().ItemNoId : 0),
            countParetoA = 0,
            countParetoB = 0,
            countParetoC = 0,
            paretoAqty = 0,
            paretoBqty = 0,
            AmazonRule = false,
            eBayRule = false,
            WayfairRule = false,
            WalmartRule = false,
            OverstockRule = false,
            BPMRule = false,
            MellowRule = false,
            HomeDepotRule = false,
            TargetRule = false


          }).ToList();
          // }
          // catch (Exception ex)
          // {
          // Console.WriteLine(ex.Message);
          // }
          return serviceResponse;
        }

        List<InvFeedsReportItem> loadRepItems = await _kc.InvFeedsReportItems
          .Where((InvFeedsReportItem lri) => lri.InvFeedsReportId == (long?)invFeedReport.InvFeedsReportId)
          .Include((InvFeedsReportItem lri) => lri.ItemNo)
          .Include((InvFeedsReportItem lri) => lri.InvFeedsRepItemDetails)
          .ToListAsync();

        List<InvFeedsItem> loadFeedsItems = await _kc.InvFeedsItems
          .Where((InvFeedsItem lfi) => lfi.InvFeedsReportId == (long?)invFeedReport.InvFeedsReportId)
          .Include((InvFeedsItem lfi) => lfi.InvFeedsItemLocQties)
          .ToListAsync();
        foreach (InvFeedsReportItem tmpDto in loadRepItems)
        {
          //tmpQtyAvailBanc = 0;
          //tmpQtyOnHandBanc = 0;
          tmpQtyAvailMainsl = 0;
          tmpQtyOnHandMainsl = 0;
          //tmpQtyAvailSwcaft = 0;
          //tmpQtyOnHandSwcaft = 0;
          //tmpQtyAvailBasc = 0;
          //tmpQtyOnHandBasc = 0;
          //tmpQtyAvailPrismCast = 0;
          //tmpQtyOnHandPrismCast = 0;
          //tmpQtyAvailPrismCalt = 0;
          //tmpQtyOnHandPrismCalt = 0;
          tmpQtyAvailZinusTracy = 0;
          tmpQtyOnHandZinusTracy = 0;
          tmpQtyAvailZinusChs = 0;
          tmpQtyOnHandZinusChs = 0;
          tmpFeedsItemLocQties = new List<InvFeedsItemLocQty>();
          tmpItem = await _kc.BpmItems
            .Where((BpmItem bi) => (int?)bi.ItemNoId == tmpDto.ItemNoId)
            .Include((BpmItem bi) => bi.ItemStatus)
            .FirstOrDefaultAsync();

          countArray = loadFeedsItems.FindAll(x => x.ItemNoId == tmpDto.ItemNoId).Count;

          if (countArray == 0)
          {
            tmpFeedsItemLocQties = null;
          }
          else
          {
            tmpFeedsItemLocQties = loadFeedsItems.FindLast((InvFeedsItem x) => x.ItemNoId == tmpDto.ItemNoId).InvFeedsItemLocQties.ToList();
          }
          // 06/21/2024
          if (tmpFeedsItemLocQties != null)
          {
            foreach (InvFeedsItemLocQty tmpLoc in tmpFeedsItemLocQties)
            {
              /*if (tmpLoc.ItemLocId == bancId)
              {
                tmpQtyAvailBanc = tmpLoc.QtyAvail.Value;
                tmpQtyOnHandBanc = (tmpLoc.QtyOnHand.HasValue ? tmpLoc.QtyOnHand.Value : 0);
              }
              else*/
              if (tmpLoc.ItemLocId == mainslId)
              {
                tmpQtyAvailMainsl = tmpLoc.QtyAvail.Value;
                tmpQtyOnHandMainsl = (tmpLoc.QtyOnHand.HasValue ? tmpLoc.QtyOnHand.Value : 0);
              }/*
              else if (tmpLoc.ItemLocId == swcaftId)
              {
                tmpQtyAvailSwcaft = tmpLoc.QtyAvail.Value;
                tmpQtyOnHandSwcaft = (tmpLoc.QtyOnHand.HasValue ? tmpLoc.QtyOnHand.Value : 0);
              }*/
              /*else if (tmpLoc.ItemLocId == bascId)
              {
                tmpQtyAvailBasc = tmpLoc.QtyAvail.Value;
                tmpQtyOnHandBasc = (tmpLoc.QtyOnHand.HasValue ? tmpLoc.QtyOnHand.Value : 0);
              }*//*
              else if (tmpLoc.ItemLocId == prsmCastId)
              {
                tmpQtyAvailPrismCast = tmpLoc.QtyAvail.Value;
                tmpQtyOnHandPrismCast = (tmpLoc.QtyOnHand.HasValue ? tmpLoc.QtyOnHand.Value : 0);
              }
              else if (tmpLoc.ItemLocId == prsmCaltId)
              {
                tmpQtyAvailPrismCalt = tmpLoc.QtyAvail.Value;
                tmpQtyOnHandPrismCalt = (tmpLoc.QtyOnHand.HasValue ? tmpLoc.QtyOnHand.Value : 0);
              }*/
              else if (tmpLoc.ItemLocId == zinusTracyId)
              {
                tmpQtyAvailZinusTracy = tmpLoc.QtyAvail.Value;
                tmpQtyOnHandZinusTracy = (tmpLoc.QtyOnHand.HasValue ? tmpLoc.QtyOnHand.Value : 0);
              }
              else if (tmpLoc.ItemLocId == zinusChsId)
              {
                tmpQtyAvailZinusChs = tmpLoc.QtyAvail.Value;
                tmpQtyOnHandZinusChs = (tmpLoc.QtyOnHand.HasValue ? tmpLoc.QtyOnHand.Value : 0);
              }
            }
          }
          newItem = new GetInventoryFeedsItemDTO
          {
            ItemNoId = tmpDto.ItemNoId.Value,
            ItemStatus = tmpItem.ItemStatus.StatusItem,
            ItemName = tmpDto.ItemNo.ItemName,
            //AppliedFeedingRuleNoBanc = 0,
            //AppliedFeedingRuleTypeBanc = "",
            AppliedFeedingRuleNoMainsl = 0,
            AppliedFeedingRuleTypeMainsl = "",
            //AppliedFeedingRuleNoSWCAFT = 0,
            //AppliedFeedingRuleTypeSWCAFT = "",
            //AppliedFeedingRuleNoPrismCast = 0,
            //AppliedFeedingRuleTypePrismCast = "",
            //AppliedFeedingRuleNoPrismCalt = 0,
            //AppliedFeedingRuleTypePrismCalt = "",
            AppliedFeedingRuleNoZinusTracy = 0,
            AppliedFeedingRuleTypeZinusTracy = "",
            AppliedFeedingRuleNoZinusChs = 0,
            AppliedFeedingRuleTypeZinusChs = "",
            //QtyAvailBanc = tmpQtyAvailBanc,
            QtyAvailMainsl = tmpQtyAvailMainsl,
            //QtyAvailSWCAFT = tmpQtyAvailSwcaft,
            //QtyAvailBasc = tmpQtyAvailBasc,
            //QtyAvailPrismCast = tmpQtyAvailPrismCast,
            //QtyAvailPrismCalt = tmpQtyAvailPrismCalt,
            QtyAvailZinusTracy = tmpQtyAvailZinusTracy,
            QtyAvailZinusChs = tmpQtyAvailZinusChs,
            //QtyAvailActualBanc = tmpQtyAvailBanc,
            QtyAvailActualMainsl = tmpQtyAvailMainsl,
            //QtyAvailActualSWCAFT = tmpQtyAvailSwcaft,
            //QtyAvailActualBasc = tmpQtyAvailBasc,
            //QtyAvailActualPrismCast = tmpQtyAvailPrismCast,
            //QtyAvailActualPrismCalt = tmpQtyAvailPrismCalt,
            QtyAvailActualZinusTracy = tmpQtyAvailZinusTracy,
            QtyAvailActualZinusChs = tmpQtyAvailZinusChs,
            //QtyOnHandBanc = tmpQtyOnHandBanc,
            QtyOnHandMainsl = tmpQtyOnHandMainsl,
            //QtyOnHandSWCAFT = tmpQtyOnHandSwcaft,
            //QtyOnHandBasc = tmpQtyOnHandBasc,
            //QtyOnHandPrismCast = tmpQtyOnHandPrismCast,
            //QtyOnHandPrismCalt = tmpQtyOnHandPrismCalt,
            QtyOnHandZinusTracy = tmpQtyOnHandZinusTracy,
            QtyOnHandZinusChs = tmpQtyOnHandZinusChs,
            BancFeedable = false,
            MainslFeedable = true,
            //SWCAFTFeedable = true,
            BascFeedable = false,
            PrismCastFeedable = false,
            PrismCaltFeedable = false,
            ZinusTracyFeedable = true,
            ZinusChsFeedable = true,
            AmazonCustSKU = "",
            //AmazonQtyBanc = 0,
            AmazonQtyMainsl = 0,
            //AmazonQtySWCAFT = 0,
            //AmazonQtyBasc = 0,
            //AmazonQtyPrismCast = 0,
            //AmazonQtyPrismCalt = 0,
            AmazonQtyZinusTracy = 0,
            AmazonQtyZinusChs = 0,
            AmazonPercentage = 0,
            //AmazonBancPercentage = 0,
            AmazonMainslPercentage = 0,
            //AmazonSWCAFTPercentage = 0,
            //AmazonBascPercentage = 0,
            //AmazonPrismCastPercentage = 0,
            //AmazonPrismCaltPercentage = 0,
            AmazonZinusTracyPercentage = 0,
            AmazonZinusChsPercentage = 0,
            AmazonFeedable = false,
            AmazonDupCount = 0,
            WayfairCustSKU = "",
            //WayfairQtyBanc = 0,
            WayfairQtyMainsl = 0,
            //WayfairQtySWCAFT = 0,
            //WayfairQtyBasc = 0,
            //WayfairQtyPrismCast = 0,
            //WayfairQtyPrismCalt = 0,
            WayfairQtyZinusTracy = 0,
            WayfairQtyZinusChs = 0,
            WayfairPercentage = 0,
            //WayfairBancPercentage = 0,
            WayfairMainslPercentage = 0,
            //WayfairSWCAFTPercentage = 0,
            WayfairBascPercentage = 0,
            //WayfairPrismCastPercentage = 0,
            //WayfairPrismCaltPercentage = 0,
            WayfairZinusTracyPercentage = 0,
            WayfairZinusChsPercentage = 0,
            WayfairFeedable = false,
            WayfairDupCount = 0,
            WalmartCustSKU = "",
            //WalmartQtyBanc = 0,
            WalmartQtyMainsl = 0,
            //WalmartQtySWCAFT = 0,
            //WalmartQtyBasc = 0,
            //WalmartQtyPrismCast = 0,
            //WalmartQtyPrismCalt = 0,
            WalmartQtyZinusTracy = 0,
            WalmartQtyZinusChs = 0,
            WalmartPercentage = 0,
            //WalmartBancPercentage = 0,
            WalmartMainslPercentage = 0,
            //WalmartSWCAFTPercentage = 0,
            //WalmartBascPercentage = 0,
            //WalmartPrismCastPercentage = 0,
            //WalmartPrismCaltPercentage = 0,
            WalmartZinusTracyPercentage = 0,
            WalmartZinusChsPercentage = 0,
            WalmartFeedable = false,
            WalmartDupCount = 1,
            OverstockCustSKU = "",
            //OverstockQtyBanc = 0,
            OverstockQtyMainsl = 0,
            //OverstockQtySWCAFT = 0,
            //OverstockQtyBasc = 0,
            //OverstockQtyPrismCast = 0,
            //OverstockQtyPrismCalt = 0,
            OverstockQtyZinusTracy = 0,
            OverstockQtyZinusChs = 0,
            OverstockPercentage = 0,
            //OverstockBancPercentage = 0,
            OverstockMainslPercentage = 0,
            //OverstockSWCAFTPercentage = 0,
            //OverstockBascPercentage = 0,
            //OverstockPrismCastPercentage = 0,
            //OverstockPrismCaltPercentage = 0,
            OverstockZinusTracyPercentage = 0,
            OverstockZinusChsPercentage = 0,
            OverstockFeedable = false,
            OverstockDupCount = 0,
            eBayCustSKU = "",
            //eBayQtyBanc = 0,
            eBayQtyMainsl = 0,
            //eBayQtySWCAFT = 0,
            //eBayQtyBasc = 0,
            //eBayQtyPrismCast = 0,
            //eBayQtyPrismCalt = 0,
            eBayQtyZinusTracy = 0,
            eBayQtyZinusChs = 0,
            eBayPercentage = 0,
            //eBayBancPercentage = 0,
            eBayMainslPercentage = 0,
            //eBaySWCAFTPercentage = 0,
            //eBayBascPercentage = 0,
            //eBayPrismCastPercentage = 0,
            //eBayPrismCaltPercentage = 0,
            eBayZinusTracyPercentage = 0,
            eBayZinusChsPercentage = 0,
            eBayFeedable = false,
            eBayDupCount = 0,
            BPMWebCustSKU = "",
            //BPMWebQtyBanc = 0,
            BPMWebQtyMainsl = 0,
            //BPMWebQtySWCAFT = 0,
            //BPMWebQtyBasc = 0,
            //BPMWebQtyPrismCast = 0,
            //BPMWebQtyPrismCalt = 0,
            BPMWebQtyZinusTracy = 0,
            BPMWebQtyZinusChs = 0,
            BPMWebPercentage = 0,
            //BPMWebBancPercentage = 0,
            BPMWebMainslPercentage = 0,
            //BPMWebSWCAFTPercentage = 0,
            //BPMWebBascPercentage = 0,
            //BPMWebPrismCastPercentage = 0,
            //BPMWebPrismCaltPercentage = 0,
            BPMWebZinusTracyPercentage = 0,
            BPMWebZinusChsPercentage = 0,
            BPMFeedable = false,
            BPMDupCount = 0,
            MellowWebCustSKU = "",
            //MellowWebQtyBanc = 0,
            MellowWebQtyMainsl = 0,
            //MellowWebQtySWCAFT = 0,
            //MellowWebQtyBasc = 0,
            //MellowWebQtyPrismCast = 0,
            //MellowWebQtyPrismCalt = 0,
            MellowWebQtyZinusTracy = 0,
            MellowWebQtyZinusChs = 0,
            MellowWebPercentage = 0,
            //MellowWebBancPercentage = 0,
            MellowWebMainslPercentage = 0,
            //MellowWebSWCAFTPercentage = 0,
            //MellowWebBascPercentage = 0,
            //MellowWebPrismCastPercentage = 0,
            //MellowWebPrismCaltPercentage = 0,
            MellowWebZinusTracyPercentage = 0,
            MellowWebZinusChsPercentage = 0,
            MellowFeedable = false,
            MellowDupCount = 0,
            TargetCustSKU = "",
            //TargetQtyBanc = 0,
            TargetQtyMainsl = 0,
            //TargetQtySWCAFT = 0,
            //TargetQtyBasc = 0,
            //TargetQtyPrismCast = 0,
            //TargetQtyPrismCalt = 0,
            TargetQtyZinusTracy = 0,
            TargetQtyZinusChs = 0,
            TargetPercentage = 0,
            //TargetBancPercentage = 0,
            TargetMainslPercentage = 0,
            //TargetSWCAFTPercentage = 0,
            //TargetBascPercentage = 0,
            //TargetPrismCastPercentage = 0,
            //TargetPrismCaltPercentage = 0,
            TargetZinusTracyPercentage = 0,
            TargetZinusChsPercentage = 0,
            TargetFeedable = false,
            TargetDupCount = 0,
            HouzzCustSKU = "",
            //HouzzQtyBanc = 0,
            HouzzQtyMainsl = 0,
            //HouzzQtySWCAFT = 0,
            //HouzzQtyBasc = 0,
            HouzzPercentage = 0,
            //HouzzBancPercentage = 0,
            HouzzMainslPercentage = 0,
            //HouzzSWCAFTPercentage = 0,
            //HouzzBascPercentage = 0,
            HouzzFeedable = false,
            HouzzDupCount = 0,
            HomeDepotCustSKU = "",
            HomeDepotQtyBanc = 0,
            HomeDepotQtyMainsl = 0,
            //HomeDepotQtySWCAFT = 0,
            HomeDepotQtyBasc = 0,
            //HomeDepotQtyPrismCast = 0,
            //HomeDepotQtyPrismCalt = 0,
            HomeDepotQtyZinusTracy = 0,
            HomeDepotQtyZinusChs = 0,
            HomeDepotPercentage = 0,
            HomeDepotBancPercentage = 0,
            HomeDepotMainslPercentage = 0,
            //HomeDepotSWCAFTPercentage = 0,
            HomeDepotBascPercentage = 0,
            //HomeDepotPrismCastPercentage = 0,
            //HomeDepotPrismCaltPercentage = 0,
            HomeDepotZinusTracyPercentage = 0,
            HomeDepotZinusChsPercentage = 0,
            HomeDepotFeedable = false,
            HomeDepotDupCount = 0,
            etcMarketQty = 0,
            etcMarketPercentage = 0,
            //totalStagePOQtyBanc = 0,
            totalStagePOQtyMainsl = 0,
            //totalStagePOQtyBasc = 0,
            //totalStagePOQtySWCAFT = 0,
            //totalStagePOQtyPrismCast = 0,
            //totalStagePOQtyPrismCalt = 0,
            totalStagePOQtyZinusTracy = 0,
            totalStagePOQtyZinusChs = 0,
            //leftOverQtyBanc = 0,
            leftOverQtyMainsl = 0,
            //leftOverQtySWCAFT = 0,
            //leftOverQtyBasc = 0,
            //leftOverQtyPrismCast = 0,
            //leftOverQtyPrismCalt = 0,
            leftOverQtyZinusTracy = 0,
            leftOverQtyZinusChs = 0,
            isCooMasterSku = (bool)tmpItem.IsCoOmasterSku,
            HasMkIcrNotCooMaster = ((bool)tmpItem.IsCoOmasterSku ? false : true),
            //cooMasterSkuId = ((bool)tmpItem.IsMasterSku != true ? ), 
            countParetoA = 0,
            countParetoB = 0,
            countParetoC = 0,
            paretoAqty = 0,
            paretoBqty = 0,
            AmazonRule = false,
            eBayRule = false,
            WayfairRule = false,
            WalmartRule = false,
            OverstockRule = false,
            BPMRule = false,
            MellowRule = false,
            HomeDepotRule = false,
            TargetRule = false
          };
          //
          if (tmpDto.InvFeedsRepItemDetails == null || tmpDto.InvFeedsRepItemDetails.Count == 0)
          {
            goto SkipThisLoad;
          }
          foreach (InvFeedsRepItemDetail tmpDtoDetail in tmpDto.InvFeedsRepItemDetails)
          {
            List<InvFeedsRepItemLoc> tmpDtoItemLocs = await _kc.InvFeedsRepItemLocs.Where((InvFeedsRepItemLoc t) => t.InvFeedsRepItemDetailId == tmpDtoDetail.InvFeedsRepItemDetailId).Include((InvFeedsRepItemLoc t) => t.InvFeedsAppliedRule).ToListAsync();
            //int? customerId = tmpDtoDetail.CustomerId;
            int customerId = (int)tmpDtoDetail.CustomerId;
            int num = customerId;
            //try
            //{
            switch (num)
            {
              case 5:
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBanc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBanc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBanc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.AmazonQtyBanc = (int)tmpItemLoc.QtyAvail;
                  //newItem.AmazonBancPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                  newItem.totalStagePOQtyBanc = (int)(tmpItemLoc.StagePoqty.HasValue ? tmpItemLoc.StagePoqty : 0);
                }*/
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoMainsl = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoMainsl != 0)
                  //{ newItem.AppliedFeedingRuleTypeMainsl = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.AmazonQtyMainsl = (int)tmpItemLoc.QtyAvail;
                  //newItem.AmazonMainslPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                  newItem.totalStagePOQtyMainsl = (int)(tmpItemLoc.StagePoqty.HasValue ? tmpItemLoc.StagePoqty : 0);
                }/*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoSWCAFT = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoSWCAFT != 0)
                  //{ newItem.AppliedFeedingRuleTypeSWCAFT = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.AmazonQtySWCAFT = (int)tmpItemLoc.QtyAvail;
                  //newItem.AmazonSWCAFTPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                  newItem.totalStagePOQtySWCAFT = (int)(tmpItemLoc.StagePoqty.HasValue ? tmpItemLoc.StagePoqty : 0);
                }*/
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bascId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.AmazonQtyBasc = (int)tmpItemLoc.QtyAvail;
                  //newItem.AmazonBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                  newItem.totalStagePOQtyBasc = (int)(tmpItemLoc.StagePoqty.HasValue ? tmpItemLoc.StagePoqty : 0);
                }*/
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == prsmCastId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.AmazonQtyPrismCast = (int)tmpItemLoc.QtyAvail;
                  //newItem.AmazonBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                  newItem.totalStagePOQtyPrismCast = (int)(tmpItemLoc.StagePoqty.HasValue ? tmpItemLoc.StagePoqty : 0);
                }
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == prsmCaltId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.AmazonQtyPrismCalt = (int)tmpItemLoc.QtyAvail;
                  //newItem.AmazonBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                  newItem.totalStagePOQtyPrismCalt = (int)(tmpItemLoc.StagePoqty.HasValue ? tmpItemLoc.StagePoqty : 0);
                }*/
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == zinusTracyId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.AmazonQtyZinusTracy = (int)tmpItemLoc.QtyAvail;
                  //newItem.AmazonBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                  newItem.totalStagePOQtyZinusTracy = (int)(tmpItemLoc.StagePoqty.HasValue ? tmpItemLoc.StagePoqty : 0);
                }
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == zinusChsId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.AmazonQtyZinusChs = (int)tmpItemLoc.QtyAvail;
                  //newItem.AmazonBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                  newItem.totalStagePOQtyZinusChs = (int)(tmpItemLoc.StagePoqty.HasValue ? tmpItemLoc.StagePoqty : 0);
                }
                newItem.AmazonDupCount = (tmpDtoDetail.DuplicateCounter.HasValue ? tmpDtoDetail.DuplicateCounter : new int?(1)).Value;
                /* newItem.AppliedFeedingRuleNoBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                 newItem.AppliedFeedingRuleTypeBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRule.Description : ""));
                 newItem.AppliedFeedingRuleTypeMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRule.Description : ""));
                 newItem.AppliedFeedingRuleNoMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                 newItem.AppliedFeedingRuleTypeSWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : ""));
                 newItem.AppliedFeedingRuleNoSWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                 newItem.AmazonQtyBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).QtyAvail.Value : 0);
                 newItem.AmazonQtyMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).QtyAvail.Value : 0);
                 newItem.AmazonQtySWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).QtyAvail.Value : 0);
                 newItem.AmazonBancPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).Ratio : new int?(0)).Value : 0);
                 newItem.AmazonMainslPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).Ratio : new int?(0)).Value : 0);
                 newItem.AmazonSWCAFTPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).Ratio : new int?(0)).Value : 0);
                 newItem.totalStagePOQtyBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ?
                   (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).StagePoqty.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).StagePoqty.Value : 0) : 0);
                 newItem.totalStagePOQtyMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).StagePoqty.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).StagePoqty.Value : 0) : 0);
                 newItem.totalStagePOQtySWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).StagePoqty.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).StagePoqty.Value : 0) : 0);
                 */
                break;
              case 9:
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBanc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBanc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBanc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.BPMWebQtyBanc = (int)tmpItemLoc.QtyAvail;
                  //newItem.BPMWebBancPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoMainsl = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoMainsl != 0)
                  //{ newItem.AppliedFeedingRuleTypeMainsl = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.BPMWebQtyMainsl = (int)tmpItemLoc.QtyAvail;
                  //newItem.BPMWebMainslPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }/*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoSWCAFT = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  // if (newItem.AppliedFeedingRuleNoSWCAFT != 0)
                  //{ newItem.AppliedFeedingRuleTypeSWCAFT = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.BPMWebQtySWCAFT = (int)tmpItemLoc.QtyAvail;
                  //newItem.BPMWebSWCAFTPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bascId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.BPMWebQtyBasc = (int)tmpItemLoc.QtyAvail;
                  //newItem.BPMWebBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == prsmCastId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.BPMWebQtyPrismCast = (int)tmpItemLoc.QtyAvail;
                  //newItem.BPMWebBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == prsmCaltId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.BPMWebQtyPrismCalt = (int)tmpItemLoc.QtyAvail;
                  //newItem.BPMWebBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == zinusTracyId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.BPMWebQtyZinusTracy = (int)tmpItemLoc.QtyAvail;
                  //newItem.BPMWebBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == zinusChsId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.BPMWebQtyZinusChs = (int)tmpItemLoc.QtyAvail;
                  //newItem.BPMWebBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }

                /*
                newItem.BPMDupCount = (tmpDtoDetail.DuplicateCounter.HasValue ? tmpDtoDetail.DuplicateCounter : new int?(1)).Value;
                newItem.AppliedFeedingRuleNoBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.AppliedFeedingRuleTypeBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleTypeMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleNoMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.AppliedFeedingRuleTypeSWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleNoSWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.BPMWebQtyBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).QtyAvail.Value : 0);
                newItem.BPMWebQtyMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).QtyAvail.Value : 0);
                newItem.BPMWebQtySWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).QtyAvail.Value : 0);
                newItem.BPMWebBancPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).Ratio : new int?(0)).Value : 0);
                newItem.BPMWebMainslPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).Ratio : new int?(0)).Value : 0);
                newItem.BPMWebSWCAFTPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).Ratio : new int?(0)).Value : 0);
               */
                break;
              case 12:
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBanc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBanc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBanc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.eBayQtyBanc = (int)tmpItemLoc.QtyAvail;
                  //newItem.eBayBancPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoMainsl = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoMainsl != 0)
                  //{ newItem.AppliedFeedingRuleTypeMainsl = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.eBayQtyMainsl = (int)tmpItemLoc.QtyAvail;
                  //newItem.eBayMainslPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }/*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoSWCAFT = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoSWCAFT != 0)
                  //{ newItem.AppliedFeedingRuleTypeSWCAFT = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.eBayQtySWCAFT = (int)tmpItemLoc.QtyAvail;
                  //newItem.eBaySWCAFTPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bascId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.eBayQtyBasc = (int)tmpItemLoc.QtyAvail;
                  //newItem.eBayBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*//*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == prsmCastId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.eBayQtyPrismCast = (int)tmpItemLoc.QtyAvail;
                  //newItem.eBayBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == prsmCaltId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.eBayQtyPrismCalt = (int)tmpItemLoc.QtyAvail;
                  //newItem.eBayBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == zinusTracyId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.eBayQtyZinusTracy = (int)tmpItemLoc.QtyAvail;
                  //newItem.eBayBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == zinusChsId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.eBayQtyZinusChs = (int)tmpItemLoc.QtyAvail;
                  //newItem.eBayBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }
                newItem.eBayDupCount = (tmpDtoDetail.DuplicateCounter.HasValue ? tmpDtoDetail.DuplicateCounter : new int?(1)).Value;/*
                newItem.AppliedFeedingRuleNoBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.AppliedFeedingRuleTypeBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleTypeMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleNoMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.AppliedFeedingRuleTypeSWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleNoSWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.eBayQtyBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).QtyAvail.Value : 0);
                newItem.eBayQtyMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).QtyAvail.Value : 0);
                newItem.eBayQtySWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).QtyAvail.Value : 0);
                newItem.eBayBancPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).Ratio : new int?(0)).Value : 0);
                newItem.eBayMainslPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).Ratio : new int?(0)).Value : 0);
                newItem.eBaySWCAFTPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).Ratio : new int?(0)).Value : 0);
                */
                break;
              case 14:
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBanc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBanc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBanc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.HouzzQtyBanc = (int)tmpItemLoc.QtyAvail;
                  //newItem.HouzzBancPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoMainsl = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoMainsl != 0)
                  //{ newItem.AppliedFeedingRuleTypeMainsl = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.HouzzQtyMainsl = (int)tmpItemLoc.QtyAvail;
                  //newItem.HouzzMainslPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }/*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoSWCAFT = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoSWCAFT != 0)
                  //{ newItem.AppliedFeedingRuleTypeSWCAFT = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.HouzzQtySWCAFT = (int)tmpItemLoc.QtyAvail;
                  //newItem.HouzzSWCAFTPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bascId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.HouzzQtyBasc = (int)tmpItemLoc.QtyAvail;
                  //newItem.HouzzBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                newItem.HouzzDupCount = (tmpDtoDetail.DuplicateCounter.HasValue ? tmpDtoDetail.DuplicateCounter : new int?(1)).Value;/*
                newItem.AppliedFeedingRuleNoBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.AppliedFeedingRuleTypeBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleTypeMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleNoMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.AppliedFeedingRuleTypeSWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleNoSWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.HouzzQtyBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).QtyAvail.Value : 0);
                newItem.HouzzQtyMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).QtyAvail.Value : 0);
                newItem.HouzzQtySWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).QtyAvail.Value : 0);
                newItem.HouzzBancPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).Ratio : new int?(0)).Value : 0);
                newItem.HouzzMainslPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).Ratio : new int?(0)).Value : 0);
                newItem.HouzzSWCAFTPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).Ratio : new int?(0)).Value : 0);
                */
                break;
              case 18:
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBanc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBanc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBanc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.MellowWebQtyBanc = (int)tmpItemLoc.QtyAvail;
                  //newItem.MellowWebBancPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoMainsl = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoMainsl != 0)
                  //{ newItem.AppliedFeedingRuleTypeMainsl = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.MellowWebQtyMainsl = (int)tmpItemLoc.QtyAvail;
                  //newItem.MellowWebMainslPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }/*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoSWCAFT = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoSWCAFT != 0)
                  //{ newItem.AppliedFeedingRuleTypeSWCAFT = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.MellowWebQtySWCAFT = (int)tmpItemLoc.QtyAvail;
                  //newItem.MellowWebSWCAFTPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bascId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.MellowWebQtyBasc = (int)tmpItemLoc.QtyAvail;
                  //newItem.MellowWebBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == prsmCastId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoSWCAFT = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoSWCAFT != 0)
                  //{ newItem.AppliedFeedingRuleTypeSWCAFT = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.MellowWebQtyPrismCast = (int)tmpItemLoc.QtyAvail;
                  //newItem.MellowWebSWCAFTPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == prsmCaltId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.MellowWebQtyPrismCalt = (int)tmpItemLoc.QtyAvail;
                  //newItem.MellowWebBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == zinusTracyId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoSWCAFT = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoSWCAFT != 0)
                  //{ newItem.AppliedFeedingRuleTypeSWCAFT = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.MellowWebQtyZinusTracy = (int)tmpItemLoc.QtyAvail;
                  //newItem.MellowWebSWCAFTPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == zinusChsId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.MellowWebQtyZinusChs = (int)tmpItemLoc.QtyAvail;
                  //newItem.MellowWebBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }
                newItem.MellowDupCount = (tmpDtoDetail.DuplicateCounter.HasValue ? tmpDtoDetail.DuplicateCounter : new int?(1)).Value;/*
                newItem.AppliedFeedingRuleNoBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.AppliedFeedingRuleTypeBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleTypeMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleNoMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.AppliedFeedingRuleTypeSWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleNoSWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.MellowWebQtyBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).QtyAvail.Value : 0);
                newItem.MellowWebQtyMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).QtyAvail.Value : 0);
                newItem.MellowWebQtySWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).QtyAvail.Value : 0);
                newItem.MellowWebBancPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).Ratio : new int?(0)).Value : 0);
                newItem.MellowWebMainslPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).Ratio : new int?(0)).Value : 0);
                newItem.MellowWebSWCAFTPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).Ratio : new int?(0)).Value : 0);
                */
                break;
              case 21:
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBanc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBanc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBanc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.OverstockQtyBanc = (int)tmpItemLoc.QtyAvail;
                  //newItem.OverstockBancPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoMainsl = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoMainsl != 0)
                  //{ newItem.AppliedFeedingRuleTypeMainsl = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.OverstockQtyMainsl = (int)tmpItemLoc.QtyAvail;
                  //newItem.OverstockMainslPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }/*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoSWCAFT = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoSWCAFT != 0)
                  //{ newItem.AppliedFeedingRuleTypeSWCAFT = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.OverstockQtySWCAFT = (int)tmpItemLoc.QtyAvail;
                  //newItem.OverstockSWCAFTPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bascId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.OverstockQtyBasc = (int)tmpItemLoc.QtyAvail;
                  //newItem.OverstockBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*//*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == prsmCastId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoSWCAFT = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoSWCAFT != 0)
                  //{ newItem.AppliedFeedingRuleTypeSWCAFT = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.OverstockQtyPrismCast = (int)tmpItemLoc.QtyAvail;
                  //newItem.OverstockSWCAFTPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == prsmCaltId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.OverstockQtyPrismCalt = (int)tmpItemLoc.QtyAvail;
                  //newItem.OverstockBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == zinusTracyId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoSWCAFT = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoSWCAFT != 0)
                  //{ newItem.AppliedFeedingRuleTypeSWCAFT = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.OverstockQtyZinusTracy = (int)tmpItemLoc.QtyAvail;
                  //newItem.OverstockSWCAFTPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == zinusChsId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.OverstockQtyZinusChs = (int)tmpItemLoc.QtyAvail;
                  //newItem.OverstockBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }
                newItem.OverstockDupCount = (tmpDtoDetail.DuplicateCounter.HasValue ? tmpDtoDetail.DuplicateCounter : new int?(1)).Value;/*
                newItem.AppliedFeedingRuleNoBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.AppliedFeedingRuleTypeBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleTypeMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleNoMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.AppliedFeedingRuleTypeSWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleNoSWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.OverstockQtyBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).QtyAvail.Value : 0);
                newItem.OverstockQtyMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).QtyAvail.Value : 0);
                newItem.OverstockQtySWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).QtyAvail.Value : 0);
                newItem.OverstockBancPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).Ratio : new int?(0)).Value : 0);
                newItem.OverstockMainslPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).Ratio : new int?(0)).Value : 0);
                newItem.OverstockSWCAFTPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).Ratio : new int?(0)).Value : 0);
                */
                break;
              case 26:
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBanc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBanc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBanc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.WalmartQtyBanc = (int)tmpItemLoc.QtyAvail;
                  //newItem.WalmartBancPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoMainsl = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoMainsl != 0)
                  //{ newItem.AppliedFeedingRuleTypeMainsl = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.WalmartQtyMainsl = (int)tmpItemLoc.QtyAvail;
                  //newItem.WalmartMainslPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }/*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoSWCAFT = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoSWCAFT != 0)
                  //{ newItem.AppliedFeedingRuleTypeSWCAFT = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.WalmartQtySWCAFT = (int)tmpItemLoc.QtyAvail;
                  //newItem.WalmartSWCAFTPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bascId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.WalmartQtyBasc = (int)tmpItemLoc.QtyAvail;
                  //newItem.WalmartBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*//*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == prsmCastId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoSWCAFT = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoSWCAFT != 0)
                  //{ newItem.AppliedFeedingRuleTypeSWCAFT = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.WalmartQtyPrismCast = (int)tmpItemLoc.QtyAvail;
                  //newItem.WalmartSWCAFTPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == prsmCaltId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.WalmartQtyPrismCalt = (int)tmpItemLoc.QtyAvail;
                  //newItem.WalmartBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == zinusTracyId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoSWCAFT = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoSWCAFT != 0)
                  //{ newItem.AppliedFeedingRuleTypeSWCAFT = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.WalmartQtyZinusTracy = (int)tmpItemLoc.QtyAvail;
                  //newItem.WalmartSWCAFTPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == zinusChsId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.WalmartQtyZinusChs = (int)tmpItemLoc.QtyAvail;
                  //newItem.WalmartBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }
                newItem.WalmartDupCount = (tmpDtoDetail.DuplicateCounter.HasValue ? tmpDtoDetail.DuplicateCounter : new int?(1)).Value;/*
                newItem.AppliedFeedingRuleNoBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.AppliedFeedingRuleTypeBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleTypeMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleNoMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.AppliedFeedingRuleTypeSWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleNoSWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.WalmartQtyBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).QtyAvail.Value : 0);
                newItem.WalmartQtyMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).QtyAvail.Value : 0);
                newItem.WalmartQtySWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).QtyAvail.Value : 0);
                newItem.WalmartBancPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).Ratio : new int?(0)).Value : 0);
                newItem.WalmartMainslPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).Ratio : new int?(0)).Value : 0);
                newItem.WalmartSWCAFTPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).Ratio : new int?(0)).Value : 0);
                */
                break;
              case 29:
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBanc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBanc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBanc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.WayfairQtyBanc = (int)tmpItemLoc.QtyAvail;
                  //newItem.WayfairBancPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoMainsl = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoMainsl != 0)
                  //{ newItem.AppliedFeedingRuleTypeMainsl = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.WayfairQtyMainsl = (int)tmpItemLoc.QtyAvail;
                  //newItem.WayfairMainslPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }/*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoSWCAFT = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoSWCAFT != 0)
                  //{ newItem.AppliedFeedingRuleTypeSWCAFT = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.WayfairQtySWCAFT = (int)tmpItemLoc.QtyAvail;
                  //newItem.WayfairSWCAFTPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bascId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.WayfairQtyBasc = (int)tmpItemLoc.QtyAvail;
                  //newItem.WayfairBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == prsmCastId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoSWCAFT = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoSWCAFT != 0)
                  //{ newItem.AppliedFeedingRuleTypeSWCAFT = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.WayfairQtyPrismCast = (int)tmpItemLoc.QtyAvail;
                  //newItem.WayfairSWCAFTPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == prsmCaltId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.WayfairQtyPrismCalt = (int)tmpItemLoc.QtyAvail;
                  //newItem.WayfairBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == zinusTracyId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoSWCAFT = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoSWCAFT != 0)
                  //{ newItem.AppliedFeedingRuleTypeSWCAFT = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.WayfairQtyZinusTracy = (int)tmpItemLoc.QtyAvail;
                  //newItem.WayfairSWCAFTPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == zinusChsId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.WayfairQtyZinusChs = (int)tmpItemLoc.QtyAvail;
                  //newItem.WayfairBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }
                newItem.WayfairDupCount = (tmpDtoDetail.DuplicateCounter.HasValue ? tmpDtoDetail.DuplicateCounter : new int?(1)).Value;
                newItem.QtyAvailCGInv = (int)(tmpDtoDetail.CustomerWarehouseQty.HasValue ? tmpDtoDetail.CustomerWarehouseQty : 0);/*
                newItem.AppliedFeedingRuleNoBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.AppliedFeedingRuleTypeBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleTypeMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleNoMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.AppliedFeedingRuleTypeSWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleNoSWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.WayfairQtyBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).QtyAvail.Value : 0);
                newItem.WayfairQtyMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).QtyAvail.Value : 0);
                newItem.WayfairQtySWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).QtyAvail.Value : 0);
                newItem.WayfairBancPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).Ratio : new int?(0)).Value : 0);
                newItem.WayfairMainslPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).Ratio : new int?(0)).Value : 0);
                newItem.WayfairSWCAFTPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).Ratio : new int?(0)).Value : 0);
                */
                break;
              case 40: //Home Depot
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBanc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBanc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBanc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.HomeDepotQtyBanc = (int)tmpItemLoc.QtyAvail;
                  //newItem.HomeDepotBancPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoMainsl = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoMainsl != 0)
                  //{ newItem.AppliedFeedingRuleTypeMainsl = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.HomeDepotQtyMainsl = (int)tmpItemLoc.QtyAvail;
                  //newItem.HomeDepotMainslPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }/*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoSWCAFT = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoSWCAFT != 0)
                  //{ newItem.AppliedFeedingRuleTypeSWCAFT = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.HomeDepotQtySWCAFT = (int)tmpItemLoc.QtyAvail;
                  //newItem.HomeDepotSWCAFTPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bascId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.HomeDepotQtyBasc = (int)tmpItemLoc.QtyAvail;
                  //newItem.HomeDepotBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == prsmCastId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoSWCAFT = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoSWCAFT != 0)
                  //{ newItem.AppliedFeedingRuleTypeSWCAFT = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.HomeDepotQtyPrismCast = (int)tmpItemLoc.QtyAvail;
                  //newItem.HomeDepotSWCAFTPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == prsmCaltId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.HomeDepotQtyPrismCalt = (int)tmpItemLoc.QtyAvail;
                  //newItem.HomeDepotBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == zinusTracyId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoSWCAFT = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoSWCAFT != 0)
                  //{ newItem.AppliedFeedingRuleTypeSWCAFT = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.HomeDepotQtyZinusTracy = (int)tmpItemLoc.QtyAvail;
                  //newItem.HomeDepotSWCAFTPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == zinusChsId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.HomeDepotQtyZinusChs = (int)tmpItemLoc.QtyAvail;
                  //newItem.HomeDepotBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }
                newItem.HomeDepotDupCount = (tmpDtoDetail.DuplicateCounter.HasValue ? tmpDtoDetail.DuplicateCounter : new int?(1)).Value;/*
                newItem.AppliedFeedingRuleNoBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.AppliedFeedingRuleTypeBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleTypeMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleNoMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.AppliedFeedingRuleTypeSWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleNoSWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.WayfairQtyBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).QtyAvail.Value : 0);
                newItem.WayfairQtyMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).QtyAvail.Value : 0);
                newItem.WayfairQtySWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).QtyAvail.Value : 0);
                newItem.WayfairBancPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).Ratio : new int?(0)).Value : 0);
                newItem.WayfairMainslPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).Ratio : new int?(0)).Value : 0);
                newItem.WayfairSWCAFTPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).Ratio : new int?(0)).Value : 0);
                */
                break;
              case 51: //Target
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBanc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBanc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBanc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.TargetQtyBanc = (int)tmpItemLoc.QtyAvail;
                  //newItem.TargetBancPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoMainsl = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoMainsl != 0)
                  //{ newItem.AppliedFeedingRuleTypeMainsl = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.TargetQtyMainsl = (int)tmpItemLoc.QtyAvail;
                  //newItem.TargetMainslPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }/*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoSWCAFT = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoSWCAFT != 0)
                  //{ newItem.AppliedFeedingRuleTypeSWCAFT = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.TargetQtySWCAFT = (int)tmpItemLoc.QtyAvail;
                  //newItem.TargetSWCAFTPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bascId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.TargetQtyBasc = (int)tmpItemLoc.QtyAvail;
                  //newItem.TargetBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                /*
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == prsmCastId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoSWCAFT = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoSWCAFT != 0)
                  //{ newItem.AppliedFeedingRuleTypeSWCAFT = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.TargetQtyPrismCast = (int)tmpItemLoc.QtyAvail;
                  //newItem.TargetSWCAFTPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == prsmCaltId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.TargetQtyPrismCalt = (int)tmpItemLoc.QtyAvail;
                  //newItem.TargetBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }*/
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == zinusTracyId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoSWCAFT = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoSWCAFT != 0)
                  //{ newItem.AppliedFeedingRuleTypeSWCAFT = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.TargetQtyZinusTracy = (int)tmpItemLoc.QtyAvail;
                  //newItem.TargetSWCAFTPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }
                tmpItemLoc = tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == zinusChsId);
                if (tmpItemLoc != null)
                {
                  //newItem.AppliedFeedingRuleNoBasc = (int)(tmpItemLoc.InvFeedsAppliedRuleId.HasValue ? tmpItemLoc.InvFeedsAppliedRuleId : 0);
                  //if (newItem.AppliedFeedingRuleNoBasc != 0)
                  //{ newItem.AppliedFeedingRuleTypeBasc = tmpItemLoc.InvFeedsAppliedRule.Description; }
                  newItem.TargetQtyZinusChs = (int)tmpItemLoc.QtyAvail;
                  //newItem.TargetBascPercentage = (int)(tmpItemLoc.Ratio.HasValue ? tmpItemLoc.Ratio : 0);
                }
                newItem.TargetDupCount = (tmpDtoDetail.DuplicateCounter.HasValue ? tmpDtoDetail.DuplicateCounter : new int?(1)).Value;
                /*
                newItem.AppliedFeedingRuleNoBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.AppliedFeedingRuleTypeBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleTypeMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleNoMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.AppliedFeedingRuleTypeSWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) == null) ? "" : ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRule != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRule.Description : ""));
                newItem.AppliedFeedingRuleNoSWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRuleId.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).InvFeedsAppliedRuleId : new int?(0)).Value : 0);
                newItem.WayfairQtyBanc = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).QtyAvail.Value : 0);
                newItem.WayfairQtyMainsl = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).QtyAvail.Value : 0);
                newItem.WayfairQtySWCAFT = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).QtyAvail.Value : 0);
                newItem.WayfairBancPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == bancId).Ratio : new int?(0)).Value : 0);
                newItem.WayfairMainslPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == mainslId).Ratio : new int?(0)).Value : 0);
                newItem.WayfairSWCAFTPercentage = ((tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId) != null) ? (tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).Ratio.HasValue ? tmpDtoItemLocs.FindLast((InvFeedsRepItemLoc x) => x.LocationId == swcaftId).Ratio : new int?(0)).Value : 0);
                */
                break;
            }
            /*}
            catch (Exception ex)
            {
              Console.WriteLine(ex.Message);
            }*/
          }
        SkipThisLoad:
          serviceResponse.Add(newItem);
        }

        return serviceResponse;
      }

      DateTime startDateForAmzInv = DateTime.Now.AddDays(-7);
      while (startDateForAmzInv.DayOfWeek != DayOfWeek.Sunday)
      {
        startDateForAmzInv = startDateForAmzInv.AddDays(-1);
      }
      int dayOfWeek = (int)today.DayOfWeek;
      DateTime tmpStartDateStart = new DateTime(today.AddDays(-dayOfWeek - 8).Year, today.AddDays(-dayOfWeek - 9).Month, today.AddDays(-dayOfWeek - 8).Day, 23, 59, 59);
      DateTime tmpStartDateEnd = new DateTime(today.AddDays(-dayOfWeek - 6).Year, today.AddDays(-dayOfWeek - 6).Month, today.AddDays(-dayOfWeek - 6).Day, 0, 0, 0);
      DateTime tmpStartDate = new DateTime(today.AddDays(-dayOfWeek - 7).Year, today.AddDays(-dayOfWeek - 7).Month, today.AddDays(-dayOfWeek - 7).Day, 0, 0, 0);
      List<InvFeedsItem> invFeedsItems = await _kc.InvFeedsItems.Where((InvFeedsItem i) => i.InvFeedsReportId == (long?)invFeedReport.InvFeedsReportId).Include((InvFeedsItem i) => i.InvFeedsItemLocQties).ToListAsync();
      List<InvFeedsAppliedRule> invFeedsAppliedRules = await _kc.InvFeedsAppliedRules.ToListAsync();
      List<InvFeedsCurrentStatus> currentStatuses = await _kc.InvFeedsCurrentStatuses
        .Where(i => i.RealTimeInvUpdateId == invFeedReport.RealTimeInvUpdateId)
        .ToListAsync();
      List<BpmItem> bpmItems = await _kc.BpmItems
        .Where((BpmItem bi) => bi.ItemStatusId <= itemStatus && bi.ItemTypeId <= itemType && bi.IsFeedable == true)
        .Where(bi => bi.ItemStatusId != null)
        .Include((BpmItem bi) => bi.ItemStatus)
        .ToListAsync();
      List<InvFeedsRule> invFeedsRules = await _kc.InvFeedsRules.Where((InvFeedsRule ifr) => ifr.IsActivated == (bool?)true).Include((InvFeedsRule ifr) => ifr.Customer).Include((InvFeedsRule ifr) => ifr.LastModifiedByNavigation)
          .ToListAsync();
      List<InvFeedsRuleSku> invFeedsRuleSKUs = await _kc.InvFeedsRuleSkus.Include((InvFeedsRuleSku ifrs) => ifrs.InvFeedsRuleSkumkts).ToListAsync();
      // Check here
      /*
      serviceResponse = await _kc.BpmItems
        .Where((BpmItem bi) => bi.ItemStatusId <= itemStatus && bi.ItemTypeId <= itemType && bi.IsFeedable == true)
        .Where(bi => bi.ItemStatusId != null)
        .Include((BpmItem bi) => bi.ItemStatus)
        .Select((BpmItem bi) => new GetInventoryFeedsItemDTO
      {
        ItemNoId = bi.ItemNoId,
        ItemStatus = bi.ItemStatus.StatusItem,
        ItemStatusId = (int)bi.ItemStatusId,
        ItemName = bi.ItemName,
        //AppliedFeedingRuleNoBanc = 0,
        //AppliedFeedingRuleTypeBanc = "",
        AppliedFeedingRuleNoMainsl = 0,
        AppliedFeedingRuleTypeMainsl = "",
        //AppliedFeedingRuleNoSWCAFT = 0,
        //AppliedFeedingRuleTypeSWCAFT = "",
        //AppliedFeedingRuleNoBasc = 0,
        //AppliedFeedingRuleTypeBasc = "",
        //AppliedFeedingRuleNoPrismCast = 0,
        //AppliedFeedingRuleTypePrismCast = "",
        //AppliedFeedingRuleNoPrismCalt = 0,
        //AppliedFeedingRuleTypePrismCalt = "",
        AppliedFeedingRuleNoZinusTracy = 0,
        AppliedFeedingRuleTypeZinusTracy = "",
        AppliedFeedingRuleNoZinusChs = 0,
        AppliedFeedingRuleTypeZinusChs = "",
        //QtyAvailBanc = 0,
        QtyAvailMainsl = 0,
        //QtyAvailSWCAFT = 0,
        //QtyAvailBasc = 0,
        //QtyAvailPrismCast = 0,
        //QtyAvailPrismCalt = 0,
        QtyAvailZinusTracy = 0,
        QtyAvailZinusChs = 0,
        //QtyAvailActualBanc = 0,
        QtyAvailActualMainsl = 0,
        //QtyAvailActualSWCAFT = 0,
        //QtyAvailActualBasc = 0,
        //QtyAvailActualPrismCast = 0,
        //QtyAvailActualPrismCalt = 0,
        QtyAvailActualZinusTracy = 0,
        QtyAvailActualZinusChs = 0,
        QtyAvailAmzInv = 0,
        QtyAvailCGInv = 0,
        QtyOnHandGCInv = 0,
        //QtyOnHandBanc = 0,
        QtyOnHandMainsl = 0,
        //QtyOnHandSWCAFT = 0,
        //QtyOnHandBasc = 0,
        //QtyOnHandPrismCast = 0,
        //QtyOnHandPrismCalt = 0,
        QtyOnHandZinusTracy = 0,
        QtyOnHandZinusChs = 0,
        QtyOnHandAmzInv = 0,
        BancFeedable = false,
        MainslFeedable = true,
        //SWCAFTFeedable = true,
        BascFeedable = false,
        //PrismCastFeedable = true,
        //PrismCaltFeedable = true,
        ZinusTracyFeedable = true,
        ZinusChsFeedable = true,
        AmazonCustSKU = "",
        //AmazonQtyBanc = 0,
        AmazonQtyMainsl = 0,
        //AmazonQtySWCAFT = 0,
        //AmazonQtyBasc = 0,
        //AmazonQtyPrismCast = 0,
        //AmazonQtyPrismCalt = 0,
        AmazonQtyZinusTracy = 0,
        AmazonQtyZinusChs = 0,
        AmazonPercentage = 0,
        //AmazonBancPercentage = 0,
        AmazonMainslPercentage = 0,
        //AmazonSWCAFTPercentage = 0,
        AmazonBascPercentage = 0,
        //AmazonPrismCastPercentage = 0,
        //AmazonPrismCaltPercentage = 0,
        AmazonZinusTracyPercentage = 0,
        AmazonZinusChsPercentage = 0,
        AmazonFeedable = true,
        AmazonDupCount = 0,
        WayfairCustSKU = "",
        //WayfairQtyBanc = 0,
        WayfairQtyMainsl = 0,
        //WayfairQtySWCAFT = 0,
        //WayfairQtyBasc = 0,
        //WayfairQtyPrismCast = 0,
        //WayfairQtyPrismCalt = 0,
        WayfairQtyZinusTracy = 0,
        WayfairQtyZinusChs = 0,
        WayfairPercentage = 0,
        //WayfairBancPercentage = 0,
        WayfairMainslPercentage = 0,
        //WayfairSWCAFTPercentage = 0,
        WayfairBascPercentage = 0,
        //WayfairPrismCastPercentage = 0,
        //WayfairPrismCaltPercentage = 0,
        WayfairZinusTracyPercentage = 0,
        WayfairZinusChsPercentage = 0,
        WayfairFeedable = true,
        WayfairDupCount = 0,
        WalmartCustSKU = "",
        //WalmartQtyBanc = 0,
        WalmartQtyMainsl = 0,
        //WalmartQtySWCAFT = 0,
        //WalmartQtyBasc = 0,
        //WalmartQtyPrismCast = 0,
        //WalmartQtyPrismCalt = 0,
        WalmartQtyZinusTracy = 0,
        WalmartQtyZinusChs = 0,
        WalmartPercentage = 0,
        //WalmartBancPercentage = 0,
        WalmartMainslPercentage = 0,
        //WalmartSWCAFTPercentage = 0,
        //WalmartBascPercentage = 0,
        //WalmartPrismCastPercentage = 0,
        //WalmartPrismCaltPercentage = 0,
        WalmartZinusTracyPercentage = 0,
        WalmartZinusChsPercentage = 0,
        WalmartFeedable = true,
        WalmartDupCount = 0,
        OverstockCustSKU = "",
        //OverstockQtyBanc = 0,
        OverstockQtyMainsl = 0,
        //OverstockQtySWCAFT = 0,
        //OverstockQtyBasc = 0,
        //OverstockQtyPrismCast = 0,
        //OverstockQtyPrismCalt = 0,
        OverstockQtyZinusTracy = 0,
        OverstockQtyZinusChs = 0,
        OverstockPercentage = 0,
        //OverstockBancPercentage = 0,
        OverstockMainslPercentage = 0,
        //OverstockSWCAFTPercentage = 0,
        //OverstockBascPercentage = 0,
        //OverstockPrismCastPercentage = 0,
        //OverstockPrismCaltPercentage = 0,
        OverstockZinusTracyPercentage = 0,
        OverstockZinusChsPercentage = 0,
        OverstockFeedable = true,
        OverstockDupCount = 0,
        eBayCustSKU = "",
        //eBayQtyBanc = 0,
        eBayQtyMainsl = 0,
        //eBayQtySWCAFT = 0,
        //eBayQtyBasc = 0,
        //eBayQtyPrismCast = 0,
        //eBayQtyPrismCalt = 0,
        eBayQtyZinusTracy = 0,
        eBayQtyZinusChs = 0,
        eBayPercentage = 0,
        //eBayBancPercentage = 0,
        eBayMainslPercentage = 0,
        //eBaySWCAFTPercentage = 0,
        //eBayBascPercentage = 0,
        //eBayPrismCastPercentage = 0,
        //eBayPrismCaltPercentage = 0,
        eBayZinusTracyPercentage = 0,
        eBayZinusChsPercentage = 0,
        eBayFeedable = true,
        eBayDupCount = 0,
        BPMWebCustSKU = "",
        //BPMWebQtyBanc = 0,
        BPMWebQtyMainsl = 0,
        //BPMWebQtySWCAFT = 0,
        //BPMWebQtyBasc = 0,
        //BPMWebQtyPrismCast = 0,
        //BPMWebQtyPrismCalt = 0,
        BPMWebQtyZinusTracy = 0,
        BPMWebQtyZinusChs = 0,
        BPMWebPercentage = 0,
        //BPMWebBancPercentage = 0,
        BPMWebMainslPercentage = 0,
        //BPMWebSWCAFTPercentage = 0,
        //BPMWebBascPercentage = 0,
        //BPMWebPrismCastPercentage = 0,
        //BPMWebPrismCaltPercentage = 0,
        BPMWebZinusTracyPercentage = 0,
        BPMWebZinusChsPercentage = 0,
        BPMFeedable = true,
        BPMDupCount = 0,
        MellowWebCustSKU = "",
        //MellowWebQtyBanc = 0,
        MellowWebQtyMainsl = 0,
        //MellowWebQtySWCAFT = 0,
        //MellowWebQtyBasc = 0,
        //MellowWebQtyPrismCast = 0,
        //MellowWebQtyPrismCalt = 0,
        MellowWebQtyZinusTracy = 0,
        MellowWebQtyZinusChs = 0,
        MellowWebPercentage = 0,
        //MellowWebBancPercentage = 0,
        MellowWebMainslPercentage = 0,
        //MellowWebSWCAFTPercentage = 0,
        MellowWebBascPercentage = 0,
        //MellowWebPrismCastPercentage = 0,
        //MellowWebPrismCaltPercentage = 0,
        MellowWebZinusTracyPercentage = 0,
        MellowWebZinusChsPercentage = 0,
        MellowFeedable = true,
        MellowDupCount = 0,
        HouzzCustSKU = "",
        //HouzzQtyBanc = 0,
        HouzzQtyMainsl = 0,
        //HouzzQtySWCAFT = 0,
        //HouzzQtyBasc = 0,
        HouzzPercentage = 0,
        //HouzzBancPercentage = 0,
        HouzzMainslPercentage = 0,
        //HouzzSWCAFTPercentage = 0,
        HouzzBascPercentage = 0,
        HouzzFeedable = false,
        HouzzDupCount = 0,
        HomeDepotCustSKU = "",
        HomeDepotQtyBanc = 0,
        HomeDepotQtyMainsl = 0,
        //HomeDepotQtySWCAFT = 0,
        HomeDepotQtyBasc = 0,
        //HomeDepotQtyPrismCast = 0,
        //HomeDepotQtyPrismCalt = 0,
        HomeDepotQtyZinusTracy = 0,
        HomeDepotQtyZinusChs = 0,
        HomeDepotPercentage = 0,
        HomeDepotBancPercentage = 0,
        HomeDepotMainslPercentage = 0,
        //HomeDepotSWCAFTPercentage = 0,
        HomeDepotBascPercentage = 0,
        //HomeDepotPrismCastPercentage = 0,
        //HomeDepotPrismCaltPercentage = 0,
        HomeDepotZinusTracyPercentage = 0,
        HomeDepotZinusChsPercentage = 0,
        HomeDepotFeedable = true,
        HomeDepotDupCount = 0,
        TargetCustSKU = "",
        //TargetQtyBanc = 0,
        TargetQtyMainsl = 0,
        //TargetQtySWCAFT = 0,
        //TargetQtyBasc = 0,
        //TargetQtyPrismCast = 0,
        //TargetQtyPrismCalt = 0,
        TargetQtyZinusTracy = 0,
        TargetQtyZinusChs = 0,
        TargetPercentage = 0,
        //TargetBancPercentage = 0,
        TargetMainslPercentage = 0,
        //TargetSWCAFTPercentage = 0,
        //TargetBascPercentage = 0,
        //TargetPrismCastPercentage = 0,
        //TargetPrismCaltPercentage = 0,
        TargetZinusTracyPercentage = 0,
        TargetZinusChsPercentage = 0,
        TargetFeedable = true,
        TargetDupCount = 0,
        etcMarketQty = 0,
        etcMarketPercentage = 0,
        //totalStagePOQtyBanc = 0,
        totalStagePOQtyMainsl = 0,
        //totalStagePOQtySWCAFT = 0,
        //totalStagePOQtyBasc = 0,
        //totalStagePOQtyPrismCast = 0,
        //totalStagePOQtyPrismCalt = 0,
        totalStagePOQtyZinusTracy = 0,
        totalStagePOQtyZinusChs = 0,
        //leftOverQtyBanc = 0,
        leftOverQtyMainsl = 0,
        //leftOverQtySWCAFT = 0,
        //leftOverQtyBasc = 0,
        //leftOverQtyPrismCast = 0,
        //leftOverQtyPrismCalt = 0,
        leftOverQtyZinusTracy = 0,
        leftOverQtyZinusChs = 0,
        isCooMasterSku = (bi.IsCoOmasterSku.HasValue ? (bool)bi.IsCoOmasterSku : (itemTrkCoOs.Where(tc => tc.CoItemNoId == (int)bi.ItemNoId).FirstOrDefault() == null ? true : false)),
        HasMkIcrNotCooMaster = (bi.IsCoOmasterSku.HasValue ? (bool)bi.IsCoOmasterSku : (itemTrkCoOs.Where(tc => tc.CoItemNoId == (int)bi.ItemNoId).FirstOrDefault() == null ? false : true)),
        hasCooSlaveSku = (itemTrkCoOs.Where(tc => tc.ItemNoId == (int)bi.ItemNoId).FirstOrDefault() == null ? false : true),
        //cooSlaveSkuId = ((bool)bi.IsCoOmasterSku == false ?
        //    itemTrkCoOs.Where(tc => tc.CoItemNoId == (int)bi.ItemNoId).FirstOrDefault().ItemNoId : 0),
        cooSlaveSkuId = (bi.IsCoOmasterSku.HasValue ? ((((bool)bi.IsCoOmasterSku == true) && (itemTrkCoOs.Where(tc => tc.ItemNoId == (int)bi.ItemNoId).FirstOrDefault() != null)) ?
            itemTrkCoOs.Where(tc => tc.ItemNoId == (int)bi.ItemNoId).FirstOrDefault().CoItemNoId : 0) : 0),
        cooMasterSkuId = (bi.CoOmasterSkuId.HasValue ? (int)bi.CoOmasterSkuId : 0),
        countParetoA = 0,
        countParetoB = 0,
        countParetoC = 0,
        paretoAqty = 0,
        paretoBqty = 0,
        AmazonRule = false,
        eBayRule = false,
        WayfairRule = false,
        WalmartRule = false,
        OverstockRule = false,
        BPMRule = false,
        MellowRule = false,
        HomeDepotRule = false,
        TargetRule = false
      }).ToListAsync();*/


      serviceResponse = bpmItems.Select((BpmItem bi) => new GetInventoryFeedsItemDTO
      {
        ItemNoId = bi.ItemNoId,
        ItemStatus = bi.ItemStatus.StatusItem,
        ItemStatusId = (int)bi.ItemStatusId,
        ItemName = bi.ItemName,
        //AppliedFeedingRuleNoBanc = 0,
        //AppliedFeedingRuleTypeBanc = "",
        AppliedFeedingRuleNoMainsl = 0,
        AppliedFeedingRuleTypeMainsl = "",
        //AppliedFeedingRuleNoSWCAFT = 0,
        //AppliedFeedingRuleTypeSWCAFT = "",
        //AppliedFeedingRuleNoBasc = 0,
        //AppliedFeedingRuleTypeBasc = "",
        //AppliedFeedingRuleNoPrismCast = 0,
        //AppliedFeedingRuleTypePrismCast = "",
        //AppliedFeedingRuleNoPrismCalt = 0,
        //AppliedFeedingRuleTypePrismCalt = "",
        AppliedFeedingRuleNoZinusTracy = 0,
        AppliedFeedingRuleTypeZinusTracy = "",
        AppliedFeedingRuleNoZinusChs = 0,
        AppliedFeedingRuleTypeZinusChs = "",
        //QtyAvailBanc = 0,
        QtyAvailMainsl = 0,
        //QtyAvailSWCAFT = 0,
        //QtyAvailBasc = 0,
        //QtyAvailPrismCast = 0,
        //QtyAvailPrismCalt = 0,
        QtyAvailZinusTracy = 0,
        QtyAvailZinusChs = 0,
        //QtyAvailActualBanc = 0,
        QtyAvailActualMainsl = 0,
        //QtyAvailActualSWCAFT = 0,
        //QtyAvailActualBasc = 0,
        //QtyAvailActualPrismCast = 0,
        //QtyAvailActualPrismCalt = 0,
        QtyAvailActualZinusTracy = 0,
        QtyAvailActualZinusChs = 0,
        QtyAvailAmzInv = 0,
        QtyAvailCGInv = 0,
        QtyOnHandGCInv = 0,
        //QtyOnHandBanc = 0,
        QtyOnHandMainsl = 0,
        //QtyOnHandSWCAFT = 0,
        //QtyOnHandBasc = 0,
        //QtyOnHandPrismCast = 0,
        //QtyOnHandPrismCalt = 0,
        QtyOnHandZinusTracy = 0,
        QtyOnHandZinusChs = 0,
        QtyOnHandAmzInv = 0,
        BancFeedable = false,
        MainslFeedable = true,
        //SWCAFTFeedable = true,
        BascFeedable = false,
        //PrismCastFeedable = true,
        //PrismCaltFeedable = true,
        ZinusTracyFeedable = true,
        ZinusChsFeedable = true,
        AmazonCustSKU = "",
        //AmazonQtyBanc = 0,
        AmazonQtyMainsl = 0,
        //AmazonQtySWCAFT = 0,
        //AmazonQtyBasc = 0,
        //AmazonQtyPrismCast = 0,
        //AmazonQtyPrismCalt = 0,
        AmazonQtyZinusTracy = 0,
        AmazonQtyZinusChs = 0,
        AmazonPercentage = 0,
        //AmazonBancPercentage = 0,
        AmazonMainslPercentage = 0,
        //AmazonSWCAFTPercentage = 0,
        AmazonBascPercentage = 0,
        //AmazonPrismCastPercentage = 0,
        //AmazonPrismCaltPercentage = 0,
        AmazonZinusTracyPercentage = 0,
        AmazonZinusChsPercentage = 0,
        AmazonFeedable = true,
        AmazonDupCount = 0,
        WayfairCustSKU = "",
        //WayfairQtyBanc = 0,
        WayfairQtyMainsl = 0,
        //WayfairQtySWCAFT = 0,
        //WayfairQtyBasc = 0,
        //WayfairQtyPrismCast = 0,
        //WayfairQtyPrismCalt = 0,
        WayfairQtyZinusTracy = 0,
        WayfairQtyZinusChs = 0,
        WayfairPercentage = 0,
        //WayfairBancPercentage = 0,
        WayfairMainslPercentage = 0,
        //WayfairSWCAFTPercentage = 0,
        WayfairBascPercentage = 0,
        //WayfairPrismCastPercentage = 0,
        //WayfairPrismCaltPercentage = 0,
        WayfairZinusTracyPercentage = 0,
        WayfairZinusChsPercentage = 0,
        WayfairFeedable = true,
        WayfairDupCount = 0,
        WalmartCustSKU = "",
        //WalmartQtyBanc = 0,
        WalmartQtyMainsl = 0,
        //WalmartQtySWCAFT = 0,
        //WalmartQtyBasc = 0,
        //WalmartQtyPrismCast = 0,
        //WalmartQtyPrismCalt = 0,
        WalmartQtyZinusTracy = 0,
        WalmartQtyZinusChs = 0,
        WalmartPercentage = 0,
        //WalmartBancPercentage = 0,
        WalmartMainslPercentage = 0,
        //WalmartSWCAFTPercentage = 0,
        //WalmartBascPercentage = 0,
        //WalmartPrismCastPercentage = 0,
        //WalmartPrismCaltPercentage = 0,
        WalmartZinusTracyPercentage = 0,
        WalmartZinusChsPercentage = 0,
        WalmartFeedable = true,
        WalmartDupCount = 0,
        OverstockCustSKU = "",
        //OverstockQtyBanc = 0,
        OverstockQtyMainsl = 0,
        //OverstockQtySWCAFT = 0,
        //OverstockQtyBasc = 0,
        //OverstockQtyPrismCast = 0,
        //OverstockQtyPrismCalt = 0,
        OverstockQtyZinusTracy = 0,
        OverstockQtyZinusChs = 0,
        OverstockPercentage = 0,
        //OverstockBancPercentage = 0,
        OverstockMainslPercentage = 0,
        //OverstockSWCAFTPercentage = 0,
        //OverstockBascPercentage = 0,
        //OverstockPrismCastPercentage = 0,
        //OverstockPrismCaltPercentage = 0,
        OverstockZinusTracyPercentage = 0,
        OverstockZinusChsPercentage = 0,
        OverstockFeedable = true,
        OverstockDupCount = 0,
        eBayCustSKU = "",
        //eBayQtyBanc = 0,
        eBayQtyMainsl = 0,
        //eBayQtySWCAFT = 0,
        //eBayQtyBasc = 0,
        //eBayQtyPrismCast = 0,
        //eBayQtyPrismCalt = 0,
        eBayQtyZinusTracy = 0,
        eBayQtyZinusChs = 0,
        eBayPercentage = 0,
        //eBayBancPercentage = 0,
        eBayMainslPercentage = 0,
        //eBaySWCAFTPercentage = 0,
        //eBayBascPercentage = 0,
        //eBayPrismCastPercentage = 0,
        //eBayPrismCaltPercentage = 0,
        eBayZinusTracyPercentage = 0,
        eBayZinusChsPercentage = 0,
        eBayFeedable = true,
        eBayDupCount = 0,
        BPMWebCustSKU = "",
        //BPMWebQtyBanc = 0,
        BPMWebQtyMainsl = 0,
        //BPMWebQtySWCAFT = 0,
        //BPMWebQtyBasc = 0,
        //BPMWebQtyPrismCast = 0,
        //BPMWebQtyPrismCalt = 0,
        BPMWebQtyZinusTracy = 0,
        BPMWebQtyZinusChs = 0,
        BPMWebPercentage = 0,
        //BPMWebBancPercentage = 0,
        BPMWebMainslPercentage = 0,
        //BPMWebSWCAFTPercentage = 0,
        //BPMWebBascPercentage = 0,
        //BPMWebPrismCastPercentage = 0,
        //BPMWebPrismCaltPercentage = 0,
        BPMWebZinusTracyPercentage = 0,
        BPMWebZinusChsPercentage = 0,
        BPMFeedable = true,
        BPMDupCount = 0,
        MellowWebCustSKU = "",
        //MellowWebQtyBanc = 0,
        MellowWebQtyMainsl = 0,
        //MellowWebQtySWCAFT = 0,
        //MellowWebQtyBasc = 0,
        //MellowWebQtyPrismCast = 0,
        //MellowWebQtyPrismCalt = 0,
        MellowWebQtyZinusTracy = 0,
        MellowWebQtyZinusChs = 0,
        MellowWebPercentage = 0,
        //MellowWebBancPercentage = 0,
        MellowWebMainslPercentage = 0,
        //MellowWebSWCAFTPercentage = 0,
        MellowWebBascPercentage = 0,
        //MellowWebPrismCastPercentage = 0,
        //MellowWebPrismCaltPercentage = 0,
        MellowWebZinusTracyPercentage = 0,
        MellowWebZinusChsPercentage = 0,
        MellowFeedable = true,
        MellowDupCount = 0,
        HouzzCustSKU = "",
        //HouzzQtyBanc = 0,
        HouzzQtyMainsl = 0,
        //HouzzQtySWCAFT = 0,
        //HouzzQtyBasc = 0,
        HouzzPercentage = 0,
        //HouzzBancPercentage = 0,
        HouzzMainslPercentage = 0,
        //HouzzSWCAFTPercentage = 0,
        HouzzBascPercentage = 0,
        HouzzFeedable = false,
        HouzzDupCount = 0,
        HomeDepotCustSKU = "",
        HomeDepotQtyBanc = 0,
        HomeDepotQtyMainsl = 0,
        //HomeDepotQtySWCAFT = 0,
        HomeDepotQtyBasc = 0,
        //HomeDepotQtyPrismCast = 0,
        //HomeDepotQtyPrismCalt = 0,
        HomeDepotQtyZinusTracy = 0,
        HomeDepotQtyZinusChs = 0,
        HomeDepotPercentage = 0,
        HomeDepotBancPercentage = 0,
        HomeDepotMainslPercentage = 0,
        //HomeDepotSWCAFTPercentage = 0,
        HomeDepotBascPercentage = 0,
        //HomeDepotPrismCastPercentage = 0,
        //HomeDepotPrismCaltPercentage = 0,
        HomeDepotZinusTracyPercentage = 0,
        HomeDepotZinusChsPercentage = 0,
        HomeDepotFeedable = true,
        HomeDepotDupCount = 0,
        TargetCustSKU = "",
        //TargetQtyBanc = 0,
        TargetQtyMainsl = 0,
        //TargetQtySWCAFT = 0,
        //TargetQtyBasc = 0,
        //TargetQtyPrismCast = 0,
        //TargetQtyPrismCalt = 0,
        TargetQtyZinusTracy = 0,
        TargetQtyZinusChs = 0,
        TargetPercentage = 0,
        //TargetBancPercentage = 0,
        TargetMainslPercentage = 0,
        //TargetSWCAFTPercentage = 0,
        //TargetBascPercentage = 0,
        //TargetPrismCastPercentage = 0,
        //TargetPrismCaltPercentage = 0,
        TargetZinusTracyPercentage = 0,
        TargetZinusChsPercentage = 0,
        TargetFeedable = true,
        TargetDupCount = 0,
        etcMarketQty = 0,
        etcMarketPercentage = 0,
        //totalStagePOQtyBanc = 0,
        totalStagePOQtyMainsl = 0,
        //totalStagePOQtySWCAFT = 0,
        //totalStagePOQtyBasc = 0,
        //totalStagePOQtyPrismCast = 0,
        //totalStagePOQtyPrismCalt = 0,
        totalStagePOQtyZinusTracy = 0,
        totalStagePOQtyZinusChs = 0,
        //leftOverQtyBanc = 0,
        leftOverQtyMainsl = 0,
        //leftOverQtySWCAFT = 0,
        //leftOverQtyBasc = 0,
        //leftOverQtyPrismCast = 0,
        //leftOverQtyPrismCalt = 0,
        leftOverQtyZinusTracy = 0,
        leftOverQtyZinusChs = 0,
        isCooMasterSku = (bi.IsCoOmasterSku.HasValue ? (bool)bi.IsCoOmasterSku : (itemTrkCoOs.Where(tc => tc.CoItemNoId == (int)bi.ItemNoId).FirstOrDefault() == null ? true : false)),
        HasMkIcrNotCooMaster = (bi.IsCoOmasterSku.HasValue ? (bool)bi.IsCoOmasterSku : (itemTrkCoOs.Where(tc => tc.CoItemNoId == (int)bi.ItemNoId).FirstOrDefault() == null ? false : true)),
        hasCooSlaveSku = (itemTrkCoOs.Where(tc => tc.ItemNoId == (int)bi.ItemNoId).FirstOrDefault() == null ? false : true),
        //cooSlaveSkuId = ((bool)bi.IsCoOmasterSku == false ?
        //    itemTrkCoOs.Where(tc => tc.CoItemNoId == (int)bi.ItemNoId).FirstOrDefault().ItemNoId : 0),
        cooSlaveSkuId = (bi.IsCoOmasterSku.HasValue ? ((((bool)bi.IsCoOmasterSku == true) && (itemTrkCoOs.Where(tc => tc.ItemNoId == (int)bi.ItemNoId).FirstOrDefault() != null)) ?
            itemTrkCoOs.Where(tc => tc.ItemNoId == (int)bi.ItemNoId).FirstOrDefault().CoItemNoId : 0) : 0),
        cooMasterSkuId = (bi.CoOmasterSkuId.HasValue ? (int)bi.CoOmasterSkuId : 0),
        countParetoA = 0,
        countParetoB = 0,
        countParetoC = 0,
        paretoAqty = 0,
        paretoBqty = 0,
        AmazonRule = false,
        eBayRule = false,
        WayfairRule = false,
        WalmartRule = false,
        OverstockRule = false,
        BPMRule = false,
        MellowRule = false,
        HomeDepotRule = false,
        TargetRule = false
      }).ToList();// 06/06/2023

      GetInventoryFeedsItemDTO tmpFeedsItem = new GetInventoryFeedsItemDTO();
      //new InvFeedsItemLocQty();
      //invFeedReport.RealTimeInvUpdateId
      // Need to check here on 6/20/2024
      BpmItem tmpBpmItem = new BpmItem();
      foreach (InvFeedsCurrentStatus tmpDto in currentStatuses)
      {
        tmpFeedsItem = serviceResponse.FindLast((GetInventoryFeedsItemDTO s) => s.ItemNoId == tmpDto.ItemNoId);
        if (tmpFeedsItem != null)
        {
          tmpFeedsItem.QtyAvailMainsl = tmpDto.QtyAvailMainSl;
          tmpFeedsItem.QtyAvailZinusTracy = tmpDto.QtyAvailZinusTracy;
          tmpFeedsItem.QtyAvailZinusChs = tmpDto.QtyAvailZinusChs;
          tmpFeedsItem.QtyAvailActualMainsl = tmpDto.QtyAvailMainSl;
          tmpFeedsItem.QtyAvailActualZinusTracy = tmpDto.QtyAvailZinusTracy;
          tmpFeedsItem.QtyAvailActualZinusChs = tmpDto.QtyAvailZinusChs;
          tmpFeedsItem.QtyOnHandMainsl = tmpDto.QtyOnHandMainSl;
          tmpFeedsItem.QtyOnHandZinusTracy = tmpDto.QtyOnHandZinusTracy;
          tmpFeedsItem.QtyOnHandZinusChs = tmpDto.QtyOnHandZinusChs;
          tmpFeedsItem.totalStagePOQtyMainsl = tmpDto.StagePomainSl;
          tmpFeedsItem.totalStagePOQtyZinusTracy = tmpDto.StagePozinusTracy;
          tmpFeedsItem.totalStagePOQtyZinusChs = tmpDto.StagePozinusChs;
        }
        else // important part
        {
          tmpBpmItem = await _kc.BpmItems
            .Where((BpmItem bi) => bi.ItemStatusId <= itemStatus && bi.ItemTypeId <= itemType && bi.IsFeedable == true && bi.ItemNoId == tmpFeedsItem.ItemNoId)
            .Where(bi => bi.ItemStatusId != null)
            .Include((BpmItem bi) => bi.ItemStatus)
            //            .Where(b => b.ItemNoId == tmpFeedsItem.ItemNoId)
            .FirstOrDefaultAsync();
          if (tmpBpmItem != null)
          {
            tmpFeedsItem = new GetInventoryFeedsItemDTO()
            {
              ItemNoId = tmpBpmItem.ItemNoId,
              ItemStatus = tmpBpmItem.ItemStatus.StatusItem,
              ItemStatusId = (int)tmpBpmItem.ItemStatusId,
              ItemName = tmpBpmItem.ItemName,
              //AppliedFeedingRuleNoBanc = 0,
              //AppliedFeedingRuleTypeBanc = "",
              AppliedFeedingRuleNoMainsl = 0,
              AppliedFeedingRuleTypeMainsl = "",
              //AppliedFeedingRuleNoSWCAFT = 0,
              //AppliedFeedingRuleTypeSWCAFT = "",
              //AppliedFeedingRuleNoBasc = 0,
              //AppliedFeedingRuleTypeBasc = "",
              //AppliedFeedingRuleNoPrismCast = 0,
              //AppliedFeedingRuleTypePrismCast = "",
              //AppliedFeedingRuleNoPrismCalt = 0,
              //AppliedFeedingRuleTypePrismCalt = "",
              AppliedFeedingRuleNoZinusTracy = 0,
              AppliedFeedingRuleTypeZinusTracy = "",
              AppliedFeedingRuleNoZinusChs = 0,
              AppliedFeedingRuleTypeZinusChs = "",
              //QtyAvailBanc = 0,
              QtyAvailMainsl = tmpDto.QtyAvailMainSl,
              //QtyAvailSWCAFT = 0,
              //QtyAvailBasc = 0,
              //QtyAvailPrismCast = 0,
              //QtyAvailPrismCalt = 0,
              QtyAvailZinusTracy = tmpDto.QtyAvailZinusTracy,
              QtyAvailZinusChs = tmpDto.QtyAvailZinusChs,
              //QtyAvailActualBanc = 0,
              QtyAvailActualMainsl = tmpDto.QtyAvailMainSl,
              //QtyAvailActualSWCAFT = 0,
              //QtyAvailActualBasc = 0,
              //QtyAvailActualPrismCast = 0,
              //QtyAvailActualPrismCalt = 0,
              QtyAvailActualZinusTracy = tmpDto.QtyAvailZinusTracy,
              QtyAvailActualZinusChs = tmpDto.QtyAvailZinusChs,
              QtyAvailAmzInv = 0,
              QtyAvailCGInv = 0,
              QtyOnHandGCInv = 0,
              //QtyOnHandBanc = 0,
              QtyOnHandMainsl = tmpDto.QtyOnHandMainSl,
              //QtyOnHandSWCAFT = 0,
              //QtyOnHandBasc = 0,
              //QtyOnHandPrismCast = 0,
              //QtyOnHandPrismCalt = 0,
              QtyOnHandZinusTracy = tmpDto.QtyOnHandMainSl,
              QtyOnHandZinusChs = tmpDto.QtyOnHandMainSl,
              QtyOnHandAmzInv = 0,
              BancFeedable = false,
              MainslFeedable = true,
              //SWCAFTFeedable = true,
              BascFeedable = false,
              //PrismCastFeedable = true,
              //PrismCaltFeedable = true,
              ZinusTracyFeedable = true,
              ZinusChsFeedable = true,
              AmazonCustSKU = "",
              //AmazonQtyBanc = 0,
              AmazonQtyMainsl = 0,
              //AmazonQtySWCAFT = 0,
              //AmazonQtyBasc = 0,
              //AmazonQtyPrismCast = 0,
              //AmazonQtyPrismCalt = 0,
              AmazonQtyZinusTracy = 0,
              AmazonQtyZinusChs = 0,
              AmazonPercentage = 0,
              //AmazonBancPercentage = 0,
              AmazonMainslPercentage = 0,
              //AmazonSWCAFTPercentage = 0,
              AmazonBascPercentage = 0,
              //AmazonPrismCastPercentage = 0,
              //AmazonPrismCaltPercentage = 0,
              AmazonZinusTracyPercentage = 0,
              AmazonZinusChsPercentage = 0,
              AmazonFeedable = true,
              AmazonDupCount = 0,
              WayfairCustSKU = "",
              //WayfairQtyBanc = 0,
              WayfairQtyMainsl = 0,
              //WayfairQtySWCAFT = 0,
              //WayfairQtyBasc = 0,
              //WayfairQtyPrismCast = 0,
              //WayfairQtyPrismCalt = 0,
              WayfairQtyZinusTracy = 0,
              WayfairQtyZinusChs = 0,
              WayfairPercentage = 0,
              //WayfairBancPercentage = 0,
              WayfairMainslPercentage = 0,
              //WayfairSWCAFTPercentage = 0,
              WayfairBascPercentage = 0,
              //WayfairPrismCastPercentage = 0,
              //WayfairPrismCaltPercentage = 0,
              WayfairZinusTracyPercentage = 0,
              WayfairZinusChsPercentage = 0,
              WayfairFeedable = true,
              WayfairDupCount = 0,
              WalmartCustSKU = "",
              //WalmartQtyBanc = 0,
              WalmartQtyMainsl = 0,
              //WalmartQtySWCAFT = 0,
              //WalmartQtyBasc = 0,
              //WalmartQtyPrismCast = 0,
              //WalmartQtyPrismCalt = 0,
              WalmartQtyZinusTracy = 0,
              WalmartQtyZinusChs = 0,
              WalmartPercentage = 0,
              //WalmartBancPercentage = 0,
              WalmartMainslPercentage = 0,
              //WalmartSWCAFTPercentage = 0,
              //WalmartBascPercentage = 0,
              //WalmartPrismCastPercentage = 0,
              //WalmartPrismCaltPercentage = 0,
              WalmartZinusTracyPercentage = 0,
              WalmartZinusChsPercentage = 0,
              WalmartFeedable = true,
              WalmartDupCount = 0,
              OverstockCustSKU = "",
              //OverstockQtyBanc = 0,
              OverstockQtyMainsl = 0,
              //OverstockQtySWCAFT = 0,
              //OverstockQtyBasc = 0,
              //OverstockQtyPrismCast = 0,
              //OverstockQtyPrismCalt = 0,
              OverstockQtyZinusTracy = 0,
              OverstockQtyZinusChs = 0,
              OverstockPercentage = 0,
              //OverstockBancPercentage = 0,
              OverstockMainslPercentage = 0,
              //OverstockSWCAFTPercentage = 0,
              //OverstockBascPercentage = 0,
              //OverstockPrismCastPercentage = 0,
              //OverstockPrismCaltPercentage = 0,
              OverstockZinusTracyPercentage = 0,
              OverstockZinusChsPercentage = 0,
              OverstockFeedable = true,
              OverstockDupCount = 0,
              eBayCustSKU = "",
              //eBayQtyBanc = 0,
              eBayQtyMainsl = 0,
              //eBayQtySWCAFT = 0,
              //eBayQtyBasc = 0,
              //eBayQtyPrismCast = 0,
              //eBayQtyPrismCalt = 0,
              eBayQtyZinusTracy = 0,
              eBayQtyZinusChs = 0,
              eBayPercentage = 0,
              //eBayBancPercentage = 0,
              eBayMainslPercentage = 0,
              //eBaySWCAFTPercentage = 0,
              //eBayBascPercentage = 0,
              //eBayPrismCastPercentage = 0,
              //eBayPrismCaltPercentage = 0,
              eBayZinusTracyPercentage = 0,
              eBayZinusChsPercentage = 0,
              eBayFeedable = true,
              eBayDupCount = 0,
              BPMWebCustSKU = "",
              //BPMWebQtyBanc = 0,
              BPMWebQtyMainsl = 0,
              //BPMWebQtySWCAFT = 0,
              //BPMWebQtyBasc = 0,
              //BPMWebQtyPrismCast = 0,
              //BPMWebQtyPrismCalt = 0,
              BPMWebQtyZinusTracy = 0,
              BPMWebQtyZinusChs = 0,
              BPMWebPercentage = 0,
              //BPMWebBancPercentage = 0,
              BPMWebMainslPercentage = 0,
              //BPMWebSWCAFTPercentage = 0,
              //BPMWebBascPercentage = 0,
              //BPMWebPrismCastPercentage = 0,
              //BPMWebPrismCaltPercentage = 0,
              BPMWebZinusTracyPercentage = 0,
              BPMWebZinusChsPercentage = 0,
              BPMFeedable = true,
              BPMDupCount = 0,
              MellowWebCustSKU = "",
              //MellowWebQtyBanc = 0,
              MellowWebQtyMainsl = 0,
              //MellowWebQtySWCAFT = 0,
              //MellowWebQtyBasc = 0,
              //MellowWebQtyPrismCast = 0,
              //MellowWebQtyPrismCalt = 0,
              MellowWebQtyZinusTracy = 0,
              MellowWebQtyZinusChs = 0,
              MellowWebPercentage = 0,
              //MellowWebBancPercentage = 0,
              MellowWebMainslPercentage = 0,
              //MellowWebSWCAFTPercentage = 0,
              MellowWebBascPercentage = 0,
              //MellowWebPrismCastPercentage = 0,
              //MellowWebPrismCaltPercentage = 0,
              MellowWebZinusTracyPercentage = 0,
              MellowWebZinusChsPercentage = 0,
              MellowFeedable = true,
              MellowDupCount = 0,
              HouzzCustSKU = "",
              //HouzzQtyBanc = 0,
              HouzzQtyMainsl = 0,
              //HouzzQtySWCAFT = 0,
              //HouzzQtyBasc = 0,
              HouzzPercentage = 0,
              //HouzzBancPercentage = 0,
              HouzzMainslPercentage = 0,
              //HouzzSWCAFTPercentage = 0,
              HouzzBascPercentage = 0,
              HouzzFeedable = false,
              HouzzDupCount = 0,
              HomeDepotCustSKU = "",
              HomeDepotQtyBanc = 0,
              HomeDepotQtyMainsl = 0,
              //HomeDepotQtySWCAFT = 0,
              HomeDepotQtyBasc = 0,
              //HomeDepotQtyPrismCast = 0,
              //HomeDepotQtyPrismCalt = 0,
              HomeDepotQtyZinusTracy = 0,
              HomeDepotQtyZinusChs = 0,
              HomeDepotPercentage = 0,
              HomeDepotBancPercentage = 0,
              HomeDepotMainslPercentage = 0,
              //HomeDepotSWCAFTPercentage = 0,
              HomeDepotBascPercentage = 0,
              //HomeDepotPrismCastPercentage = 0,
              //HomeDepotPrismCaltPercentage = 0,
              HomeDepotZinusTracyPercentage = 0,
              HomeDepotZinusChsPercentage = 0,
              HomeDepotFeedable = true,
              HomeDepotDupCount = 0,
              TargetCustSKU = "",
              //TargetQtyBanc = 0,
              TargetQtyMainsl = 0,
              //TargetQtySWCAFT = 0,
              //TargetQtyBasc = 0,
              //TargetQtyPrismCast = 0,
              //TargetQtyPrismCalt = 0,
              TargetQtyZinusTracy = 0,
              TargetQtyZinusChs = 0,
              TargetPercentage = 0,
              //TargetBancPercentage = 0,
              TargetMainslPercentage = 0,
              //TargetSWCAFTPercentage = 0,
              //TargetBascPercentage = 0,
              //TargetPrismCastPercentage = 0,
              //TargetPrismCaltPercentage = 0,
              TargetZinusTracyPercentage = 0,
              TargetZinusChsPercentage = 0,
              TargetFeedable = true,
              TargetDupCount = 0,
              etcMarketQty = 0,
              etcMarketPercentage = 0,
              //totalStagePOQtyBanc = 0,
              totalStagePOQtyMainsl = tmpDto.StagePomainSl,
              //totalStagePOQtySWCAFT = 0,
              //totalStagePOQtyBasc = 0,
              //totalStagePOQtyPrismCast = 0,
              //totalStagePOQtyPrismCalt = 0,
              totalStagePOQtyZinusTracy = tmpDto.StagePozinusTracy,
              totalStagePOQtyZinusChs = tmpDto.StagePozinusChs,
              //leftOverQtyBanc = 0,
              leftOverQtyMainsl = 0,
              //leftOverQtySWCAFT = 0,
              //leftOverQtyBasc = 0,
              //leftOverQtyPrismCast = 0,
              //leftOverQtyPrismCalt = 0,
              leftOverQtyZinusTracy = 0,
              leftOverQtyZinusChs = 0,
              isCooMasterSku = (tmpBpmItem.IsCoOmasterSku.HasValue ? (bool)tmpBpmItem.IsCoOmasterSku : (itemTrkCoOs.Where(tc => tc.CoItemNoId == (int)tmpBpmItem.ItemNoId).FirstOrDefault() == null ? true : false)),
              HasMkIcrNotCooMaster = (tmpBpmItem.IsCoOmasterSku.HasValue ? (bool)tmpBpmItem.IsCoOmasterSku : (itemTrkCoOs.Where(tc => tc.CoItemNoId == (int)tmpBpmItem.ItemNoId).FirstOrDefault() == null ? false : true)),
              hasCooSlaveSku = (itemTrkCoOs.Where(tc => tc.ItemNoId == (int)tmpBpmItem.ItemNoId).FirstOrDefault() == null ? false : true),
              //cooSlaveSkuId = ((bool)tmpBpmItem.IsCoOmasterSku == false ?
              //    itemTrkCoOs.Where(tc => tc.CoItemNoId == (int)tmpBpmItem.ItemNoId).FirstOrDefault().ItemNoId : 0),
              cooSlaveSkuId = (tmpBpmItem.IsCoOmasterSku.HasValue ? ((((bool)tmpBpmItem.IsCoOmasterSku == true) && (itemTrkCoOs.Where(tc => tc.ItemNoId == (int)tmpBpmItem.ItemNoId).FirstOrDefault() != null)) ?
            itemTrkCoOs.Where(tc => tc.ItemNoId == (int)tmpBpmItem.ItemNoId).FirstOrDefault().CoItemNoId : 0) : 0),
              cooMasterSkuId = (tmpBpmItem.CoOmasterSkuId.HasValue ? (int)tmpBpmItem.CoOmasterSkuId : 0),
              countParetoA = 0,
              countParetoB = 0,
              countParetoC = 0,
              paretoAqty = 0,
              paretoBqty = 0,
              AmazonRule = false,
              eBayRule = false,
              WayfairRule = false,
              WalmartRule = false,
              OverstockRule = false,
              BPMRule = false,
              MellowRule = false,
              HomeDepotRule = false,
              TargetRule = false


            };
          }
        }
      }// End of foreach
      /*
      foreach (InvFeedsItem ifi in invFeedsItems)
      {
        GetInventoryFeedsItemDTO tmpInvFeedsItem = serviceResponse.FindLast((GetInventoryFeedsItemDTO s) => s.ItemNoId == ifi.ItemNoId);
        if (tmpInvFeedsItem != null)
        {
          // Getting total Stage PO for each warehouse
          //tmpInvFeedsItem.totalStagePOQtyBanc = await calculateStageBackOrderSUM(bancId, (int)ifi.ItemNoId);
          //tmpInvFeedsItem.totalStagePOQtyBasc = await calculateStageBackOrderSUM(bascId, (int)ifi.ItemNoId);
          //tmpInvFeedsItem.totalStagePOQtyMainsl = await calculateStageBackOrderSUM(mainslId, (int)ifi.ItemNoId);
          //tmpInvFeedsItem.totalStagePOQtySWCAFT = await calculateStageBackOrderSUM(swcaftId, (int)ifi.ItemNoId);
          /*
          InvFeedsItemLocQty tmpLocQty = ifi.InvFeedsItemLocQties.Where((InvFeedsItemLocQty i) => i.ItemLocId == bancId).FirstOrDefault();
          if (tmpLocQty != null)
          {
            tmpInvFeedsItem.QtyAvailBanc = (tmpLocQty.QtyAvail.HasValue ? tmpLocQty.QtyAvail.Value : 0);
            tmpInvFeedsItem.QtyAvailActualBanc = tmpInvFeedsItem.QtyAvailBanc;
            tmpInvFeedsItem.QtyOnHandBanc = (tmpLocQty.QtyOnHand.HasValue ? tmpLocQty.QtyOnHand.Value : 0);
            tmpInvFeedsItem.totalStagePOQtyBanc = (tmpLocQty.StagePoqtyModified.HasValue ? tmpLocQty.StagePoqtyModified.Value : 0);
          }
          else
          {
            tmpInvFeedsItem.QtyAvailBanc = 0;
            tmpInvFeedsItem.QtyAvailActualBanc = 0;
            tmpInvFeedsItem.QtyOnHandBanc = 0;
            tmpInvFeedsItem.totalStagePOQtyBanc = 0;
          }*/
      /*InvFeedsItemLocQty tmpLocQty = ifi.InvFeedsItemLocQties.Where((InvFeedsItemLocQty i) => i.ItemLocId == mainslId).FirstOrDefault();
      if (tmpLocQty != null)
      {
        tmpInvFeedsItem.QtyAvailMainsl = (tmpLocQty.QtyAvail.HasValue ? tmpLocQty.QtyAvail.Value : 0);
        tmpInvFeedsItem.QtyAvailActualMainsl = tmpInvFeedsItem.QtyAvailMainsl;
        tmpInvFeedsItem.QtyOnHandMainsl = (tmpLocQty.QtyOnHand.HasValue ? tmpLocQty.QtyOnHand.Value : 0);
        tmpInvFeedsItem.totalStagePOQtyMainsl = (tmpLocQty.StagePoqtyModified.HasValue ? tmpLocQty.StagePoqtyModified.Value : 0);
      }
      else
      {
        tmpInvFeedsItem.QtyAvailMainsl = 0;
        tmpInvFeedsItem.QtyAvailActualMainsl = 0;
        tmpInvFeedsItem.QtyOnHandMainsl = 0;
        tmpInvFeedsItem.totalStagePOQtyMainsl = 0;
      }/*
      tmpLocQty = ifi.InvFeedsItemLocQties.Where((InvFeedsItemLocQty i) => i.ItemLocId == swcaftId).FirstOrDefault();
      if (tmpLocQty != null)
      {
        tmpInvFeedsItem.QtyAvailSWCAFT = (tmpLocQty.QtyAvail.HasValue ? tmpLocQty.QtyAvail.Value : 0);
        tmpInvFeedsItem.QtyAvailActualSWCAFT = tmpInvFeedsItem.QtyAvailSWCAFT;
        tmpInvFeedsItem.QtyOnHandSWCAFT = (tmpLocQty.QtyOnHand.HasValue ? tmpLocQty.QtyOnHand.Value : 0);
        tmpInvFeedsItem.totalStagePOQtySWCAFT = (tmpLocQty.StagePoqtyModified.HasValue ? tmpLocQty.StagePoqtyModified.Value : 0);
      }
      else
      {
        tmpInvFeedsItem.QtyAvailSWCAFT = 0;
        tmpInvFeedsItem.QtyAvailActualSWCAFT = 0;
        tmpInvFeedsItem.QtyOnHandSWCAFT = 0;
        tmpInvFeedsItem.totalStagePOQtySWCAFT = 0;
      }*/
      /*
      tmpLocQty = ifi.InvFeedsItemLocQties.Where((InvFeedsItemLocQty i) => i.ItemLocId == bascId).FirstOrDefault();
      if (tmpLocQty != null)
      {
        tmpInvFeedsItem.QtyAvailBasc = (tmpLocQty.QtyAvail.HasValue ? tmpLocQty.QtyAvail.Value : 0);
        tmpInvFeedsItem.QtyAvailActualBasc = tmpInvFeedsItem.QtyAvailBasc;
        tmpInvFeedsItem.QtyOnHandBasc = (tmpLocQty.QtyOnHand.HasValue ? tmpLocQty.QtyOnHand.Value : 0);
        tmpInvFeedsItem.totalStagePOQtyBasc = (tmpLocQty.StagePoqtyModified.HasValue ? tmpLocQty.StagePoqtyModified.Value : 0);
      }
      else
      {
        tmpInvFeedsItem.QtyAvailBasc = 0;
        tmpInvFeedsItem.QtyAvailActualBasc = 0;
        tmpInvFeedsItem.QtyOnHandBasc = 0;
        tmpInvFeedsItem.totalStagePOQtyBasc = 0;
      }*/
      /*
      tmpLocQty = ifi.InvFeedsItemLocQties.Where((InvFeedsItemLocQty i) => i.ItemLocId == prsmCastId).FirstOrDefault();
      if (tmpLocQty != null)
      {
        tmpInvFeedsItem.QtyAvailPrismCast = (tmpLocQty.QtyAvail.HasValue ? tmpLocQty.QtyAvail.Value : 0);
        tmpInvFeedsItem.QtyAvailActualPrismCast = tmpInvFeedsItem.QtyAvailPrismCast;
        tmpInvFeedsItem.QtyOnHandPrismCast = (tmpLocQty.QtyOnHand.HasValue ? tmpLocQty.QtyOnHand.Value : 0);
        tmpInvFeedsItem.totalStagePOQtyPrismCast = (tmpLocQty.StagePoqtyModified.HasValue ? tmpLocQty.StagePoqtyModified.Value : 0);
      }
      else
      {
        tmpInvFeedsItem.QtyAvailPrismCast = 0;
        tmpInvFeedsItem.QtyAvailActualPrismCast = 0;
        tmpInvFeedsItem.QtyOnHandPrismCast = 0;
        tmpInvFeedsItem.totalStagePOQtyPrismCast = 0;
      }

      tmpLocQty = ifi.InvFeedsItemLocQties.Where((InvFeedsItemLocQty i) => i.ItemLocId == prsmCaltId).FirstOrDefault();
      if (tmpLocQty != null)
      {
        tmpInvFeedsItem.QtyAvailPrismCalt = (tmpLocQty.QtyAvail.HasValue ? tmpLocQty.QtyAvail.Value : 0);
        tmpInvFeedsItem.QtyAvailActualPrismCalt = tmpInvFeedsItem.QtyAvailPrismCalt;
        tmpInvFeedsItem.QtyOnHandPrismCalt = (tmpLocQty.QtyOnHand.HasValue ? tmpLocQty.QtyOnHand.Value : 0);
        tmpInvFeedsItem.totalStagePOQtyPrismCalt = (tmpLocQty.StagePoqtyModified.HasValue ? tmpLocQty.StagePoqtyModified.Value : 0);
      }
      else
      {
        tmpInvFeedsItem.QtyAvailPrismCalt = 0;
        tmpInvFeedsItem.QtyAvailActualPrismCalt = 0;
        tmpInvFeedsItem.QtyOnHandPrismCalt = 0;
        tmpInvFeedsItem.totalStagePOQtyPrismCalt = 0;
      }*/
      /*
      tmpLocQty = ifi.InvFeedsItemLocQties.Where((InvFeedsItemLocQty i) => i.ItemLocId == zinusTracyId).FirstOrDefault();
      if (tmpLocQty != null)
      {
        tmpInvFeedsItem.QtyAvailZinusTracy = (tmpLocQty.QtyAvail.HasValue ? tmpLocQty.QtyAvail.Value : 0);
        tmpInvFeedsItem.QtyAvailActualZinusTracy = tmpInvFeedsItem.QtyAvailZinusTracy;
        tmpInvFeedsItem.QtyOnHandZinusTracy = (tmpLocQty.QtyOnHand.HasValue ? tmpLocQty.QtyOnHand.Value : 0);
        tmpInvFeedsItem.totalStagePOQtyZinusTracy = (tmpLocQty.StagePoqtyModified.HasValue ? tmpLocQty.StagePoqtyModified.Value : 0);
      }
      else
      {
        tmpInvFeedsItem.QtyAvailZinusTracy = 0;
        tmpInvFeedsItem.QtyAvailActualZinusTracy = 0;
        tmpInvFeedsItem.QtyOnHandZinusTracy = 0;
        tmpInvFeedsItem.totalStagePOQtyZinusTracy = 0;
      }

      tmpLocQty = ifi.InvFeedsItemLocQties.Where((InvFeedsItemLocQty i) => i.ItemLocId == zinusChsId).FirstOrDefault();
      if (tmpLocQty != null)
      {
        tmpInvFeedsItem.QtyAvailZinusChs = (tmpLocQty.QtyAvail.HasValue ? tmpLocQty.QtyAvail.Value : 0);
        tmpInvFeedsItem.QtyAvailActualZinusChs = tmpInvFeedsItem.QtyAvailZinusChs;
        tmpInvFeedsItem.QtyOnHandZinusChs = (tmpLocQty.QtyOnHand.HasValue ? tmpLocQty.QtyOnHand.Value : 0);
        tmpInvFeedsItem.totalStagePOQtyZinusChs = (tmpLocQty.StagePoqtyModified.HasValue ? tmpLocQty.StagePoqtyModified.Value : 0);
      }
      else
      {
        tmpInvFeedsItem.QtyAvailZinusChs = 0;
        tmpInvFeedsItem.QtyAvailActualZinusChs = 0;
        tmpInvFeedsItem.QtyOnHandZinusChs = 0;
        tmpInvFeedsItem.totalStagePOQtyZinusChs = 0;
      }

    }
    else
    {
      Console.WriteLine("Should not come here!!!!");
    }
  }*/
      //Getting Amazon Inventory Qty
      List<InvQty> InvAmazon = new List<InvQty>();
      //int intTemp = 0;
      InvAmazon = await _kc.KoAmzvendorRptInvts
        //.Where(i => i.DateStart > tmpStartDateStart && i.DateStart < tmpStartDateStart)
        .Where(i => i.DateStart == tmpStartDate)
        .Where(i => i.QtyOnHand != null && i.ItemNo != null)
        .Select
        (i => new InvQty()
        {
          ItemName = i.ItemNo,
          QtyOnAvail = (int)i.QtyOnHand
        }
        ).ToListAsync();
      /*
        InvAmazon = await (from ia in _kc.KoAmzvendorRptInvts
                                        where ia.DateStart == tmpStartDate
                                        select ia into n
                                        select new InvQty
                                        {
                                          ItemNoId = int.Parse(n.ItemNo),
                                          QtyOnAvail = (int)n.QtyOnHand
                                        }).ToListAsync();
      */


      foreach (InvQty tmpQty in InvAmazon)
      {
        GetInventoryFeedsItemDTO tmpInvFeedsItem = serviceResponse.FindLast((GetInventoryFeedsItemDTO s) => s.ItemName == tmpQty.ItemName.ToUpper());
        if (tmpInvFeedsItem != null)
        {
          tmpInvFeedsItem.QtyOnHandAmzInv = tmpQty.QtyOnAvail;
          tmpInvFeedsItem.QtyAvailAmzInv = tmpQty.QtyOnAvail;
        }
        else
        {
          Console.WriteLine("Should not come here!!!!");
        }
      }
      List<InvSalesParetoRuleListItemDTO> invParetoRuleList = await GetInvFeedParetoRuleItems(false, today, invFeedReport, cgIds, bpmIds);
      List<ItemSoldQty> wmtTopSellers = await (from i in _kc.InvDs
                                               where i.SoDate >= today.AddDays(-1095.0)
                                               group i by i.ItemNoId into i
                                               select new ItemSoldQty
                                               {
                                                 ItemNoId = i.Key,
                                                 SumQty = i.Sum((InvD i) => i.QtyInv)
                                               } into i
                                               orderby i.SumQty descending
                                               select i).Take(walmartTopSellers).ToListAsync();
      int index = 0;
      InvFeedsItem invFeedsItem = new InvFeedsItem();
      //new BpmItem();
      //new List<NsIcr>();

      // new InvFeedsRuleSku();
      //new InvSalesParetoRuleListItemDTO();
      //for (; index < serviceResponse.Count; index++)

      // For empty Master COO SKUs - Safegauard
      List<InvFeedsItem> cooSlaves = invFeedsItems.Where(i => i.ItemNo.IsCoOmasterSku == false).ToList();
      //List<ItemTrkCoO> itemTrkCoOs = await _kc.ItemTrkCoOs
      //  .ToListAsync();
      List<ItemTrkCoO> masterCooSkus = new List<ItemTrkCoO>();
      List<InvFeedsItem> newInvFeedsItems = new List<InvFeedsItem>();
      foreach (InvFeedsItem tmpDto in cooSlaves)
      {
        tmpCoo = itemTrkCoOs.Where(itc => itc.CoItemNoId == tmpDto.ItemNoId).FirstOrDefault();
        if (tmpCoo != null)
        { masterCooSkus.Add(tmpCoo); }
      }

      foreach (ItemTrkCoO tmpDto in masterCooSkus)
      {
        invFeedsItem = invFeedsItems.Where((InvFeedsItem bi) => bi.ItemNoId == tmpDto.ItemNoId).FirstOrDefault();
        if (invFeedsItem == null)
        {
          invFeedsItem = new InvFeedsItem
          {
            ItemNo = tmpDto.ItemNo,
            ItemNoId = tmpDto.ItemNoId,
            InvFeedsReport = invFeedReport,
            InvFeedsReportId = invFeedReport.InvFeedsReportId,
            IsSet = false
          };
          invFeedsItems.Add(invFeedsItem);
          newInvFeedsItems.Add(invFeedsItem);
        }
      }
      await _kc.InvFeedsItems.AddRangeAsync(newInvFeedsItems);
      await _kc.SaveChangesAsync();
      //await _kc.BulkUpdateAsync(invFeedsItems);
      // For COO(Master/Slave) SKUs
      /*foreach(GetInventoryFeedsItemDTO itemDto in serviceResponse)
      {
				if (itemDto.hasCooSlaveSku == true)
				{
					if (itemDto.ItemNoId == 2232 || itemDto.ItemNoId == 2234)
					{ Console.Write("Here!"); }
					cooInvFeedsItems = serviceResponse.Where(s => s.cooMasterSkuId == itemDto.ItemNoId).ToList();
					if (cooInvFeedsItems.Count > 0)
					{
						foreach (GetInventoryFeedsItemDTO tmpDto in cooInvFeedsItems)
						{
							itemDto.QtyAvailBanc += tmpDto.QtyAvailBanc;
							itemDto.QtyOnHandBanc += tmpDto.QtyOnHandBanc;
							itemDto.QtyAvailBasc += tmpDto.QtyAvailBasc;
							itemDto.QtyOnHandBasc += tmpDto.QtyOnHandBasc;
							itemDto.QtyAvailMainsl += tmpDto.QtyAvailMainsl;
							itemDto.QtyOnHandMainsl += tmpDto.QtyOnHandMainsl;
							itemDto.QtyAvailSWCAFT += tmpDto.QtyAvailSWCAFT;
							itemDto.QtyOnHandSWCAFT += tmpDto.QtyOnHandSWCAFT;
							itemDto.QtyAvailPrismCast += tmpDto.QtyAvailPrismCast;
							itemDto.QtyOnHandPrismCast += tmpDto.QtyOnHandPrismCast;
							itemDto.QtyAvailPrismCalt += tmpDto.QtyAvailPrismCalt;
							itemDto.QtyOnHandPrismCalt += tmpDto.QtyOnHandPrismCalt;
						}
					}
				} // End of codes for COO SKUs
			}*/
      serviceResponse = serviceResponse.OrderBy(x => x.ItemNoId).ToList();

      serviceResponse = await GetSlaveSkuMkIcrFeeding((int)inventoryConfig.SlaveMkIcrRatio, serviceResponse); // For NSPSC

      while (index < serviceResponse.Count)
      { // 06/20/2024
        invFeedsItem = invFeedsItems.Where((InvFeedsItem bi) => bi.ItemNoId == serviceResponse[index].ItemNoId).FirstOrDefault();
        GetInventoryFeedsItemDTO getInventoryFeedsItemDTO = serviceResponse[index];
        getInventoryFeedsItemDTO.AmazonDupCount = await countDuplicatedSKU(amazonID, serviceResponse[index].ItemNoId);
        GetInventoryFeedsItemDTO getInventoryFeedsItemDTO2 = serviceResponse[index];
        getInventoryFeedsItemDTO2.OverstockDupCount = await countDuplicatedSKU(ostID, serviceResponse[index].ItemNoId);
        GetInventoryFeedsItemDTO getInventoryFeedsItemDTO3 = serviceResponse[index];
        getInventoryFeedsItemDTO3.WalmartDupCount = await countDuplicatedSKU(walmartID, serviceResponse[index].ItemNoId);
        GetInventoryFeedsItemDTO getInventoryFeedsItemDTO4 = serviceResponse[index];
        getInventoryFeedsItemDTO4.WayfairDupCount = await countDuplicatedSKU(wayfairID, serviceResponse[index].ItemNoId);
        GetInventoryFeedsItemDTO getInventoryFeedsItemDTO5 = serviceResponse[index];
        getInventoryFeedsItemDTO5.BPMDupCount = await countDuplicatedSKU(bpmWebID, serviceResponse[index].ItemNoId);
        GetInventoryFeedsItemDTO getInventoryFeedsItemDTO6 = serviceResponse[index];
        getInventoryFeedsItemDTO6.eBayDupCount = await countDuplicatedSKU(ebayID, serviceResponse[index].ItemNoId);
        GetInventoryFeedsItemDTO getInventoryFeedsItemDTO7 = serviceResponse[index];
        getInventoryFeedsItemDTO7.MellowDupCount = await countDuplicatedSKU(mellowWebID, serviceResponse[index].ItemNoId);
        GetInventoryFeedsItemDTO getInventoryFeedsItemDTO8 = serviceResponse[index];
        getInventoryFeedsItemDTO8.HouzzDupCount = await countDuplicatedSKU(houzzID, serviceResponse[index].ItemNoId);
        GetInventoryFeedsItemDTO getInventoryFeedsItemDTO9 = serviceResponse[index];
        getInventoryFeedsItemDTO9.HomeDepotDupCount = await countDuplicatedSKU(homedepotId, serviceResponse[index].ItemNoId);
        GetInventoryFeedsItemDTO getInventoryFeedsItemDT1O = serviceResponse[index];
        getInventoryFeedsItemDTO9.TargetDupCount = await countDuplicatedSKU(targetId, serviceResponse[index].ItemNoId);
        if (serviceResponse[index].AmazonDupCount == 0)
        {
          serviceResponse[index].AmazonFeedable = false;
        }
        if (serviceResponse[index].OverstockDupCount == 0)
        {
          serviceResponse[index].OverstockFeedable = false;
        }
        if (serviceResponse[index].WalmartDupCount == 0)
        {
          serviceResponse[index].WalmartFeedable = false;
        }
        if (serviceResponse[index].WayfairDupCount == 0)
        {
          serviceResponse[index].WayfairFeedable = false;
        }
        if (serviceResponse[index].BPMDupCount == 0)
        {
          serviceResponse[index].BPMFeedable = false;
        }
        if (serviceResponse[index].eBayDupCount == 0)
        {
          serviceResponse[index].eBayFeedable = false;
        }
        if (serviceResponse[index].MellowDupCount == 0)
        {
          serviceResponse[index].MellowFeedable = false;
        }
        if (serviceResponse[index].HouzzDupCount == 0)
        {
          serviceResponse[index].HouzzFeedable = false;
        }
        if (serviceResponse[index].HomeDepotDupCount == 0)
        {
          serviceResponse[index].HomeDepotFeedable = false;
        }
        if (serviceResponse[index].TargetDupCount == 0)
        {
          serviceResponse[index].TargetFeedable = false;
        }
        else
        {
          Console.WriteLine("HERERERE~~~!!");
        }
        //if (serviceResponse[index].ItemNoId == 1070)
        //{ Console.Write("Here!!"); }
        //if (index == 473 || index == 474 || index == 475 || index == 476 || index == 477)
        //{ Console.Write("Here!!"); }
        //if (index == 100 || index == 200 || index == 300 || index == 400 || index == 500 || index == 600 || index == 700 || index == 800 || index == 900 || index == 1000)
        //if (index == 1000 || index == 1200 || index == 1300 || index == 1400 || index == 1500 || index == 1600 || index == 1700 || index == 1800 || index == 1900 || index == 2000)
        //if (index == 900 || index == 901 || index == 902 || index == 903 || index == 904 || index == 905 || index == 906 || index == 907 || index == 908 || index == 909)
        //{ Console.WriteLine("HaHa"); }
        // if (index == 2000 || index == 2100 || index == 2200 || index == 2300 || index == 2400 || index == 2500 || index == 2600 || index == 2700 || index == 2800 || index == 2900 || index == 3000)
        //if (index == 900 || index == 901 || index == 902 || index == 903 || index == 904 || index == 905 || index == 906 || index == 907 || index == 908 || index == 909)
        //{ Console.WriteLine("HaHa"); }
        // if (index == 900 || index == 901 || index == 902 || index == 903 || index == 904 || index == 905 || index == 906 || index == 907 || index == 908 || index == 909)
        // { Console.WriteLine("HaHa"); }
        if (invFeedsItem != null || serviceResponse[index].hasCooSlaveSku == true)
        {
          // For COO SKUs
          if (serviceResponse[index].hasCooSlaveSku == true)
          {
            /*
            if(invFeedsItem != null) { 
              if (invFeedsItem.ItemNoId == 3282)
              { Console.Write("Here!!"); }
            }*/
            // BANC
            //if (serviceResponse[index].QtyAvailBanc < inventoryConfig.CooMasterSlaveCrossover)
            //{
            /*cooInvFeedsItem = serviceResponse.Where(s => s.ItemNoId == serviceResponse[index].cooSlaveSkuId).FirstOrDefault();
            if (cooInvFeedsItem != null)
            {
              serviceResponse[index].QtyAvailBanc += cooInvFeedsItem.QtyAvailBanc;
              serviceResponse[index].QtyOnHandBanc += cooInvFeedsItem.QtyOnHandBanc;
            }*/
            cooInvFeedsItems = serviceResponse.Where(s => s.cooMasterSkuId == serviceResponse[index].ItemNoId).ToList();
            if (cooInvFeedsItems.Count > 0)
            {
              foreach (GetInventoryFeedsItemDTO tmpDto in cooInvFeedsItems)
              {
                //serviceResponse[index].QtyAvailBanc += tmpDto.QtyAvailActualBanc;
                //serviceResponse[index].QtyOnHandBanc += tmpDto.QtyOnHandBanc;
                //serviceResponse[index].QtyAvailBasc += tmpDto.QtyAvailActualBasc;
                //serviceResponse[index].QtyOnHandBasc += tmpDto.QtyOnHandBasc;
                serviceResponse[index].QtyAvailMainsl += tmpDto.QtyAvailActualMainsl;
                serviceResponse[index].QtyOnHandMainsl += tmpDto.QtyOnHandMainsl;
                //serviceResponse[index].QtyAvailSWCAFT += tmpDto.QtyAvailActualSWCAFT;
                //serviceResponse[index].QtyOnHandSWCAFT += tmpDto.QtyOnHandSWCAFT;
                //serviceResponse[index].QtyAvailPrismCast += tmpDto.QtyAvailActualPrismCast;
                //serviceResponse[index].QtyOnHandPrismCast += tmpDto.QtyOnHandPrismCast;
                //serviceResponse[index].QtyAvailPrismCalt += tmpDto.QtyAvailActualPrismCalt;
                //serviceResponse[index].QtyOnHandPrismCalt += tmpDto.QtyOnHandPrismCalt;
                serviceResponse[index].QtyAvailZinusTracy += tmpDto.QtyAvailActualZinusTracy;
                serviceResponse[index].QtyOnHandZinusTracy += tmpDto.QtyOnHandZinusTracy;
                serviceResponse[index].QtyAvailZinusChs += tmpDto.QtyAvailActualZinusChs;
                serviceResponse[index].QtyOnHandZinusChs += tmpDto.QtyOnHandZinusChs;
              }
            }
            //}

            // BASC
            //if (serviceResponse[index].QtyAvailBasc < inventoryConfig.CooMasterSlaveCrossover)
            //{
            /*
              cooInvFeedsItem = serviceResponse.Where(s => s.ItemNoId == serviceResponse[index].cooSlaveSkuId).FirstOrDefault();
              if (cooInvFeedsItem != null)
              {
                serviceResponse[index].QtyAvailBasc += cooInvFeedsItem.QtyAvailBasc;
                serviceResponse[index].QtyOnHandBasc += cooInvFeedsItem.QtyOnHandBasc;
              }*/
            /*
							cooInvFeedsItems = serviceResponse.Where(s => s.ItemNoId == serviceResponse[index].cooSlaveSkuId).ToList();
							if (cooInvFeedsItems.Count > 0)
							{
								foreach (GetInventoryFeedsItemDTO tmpDto in cooInvFeedsItems)
								{
									serviceResponse[index].QtyAvailBasc += tmpDto.QtyAvailBasc;
									serviceResponse[index].QtyOnHandBasc += tmpDto.QtyOnHandBasc;
								}
							}*/
            //}

            // MainSL
            // if (serviceResponse[index].QtyAvailMainsl < inventoryConfig.CooMasterSlaveCrossover)
            //{
            /*
            cooInvFeedsItem = serviceResponse.Where(s => s.ItemNoId == serviceResponse[index].cooSlaveSkuId).FirstOrDefault();
            if (cooInvFeedsItem != null)
            {
              serviceResponse[index].QtyAvailMainsl += cooInvFeedsItem.QtyAvailMainsl;
              serviceResponse[index].QtyOnHandMainsl += cooInvFeedsItem.QtyOnHandMainsl;
            }
            */
            /*
            cooInvFeedsItems = serviceResponse.Where(s => s.ItemNoId == serviceResponse[index].cooSlaveSkuId).ToList();
            if (cooInvFeedsItems.Count > 0)
            {
              foreach (GetInventoryFeedsItemDTO tmpDto in cooInvFeedsItems)
              {
                serviceResponse[index].QtyAvailMainsl += tmpDto.QtyAvailMainsl;
                serviceResponse[index].QtyOnHandMainsl += tmpDto.QtyOnHandMainsl;
              }
            }*/
            //	}

            // SW-CAFT
            //if (serviceResponse[index].QtyAvailSWCAFT < inventoryConfig.CooMasterSlaveCrossover)
            // {
            /*
            cooInvFeedsItem = serviceResponse.Where(s => s.ItemNoId == serviceResponse[index].cooSlaveSkuId).FirstOrDefault();
            if (cooInvFeedsItem != null)
            {
              serviceResponse[index].QtyAvailSWCAFT += cooInvFeedsItem.QtyAvailSWCAFT;
              serviceResponse[index].QtyOnHandSWCAFT += cooInvFeedsItem.QtyOnHandSWCAFT;
            }
            */
            /*
            cooInvFeedsItems = serviceResponse.Where(s => s.ItemNoId == serviceResponse[index].cooSlaveSkuId).ToList();
            if (cooInvFeedsItems.Count > 0)
            {
              foreach (GetInventoryFeedsItemDTO tmpDto in cooInvFeedsItems)
              {
                serviceResponse[index].QtyAvailSWCAFT += tmpDto.QtyAvailSWCAFT;
                serviceResponse[index].QtyOnHandSWCAFT += tmpDto.QtyOnHandSWCAFT;
              }
            }*/
            //}

            // PRISM-CAST
            //if (serviceResponse[index].QtyAvailPrismCast < inventoryConfig.CooMasterSlaveCrossover)
            //{
            /*
            cooInvFeedsItem = serviceResponse.Where(s => s.ItemNoId == serviceResponse[index].cooSlaveSkuId).FirstOrDefault();
            if (cooInvFeedsItem != null)
            {
              serviceResponse[index].QtyAvailPrismCast += cooInvFeedsItem.QtyAvailPrismCast;
              serviceResponse[index].QtyOnHandPrismCast += cooInvFeedsItem.QtyOnHandPrismCast;
            }
            */
            /*
            cooInvFeedsItems = serviceResponse.Where(s => s.ItemNoId == serviceResponse[index].cooSlaveSkuId).ToList();
            if (cooInvFeedsItems.Count > 0)
            {
              foreach (GetInventoryFeedsItemDTO tmpDto in cooInvFeedsItems)
              {
                serviceResponse[index].QtyAvailPrismCast += tmpDto.QtyAvailPrismCast;
                serviceResponse[index].QtyOnHandPrismCast += tmpDto.QtyOnHandPrismCast;
              }
            }*/
            //}

            // PRISM-CALT
            // if (serviceResponse[index].QtyAvailPrismCalt < inventoryConfig.CooMasterSlaveCrossover)
            // {
            /*
            cooInvFeedsItem = serviceResponse.Where(s => s.ItemNoId == serviceResponse[index].cooSlaveSkuId).FirstOrDefault();
            if (cooInvFeedsItem != null)
            {
              serviceResponse[index].QtyAvailPrismCalt += cooInvFeedsItem.QtyAvailPrismCalt;
              serviceResponse[index].QtyOnHandPrismCalt += cooInvFeedsItem.QtyOnHandPrismCalt;
            }
            */
            /*
            cooInvFeedsItems = serviceResponse.Where(s => s.ItemNoId == serviceResponse[index].cooSlaveSkuId).ToList();
            if (cooInvFeedsItems.Count > 0)
            {
              foreach (GetInventoryFeedsItemDTO tmpDto in cooInvFeedsItems)
              {
                serviceResponse[index].QtyAvailPrismCalt += tmpDto.QtyAvailPrismCalt;
                serviceResponse[index].QtyOnHandPrismCalt += tmpDto.QtyOnHandPrismCalt;
              }
            }*/
            //}

          } // End of codes for COO SKUs


          //goto SkipThisSlaveSKU;
          //}


          //InvFeedsRuleSku invFeedsRuleSku = invFeedsRuleSKUs.FindLast((InvFeedsRuleSku i) => i.ItemNoId == invFeedsItem.ItemNoId);
          InvFeedsRuleSku invFeedsRuleSku = invFeedsRuleSKUs.FindLast((InvFeedsRuleSku i) => i.ItemNoId == serviceResponse[index].ItemNoId);
          /*serviceResponse[index]
          if (await DeterminedFeedingParetoRuleForSKU(false, inventoryConfig, invFeedsItem, serviceResponse[index], invFeedsRules, invFeedsRuleSku, wmtTopSellers) == 6)
          {
            continue;itemNoId
          }*/
          serviceResponse[index] = await DeterminedFeedingParetoRuleForSKU(false, inventoryConfig, serviceResponse[index].ItemNoId, serviceResponse[index], invFeedsRules, invFeedsRuleSku, wmtTopSellers, invFeedsDailyZeroOuts);
          // Need to add Rule#06 on here for every warehouse
          //if (serviceResponse[index].ItemStatusId == 1)
          //{ }
          if (serviceResponse[index].isCooMasterSku == true)
          {
            /*
            switch (serviceResponse[index].AppliedFeedingRuleNoBanc)
            {
              case 9:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                    if (serviceResponse[index].BancFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(bancId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyBanc = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyBanc, 5);
                      serviceResponse[index].OverstockQtyBanc = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyBanc, 5);
                    }
                  }
                  break;
                }
              case 5:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                  }
                  if (serviceResponse[index].BancFeedable)
                  {
                    serviceResponse[index] = InventoryFeedsLowInventoryRule(bancId, invFeedsRules, serviceResponse[index], inventoryConfig);
                    serviceResponse[index].WalmartQtyBanc = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyBanc, 5);
                    serviceResponse[index].OverstockQtyBanc = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyBanc, 5);
                    serviceResponse[index].leftOverQtyBanc = serviceResponse[index].QtyAvailActualBanc - (serviceResponse[index].AmazonQtyBanc + serviceResponse[index].eBayQtyBanc
                      + serviceResponse[index].OverstockQtyBanc + serviceResponse[index].WayfairQtyBanc + serviceResponse[index].WalmartQtyBanc + serviceResponse[index].HomeDepotQtyBanc
                      + serviceResponse[index].TargetQtyBanc + serviceResponse[index].BPMWebQtyBanc + serviceResponse[index].MellowWebQtyBanc);
                  }
                  break;
                }
              case 4:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                    if (serviceResponse[index].BancFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(bancId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyBanc = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyBanc, 5);
                      serviceResponse[index].OverstockQtyBanc = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyBanc, 5);
                    }
                  }
                  break;
                }
              case 3:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                    if (serviceResponse[index].BancFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(bancId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyBanc = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyBanc, 5);
                      serviceResponse[index].OverstockQtyBanc = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyBanc, 5);
                    }
                  }
                  break;
                }
              case 2:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                  }
                  if (serviceResponse[index].BancFeedable)
                  {
                    serviceResponse[index] = InventoryFeedsNewItemLowSalesDataRule(bancId, invFeedsRules, serviceResponse[index]);
                    serviceResponse[index].WalmartQtyBanc = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyBanc, 5);
                    serviceResponse[index].OverstockQtyBanc = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyBanc, 5);
                    serviceResponse[index].leftOverQtyBanc = serviceResponse[index].QtyAvailActualBanc - (serviceResponse[index].AmazonQtyBanc + serviceResponse[index].eBayQtyBanc
                      + serviceResponse[index].OverstockQtyBanc + serviceResponse[index].WayfairQtyBanc + serviceResponse[index].WalmartQtyBanc + serviceResponse[index].HomeDepotQtyBanc
                      + serviceResponse[index].TargetQtyBanc + serviceResponse[index].BPMWebQtyBanc + serviceResponse[index].MellowWebQtyBanc);

                  }
                  break;
                }
              case 1:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                    if (serviceResponse[index].BancFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(bancId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyBanc = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyBanc, 5);
                      serviceResponse[index].OverstockQtyBanc = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyBanc, 5);
                    }
                  }
                  break;
                }
            }*/
            //if (serviceResponse[index].ItemNoId == 551)
            //{ Console.Write("Here!"); }
            if (inventoryConfig.IsActivatedWfsvsWhs == true) 
            { serviceResponse[index] = CheckWFS(inventoryConfig, wfsInvRepDetails, serviceResponse[index]); }
            
            switch (serviceResponse[index].AppliedFeedingRuleNoMainsl)
            {
              case 9:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                    if (serviceResponse[index].MainslFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(mainslId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyMainsl = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyMainsl, 5);
                      serviceResponse[index].OverstockQtyMainsl = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyMainsl, 5);
                    }
                  }
                  break;
                }
              case 5:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                  }
                  if (serviceResponse[index].MainslFeedable)
                  {
                    serviceResponse[index] = await InventoryFeedsLowInventoryRule(mainslId, invFeedsRules, serviceResponse[index], inventoryConfig);
                    serviceResponse[index].WalmartQtyMainsl = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyMainsl, 5);
                    serviceResponse[index].OverstockQtyMainsl = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyMainsl, 5);
                    serviceResponse[index].leftOverQtyMainsl = serviceResponse[index].QtyAvailActualMainsl - (serviceResponse[index].AmazonQtyMainsl + serviceResponse[index].eBayQtyMainsl
                      + serviceResponse[index].OverstockQtyMainsl + serviceResponse[index].WayfairQtyMainsl + serviceResponse[index].WalmartQtyMainsl + serviceResponse[index].HomeDepotQtyMainsl
                      + serviceResponse[index].TargetQtyMainsl + serviceResponse[index].BPMWebQtyMainsl + serviceResponse[index].MellowWebQtyMainsl);

                  }
                  break;
                }
              case 4:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                    if (serviceResponse[index].MainslFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(mainslId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyMainsl = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyMainsl, 5);
                      serviceResponse[index].OverstockQtyMainsl = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyMainsl, 5);
                    }
                  }
                  break;
                }
              case 3:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                    if (serviceResponse[index].MainslFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(mainslId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyMainsl = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyMainsl, 5);
                      serviceResponse[index].OverstockQtyMainsl = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyMainsl, 5);
                    }
                  }
                  break;
                }
              case 2:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                  }
                  if (serviceResponse[index].MainslFeedable)
                  {
                    serviceResponse[index] = await InventoryFeedsNewItemLowSalesDataRule(mainslId, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                    serviceResponse[index].WalmartQtyMainsl = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyMainsl, 5);
                    serviceResponse[index].OverstockQtyMainsl = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyMainsl, 5);
                    serviceResponse[index].leftOverQtyMainsl = serviceResponse[index].QtyAvailActualMainsl - (serviceResponse[index].AmazonQtyMainsl + serviceResponse[index].eBayQtyMainsl
                      + serviceResponse[index].OverstockQtyMainsl + serviceResponse[index].WayfairQtyMainsl + serviceResponse[index].WalmartQtyMainsl + serviceResponse[index].HomeDepotQtyMainsl
                      + serviceResponse[index].TargetQtyMainsl + serviceResponse[index].BPMWebQtyMainsl + serviceResponse[index].MellowWebQtyMainsl);
                  }
                  break;
                }
              case 1:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                    if (serviceResponse[index].MainslFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(mainslId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyMainsl = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyMainsl, 5);
                      serviceResponse[index].OverstockQtyMainsl = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyMainsl, 5);
                    }
                  }
                  break;
                }
            } /*
            switch (serviceResponse[index].AppliedFeedingRuleNoSWCAFT)
            {
              case 9:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    if (serviceResponse[index].SWCAFTFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(swcaftId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtySWCAFT = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtySWCAFT, 5);
                      serviceResponse[index].OverstockQtySWCAFT = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtySWCAFT, 5);
                    }
                  }
                  break;
                }
              case 5:
                if (serviceResponse[index].SWCAFTFeedable)
                {
                  InventoryFeedsLowInventoryRule(swcaftId, invFeedsRules, serviceResponse[index], inventoryConfig);
                  serviceResponse[index].WalmartQtySWCAFT = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtySWCAFT, 5);
                  serviceResponse[index].OverstockQtySWCAFT = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtySWCAFT, 5);
                }
                break;
              case 4:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    if (serviceResponse[index].SWCAFTFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(swcaftId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtySWCAFT = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtySWCAFT, 5);
                      serviceResponse[index].OverstockQtySWCAFT = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtySWCAFT, 5);
                    }
                  }
                  break;
                }
              case 3:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    if (serviceResponse[index].SWCAFTFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(swcaftId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtySWCAFT = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtySWCAFT, 5);
                      serviceResponse[index].OverstockQtySWCAFT = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtySWCAFT, 5);
                    }
                  }
                  break;
                }
              case 2:
                if (serviceResponse[index].SWCAFTFeedable)
                {
                  serviceResponse[index] = InventoryFeedsNewItemLowSalesDataRule(swcaftId, invFeedsRules, serviceResponse[index]);
                  serviceResponse[index].WalmartQtySWCAFT = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtySWCAFT, 5);
                  serviceResponse[index].OverstockQtySWCAFT = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtySWCAFT, 5);
                }
                break;
              case 1:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    if (serviceResponse[index].SWCAFTFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(swcaftId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtySWCAFT = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtySWCAFT, 5);
                      serviceResponse[index].OverstockQtySWCAFT = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtySWCAFT, 5);
                    }
                  }
                  break;
                }
            } */
            /*
            switch (serviceResponse[index].AppliedFeedingRuleNoBasc)
            {
              case 9:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                    if (serviceResponse[index].BascFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(bascId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyBasc = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyBasc, 5);
                      serviceResponse[index].OverstockQtyBasc = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyBasc, 5);
                    }
                  }
                  break;
                }
              case 5:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                  }
                  if (serviceResponse[index].BascFeedable)
                  {
                    serviceResponse[index] = InventoryFeedsLowInventoryRule(bascId, invFeedsRules, serviceResponse[index], inventoryConfig);
                    serviceResponse[index].WalmartQtyBasc = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyBasc, 5);
                    serviceResponse[index].OverstockQtyBasc = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyBasc, 5);
                    serviceResponse[index].leftOverQtyBasc = serviceResponse[index].QtyAvailActualBasc - (serviceResponse[index].AmazonQtyBasc + serviceResponse[index].eBayQtyBasc
                      + serviceResponse[index].OverstockQtyBasc + serviceResponse[index].WayfairQtyBasc + serviceResponse[index].WalmartQtyBasc + serviceResponse[index].HomeDepotQtyBasc
                      + serviceResponse[index].TargetQtyBasc + serviceResponse[index].BPMWebQtyBasc + serviceResponse[index].MellowWebQtyBasc);
                  }
                  break;
                }
              case 4:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                    if (serviceResponse[index].BascFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(bascId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyBasc = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyBasc, 5);
                      serviceResponse[index].OverstockQtyBasc = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyBasc, 5);
                    }
                  }
                  break;
                }
              case 3:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                    if (serviceResponse[index].BascFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(bascId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyBasc = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyBasc, 5);
                      serviceResponse[index].OverstockQtyBasc = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyBasc, 5);
                    }
                  }
                  break;
                }
              case 2:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                  }
                  if (serviceResponse[index].BascFeedable)
                  {
                    serviceResponse[index] = InventoryFeedsNewItemLowSalesDataRule(bascId, invFeedsRules, serviceResponse[index]);
                    serviceResponse[index].WalmartQtyBasc = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyBasc, 5);
                    serviceResponse[index].OverstockQtyBasc = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyBasc, 5);
                    serviceResponse[index].leftOverQtyBasc = serviceResponse[index].QtyAvailActualBasc - (serviceResponse[index].AmazonQtyBasc + serviceResponse[index].eBayQtyBasc
                      + serviceResponse[index].OverstockQtyBasc + serviceResponse[index].WayfairQtyBasc + serviceResponse[index].WalmartQtyBasc + serviceResponse[index].HomeDepotQtyBasc
                      + serviceResponse[index].TargetQtyBasc + serviceResponse[index].BPMWebQtyBasc + serviceResponse[index].MellowWebQtyBasc);
                  }
                  break;
                }
              case 1:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                    if (serviceResponse[index].BascFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(bascId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyBasc = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyBasc, 5);
                      serviceResponse[index].OverstockQtyBasc = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyBasc, 5);
                    }
                  }
                  break;
                }
            } */ /*
            switch (serviceResponse[index].AppliedFeedingRuleNoPrismCast)
            {
              case 9:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    if (serviceResponse[index].PrismCastFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(prsmCastId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyPrismCast = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyPrismCast, 5);
                      serviceResponse[index].OverstockQtyPrismCast = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyPrismCast, 5);
                    }
                  }
                  break;
                }
              case 5:
                if (serviceResponse[index].PrismCastFeedable)
                {
                  serviceResponse[index] = InventoryFeedsLowInventoryRule(prsmCastId, invFeedsRules, serviceResponse[index], inventoryConfig);
                  serviceResponse[index].WalmartQtyPrismCast = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyPrismCast, 5);
                  serviceResponse[index].OverstockQtyPrismCast = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyPrismCast, 5);
                }
                break;
              case 4:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    if (serviceResponse[index].PrismCastFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(prsmCastId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyPrismCast = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyPrismCast, 5);
                      serviceResponse[index].OverstockQtyPrismCast = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyPrismCast, 5);
                    }
                  }
                  break;
                }
              case 3:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    if (serviceResponse[index].PrismCastFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(prsmCastId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyPrismCast = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyPrismCast, 5);
                      serviceResponse[index].OverstockQtyPrismCast = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyPrismCast, 5);
                    }
                  }
                  break;
                }
              case 2:
                if (serviceResponse[index].PrismCastFeedable)
                {
                  serviceResponse[index] = InventoryFeedsNewItemLowSalesDataRule(prsmCastId, invFeedsRules, serviceResponse[index]);
                  serviceResponse[index].WalmartQtyPrismCast = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyPrismCast, 5);
                  serviceResponse[index].OverstockQtyPrismCast = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyPrismCast, 5);
                }
                break;
              case 1:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    if (serviceResponse[index].PrismCastFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(prsmCastId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyPrismCast = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyPrismCast, 5);
                      serviceResponse[index].OverstockQtyPrismCast = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyPrismCast, 5);
                    }
                  }
                  break;
                }
            }
            switch (serviceResponse[index].AppliedFeedingRuleNoPrismCalt)
            {
              case 9:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    if (serviceResponse[index].PrismCaltFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(prsmCaltId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyPrismCalt = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyPrismCalt, 5);
                      serviceResponse[index].OverstockQtyPrismCalt = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyPrismCalt, 5);
                    }
                  }
                  break;
                }
              case 5:
                if (serviceResponse[index].PrismCaltFeedable)
                {
                  serviceResponse[index] = InventoryFeedsLowInventoryRule(prsmCaltId, invFeedsRules, serviceResponse[index], inventoryConfig);
                  serviceResponse[index].WalmartQtyPrismCalt = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyPrismCalt, 5);
                  serviceResponse[index].OverstockQtyPrismCalt = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyPrismCalt, 5);
                }
                break;
              case 4:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    if (serviceResponse[index].PrismCaltFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(prsmCaltId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyPrismCalt = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyPrismCalt, 5);
                      serviceResponse[index].OverstockQtyPrismCalt = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyPrismCalt, 5);
                    }
                  }
                  break;
                }
              case 3:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    if (serviceResponse[index].PrismCaltFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(prsmCaltId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyPrismCalt = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyPrismCalt, 5);
                      serviceResponse[index].OverstockQtyPrismCalt = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyPrismCalt, 5);
                    }
                  }
                  break;
                }
              case 2:
                if (serviceResponse[index].PrismCaltFeedable)
                {
                  serviceResponse[index] = InventoryFeedsNewItemLowSalesDataRule(prsmCaltId, invFeedsRules, serviceResponse[index]);
                  serviceResponse[index].WalmartQtyPrismCalt = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyPrismCalt, 5);
                  serviceResponse[index].OverstockQtyPrismCalt = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyPrismCalt, 5);
                }
                break;
              case 1:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    if (serviceResponse[index].PrismCaltFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(prsmCaltId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyPrismCalt = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyPrismCalt, 5);
                      serviceResponse[index].OverstockQtyPrismCalt = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyPrismCalt, 5);
                    }
                  }
                  break;
                }
            } // End of Switch of Prism CALT */
            switch (serviceResponse[index].AppliedFeedingRuleNoZinusTracy)
            {
              case 9:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                    if (serviceResponse[index].ZinusTracyFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(zinusTracyId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyZinusTracy = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyZinusTracy, 5);
                      serviceResponse[index].OverstockQtyZinusTracy = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyZinusTracy, 5);
                    }
                  }
                  break;
                }
              case 5:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                  }
                  if (serviceResponse[index].ZinusTracyFeedable)
                  {
                    serviceResponse[index] = await InventoryFeedsLowInventoryRule(zinusTracyId, invFeedsRules, serviceResponse[index], inventoryConfig);
                    serviceResponse[index].WalmartQtyZinusTracy = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyZinusTracy, 5);
                    serviceResponse[index].OverstockQtyZinusTracy = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyZinusTracy, 5);
                    serviceResponse[index].leftOverQtyZinusTracy = serviceResponse[index].QtyAvailActualZinusTracy - (serviceResponse[index].AmazonQtyZinusTracy + serviceResponse[index].eBayQtyZinusTracy
                      + serviceResponse[index].OverstockQtyZinusTracy + serviceResponse[index].WayfairQtyZinusTracy + serviceResponse[index].WalmartQtyZinusTracy + serviceResponse[index].HomeDepotQtyZinusTracy
                      + serviceResponse[index].TargetQtyZinusTracy + serviceResponse[index].BPMWebQtyZinusTracy + serviceResponse[index].MellowWebQtyZinusTracy);
                  }
                  break;
                }
              case 4:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                    if (serviceResponse[index].ZinusTracyFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(zinusTracyId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyZinusTracy = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyZinusTracy, 5);
                      serviceResponse[index].OverstockQtyZinusTracy = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyZinusTracy, 5);
                    }
                  }
                  break;
                }
              case 3:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                    if (serviceResponse[index].ZinusTracyFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(zinusTracyId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyZinusTracy = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyZinusTracy, 5);
                      serviceResponse[index].OverstockQtyZinusTracy = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyZinusTracy, 5);
                    }
                  }
                  break;
                }
              case 2:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                  }
                  if (serviceResponse[index].ZinusTracyFeedable)
                  {
                    serviceResponse[index] = await InventoryFeedsNewItemLowSalesDataRule(mainslId, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                    serviceResponse[index].WalmartQtyZinusTracy = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyZinusTracy, 5);
                    serviceResponse[index].OverstockQtyZinusTracy = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyZinusTracy, 5);
                    serviceResponse[index].leftOverQtyZinusTracy = serviceResponse[index].QtyAvailActualZinusTracy - (serviceResponse[index].AmazonQtyZinusTracy + serviceResponse[index].eBayQtyZinusTracy
                      + serviceResponse[index].OverstockQtyZinusTracy + serviceResponse[index].WayfairQtyZinusTracy + serviceResponse[index].WalmartQtyZinusTracy + serviceResponse[index].HomeDepotQtyZinusTracy
                      + serviceResponse[index].TargetQtyZinusTracy + serviceResponse[index].BPMWebQtyZinusTracy + serviceResponse[index].MellowWebQtyZinusTracy);
                  }
                  break;
                }
              case 1:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                    if (serviceResponse[index].ZinusTracyFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(zinusTracyId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyZinusTracy = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyZinusTracy, 5);
                      serviceResponse[index].OverstockQtyZinusTracy = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyZinusTracy, 5);
                    }
                  }
                  break;
                }
            } // End of Zinus Tracy
            switch (serviceResponse[index].AppliedFeedingRuleNoZinusChs)
            {
              case 9:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                    if (serviceResponse[index].ZinusChsFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(zinusChsId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyZinusChs = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyZinusChs, 5);
                      serviceResponse[index].OverstockQtyZinusChs = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyZinusChs, 5);
                    }
                  }
                  break;
                }
              case 5:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                  }
                  if (serviceResponse[index].ZinusChsFeedable)
                  {
                    serviceResponse[index] = await InventoryFeedsLowInventoryRule(zinusChsId, invFeedsRules, serviceResponse[index], inventoryConfig);
                    serviceResponse[index].WalmartQtyZinusChs = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyZinusChs, 5);
                    serviceResponse[index].OverstockQtyZinusChs = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyZinusChs, 5);
                    serviceResponse[index].leftOverQtyZinusChs = serviceResponse[index].QtyAvailActualZinusChs - (serviceResponse[index].AmazonQtyZinusChs + serviceResponse[index].eBayQtyZinusChs
                      + serviceResponse[index].OverstockQtyZinusChs + serviceResponse[index].WayfairQtyZinusChs + serviceResponse[index].WalmartQtyZinusChs + serviceResponse[index].HomeDepotQtyZinusChs
                      + serviceResponse[index].TargetQtyZinusChs + serviceResponse[index].BPMWebQtyZinusChs + serviceResponse[index].MellowWebQtyZinusChs);
                  }
                  break;
                }
              case 4:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                    if (serviceResponse[index].ZinusChsFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(zinusChsId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyZinusChs = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyZinusChs, 5);
                      serviceResponse[index].OverstockQtyZinusChs = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyZinusChs, 5);
                    }
                  }
                  break;
                }
              case 3:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                    if (serviceResponse[index].ZinusChsFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(zinusChsId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyZinusChs = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyZinusChs, 5);
                      serviceResponse[index].OverstockQtyZinusChs = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyZinusChs, 5);
                    }
                  }
                  break;
                }
              case 2:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                  }
                  if (serviceResponse[index].ZinusChsFeedable)
                  {
                    serviceResponse[index] = await InventoryFeedsNewItemLowSalesDataRule(mainslId, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                    serviceResponse[index].WalmartQtyZinusChs = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyZinusChs, 5);
                    serviceResponse[index].OverstockQtyZinusChs = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyZinusChs, 5);
                    serviceResponse[index].leftOverQtyZinusChs = serviceResponse[index].QtyAvailActualZinusChs - (serviceResponse[index].AmazonQtyZinusChs + serviceResponse[index].eBayQtyZinusChs
                      + serviceResponse[index].OverstockQtyZinusChs + serviceResponse[index].WayfairQtyZinusChs + serviceResponse[index].WalmartQtyZinusChs + serviceResponse[index].HomeDepotQtyZinusChs
                      + serviceResponse[index].TargetQtyZinusChs + serviceResponse[index].BPMWebQtyZinusChs + serviceResponse[index].MellowWebQtyZinusChs);
                  }
                  break;
                }
              case 1:
                {
                  InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == serviceResponse[index].ItemNoId);
                  if (invParetoRuleData12 != null)
                  {
                    serviceResponse[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                    serviceResponse[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, serviceResponse[index]);
                    if (serviceResponse[index].ZinusChsFeedable)
                    {
                      serviceResponse[index] = await InventoryFeedsCustomRulesParetoDataRule(zinusChsId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, serviceResponse[index]);
                      serviceResponse[index].WalmartQtyZinusChs = checkWalmartMinQtyRule(serviceResponse[index].WalmartQtyZinusChs, 5);
                      serviceResponse[index].OverstockQtyZinusChs = checkOverstockMinQtyRule(serviceResponse[index].OverstockQtyZinusChs, 5);
                    }
                  }
                  break;
                }
            } // End of Zinus CHS
          }

          // continue;
        }
        //SkipThisSlaveSKU:;
        //List<NsIcr> nsIcrs = await _kc.NsIcrs.Where((NsIcr n) => n.ItemNoId == serviceResponse[index].ItemNoId && n.IsInvFeed > (int?)0).ToListAsync();
        //if (serviceResponse[index].ItemNoId == 1348)
        //{ Console.WriteLine("HaHa"); }
        List<MkIcr> mkIcrs = await _kc.MkIcrs.Where((MkIcr n) => n.ItemNoId == serviceResponse[index].ItemNoId && n.IsInvFeed == true).ToListAsync();
        if (mkIcrs != null && (serviceResponse[index].isCooMasterSku == true) && (serviceResponse[index].HasMkIcrNotCooMaster == false))
        {/*
          serviceResponse[index].AppliedFeedingRuleNoBanc = 0;
          serviceResponse[index].AppliedFeedingRuleTypeBanc = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == 0).FirstOrDefault().Description;
          serviceResponse[index].AppliedFeedingRuleNoMainsl = 0;
          serviceResponse[index].AppliedFeedingRuleTypeMainsl = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == 0).FirstOrDefault().Description;
          serviceResponse[index].AppliedFeedingRuleNoSWCAFT = 0;
          serviceResponse[index].AppliedFeedingRuleTypeSWCAFT = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == 0).FirstOrDefault().Description;
          serviceResponse[index].AppliedFeedingRuleNoBasc = 0;
          serviceResponse[index].AppliedFeedingRuleTypeBasc = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == 0).FirstOrDefault().Description;
          */
          foreach (MkIcr tmpIcr in mkIcrs)
          {
            updateEachMarketSKUByMarketID(tmpIcr.MarketId, tmpIcr.CustSku, serviceResponse[index]);
          }
          /*
          foreach (NsIcr tmpIcr in nsIcrs)
          {
            updateEachMarketSKU(tmpIcr.CustomerId, tmpIcr.CustSku, serviceResponse[index]);
          }*/

        }
        //if (serviceResponse[index].isCooMasterSku == false)
        //{
        //  serviceResponse.Remove(serviceResponse[index]);
        // }
        // else
        //{
        index++;
        //}
      }
      index = 0;
      while (index < serviceResponse.Count)
      {
        // if(serviceResponse[index].ItemNoId == 3354)
        // { Console.WriteLine("Here");}
        if (serviceResponse[index].isCooMasterSku == false && serviceResponse[index].HasMkIcrNotCooMaster == false)
        {
          serviceResponse.Remove(serviceResponse[index]);
        }
        else
        {
          index++;
        }
      }
      serviceResponse = DistributeLeftOverQty(smallMarketsCnt, serviceResponse);
      serviceResponse = await FeedLeftOverQtyFromWarehouse(serviceResponse);

      await SaveInventoryFeeds(false, invFeedReport.InvFeedsReportId, serviceResponse);
      return serviceResponse;
    }

    // Taking care of Left Over Qty.
    // By Brian Yi on 08/26/2022
    public List<GetInventoryFeedsItemDTO> DistributeLeftOverQty(int smallMarketsCnt, List<GetInventoryFeedsItemDTO> invFeedsItemList)
    {
      int leftOverQty = 0, onePmarket = 0, tmpQty = 0, tmpQtyForTotal = 0, smallMarkets = 0, tmpQtyTotal = 0;
      double abcA = 0.8, abcB = 0.2, abcC = 0.2;
      //smallMarkets = smallMarkets - 1; // Minus eBay; Not anymore feed to eBay

      foreach (GetInventoryFeedsItemDTO tmpDto in invFeedsItemList)
      //Parallel.ForEach(invFeedsItemList, tmpDto =>
      {
        // if (tmpDto.ItemNoId == 606)
        // { Console.WriteLine("HERE!!!!!!!!"); }
        onePmarket = 0;
        smallMarkets = 0;
        if (tmpDto.AmazonFeedable == true && tmpDto.AmazonRule != true) onePmarket++;
        if (tmpDto.WalmartFeedable == true && tmpDto.WalmartRule != true) onePmarket++;
        if (tmpDto.WayfairFeedable == true && tmpDto.WayfairRule != true) onePmarket++;
        if (tmpDto.OverstockFeedable == true && tmpDto.OverstockRule != true) onePmarket++;

        if (tmpDto.BPMFeedable == true && tmpDto.BPMRule != true) smallMarkets++;
        if (tmpDto.MellowFeedable == true && tmpDto.MellowRule != true) smallMarkets++;
        if (tmpDto.HouzzFeedable == true) smallMarkets++;
        if (tmpDto.HomeDepotFeedable == true && tmpDto.HomeDepotRule != true) smallMarkets++;
        if (tmpDto.TargetFeedable == true && tmpDto.TargetRule != true) smallMarkets++;

        //if (tmpDto.ItemNoId == 1257)
        //{ Console.WriteLine("Here"); }
        /*
        if (tmpDto.leftOverQtyBanc > 5)
        { tmpDto.leftOverQtyBanc = tmpDto.leftOverQtyBanc - 5; }
        else
        { tmpDto.leftOverQtyBanc = 0; }
        if (tmpDto.BancFeedable == false)
        { tmpDto.leftOverQtyBanc = 0; tmpDto.QtyAvailActualBanc = 0;}
        if (tmpDto.leftOverQtyBanc > 0)
        {
          //if(tmpDto.ItemNoId == 1257)
          //{ Console.WriteLine("Here");}
          tmpQtyTotal = 0;
          leftOverQty = tmpDto.leftOverQtyBanc;
          tmpQtyForTotal = (int)Math.Floor((tmpDto.leftOverQtyBanc * abcA));
          tmpQty = (int)Math.Floor(((double)tmpQtyForTotal / onePmarket));
          if (tmpDto.AmazonFeedable == true && tmpDto.AmazonRule != true)
          {
            tmpDto.AmazonQtyBanc = tmpDto.AmazonQtyBanc + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.WalmartFeedable == true && tmpDto.WalmartRule != true)
          {
            tmpDto.WalmartQtyBanc = tmpDto.WalmartQtyBanc + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.WayfairFeedable == true && tmpDto.WayfairRule != true)
          {
            tmpDto.WayfairQtyBanc = tmpDto.WayfairQtyBanc + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.OverstockFeedable == true && tmpDto.OverstockRule != true)
          {
            tmpDto.OverstockQtyBanc = tmpDto.OverstockQtyBanc + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          leftOverQty = leftOverQty - tmpQtyTotal;
          tmpQtyTotal = 0;

          tmpQtyForTotal = (int)Math.Floor((tmpDto.leftOverQtyBanc * abcC));
          tmpQty = (int)Math.Floor(((double)tmpQtyForTotal / smallMarkets));
          tmpQtyForTotal = leftOverQty;
          if (tmpQty > leftOverQty) { tmpQty = leftOverQty; }
          if (tmpDto.BPMFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.BPMRule != true)
          {
            tmpDto.BPMWebQtyBanc = tmpDto.BPMWebQtyBanc + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.MellowFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.MellowRule != true)
          {
            tmpDto.MellowWebQtyBanc = tmpDto.MellowWebQtyBanc + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.HouzzFeedable == true && tmpQtyForTotal > tmpQty)
          {
            tmpDto.HouzzQtyBanc = tmpDto.HouzzQtyBanc + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.HomeDepotFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.HomeDepotRule != true)
          {
            tmpDto.HomeDepotQtyBanc = tmpDto.HomeDepotQtyBanc + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.TargetFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.TargetRule != true)
          {
            tmpDto.TargetQtyBanc = tmpDto.TargetQtyBanc + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          leftOverQty = leftOverQty - tmpQtyTotal;
          tmpQtyForTotal = leftOverQty;

          if (tmpDto.AmazonFeedable == true && tmpQtyForTotal > 0 && tmpDto.AmazonRule != true)
          {
            tmpDto.AmazonQtyBanc = tmpDto.AmazonQtyBanc + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.WalmartFeedable == true && tmpQtyForTotal > 0 && tmpDto.WalmartRule != true)
          {
            tmpDto.WalmartQtyBanc = tmpDto.WalmartQtyBanc + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.WayfairFeedable == true && tmpQtyForTotal > 0 && tmpDto.WayfairRule != true)
          {
            tmpDto.WayfairQtyBanc = tmpDto.WayfairQtyBanc + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.OverstockFeedable == true && tmpQtyForTotal > 0 && tmpDto.OverstockRule != true)
          {
            tmpDto.OverstockQtyBanc = tmpDto.OverstockQtyBanc + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          tmpDto.leftOverQtyBanc = tmpQtyForTotal + 5;

        } //End of Banc


        if (tmpDto.leftOverQtyBasc > 5)
        { tmpDto.leftOverQtyBasc = tmpDto.leftOverQtyBasc - 5; }
        else
        { tmpDto.leftOverQtyBasc = 0; }
        if (tmpDto.BascFeedable == false)
        { tmpDto.leftOverQtyBasc = 0; tmpDto.QtyAvailActualBasc = 0; }
        if (tmpDto.leftOverQtyBasc > 0)
        {
          tmpQtyTotal = 0;
          leftOverQty = tmpDto.leftOverQtyBasc;
          tmpQtyForTotal = (int)Math.Floor((tmpDto.leftOverQtyBasc * abcA));
          tmpQty = (int)Math.Floor(((double)tmpQtyForTotal / onePmarket));
          if (tmpDto.AmazonFeedable == true && tmpDto.AmazonRule != true)
          {
            tmpDto.AmazonQtyBasc = tmpDto.AmazonQtyBasc + tmpQty;
            // tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.WalmartFeedable == true && tmpDto.WalmartRule != true)
          {
            tmpDto.WalmartQtyBasc = tmpDto.WalmartQtyBasc + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.WayfairFeedable == true && tmpDto.WayfairRule != true)
          {
            tmpDto.WayfairQtyBasc = tmpDto.WayfairQtyBasc + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.OverstockFeedable == true && tmpDto.OverstockRule != true)
          {
            tmpDto.OverstockQtyBasc = tmpDto.OverstockQtyBasc + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }

          leftOverQty = leftOverQty - tmpQtyTotal;
          tmpQtyTotal = 0;

          tmpQtyForTotal = (int)Math.Floor((tmpDto.leftOverQtyBasc * abcC));
          tmpQty = (int)Math.Floor(((double)tmpQtyForTotal / smallMarkets));
          tmpQtyForTotal = leftOverQty;
          if (tmpQty > leftOverQty) { tmpQty = leftOverQty; }
          if (tmpDto.BPMFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.BPMRule != true)
          {
            tmpDto.BPMWebQtyBasc = tmpDto.BPMWebQtyBasc + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.MellowFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.MellowRule != true)
          {
            tmpDto.MellowWebQtyBasc = tmpDto.MellowWebQtyBasc + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.HouzzFeedable == true && tmpQtyForTotal > tmpQty)
          {
            tmpDto.HouzzQtyBasc = tmpDto.HouzzQtyBasc + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.HomeDepotFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.HomeDepotRule != true)
          {
            tmpDto.HomeDepotQtyBasc = tmpDto.HomeDepotQtyBasc + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.TargetFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.TargetRule != true)
          {
            tmpDto.TargetQtyBasc = tmpDto.TargetQtyBasc + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          leftOverQty = leftOverQty - tmpQtyTotal;
          tmpQtyForTotal = leftOverQty;

          if (tmpDto.AmazonFeedable == true && tmpQtyForTotal > 0 && tmpDto.AmazonRule != true)
          {
            tmpDto.AmazonQtyBasc = tmpDto.AmazonQtyBasc + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.WalmartFeedable == true && tmpQtyForTotal > 0 && tmpDto.WalmartRule != true)
          {
            tmpDto.WalmartQtyBasc = tmpDto.WalmartQtyBasc + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.WayfairFeedable == true && tmpQtyForTotal > 0 && tmpDto.WayfairRule != true)
          {
            tmpDto.WayfairQtyBasc = tmpDto.WayfairQtyBasc + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.OverstockFeedable == true && tmpQtyForTotal > 0 && tmpDto.OverstockRule != true)
          {
            tmpDto.OverstockQtyBasc = tmpDto.OverstockQtyBasc + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          tmpDto.leftOverQtyBasc = tmpQtyForTotal + 5;

        }// End of Basc
        */

        if (tmpDto.leftOverQtyMainsl > 5)
        { tmpDto.leftOverQtyMainsl = tmpDto.leftOverQtyMainsl - 5; }
        else
        { tmpDto.leftOverQtyMainsl = 0; }

        if (tmpDto.MainslFeedable == false)
        { tmpDto.leftOverQtyMainsl = 0; tmpDto.QtyAvailActualMainsl = 0; }
        if (tmpDto.leftOverQtyMainsl > 0)
        {
          tmpQtyTotal = 0;
          leftOverQty = tmpDto.leftOverQtyMainsl;
          tmpQtyForTotal = (int)Math.Floor((tmpDto.leftOverQtyMainsl * abcA));
          tmpQty = (int)Math.Floor(((double)tmpQtyForTotal / onePmarket));
          if (tmpDto.AmazonFeedable == true && tmpDto.AmazonRule != true)
          {
            tmpDto.AmazonQtyMainsl = tmpDto.AmazonQtyMainsl + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.WalmartFeedable == true && tmpDto.WalmartRule != true)
          {
            tmpDto.WalmartQtyMainsl = tmpDto.WalmartQtyMainsl + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.WayfairFeedable == true && tmpDto.WayfairRule != true)
          {
            tmpDto.WayfairQtyMainsl = tmpDto.WayfairQtyMainsl + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.OverstockFeedable == true && tmpDto.OverstockRule != true)
          {
            tmpDto.OverstockQtyMainsl = tmpDto.OverstockQtyMainsl + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }

          leftOverQty = leftOverQty - tmpQtyTotal;
          tmpQtyTotal = 0;

          tmpQtyForTotal = (int)Math.Floor((tmpDto.leftOverQtyMainsl * abcC));
          tmpQty = (int)Math.Floor(((double)tmpQtyForTotal / smallMarkets));
          tmpQtyForTotal = leftOverQty;
          if (tmpQty > leftOverQty) { tmpQty = leftOverQty; }
          if (tmpDto.BPMFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.BPMRule != true)
          {
            tmpDto.BPMWebQtyMainsl = tmpDto.BPMWebQtyMainsl + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.MellowFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.MellowRule != true)
          {
            tmpDto.MellowWebQtyMainsl = tmpDto.MellowWebQtyMainsl + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.HouzzFeedable == true && tmpQtyForTotal > tmpQty)
          {
            tmpDto.HouzzQtyMainsl = tmpDto.HouzzQtyMainsl + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.HomeDepotFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.HomeDepotRule != true)
          {
            tmpDto.HomeDepotQtyMainsl = tmpDto.HomeDepotQtyMainsl + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.TargetFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.TargetRule != true)
          {
            tmpDto.TargetQtyMainsl = tmpDto.TargetQtyMainsl + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          leftOverQty = leftOverQty - tmpQtyTotal;
          tmpQtyForTotal = leftOverQty;

          if (tmpDto.AmazonFeedable == true && tmpQtyForTotal > 0 && tmpDto.AmazonRule != true)
          {
            tmpDto.AmazonQtyMainsl = tmpDto.AmazonQtyMainsl + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.WalmartFeedable == true && tmpQtyForTotal > 0 && tmpDto.WalmartRule != true)
          {
            tmpDto.WalmartQtyMainsl = tmpDto.WalmartQtyMainsl + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.WayfairFeedable == true && tmpQtyForTotal > 0 && tmpDto.WayfairRule != true)
          {
            tmpDto.WayfairQtyMainsl = tmpDto.WayfairQtyMainsl + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.OverstockFeedable == true && tmpQtyForTotal > 0 && tmpDto.OverstockRule != true)
          {
            tmpDto.OverstockQtyMainsl = tmpDto.OverstockQtyMainsl + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          tmpDto.leftOverQtyMainsl = tmpQtyForTotal + 5;

        }// End of Mainsl



        if (tmpDto.leftOverQtyZinusChs > 5)
        { tmpDto.leftOverQtyZinusChs = tmpDto.leftOverQtyZinusChs - 5; }
        else
        { tmpDto.leftOverQtyZinusChs = 0; }

        if (tmpDto.ZinusChsFeedable == false)
        { tmpDto.leftOverQtyZinusChs = 0; tmpDto.QtyAvailActualZinusChs = 0; }
        if (tmpDto.leftOverQtyZinusChs > 0)
        {
          tmpQtyTotal = 0;
          leftOverQty = tmpDto.leftOverQtyZinusChs;
          tmpQtyForTotal = (int)Math.Floor((tmpDto.leftOverQtyZinusChs * abcA));
          tmpQty = (int)Math.Floor(((double)tmpQtyForTotal / onePmarket));
          if (tmpDto.AmazonFeedable == true && tmpDto.AmazonRule != true)
          {
            tmpDto.AmazonQtyZinusChs = tmpDto.AmazonQtyZinusChs + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.WalmartFeedable == true && tmpDto.WalmartRule != true)
          {
            tmpDto.WalmartQtyZinusChs = tmpDto.WalmartQtyZinusChs + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.WayfairFeedable == true && tmpDto.WayfairRule != true)
          {
            tmpDto.WayfairQtyZinusChs = tmpDto.WayfairQtyZinusChs + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.OverstockFeedable == true && tmpDto.OverstockRule != true)
          {
            tmpDto.OverstockQtyZinusChs = tmpDto.OverstockQtyZinusChs + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }

          leftOverQty = leftOverQty - tmpQtyTotal;
          tmpQtyTotal = 0;

          tmpQtyForTotal = (int)Math.Floor((tmpDto.leftOverQtyZinusChs * abcC));
          tmpQty = (int)Math.Floor(((double)tmpQtyForTotal / smallMarkets));
          tmpQtyForTotal = leftOverQty;
          if (tmpQty > leftOverQty) { tmpQty = leftOverQty; }
          if (tmpDto.BPMFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.BPMRule != true)
          {
            tmpDto.BPMWebQtyZinusChs = tmpDto.BPMWebQtyZinusChs + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.MellowFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.MellowRule != true)
          {
            tmpDto.MellowWebQtyZinusChs = tmpDto.MellowWebQtyZinusChs + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.HomeDepotFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.HomeDepotRule != true)
          {
            tmpDto.HomeDepotQtyZinusChs = tmpDto.HomeDepotQtyZinusChs + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.TargetFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.TargetRule != true)
          {
            tmpDto.TargetQtyZinusChs = tmpDto.TargetQtyZinusChs + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          leftOverQty = leftOverQty - tmpQtyTotal;
          tmpQtyForTotal = leftOverQty;

          if (tmpDto.AmazonFeedable == true && tmpQtyForTotal > 0 && tmpDto.AmazonRule != true)
          {
            tmpDto.AmazonQtyZinusChs = tmpDto.AmazonQtyZinusChs + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.WalmartFeedable == true && tmpQtyForTotal > 0 && tmpDto.WalmartRule != true)
          {
            tmpDto.WalmartQtyZinusChs = tmpDto.WalmartQtyZinusChs + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.WayfairFeedable == true && tmpQtyForTotal > 0 && tmpDto.WayfairRule != true)
          {
            tmpDto.WayfairQtyZinusChs = tmpDto.WayfairQtyZinusChs + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.OverstockFeedable == true && tmpQtyForTotal > 0 && tmpDto.OverstockRule != true)
          {
            tmpDto.OverstockQtyZinusChs = tmpDto.OverstockQtyZinusChs + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          tmpDto.leftOverQtyZinusChs = tmpQtyForTotal + 5;

        }// End of ZinusChs




        if (tmpDto.leftOverQtyZinusTracy > 5)
        { tmpDto.leftOverQtyZinusTracy = tmpDto.leftOverQtyZinusTracy - 5; }
        else
        { tmpDto.leftOverQtyZinusTracy = 0; }
        if (tmpDto.ZinusTracyFeedable == false)
        { tmpDto.leftOverQtyZinusTracy = 0; tmpDto.QtyAvailActualZinusTracy = 0; }
        if (tmpDto.leftOverQtyZinusTracy > 0)
        {
          tmpQtyTotal = 0;
          leftOverQty = tmpDto.leftOverQtyZinusTracy;
          tmpQtyForTotal = (int)Math.Floor((tmpDto.leftOverQtyZinusTracy * abcA));
          tmpQty = (int)Math.Floor(((double)tmpQtyForTotal / onePmarket));
          if (tmpDto.AmazonFeedable == true && tmpDto.AmazonRule != true)
          {
            tmpDto.AmazonQtyZinusTracy = tmpDto.AmazonQtyZinusTracy + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.WalmartFeedable == true && tmpDto.WalmartRule != true)
          {
            tmpDto.WalmartQtyZinusTracy = tmpDto.WalmartQtyZinusTracy + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.WayfairFeedable == true && tmpDto.WayfairRule != true)
          {
            tmpDto.WayfairQtyZinusTracy = tmpDto.WayfairQtyZinusTracy + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.OverstockFeedable == true && tmpDto.OverstockRule != true)
          {
            tmpDto.OverstockQtyZinusTracy = tmpDto.OverstockQtyZinusTracy + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }

          leftOverQty = leftOverQty - tmpQtyTotal;
          tmpQtyTotal = 0;

          tmpQtyForTotal = (int)Math.Floor((tmpDto.leftOverQtyZinusTracy * abcC));
          tmpQty = (int)Math.Floor(((double)tmpQtyForTotal / smallMarkets));
          tmpQtyForTotal = leftOverQty;
          if (tmpQty > leftOverQty) { tmpQty = leftOverQty; }
          if (tmpDto.BPMFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.BPMRule != true)
          {
            tmpDto.BPMWebQtyZinusTracy = tmpDto.BPMWebQtyZinusTracy + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.MellowFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.MellowRule != true)
          {
            tmpDto.MellowWebQtyZinusTracy = tmpDto.MellowWebQtyZinusTracy + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.HomeDepotFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.HomeDepotRule != true)
          {
            tmpDto.HomeDepotQtyZinusTracy = tmpDto.HomeDepotQtyZinusTracy + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.TargetFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.TargetRule != true)
          {
            tmpDto.TargetQtyZinusTracy = tmpDto.TargetQtyZinusTracy + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          leftOverQty = leftOverQty - tmpQtyTotal;
          tmpQtyForTotal = leftOverQty;

          if (tmpDto.AmazonFeedable == true && tmpQtyForTotal > 0 && tmpDto.AmazonRule != true)
          {
            tmpDto.AmazonQtyZinusTracy = tmpDto.AmazonQtyZinusTracy + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.WalmartFeedable == true && tmpQtyForTotal > 0 && tmpDto.WalmartRule != true)
          {
            tmpDto.WalmartQtyZinusTracy = tmpDto.WalmartQtyZinusTracy + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.WayfairFeedable == true && tmpQtyForTotal > 0 && tmpDto.WayfairRule != true)
          {
            tmpDto.WayfairQtyZinusTracy = tmpDto.WayfairQtyZinusTracy + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.OverstockFeedable == true && tmpQtyForTotal > 0 && tmpDto.OverstockRule != true)
          {
            tmpDto.OverstockQtyZinusTracy = tmpDto.OverstockQtyZinusTracy + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          tmpDto.leftOverQtyZinusTracy = tmpQtyForTotal + 5;

        }// End of ZinusTracy



        /*
        if (tmpDto.leftOverQtySWCAFT > 5)
        { tmpDto.leftOverQtySWCAFT = tmpDto.leftOverQtySWCAFT - 5; }
        else
        { tmpDto.leftOverQtySWCAFT = 0; }
        if (tmpDto.leftOverQtySWCAFT > 0)
        {
          tmpQtyTotal = 0;
          leftOverQty = tmpDto.leftOverQtySWCAFT;
          tmpQtyForTotal = (int)Math.Floor((tmpDto.leftOverQtySWCAFT * abcA));
          tmpQty = (int)Math.Floor(((double)tmpQtyForTotal / onePmarket));
          if (tmpDto.AmazonFeedable == true && tmpDto.AmazonRule != true)
          {
            tmpDto.AmazonQtySWCAFT = tmpDto.AmazonQtySWCAFT + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.WalmartFeedable == true && tmpDto.WalmartRule != true)
          {
            tmpDto.WalmartQtySWCAFT = tmpDto.WalmartQtySWCAFT + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.WayfairFeedable == true && tmpDto.WayfairRule != true)
          {
            tmpDto.WayfairQtySWCAFT = tmpDto.WayfairQtySWCAFT + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.OverstockFeedable == true && tmpDto.OverstockRule != true)
          {
            tmpDto.OverstockQtySWCAFT = tmpDto.OverstockQtySWCAFT + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }

          leftOverQty = leftOverQty - tmpQtyTotal;
          tmpQtyTotal = 0;
          // Small Markets

          tmpQtyForTotal = (int)Math.Floor((tmpDto.leftOverQtySWCAFT * abcC));
          tmpQty = (int)Math.Floor(((double)tmpQtyForTotal / smallMarkets));
          tmpQtyForTotal = leftOverQty;
          if (tmpQty > leftOverQty) { tmpQty = leftOverQty; }
          if (tmpDto.BPMFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.BPMRule != true)
          {
            tmpDto.BPMWebQtySWCAFT = tmpDto.BPMWebQtySWCAFT + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.MellowFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.MellowRule != true)
          {
            tmpDto.MellowWebQtySWCAFT = tmpDto.MellowWebQtySWCAFT + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.HouzzFeedable == true && tmpQtyForTotal > tmpQty)
          {
            tmpDto.HouzzQtySWCAFT = tmpDto.HouzzQtySWCAFT + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.HomeDepotFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.HomeDepotRule != true)
          {
            tmpDto.HomeDepotQtySWCAFT = tmpDto.HomeDepotQtySWCAFT + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.TargetFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.TargetRule != true)
          {
            tmpDto.TargetQtySWCAFT = tmpDto.TargetQtySWCAFT + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          leftOverQty = leftOverQty - tmpQtyTotal;
          tmpQtyForTotal = leftOverQty;

          if (tmpDto.AmazonFeedable == true && tmpQtyForTotal > 0 && tmpDto.AmazonRule != true)
          {
            tmpDto.AmazonQtySWCAFT = tmpDto.AmazonQtySWCAFT + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.WalmartFeedable == true && tmpQtyForTotal > 0 && tmpDto.WalmartRule != true)
          {
            tmpDto.WalmartQtySWCAFT = tmpDto.WalmartQtySWCAFT + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.WayfairFeedable == true && tmpQtyForTotal > 0 && tmpDto.WayfairRule != true)
          {
            tmpDto.WayfairQtySWCAFT = tmpDto.WayfairQtySWCAFT + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.OverstockFeedable == true && tmpQtyForTotal > 0 && tmpDto.OverstockRule != true)
          {
            tmpDto.OverstockQtySWCAFT = tmpDto.OverstockQtySWCAFT + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          tmpDto.leftOverQtySWCAFT = tmpQtyForTotal + 5;
        } // End of SWCAFT
        */
        /*
        if (tmpDto.leftOverQtyPrismCast > 5)
        { tmpDto.leftOverQtyPrismCast = tmpDto.leftOverQtyPrismCast - 5; }
        else
        { tmpDto.leftOverQtyPrismCast = 0; }
        if (tmpDto.leftOverQtyPrismCast > 0)
        {
          tmpQtyTotal = 0;
          leftOverQty = tmpDto.leftOverQtyPrismCast;
          tmpQtyForTotal = (int)Math.Floor((tmpDto.leftOverQtyPrismCast * abcA));
          tmpQty = (int)Math.Floor(((double)tmpQtyForTotal / onePmarket));
          if (tmpDto.AmazonFeedable == true && tmpDto.AmazonRule != true)
          {
            tmpDto.AmazonQtyPrismCast = tmpDto.AmazonQtyPrismCast + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.WalmartFeedable == true && tmpDto.WalmartRule != true)
          {
            tmpDto.WalmartQtyPrismCast = tmpDto.WalmartQtyPrismCast + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.WayfairFeedable == true && tmpDto.WayfairRule != true)
          {
            tmpDto.WayfairQtyPrismCast = tmpDto.WayfairQtyPrismCast + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.OverstockFeedable == true && tmpDto.OverstockRule != true)
          {
            tmpDto.OverstockQtyPrismCast = tmpDto.OverstockQtyPrismCast + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }

          leftOverQty = leftOverQty - tmpQtyTotal;
          tmpQtyTotal = 0;
          // Small Markets

          tmpQtyForTotal = (int)Math.Floor((tmpDto.leftOverQtyPrismCast * abcC));
          tmpQty = (int)Math.Floor(((double)tmpQtyForTotal / smallMarkets));
          tmpQtyForTotal = leftOverQty;
          if (tmpQty > leftOverQty) { tmpQty = leftOverQty; }
          if (tmpDto.BPMFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.BPMRule != true)
          {
            tmpDto.BPMWebQtyPrismCast = tmpDto.BPMWebQtyPrismCast + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.MellowFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.MellowRule != true)
          {
            tmpDto.MellowWebQtyPrismCast = tmpDto.MellowWebQtyPrismCast + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.HouzzFeedable == true && tmpQtyForTotal > tmpQty)
          {/*
            tmpDto.HouzzQtyPrismCast = tmpDto.HouzzQtyPrismCast + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;*/ /*
          }
          if (tmpDto.HomeDepotFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.HomeDepotRule != true)
          {
            tmpDto.HomeDepotQtyPrismCast = tmpDto.HomeDepotQtyPrismCast + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.TargetFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.TargetRule != true)
          {
            tmpDto.TargetQtyPrismCast = tmpDto.TargetQtyPrismCast + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          leftOverQty = leftOverQty - tmpQtyTotal;
          tmpQtyForTotal = leftOverQty;

          if (tmpDto.AmazonFeedable == true && tmpQtyForTotal > 0 && tmpDto.AmazonRule != true)
          {
            tmpDto.AmazonQtyPrismCast = tmpDto.AmazonQtyPrismCast + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.WalmartFeedable == true && tmpQtyForTotal > 0 && tmpDto.WalmartRule != true)
          {
            tmpDto.WalmartQtyPrismCast = tmpDto.WalmartQtyPrismCast + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.WayfairFeedable == true && tmpQtyForTotal > 0 && tmpDto.WayfairRule != true)
          {
            tmpDto.WayfairQtyPrismCast = tmpDto.WayfairQtyPrismCast + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.OverstockFeedable == true && tmpQtyForTotal > 0 && tmpDto.OverstockRule != true)
          {
            tmpDto.OverstockQtyPrismCast = tmpDto.OverstockQtyPrismCast + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          tmpDto.leftOverQtyPrismCast = tmpQtyForTotal + 5;
        } // End of PrismCast

        if (tmpDto.leftOverQtyPrismCalt > 5)
        { tmpDto.leftOverQtyPrismCalt = tmpDto.leftOverQtyPrismCalt - 5; }
        else
        { tmpDto.leftOverQtyPrismCalt = 0; }
        if (tmpDto.leftOverQtyPrismCalt > 0)
        {
          tmpQtyTotal = 0;
          leftOverQty = tmpDto.leftOverQtyPrismCalt;
          tmpQtyForTotal = (int)Math.Floor((tmpDto.leftOverQtyPrismCalt * abcA));
          tmpQty = (int)Math.Floor(((double)tmpQtyForTotal / onePmarket));
          if (tmpDto.AmazonFeedable == true && tmpDto.AmazonRule != true)
          {
            tmpDto.AmazonQtyPrismCalt = tmpDto.AmazonQtyPrismCalt + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.WalmartFeedable == true && tmpDto.WalmartRule != true)
          {
            tmpDto.WalmartQtyPrismCalt = tmpDto.WalmartQtyPrismCalt + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.WayfairFeedable == true && tmpDto.WayfairRule != true)
          {
            tmpDto.WayfairQtyPrismCalt = tmpDto.WayfairQtyPrismCalt + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.OverstockFeedable == true && tmpDto.OverstockRule != true)
          {
            tmpDto.OverstockQtyPrismCalt = tmpDto.OverstockQtyPrismCalt + tmpQty;
            //tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }

          leftOverQty = leftOverQty - tmpQtyTotal;
          tmpQtyTotal = 0;
          // Small Markets

          tmpQtyForTotal = (int)Math.Floor((tmpDto.leftOverQtyPrismCalt * abcC));
          tmpQty = (int)Math.Floor(((double)tmpQtyForTotal / smallMarkets));
          tmpQtyForTotal = leftOverQty;
          if (tmpQty > leftOverQty) { tmpQty = leftOverQty; }
          if (tmpDto.BPMFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.BPMRule != true)
          {
            tmpDto.BPMWebQtyPrismCalt = tmpDto.BPMWebQtyPrismCalt + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.MellowFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.MellowRule != true)
          {
            tmpDto.MellowWebQtyPrismCalt = tmpDto.MellowWebQtyPrismCalt + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.HouzzFeedable == true && tmpQtyForTotal > tmpQty)
          {/*
            tmpDto.HouzzQtyPrismCalt = tmpDto.HouzzQtyPrismCalt + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;*/ /*
          }
          if (tmpDto.HomeDepotFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.HomeDepotRule != true)
          {
            tmpDto.HomeDepotQtyPrismCalt = tmpDto.HomeDepotQtyPrismCalt + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          if (tmpDto.TargetFeedable == true && tmpQtyForTotal > tmpQty && tmpDto.TargetRule != true)
          {
            tmpDto.TargetQtyPrismCalt = tmpDto.TargetQtyPrismCalt + tmpQty;
            tmpQtyForTotal = tmpQtyForTotal - tmpQty;
            tmpQtyTotal = tmpQtyTotal + tmpQty;
          }
          leftOverQty = leftOverQty - tmpQtyTotal;
          tmpQtyForTotal = leftOverQty;

          if (tmpDto.AmazonFeedable == true && tmpQtyForTotal > 0 && tmpDto.AmazonRule != true)
          {
            tmpDto.AmazonQtyPrismCalt = tmpDto.AmazonQtyPrismCalt + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.WalmartFeedable == true && tmpQtyForTotal > 0 && tmpDto.WalmartRule != true)
          {
            tmpDto.WalmartQtyPrismCalt = tmpDto.WalmartQtyPrismCalt + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.WayfairFeedable == true && tmpQtyForTotal > 0 && tmpDto.WayfairRule != true)
          {
            tmpDto.WayfairQtyPrismCalt = tmpDto.WayfairQtyPrismCalt + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          if (tmpDto.OverstockFeedable == true && tmpQtyForTotal > 0 && tmpDto.OverstockRule != true)
          {
            tmpDto.OverstockQtyPrismCalt = tmpDto.OverstockQtyPrismCalt + tmpQtyForTotal;
            tmpQtyForTotal = 0;
          }
          tmpDto.leftOverQtyPrismCalt = tmpQtyForTotal + 5;
        } // End of PrismCalt */

      } // End of Foreach
      return invFeedsItemList;
    }

    // New Inventory Feeds
    // By Brian Yi on xx/xx/2022
    public async Task<List<InvSalesParetoRuleListItemDTO>> GetInvFeedParetoRuleItems(bool isImport, DateTime today, InvFeedsReport invFeedReport, List<int> cgIds, List<int> bpmIds)
    {
      List<InvSalesParetoRuleListItemDTO> serviceResponse = new List<InvSalesParetoRuleListItemDTO>();
      List<BpmItem> qryItems = await _kc.BpmItems.ToListAsync();
      int dayOfWeek = (int)today.DayOfWeek;
      DateTime endDate = new DateTime(today.AddDays(6 - dayOfWeek).Year, today.AddDays(6 - dayOfWeek).Month, today.AddDays(6 - dayOfWeek).Day, 23, 59, 59);
      DateTime startDate = new DateTime(today.AddDays(-dayOfWeek).Year, today.AddDays(-dayOfWeek).Month, today.AddDays(-dayOfWeek).Day, 0, 0, 0);
      List<InvSalesParetoRuleListItemDTO> invSalesHist = qryItems.Select((BpmItem bi) => new InvSalesParetoRuleListItemDTO
      {
        ItemNoId = bi.ItemNoId,
        ItemName = bi.ItemName,
        AmazonOBABC = "",
        AmazonOBWOS = 0m,
        AmazonInvQty = 0,
        WayfairOBABC = "",
        WayfairOBWOS = 0m,
        WayfairInvQty = 0,
        WalmartABC = "",
        WalmartWOS = 0m,
        OthersABC = "",
        OthersWOS = 0m,
        countA = 0,
        countB = 0,
        countC = 0,
        CGQty = 0
      }).ToList();

      if (isImport != true)
      {
        await FillAvgSO(today);
      }
      if (isImport != true)
      {
        await FillItemAbcPM(today);
      }
      /*if (!(await FillAvgSO(today)))
      {
        return serviceResponse;
      }*/
      /*
      if (!(await FillItemAbcPM(today)))
      {
        return serviceResponse;
      }*/


      DateTime tmpDate = new DateTime(today.AddDays(-dayOfWeek).Year, today.AddDays(-dayOfWeek).Month, today.AddDays(-dayOfWeek).Day, 0, 0, 0);
      List<FcstAvgSo> fcstAvgSos = await _kc.FcstAvgSos.Where((FcstAvgSo f) => f.FcstDate == tmpDate).ToListAsync();
      List<ItemAbcPm> itemAbcPms = await _kc.ItemAbcPms.Where((ItemAbcPm f) => f.FcstDate == tmpDate).Include((ItemAbcPm j) => j.ItemNo).ToListAsync();
      //foreach(ItemAbcPm tmpDto in itemAbcPms)
      //{
      //  if(tmpDto.ItemNoId == 551)
      //  { Console.Write("Catch it!");}
      //}
      if (fcstAvgSos.Count == 0)
      {
        Console.WriteLine("Should not come here!!!!");
        return serviceResponse;
      }
      List<InvFeedsItem> loadFeedsItems = await _kc.InvFeedsItems.Where((InvFeedsItem lfi) => lfi.InvFeedsReportId == (long?)invFeedReport.InvFeedsReportId).Include((InvFeedsItem lfi) => lfi.InvFeedsItemLocQties).ToListAsync();

      //int dayOfWeek = (int)today.DayOfWeek;
      DateTime tmpStartDateStart = new DateTime(today.AddDays(-dayOfWeek - 8).Year, today.AddDays(-dayOfWeek - 9).Month, today.AddDays(-dayOfWeek - 8).Day, 23, 59, 59);
      DateTime tmpStartDateEnd = new DateTime(today.AddDays(-dayOfWeek - 6).Year, today.AddDays(-dayOfWeek - 6).Month, today.AddDays(-dayOfWeek - 6).Day, 0, 0, 0);
      DateTime tmpStartDate = new DateTime(today.AddDays(-dayOfWeek - 7).Year, today.AddDays(-dayOfWeek - 7).Month, today.AddDays(-dayOfWeek - 7).Day, 0, 0, 0);

      /*
      List<InvQty> InvAmazon = await (from ia in _kc.KoAmzvendorRptInvts
                                      where ia.DateStart == startDate
                                      select ia into n
                                      select new InvQty
                                      {
                                        ItemNoId = int.Parse(n.ItemNo),
                                        QtyOnAvail = (int)n.QtyOnHand
                                      }).ToListAsync();*/
      List<InvQty> InvAmazon = await _kc.KoAmzvendorRptInvts
        //.Where(i => i.DateStart > tmpStartDateStart && i.DateStart < tmpStartDateEnd)
        .Where(i => i.DateStart == tmpStartDate)
        .Where(i => i.QtyOnHand != null && i.ItemNo != null)
        .Select
        (i => new InvQty()
        {
          //ItemNoId = Int32.Parse(i.ItemNo),
          ItemName = i.ItemNo,
          QtyOnAvail = (int)i.QtyOnHand
        }
        ).ToListAsync();
      foreach (InvQty tmpInvQty in InvAmazon)
      {
        tmpInvQty.ItemNoId = qryItems.Where(i => i.ItemName == tmpInvQty.ItemName).FirstOrDefault().ItemNoId;
      }
      List<InvQty> InvCG = new List<InvQty>();
      List<InvQty> InvBpm = new List<InvQty>();
      List<RealTimeInvUpdDetail> realTimeInvUpdDetails = await _kc.RealTimeInvUpdDetails
        .Where(x => x.RealTimeInvUpdateId == invFeedReport.RealTimeInvUpdateId)
        .ToListAsync();
      List<RealTimeInvUpdDetail> tmpInvUpdDetails = new List<RealTimeInvUpdDetail>();
      foreach (InvFeedsItem tmpDto in loadFeedsItems)
      {
        InvQty tmpInvCGQty = new InvQty();
        InvQty tmpInvBpmQty = new InvQty();
        tmpInvCGQty.ItemNoId = tmpDto.ItemNoId.Value;
        tmpInvBpmQty.ItemNoId = tmpDto.ItemNoId.Value;
        tmpInvCGQty.QtyOnAvail = 0;
        tmpInvBpmQty.QtyOnAvail = 0;
        tmpInvUpdDetails = realTimeInvUpdDetails.Where(i => i.ItemNoId == tmpDto.ItemNoId && cgIds.Contains(i.LocationId)).ToList();
        if (tmpInvUpdDetails != null && tmpInvUpdDetails.Count != 0)
        {
          tmpInvCGQty.QtyOnAvail = (int)tmpInvUpdDetails.Sum(i => i.QtyAvail);
        }
        if (tmpDto.InvFeedsItemLocQties != null & tmpDto.InvFeedsItemLocQties.Count != 0)
        {
          tmpInvBpmQty.QtyOnAvail = (int)tmpDto.InvFeedsItemLocQties.Sum(i => i.QtyAvail);
        }
        /*
        foreach (InvFeedsItemLocQty tmpLocQty in tmpDto.InvFeedsItemLocQties)
        {
          
          if (cgIds.Contains(tmpLocQty.ItemLocId))
          {
            tmpInvCGQty.QtyOnAvail += tmpLocQty.QtyAvail.Value;
          }
          if (bpmIds.Contains(tmpLocQty.ItemLocId))
          {
            tmpInvBpmQty.QtyOnAvail += tmpLocQty.QtyAvail.Value;
          }
        }*/
        InvCG.Add(tmpInvCGQty);
        InvBpm.Add(tmpInvBpmQty);
      }
      foreach (FcstAvgSo tmpAvgSo in fcstAvgSos)
      {
        //if (tmpAvgSo.ItemNoId == 551)
        //{ Console.Write("Catch it!"); }
        foreach (ItemAbcPm tmpAbc in itemAbcPms)
        {
          //if (tmpAbc.ItemNoId == 551)
          //{ Console.Write("Catch it!"); }
          if (tmpAbc.ItemNoId != tmpAvgSo.ItemNoId || tmpAbc.MarketId != tmpAvgSo.FcstMarketId)// || tmpAbc.MarketId == 1)
          {
            continue;
          }

          InvSalesParetoRuleListItemDTO tmpDto2 = invSalesHist.Find((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == tmpAbc.ItemNoId);
          if (tmpDto2 == null)
          {
            continue;
          }
          if (tmpAbc.MarketId == 1 || tmpAbc.MarketId == 10)
          {
            InvQty tmpInvQty4 = InvAmazon.Find((InvQty ia) => ia.ItemNoId == tmpAbc.ItemNoId);
            tmpDto2.AmazonOBABC = tmpAbc.Abc;
            if (tmpAbc.Abc.ToUpper() == "A")
            {
              tmpDto2.countA++;
            }
            else if (tmpAbc.Abc.ToUpper() == "B")
            {
              tmpDto2.countB++;
            }
            else if (tmpAbc.Abc.ToUpper() == "C")
            {
              tmpDto2.countC++;
            }
            if (tmpInvQty4 != null)
            {
              tmpDto2.AmazonInvQty = tmpInvQty4.QtyOnAvail;
              //tmpDto2.AmazonOBWOS = Math.Round((decimal)tmpInvQty4.QtyOnAvail / (tmpAbc.AvgQty + tmpAvgSo.QtyAvg12wk + tmpAvgSo.QtyAvg4wk + tmpAvgSo.QtyLastWk), 2);

              if ((tmpAbc.AvgQty + tmpAvgSo.QtyAvg12wk + tmpAvgSo.QtyAvg4wk + tmpAvgSo.QtyLastWk != 0) && (tmpInvQty4.QtyOnAvail != 0))
              {
                tmpDto2.AmazonOBWOS = Math.Round((decimal)tmpInvQty4.QtyOnAvail / (tmpAbc.AvgQty + tmpAvgSo.QtyAvg12wk + tmpAvgSo.QtyAvg4wk + tmpAvgSo.QtyLastWk), 2);
              }
              else
              { tmpDto2.AmazonOBWOS = 0; }
            }
          }
          if (tmpAbc.MarketId == 6)
          {
            InvQty tmpInvQty4 = InvCG.Find((InvQty ia) => ia.ItemNoId == tmpAbc.ItemNoId);
            tmpDto2.CGQty = (tmpInvQty4 != null ? tmpInvQty4.QtyOnAvail : 0);
            if (tmpDto2.CGQty != 0)
            {
              Console.WriteLine("Here");
            }
            tmpDto2.WayfairOBABC = tmpAbc.Abc;
            if (tmpAbc.Abc.ToUpper() == "A")
            {
              tmpDto2.countA++;
            }
            else if (tmpAbc.Abc.ToUpper() == "B")
            {
              tmpDto2.countB++;
            }
            else if (tmpAbc.Abc.ToUpper() == "C")
            {
              tmpDto2.countC++;
            }
            if (tmpInvQty4 != null)
            {
              tmpDto2.WayfairInvQty = tmpInvQty4.QtyOnAvail;
              tmpDto2.WayfairOBWOS = Math.Round((decimal)tmpInvQty4.QtyOnAvail / (tmpAbc.AvgQty + tmpAvgSo.QtyAvg12wk + tmpAvgSo.QtyAvg4wk + tmpAvgSo.QtyLastWk), 2);
            }
          }
          if (tmpAbc.MarketId == 9)
          {
            InvQty tmpInvQty4 = InvBpm.Find((InvQty ia) => ia.ItemNoId == tmpAbc.ItemNoId);
            tmpDto2.WalmartABC = tmpAbc.Abc;
            if (tmpAbc.Abc.ToUpper() == "A")
            {
              tmpDto2.countA++;
            }
            else if (tmpAbc.Abc.ToUpper() == "B")
            {
              tmpDto2.countB++;
            }
            else if (tmpAbc.Abc.ToUpper() == "C")
            {
              tmpDto2.countC++;
            }
            if (tmpInvQty4 != null)
            {
              tmpDto2.WalmartWOS = Math.Round((decimal)tmpInvQty4.QtyOnAvail / (tmpAbc.AvgQty + tmpAvgSo.QtyAvg12wk + tmpAvgSo.QtyAvg4wk + tmpAvgSo.QtyLastWk), 2);
            }
          }
          if (tmpAbc.MarketId == 10)
          {
            InvQty tmpInvQty4 = InvBpm.Find((InvQty ia) => ia.ItemNoId == tmpAbc.ItemNoId);
            tmpDto2.OthersABC = tmpAbc.Abc;
            if (tmpAbc.Abc.ToUpper() == "A")
            {
              tmpDto2.countA++;
            }
            else if (tmpAbc.Abc.ToUpper() == "B")
            {
              tmpDto2.countB++;
            }
            else if (tmpAbc.Abc.ToUpper() == "C")
            {
              tmpDto2.countC++;
            }
            if (tmpInvQty4 != null)
            {
              tmpDto2.OthersWOS = Math.Round((decimal)tmpInvQty4.QtyOnAvail / (tmpAbc.AvgQty + tmpAvgSo.QtyAvg12wk + tmpAvgSo.QtyAvg4wk + tmpAvgSo.QtyLastWk), 2);
            }
          }
        }
      }

      return invSalesHist;
    }



    //    public async Task<GetInventoryFeedsItemDTO> DeterminedFeedingParetoRuleForSKU(bool isModified, InventoryConfig inventoryConfig, InvFeedsItem invFeedsItem, GetInventoryFeedsItemDTO getInventoryFeedsItemDTO, List<InvFeedsRule> invFeedsRules, InvFeedsRuleSku invFeedsRuleSKU, List<ItemSoldQty> wmtTopSellers, List<InvFeedsDailyZeroOutSku> invFeedsDailyZeroOuts)
    public async Task<GetInventoryFeedsItemDTO> DeterminedFeedingParetoRuleForSKU(bool isModified, InventoryConfig inventoryConfig, int itemNoId, GetInventoryFeedsItemDTO getInventoryFeedsItemDTO, List<InvFeedsRule> invFeedsRules, InvFeedsRuleSku invFeedsRuleSKU, List<ItemSoldQty> wmtTopSellers, List<InvFeedsDailyZeroOutSku> invFeedsDailyZeroOuts)
    {
      bool customRejected = false;
      int result = 0;
      //int resultBanc = 1;
      int resultMainsl = 1;
      //int resultSWCAFT = 1;
      //int resultBasc = 1;
      //int resultPrismCast = 1;
      //int resultPrismCalt = 1;
      int resultZinusTracy = 1;
      int resultZinusChs = 1;
      int amazonMkId = 1, bpmMkId = 3, wayfairMkId = 4, eBayMkId = 5, houzzMkId = 7, mellowMkId = 10, overstockMkId = 12, walmartMkId = 16, homeDepotMkId = 340, targetMkId = 341;
      //int bancId = 4;
      int mainslId = 25;
      //int swcaftId = 54;
      //int bascId = 62;
      //int prsmCastId = 51;
      //int prsmCaltId = 67;
      int zinusTracyId = 57;
      int zinusChsId = 108;
      List<InvFeedsAppliedRule> invFeedsAppliedRules = await _kc.InvFeedsAppliedRules.ToListAsync();
      new List<InvFeedsRuleSkumkt>();
      //List<NsIcr> nsIcrs = await _kc.NsIcrs.Where((NsIcr n) => n.ItemNoId == getInventoryFeedsItemDTO.ItemNoId && n.IsInvFeed == (int?)1).ToListAsync();
      // if(getInventoryFeedsItemDTO.ItemNoId == 870)
      //{ Console.WriteLine("This is IT!");};

      //getInventoryFeedsItemDTO
      //List<InvFeedsDailyZeroOutSku> invFeedsDailyZeroOuts
      List<InvFeedsDailyZeroOutSku> tmpZeroOuts = invFeedsDailyZeroOuts
        .FindAll(i => i.ItemNoId == getInventoryFeedsItemDTO.ItemNoId)
        .ToList();
      if (tmpZeroOuts?.Any() is true)
      {
        foreach (InvFeedsDailyZeroOutSku tmpDto in tmpZeroOuts)
        {/*
          if (tmpDto.ItemLocId == bancId)
          {
            if (tmpDto.OverrideBackOrderRule == true)
            {
              getInventoryFeedsItemDTO.totalStagePOQtyBanc = 0;
            }
            else
            {
              getInventoryFeedsItemDTO.QtyAvailBanc = 0;
            }
          }
          if (tmpDto.ItemLocId == bascId)
          {
            if (tmpDto.OverrideBackOrderRule == true)
            {
              getInventoryFeedsItemDTO.totalStagePOQtyBasc = 0;
            }
            else
            {
              getInventoryFeedsItemDTO.QtyAvailBasc = 0;
            }
          }*/
          if (tmpDto.ItemLocId == mainslId)
          {
            if (tmpDto.OverrideBackOrderRule == true)
            {
              getInventoryFeedsItemDTO.totalStagePOQtyMainsl = 0;
            }
            else
            {
              getInventoryFeedsItemDTO.QtyAvailMainsl = 0;
            }
          }/*
          if (tmpDto.ItemLocId == swcaftId)
					{
						if (tmpDto.OverrideBackOrderRule == true)
						{
							getInventoryFeedsItemDTO.totalStagePOQtySWCAFT = 0;
						}
						else
						{
							getInventoryFeedsItemDTO.QtyAvailSWCAFT = 0;
						}
          }*/
          /*
          if (tmpDto.ItemLocId == prsmCastId)
          {
            if (tmpDto.OverrideBackOrderRule == true)
            {
              getInventoryFeedsItemDTO.totalStagePOQtyPrismCast = 0;
            }
            else
            {
              getInventoryFeedsItemDTO.QtyAvailPrismCast = 0;
            }
          }
          if (tmpDto.ItemLocId == prsmCaltId)
          {
            if (tmpDto.OverrideBackOrderRule == true)
            {
              getInventoryFeedsItemDTO.totalStagePOQtyPrismCalt = 0;
            }
            else
            {
              getInventoryFeedsItemDTO.QtyAvailPrismCalt = 0;
            }
          }*/
          if (tmpDto.ItemLocId == zinusTracyId)
          {
            if (tmpDto.OverrideBackOrderRule == true)
            {
              getInventoryFeedsItemDTO.totalStagePOQtyZinusTracy = 0;
            }
            else
            {
              getInventoryFeedsItemDTO.QtyAvailZinusTracy = 0;
            }
          }
          if (tmpDto.ItemLocId == zinusChsId)
          {
            if (tmpDto.OverrideBackOrderRule == true)
            {
              getInventoryFeedsItemDTO.totalStagePOQtyZinusChs = 0;
            }
            else
            {
              getInventoryFeedsItemDTO.QtyAvailZinusChs = 0;
            }
          }
        }
      } // End of Zero Out

      List<MkIcr> mkIcrs = await _kc.MkIcrs.Where((MkIcr n) => n.ItemNoId == getInventoryFeedsItemDTO.ItemNoId && n.IsInvFeed == true).ToListAsync();
      if (invFeedsRuleSKU != null)
      {
        List<InvFeedsRuleSkumkt> invFeedsRuleSkumkts = await _kc.InvFeedsRuleSkumkts.Where((InvFeedsRuleSkumkt i) => i.InvFeedsRuleSkuid == (long?)invFeedsRuleSKU.InvFeedsRuleSkuid).ToListAsync();
        //getInventoryFeedsItemDTO.BancFeedable = !invFeedsRuleSKU.DoNotFeedFromBanc.HasValue || ((!invFeedsRuleSKU.DoNotFeedFromBanc.Value) ? true : false);
        getInventoryFeedsItemDTO.MainslFeedable = !invFeedsRuleSKU.DoNotFeedFromMainsl.HasValue || ((!invFeedsRuleSKU.DoNotFeedFromMainsl.Value) ? true : false);
        //getInventoryFeedsItemDTO.BascFeedable = !invFeedsRuleSKU.DoNotFeedFromBasc.HasValue || ((!invFeedsRuleSKU.DoNotFeedFromBasc.Value) ? true : false);
        //getInventoryFeedsItemDTO.SWCAFTFeedable = !invFeedsRuleSKU.DoNotFeedFromSwcaft.HasValue || ((!invFeedsRuleSKU.DoNotFeedFromSwcaft.Value) ? true : false);
        //getInventoryFeedsItemDTO.PrismCastFeedable = !invFeedsRuleSKU.DoNotFeedFromPrismCast.HasValue || ((!invFeedsRuleSKU.DoNotFeedFromPrismCast.Value) ? true : false);
        //getInventoryFeedsItemDTO.PrismCaltFeedable = !invFeedsRuleSKU.DoNotFeedFromPrismCalt.HasValue || ((!invFeedsRuleSKU.DoNotFeedFromPrismCalt.Value) ? true : false);
        getInventoryFeedsItemDTO.ZinusTracyFeedable = !invFeedsRuleSKU.DoNotFeedFromZinusTracy.HasValue || ((!invFeedsRuleSKU.DoNotFeedFromZinusTracy.Value) ? true : false);
        getInventoryFeedsItemDTO.ZinusChsFeedable = !invFeedsRuleSKU.DoNotFeedFromZinusChs.HasValue || ((!invFeedsRuleSKU.DoNotFeedFromZinusChs.Value) ? true : false);
        if (invFeedsRuleSkumkts.Count > 0)
        {
          //foreach (InvFeedsRuleSkumkt tmpDto in invFeedsRuleSkumkts)
          Parallel.ForEach(invFeedsRuleSkumkts, tmpDto =>
          {
            int? customerId = tmpDto.CustomerId;
            int? num = customerId;
            int specialRatio = 0;
            /*
             if (!num.HasValue)
             {
               continue;
             }*/
            switch (num.GetValueOrDefault())
            {
              case 5:
                getInventoryFeedsItemDTO.AmazonFeedable = !tmpDto.DoNotFeedToHere.HasValue || ((!tmpDto.DoNotFeedToHere.Value) ? true : false);
                if (mkIcrs.FindLast((MkIcr i) => i.MarketId == amazonMkId) == null)
                {
                  getInventoryFeedsItemDTO.AmazonFeedable = false;
                }
                else
                {
                  if (CheckSKURulePeriod(tmpDto))
                  {
                    if (tmpDto.CustomFixedPercentage.HasValue)
                    {
                      if (tmpDto.CustomFixedPercentage > 0)
                      {
                        specialRatio = (int)tmpDto.CustomFixedPercentage;
                        //getInventoryFeedsItemDTO.AmazonBancPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.AmazonBascPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.AmazonSWCAFTPercentage = specialRatio;
                        getInventoryFeedsItemDTO.AmazonMainslPercentage = specialRatio;
                        // getInventoryFeedsItemDTO.AmazonPrismCaltPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.AmazonPrismCastPercentage = specialRatio;
                        getInventoryFeedsItemDTO.AmazonZinusTracyPercentage = specialRatio;
                        getInventoryFeedsItemDTO.AmazonZinusChsPercentage = specialRatio;
                      }
                    }
                  }
                  else
                  {
                    customRejected = true;
                  }
                }
                break;
              case 9:
                getInventoryFeedsItemDTO.BPMFeedable = !tmpDto.DoNotFeedToHere.HasValue || ((!tmpDto.DoNotFeedToHere.Value) ? true : false);
                if (mkIcrs.FindLast((MkIcr i) => i.MarketId == bpmMkId) == null)
                {
                  getInventoryFeedsItemDTO.BPMFeedable = false;
                }
                else
                {
                  if (CheckSKURulePeriod(tmpDto))
                  {
                    if (tmpDto.CustomFixedPercentage.HasValue)
                    {
                      if (tmpDto.CustomFixedPercentage > 0)
                      {
                        specialRatio = (int)tmpDto.CustomFixedPercentage;
                        //getInventoryFeedsItemDTO.BPMWebBancPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.BPMWebBascPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.BPMWebSWCAFTPercentage = specialRatio;
                        getInventoryFeedsItemDTO.BPMWebMainslPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.BPMWebPrismCaltPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.BPMWebPrismCastPercentage = specialRatio;
                        getInventoryFeedsItemDTO.BPMWebZinusTracyPercentage = specialRatio;
                        getInventoryFeedsItemDTO.BPMWebZinusChsPercentage = specialRatio;
                      }
                    }
                  }
                  else
                  {
                    customRejected = true;
                  }
                }
                break;
              case 12:
                getInventoryFeedsItemDTO.eBayFeedable = !tmpDto.DoNotFeedToHere.HasValue || ((!tmpDto.DoNotFeedToHere.Value) ? true : false);
                if (mkIcrs.FindLast((MkIcr i) => i.MarketId == eBayMkId) == null)
                {
                  getInventoryFeedsItemDTO.eBayFeedable = false;
                }
                else
                {
                  if (CheckSKURulePeriod(tmpDto))
                  {
                    if (tmpDto.CustomFixedPercentage.HasValue)
                    {
                      if (tmpDto.CustomFixedPercentage > 0)
                      {
                        specialRatio = (int)tmpDto.CustomFixedPercentage;
                        //getInventoryFeedsItemDTO.eBayBancPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.eBayBascPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.eBaySWCAFTPercentage = specialRatio;
                        getInventoryFeedsItemDTO.eBayMainslPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.eBayPrismCaltPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.eBayPrismCastPercentage = specialRatio;
                        getInventoryFeedsItemDTO.eBayZinusTracyPercentage = specialRatio;
                        getInventoryFeedsItemDTO.eBayZinusChsPercentage = specialRatio;
                      }
                    }
                  }
                  else
                  {
                    customRejected = true;
                  }
                }
                break;
              case 14:
                getInventoryFeedsItemDTO.HouzzFeedable = false;
                /*
                getInventoryFeedsItemDTO.HouzzFeedable = !tmpDto.DoNotFeedToHere.HasValue || ((!tmpDto.DoNotFeedToHere.Value) ? true : false);
                if (mkIcrs.FindLast((MkIcr i) => i.MarketId == houzzMkId) == null)
                {
                  getInventoryFeedsItemDTO.HouzzFeedable = false;
                }*/
                break;
              case 18:
                getInventoryFeedsItemDTO.MellowFeedable = !tmpDto.DoNotFeedToHere.HasValue || ((!tmpDto.DoNotFeedToHere.Value) ? true : false);
                if (mkIcrs.FindLast((MkIcr i) => i.MarketId == mellowMkId) == null)
                {
                  getInventoryFeedsItemDTO.MellowFeedable = false;
                }
                else
                {
                  if (CheckSKURulePeriod(tmpDto))
                  {
                    if (tmpDto.CustomFixedPercentage.HasValue)
                    {
                      if (tmpDto.CustomFixedPercentage > 0)
                      {
                        specialRatio = (int)tmpDto.CustomFixedPercentage;
                        //getInventoryFeedsItemDTO.MellowWebBancPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.MellowWebBascPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.MellowWebSWCAFTPercentage = specialRatio;
                        getInventoryFeedsItemDTO.MellowWebMainslPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.MellowWebPrismCaltPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.MellowWebPrismCastPercentage = specialRatio;
                        getInventoryFeedsItemDTO.MellowWebZinusTracyPercentage = specialRatio;
                        getInventoryFeedsItemDTO.MellowWebZinusChsPercentage = specialRatio;
                      }
                    }
                  }
                  else
                  {
                    customRejected = true;
                  }
                }
                break;
              case 21:
                getInventoryFeedsItemDTO.OverstockFeedable = !tmpDto.DoNotFeedToHere.HasValue || ((!tmpDto.DoNotFeedToHere.Value) ? true : false);
                if (mkIcrs.FindLast((MkIcr i) => i.MarketId == overstockMkId) == null)
                {
                  getInventoryFeedsItemDTO.OverstockFeedable = false;
                }
                else
                {
                  if (CheckSKURulePeriod(tmpDto))
                  {
                    if (tmpDto.CustomFixedPercentage.HasValue)
                    {
                      if (tmpDto.CustomFixedPercentage > 0)
                      {
                        specialRatio = (int)tmpDto.CustomFixedPercentage;
                        //getInventoryFeedsItemDTO.OverstockBancPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.OverstockBascPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.OverstockSWCAFTPercentage = specialRatio;
                        getInventoryFeedsItemDTO.OverstockMainslPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.OverstockPrismCaltPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.OverstockPrismCastPercentage = specialRatio;
                        getInventoryFeedsItemDTO.OverstockZinusTracyPercentage = specialRatio;
                        getInventoryFeedsItemDTO.OverstockZinusChsPercentage = specialRatio;
                      }
                    }
                  }
                  else
                  {
                    customRejected = true;
                  }
                }
                break;
              case 26:
                getInventoryFeedsItemDTO.WalmartFeedable = !tmpDto.DoNotFeedToHere.HasValue || ((!tmpDto.DoNotFeedToHere.Value) ? true : false);
                if (mkIcrs.FindLast((MkIcr i) => i.MarketId == walmartMkId) == null)
                {
                  getInventoryFeedsItemDTO.WalmartFeedable = false;
                }
                else
                {
                  if (CheckSKURulePeriod(tmpDto))
                  {
                    if (tmpDto.CustomFixedPercentage.HasValue)
                    {
                      if (tmpDto.CustomFixedPercentage > 0)
                      {
                        specialRatio = (int)tmpDto.CustomFixedPercentage;
                        //getInventoryFeedsItemDTO.WalmartBancPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.WalmartBascPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.WalmartSWCAFTPercentage = specialRatio;
                        getInventoryFeedsItemDTO.WalmartMainslPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.WalmartPrismCaltPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.WalmartPrismCastPercentage = specialRatio;
                        getInventoryFeedsItemDTO.WalmartZinusTracyPercentage = specialRatio;
                        getInventoryFeedsItemDTO.WalmartZinusChsPercentage = specialRatio;
                      }
                    }
                  }
                  else
                  {
                    customRejected = true;
                  }
                }
                break;
              case 29:
                getInventoryFeedsItemDTO.WayfairFeedable = !tmpDto.DoNotFeedToHere.HasValue || ((!tmpDto.DoNotFeedToHere.Value) ? true : false);
                if (mkIcrs.FindLast((MkIcr i) => i.MarketId == wayfairMkId) == null)
                {
                  getInventoryFeedsItemDTO.WayfairFeedable = false;
                }
                else
                {
                  if (CheckSKURulePeriod(tmpDto))
                  {
                    if (tmpDto.CustomFixedPercentage.HasValue)
                    {
                      if (tmpDto.CustomFixedPercentage > 0)
                      {
                        specialRatio = (int)tmpDto.CustomFixedPercentage;
                        //getInventoryFeedsItemDTO.WayfairBancPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.WayfairBascPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.WayfairSWCAFTPercentage = specialRatio;
                        getInventoryFeedsItemDTO.WayfairMainslPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.WayfairPrismCaltPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.WayfairPrismCastPercentage = specialRatio;
                        getInventoryFeedsItemDTO.WayfairZinusTracyPercentage = specialRatio;
                        getInventoryFeedsItemDTO.WayfairZinusChsPercentage = specialRatio;
                      }
                    }
                  }
                  else
                  {
                    customRejected = true;
                  }
                }
                break;
              case 40:
                getInventoryFeedsItemDTO.HomeDepotFeedable = !tmpDto.DoNotFeedToHere.HasValue || ((!tmpDto.DoNotFeedToHere.Value) ? true : false);
                if (mkIcrs.FindLast((MkIcr i) => i.MarketId == homeDepotMkId) == null)
                {
                  getInventoryFeedsItemDTO.HomeDepotFeedable = false;
                }
                else
                {
                  if (CheckSKURulePeriod(tmpDto))
                  {
                    if (tmpDto.CustomFixedPercentage.HasValue)
                    {
                      if (tmpDto.CustomFixedPercentage > 0)
                      {
                        specialRatio = (int)tmpDto.CustomFixedPercentage;
                        //getInventoryFeedsItemDTO.HomeDepotBancPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.HomeDepotBascPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.HomeDepotSWCAFTPercentage = specialRatio;
                        getInventoryFeedsItemDTO.HomeDepotMainslPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.HomeDepotPrismCaltPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.HomeDepotPrismCastPercentage = specialRatio;
                        getInventoryFeedsItemDTO.HomeDepotZinusTracyPercentage = specialRatio;
                        getInventoryFeedsItemDTO.HomeDepotZinusChsPercentage = specialRatio;
                      }
                    }
                  }
                  else
                  {
                    customRejected = true;
                  }
                }
                break;
              case 51:
                getInventoryFeedsItemDTO.TargetFeedable = !tmpDto.DoNotFeedToHere.HasValue || ((!tmpDto.DoNotFeedToHere.Value) ? true : false);
                if (mkIcrs.FindLast((MkIcr i) => i.MarketId == targetMkId) == null)
                {
                  getInventoryFeedsItemDTO.TargetFeedable = false;
                }
                else
                {
                  if (CheckSKURulePeriod(tmpDto))
                  {
                    if (tmpDto.CustomFixedPercentage.HasValue)
                    {
                      if (tmpDto.CustomFixedPercentage > 0)
                      {
                        specialRatio = (int)tmpDto.CustomFixedPercentage;
                        //getInventoryFeedsItemDTO.TargetBancPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.TargetBascPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.TargetSWCAFTPercentage = specialRatio;
                        getInventoryFeedsItemDTO.TargetMainslPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.TargetPrismCaltPercentage = specialRatio;
                        //getInventoryFeedsItemDTO.TargetPrismCastPercentage = specialRatio;
                        getInventoryFeedsItemDTO.TargetZinusTracyPercentage = specialRatio;
                        getInventoryFeedsItemDTO.TargetZinusChsPercentage = specialRatio;
                      }
                    }
                  }
                  else
                  {
                    customRejected = true;
                  }
                }
                break;
            }
          });
        }
      }

      if (isModified == true) // Import
      {
        /*
        // For Banc
        if (inventoryConfig.ZeroOutBufferBanc >= getInventoryFeedsItemDTO.QtyAvailBanc)
        {
          resultBanc = 6;
          getInventoryFeedsItemDTO.QtyAvailBanc = 0;
          getInventoryFeedsItemDTO.AmazonQtyBanc = 0;
          getInventoryFeedsItemDTO.BPMWebQtyBanc = 0;
          getInventoryFeedsItemDTO.MellowWebQtyBanc = 0;
          getInventoryFeedsItemDTO.HouzzQtyBanc = 0;
          getInventoryFeedsItemDTO.OverstockQtyBanc = 0;
          getInventoryFeedsItemDTO.WalmartQtyBanc = 0;
          getInventoryFeedsItemDTO.WayfairQtyBanc = 0;
          getInventoryFeedsItemDTO.eBayQtyBanc = 0;
          getInventoryFeedsItemDTO.HomeDepotQtyBanc = 0;
          getInventoryFeedsItemDTO.TargetQtyBanc = 0;
        }
        else if (inventoryConfig.LowInventoryQty >= getInventoryFeedsItemDTO.QtyAvailBanc)
        {
          resultBanc = 5;
        }
        else if (invFeedsRuleSKU != null)
        {
          resultBanc = 3;
        }
        else
        {
          resultBanc = checkWalmartTopSellers(itemNoId, wmtTopSellers);
        }
        //getInventoryFeedsItemDTO.WalmartQtyBanc = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyBanc, 5);
        getInventoryFeedsItemDTO.AppliedFeedingRuleNoBanc = resultBanc;
        getInventoryFeedsItemDTO.AppliedFeedingRuleTypeBanc = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == resultBanc).FirstOrDefault().Description;
        */
        // For MainSL
        if (inventoryConfig.ZeroOutBufferMainSl >= getInventoryFeedsItemDTO.QtyAvailMainsl)
        {
          resultMainsl = 6;
          getInventoryFeedsItemDTO.QtyAvailMainsl = 0;
          getInventoryFeedsItemDTO.AmazonQtyMainsl = 0;
          getInventoryFeedsItemDTO.BPMWebQtyMainsl = 0;
          getInventoryFeedsItemDTO.MellowWebQtyMainsl = 0;
          getInventoryFeedsItemDTO.HouzzQtyMainsl = 0;
          getInventoryFeedsItemDTO.OverstockQtyMainsl = 0;
          getInventoryFeedsItemDTO.WalmartQtyMainsl = 0;
          getInventoryFeedsItemDTO.WayfairQtyMainsl = 0;
          getInventoryFeedsItemDTO.eBayQtyMainsl = 0;
          getInventoryFeedsItemDTO.HomeDepotQtyMainsl = 0;
          getInventoryFeedsItemDTO.TargetQtyMainsl = 0;
        }
        else if (inventoryConfig.LowInventoryQty >= getInventoryFeedsItemDTO.QtyAvailMainsl)
        {
          resultMainsl = 5;
        }
        else if (invFeedsRuleSKU != null && customRejected == false)
        {
          resultMainsl = 3;
        }
        else
        {
          resultMainsl = checkWalmartTopSellers(itemNoId, wmtTopSellers);
        }
        //getInventoryFeedsItemDTO.WalmartQtyMainsl = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyMainsl, 5);
        getInventoryFeedsItemDTO.AppliedFeedingRuleNoMainsl = resultMainsl;
        getInventoryFeedsItemDTO.AppliedFeedingRuleTypeMainsl = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == resultMainsl).FirstOrDefault().Description;

        // For Swcaft
        /*
        if (3 >= getInventoryFeedsItemDTO.QtyAvailSWCAFT)
        {
          resultSWCAFT = 6;
          getInventoryFeedsItemDTO.QtyAvailSWCAFT = 0;
          getInventoryFeedsItemDTO.AmazonQtySWCAFT = 0;
          getInventoryFeedsItemDTO.BPMWebQtySWCAFT = 0;
          getInventoryFeedsItemDTO.MellowWebQtySWCAFT = 0;
          getInventoryFeedsItemDTO.HouzzQtySWCAFT = 0;
          getInventoryFeedsItemDTO.OverstockQtySWCAFT = 0;
          getInventoryFeedsItemDTO.WalmartQtySWCAFT = 0;
          getInventoryFeedsItemDTO.WayfairQtySWCAFT = 0;
          getInventoryFeedsItemDTO.eBayQtySWCAFT = 0;
          getInventoryFeedsItemDTO.HomeDepotQtySWCAFT = 0;
          getInventoryFeedsItemDTO.TargetQtySWCAFT = 0;
        }
        else if (inventoryConfig.LowInventoryQty >= getInventoryFeedsItemDTO.QtyAvailSWCAFT)
        {
          resultSWCAFT = 5;
        }
        else if (invFeedsRuleSKU != null)
        {
          resultSWCAFT = 3;
        }
        else
        {
          resultSWCAFT = checkWalmartTopSellers(itemNoId, wmtTopSellers);
        }
        //getInventoryFeedsItemDTO.WalmartQtySWCAFT = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtySWCAFT, 5);
        getInventoryFeedsItemDTO.AppliedFeedingRuleNoSWCAFT = resultSWCAFT;
        getInventoryFeedsItemDTO.AppliedFeedingRuleTypeSWCAFT = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == resultSWCAFT).FirstOrDefault().Description;
        */
        /*
        // For BASC
        if (3 >= getInventoryFeedsItemDTO.QtyAvailBasc)
        {
          resultBasc = 6;
          getInventoryFeedsItemDTO.QtyAvailBasc = 0;
          getInventoryFeedsItemDTO.AmazonQtyBasc = 0;
          getInventoryFeedsItemDTO.BPMWebQtyBasc = 0;
          getInventoryFeedsItemDTO.MellowWebQtyBasc = 0;
          getInventoryFeedsItemDTO.HouzzQtyBasc = 0;
          getInventoryFeedsItemDTO.OverstockQtyBasc = 0;
          getInventoryFeedsItemDTO.WalmartQtyBasc = 0;
          getInventoryFeedsItemDTO.WayfairQtyBasc = 0;
          getInventoryFeedsItemDTO.eBayQtyBasc = 0;
          getInventoryFeedsItemDTO.HomeDepotQtyBasc = 0;
          getInventoryFeedsItemDTO.TargetQtyBasc = 0;
        }
        else if (inventoryConfig.LowInventoryQty >= getInventoryFeedsItemDTO.QtyAvailBasc)
        {
          resultBasc = 5;
        }
        else if (invFeedsRuleSKU != null)
        {
          resultBasc = 3;
        }
        else
        {
          resultBasc = checkWalmartTopSellers(itemNoId, wmtTopSellers);
        }
        //getInventoryFeedsItemDTO.WalmartQtyBasc = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyBasc, 5);
        getInventoryFeedsItemDTO.AppliedFeedingRuleNoBasc = resultBasc;
        getInventoryFeedsItemDTO.AppliedFeedingRuleTypeBasc = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == resultBasc).FirstOrDefault().Description;
        */
        // For PRISM-CAST
        /*
        if (3 >= getInventoryFeedsItemDTO.QtyAvailPrismCast)
        {
          resultPrismCast = 6;
          getInventoryFeedsItemDTO.QtyAvailPrismCast = 0;
          getInventoryFeedsItemDTO.AmazonQtyPrismCast = 0;
          getInventoryFeedsItemDTO.BPMWebQtyPrismCast = 0;
          getInventoryFeedsItemDTO.MellowWebQtyPrismCast = 0;
          //getInventoryFeedsItemDTO.HouzzQtyPrismCast = 0;
          getInventoryFeedsItemDTO.OverstockQtyPrismCast = 0;
          getInventoryFeedsItemDTO.WalmartQtyPrismCast = 0;
          getInventoryFeedsItemDTO.WayfairQtyPrismCast = 0;
          getInventoryFeedsItemDTO.eBayQtyPrismCast = 0;
          getInventoryFeedsItemDTO.HomeDepotQtyPrismCast = 0;
          getInventoryFeedsItemDTO.TargetQtyPrismCast = 0;
        }
        else if (inventoryConfig.LowInventoryQty >= getInventoryFeedsItemDTO.QtyAvailPrismCast)
        {
          resultPrismCast = 5;
        }
        else if (invFeedsRuleSKU != null)
        {
          resultPrismCast = 3;
        }
        else
        {
          resultPrismCast = checkWalmartTopSellers(itemNoId, wmtTopSellers);
        }
        //getInventoryFeedsItemDTO.WalmartQtyBasc = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyBasc, 5);
        getInventoryFeedsItemDTO.AppliedFeedingRuleNoPrismCast = resultPrismCast;
        getInventoryFeedsItemDTO.AppliedFeedingRuleTypePrismCast = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == resultPrismCast).FirstOrDefault().Description;


        // For PRISM-CALT
        if (3 >= getInventoryFeedsItemDTO.QtyAvailPrismCalt)
        {
          resultPrismCast = 6;
          getInventoryFeedsItemDTO.QtyAvailPrismCalt = 0;
          getInventoryFeedsItemDTO.AmazonQtyPrismCalt = 0;
          getInventoryFeedsItemDTO.BPMWebQtyPrismCalt = 0;
          getInventoryFeedsItemDTO.MellowWebQtyPrismCalt = 0;
          //getInventoryFeedsItemDTO.HouzzQtyPrismCast = 0;
          getInventoryFeedsItemDTO.OverstockQtyPrismCalt = 0;
          getInventoryFeedsItemDTO.WalmartQtyPrismCalt = 0;
          getInventoryFeedsItemDTO.WayfairQtyPrismCalt = 0;
          getInventoryFeedsItemDTO.eBayQtyPrismCalt = 0;
          getInventoryFeedsItemDTO.HomeDepotQtyPrismCalt = 0;
          getInventoryFeedsItemDTO.TargetQtyPrismCalt = 0;
        }
        else if (inventoryConfig.LowInventoryQty >= getInventoryFeedsItemDTO.QtyAvailPrismCalt)
        {
          resultPrismCalt = 5;
        }
        else if (invFeedsRuleSKU != null)
        {
          resultPrismCalt = 3;
        }
        else
        {
          resultPrismCalt = checkWalmartTopSellers(itemNoId, wmtTopSellers);
        }
        //getInventoryFeedsItemDTO.WalmartQtyBasc = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyBasc, 5);
        getInventoryFeedsItemDTO.AppliedFeedingRuleNoPrismCalt = resultPrismCalt;
        getInventoryFeedsItemDTO.AppliedFeedingRuleTypePrismCalt = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == resultPrismCalt).FirstOrDefault().Description;
        */

        // For Zinus-Tracy
        if (3 >= getInventoryFeedsItemDTO.QtyAvailZinusTracy)
        {
          resultZinusTracy = 6;
          getInventoryFeedsItemDTO.QtyAvailZinusTracy = 0;
          getInventoryFeedsItemDTO.AmazonQtyZinusTracy = 0;
          getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = 0;
          getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = 0;
          //getInventoryFeedsItemDTO.HouzzQtyPrismCast = 0;
          getInventoryFeedsItemDTO.OverstockQtyZinusTracy = 0;
          getInventoryFeedsItemDTO.WalmartQtyZinusTracy = 0;
          getInventoryFeedsItemDTO.WayfairQtyZinusTracy = 0;
          getInventoryFeedsItemDTO.eBayQtyZinusTracy = 0;
          getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = 0;
          getInventoryFeedsItemDTO.TargetQtyZinusTracy = 0;
        }
        else if (inventoryConfig.LowInventoryQty >= getInventoryFeedsItemDTO.QtyAvailZinusTracy)
        {
          resultZinusTracy = 5;
        }
        else if (invFeedsRuleSKU != null && customRejected == false)
        {
          resultZinusTracy = 3;
        }
        else
        {
          resultZinusTracy = checkWalmartTopSellers(itemNoId, wmtTopSellers);
        }
        //getInventoryFeedsItemDTO.WalmartQtyBasc = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyBasc, 5);
        getInventoryFeedsItemDTO.AppliedFeedingRuleNoZinusTracy = resultZinusTracy;
        getInventoryFeedsItemDTO.AppliedFeedingRuleTypeZinusTracy = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == resultZinusTracy).FirstOrDefault().Description;



        // For Zinus-CHS
        if (3 >= getInventoryFeedsItemDTO.QtyAvailZinusChs)
        {
          resultZinusChs = 6;
          getInventoryFeedsItemDTO.QtyAvailZinusChs = 0;
          getInventoryFeedsItemDTO.AmazonQtyZinusChs = 0;
          getInventoryFeedsItemDTO.BPMWebQtyZinusChs = 0;
          getInventoryFeedsItemDTO.MellowWebQtyZinusChs = 0;
          //getInventoryFeedsItemDTO.HouzzQtyPrismCast = 0;
          getInventoryFeedsItemDTO.OverstockQtyZinusChs = 0;
          getInventoryFeedsItemDTO.WalmartQtyZinusChs = 0;
          getInventoryFeedsItemDTO.WayfairQtyZinusChs = 0;
          getInventoryFeedsItemDTO.eBayQtyZinusChs = 0;
          getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = 0;
          getInventoryFeedsItemDTO.TargetQtyZinusChs = 0;
        }
        else if (inventoryConfig.LowInventoryQty >= getInventoryFeedsItemDTO.QtyAvailZinusChs)
        {
          resultZinusChs = 5;
        }
        else if (invFeedsRuleSKU != null && customRejected == false)
        {
          resultZinusChs = 3;
        }
        else
        {
          resultZinusChs = checkWalmartTopSellers(itemNoId, wmtTopSellers);
        }
        //getInventoryFeedsItemDTO.WalmartQtyBasc = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyBasc, 5);
        getInventoryFeedsItemDTO.AppliedFeedingRuleNoZinusChs = resultZinusChs;
        getInventoryFeedsItemDTO.AppliedFeedingRuleTypeZinusChs = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == resultZinusChs).FirstOrDefault().Description;


      }
      else // New
      {
        /*
        // For Banc
        if (inventoryConfig.ZeroOutBufferBanc >= getInventoryFeedsItemDTO.QtyAvailBanc)
        {
          resultBanc = 6;
          getInventoryFeedsItemDTO.QtyAvailBanc = 0;
          getInventoryFeedsItemDTO.AmazonQtyBanc = 0;
          getInventoryFeedsItemDTO.BPMWebQtyBanc = 0;
          getInventoryFeedsItemDTO.MellowWebQtyBanc = 0;
          getInventoryFeedsItemDTO.HouzzQtyBanc = 0;
          getInventoryFeedsItemDTO.OverstockQtyBanc = 0;
          getInventoryFeedsItemDTO.WalmartQtyBanc = 0;
          getInventoryFeedsItemDTO.WayfairQtyBanc = 0;
          getInventoryFeedsItemDTO.eBayQtyBanc = 0;
          getInventoryFeedsItemDTO.HomeDepotQtyBanc = 0;
          getInventoryFeedsItemDTO.TargetQtyBanc = 0;
        }
        else if (inventoryConfig.LowInventoryQty >= getInventoryFeedsItemDTO.QtyAvailBanc)
        {
          resultBanc = 5;
        }
        else if (invFeedsRuleSKU != null)
        {
          resultBanc = 3;
        }
        else
        {
          resultBanc = checkWalmartTopSellers(itemNoId, wmtTopSellers);
        }
        //getInventoryFeedsItemDTO.WalmartQtyBanc = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyBanc, 5);
        getInventoryFeedsItemDTO.AppliedFeedingRuleNoBanc = resultBanc;
        getInventoryFeedsItemDTO.AppliedFeedingRuleTypeBanc = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == resultBanc).FirstOrDefault().Description;
        */
        // For MainSL
        if (inventoryConfig.ZeroOutBufferMainSl >= getInventoryFeedsItemDTO.QtyAvailMainsl)
        {
          resultMainsl = 6;
          getInventoryFeedsItemDTO.QtyAvailMainsl = 0;
          getInventoryFeedsItemDTO.AmazonQtyMainsl = 0;
          getInventoryFeedsItemDTO.BPMWebQtyMainsl = 0;
          getInventoryFeedsItemDTO.MellowWebQtyMainsl = 0;
          getInventoryFeedsItemDTO.HouzzQtyMainsl = 0;
          getInventoryFeedsItemDTO.OverstockQtyMainsl = 0;
          getInventoryFeedsItemDTO.WalmartQtyMainsl = 0;
          getInventoryFeedsItemDTO.WayfairQtyMainsl = 0;
          getInventoryFeedsItemDTO.eBayQtyMainsl = 0;
          getInventoryFeedsItemDTO.HomeDepotQtyMainsl = 0;
          getInventoryFeedsItemDTO.TargetQtyMainsl = 0;
        }
        else if (inventoryConfig.LowInventoryQty >= getInventoryFeedsItemDTO.QtyAvailMainsl)
        {
          resultMainsl = 5;
        }
        else if (invFeedsRuleSKU != null && customRejected == false)
        {
          resultMainsl = 3;
        }
        else
        {
          //resultMainsl = checkWalmartTopSellers(invFeedsItem.ItemNoId.Value, wmtTopSellers);
          resultMainsl = checkWalmartTopSellers(itemNoId, wmtTopSellers);
        }
        //getInventoryFeedsItemDTO.WalmartQtyMainsl = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyMainsl, 5);
        getInventoryFeedsItemDTO.AppliedFeedingRuleNoMainsl = resultMainsl;
        getInventoryFeedsItemDTO.AppliedFeedingRuleTypeMainsl = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == resultMainsl).FirstOrDefault().Description;

        // For Swcaft
        /*
        if (3 >= getInventoryFeedsItemDTO.QtyAvailSWCAFT)
        {
          resultSWCAFT = 6;
          getInventoryFeedsItemDTO.QtyAvailSWCAFT = 0;
          getInventoryFeedsItemDTO.AmazonQtySWCAFT = 0;
          getInventoryFeedsItemDTO.BPMWebQtySWCAFT = 0;
          getInventoryFeedsItemDTO.MellowWebQtySWCAFT = 0;
          getInventoryFeedsItemDTO.HouzzQtySWCAFT = 0;
          getInventoryFeedsItemDTO.OverstockQtySWCAFT = 0;
          getInventoryFeedsItemDTO.WalmartQtySWCAFT = 0;
          getInventoryFeedsItemDTO.WayfairQtySWCAFT = 0;
          getInventoryFeedsItemDTO.eBayQtySWCAFT = 0;
          getInventoryFeedsItemDTO.HomeDepotQtySWCAFT = 0;
          getInventoryFeedsItemDTO.TargetQtySWCAFT = 0;
        }
        else if (inventoryConfig.LowInventoryQty >= getInventoryFeedsItemDTO.QtyAvailSWCAFT)
        {
          resultSWCAFT = 5;
        }
        else if (invFeedsRuleSKU != null)
        {
          resultSWCAFT = 3;
        }
        else
        {
          resultSWCAFT = checkWalmartTopSellers(itemNoId, wmtTopSellers);
        }
        //getInventoryFeedsItemDTO.WalmartQtySWCAFT = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtySWCAFT, 5);
        getInventoryFeedsItemDTO.AppliedFeedingRuleNoSWCAFT = resultSWCAFT;
        getInventoryFeedsItemDTO.AppliedFeedingRuleTypeSWCAFT = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == resultSWCAFT).FirstOrDefault().Description;
        */
        /*
        // For BASC
        if (3 >= getInventoryFeedsItemDTO.QtyAvailBasc)
        {
          resultBasc = 6;
          getInventoryFeedsItemDTO.QtyAvailBasc = 0;
          getInventoryFeedsItemDTO.AmazonQtyBasc = 0;
          getInventoryFeedsItemDTO.BPMWebQtyBasc = 0;
          getInventoryFeedsItemDTO.MellowWebQtyBasc = 0;
          getInventoryFeedsItemDTO.HouzzQtyBasc = 0;
          getInventoryFeedsItemDTO.OverstockQtyBasc = 0;
          getInventoryFeedsItemDTO.WalmartQtyBasc = 0;
          getInventoryFeedsItemDTO.WayfairQtyBasc = 0;
          getInventoryFeedsItemDTO.eBayQtyBasc = 0;
          getInventoryFeedsItemDTO.HomeDepotQtyBasc = 0;
          getInventoryFeedsItemDTO.TargetQtyBasc = 0;
        }
        else if (inventoryConfig.LowInventoryQty >= getInventoryFeedsItemDTO.QtyAvailBasc)
        {
          resultBasc = 5;
        }
        else if (invFeedsRuleSKU != null)
        {
          resultBasc = 3;
        }
        else
        {
          resultBasc = checkWalmartTopSellers(itemNoId, wmtTopSellers);
        }
        //getInventoryFeedsItemDTO.WalmartQtyBasc = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyBasc, 5);
        getInventoryFeedsItemDTO.AppliedFeedingRuleNoBasc = resultBasc;
        getInventoryFeedsItemDTO.AppliedFeedingRuleTypeBasc = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == resultBasc).FirstOrDefault().Description;
        */

        // For PRISM-CAST
        /*
        if (3 >= getInventoryFeedsItemDTO.QtyAvailPrismCast)
        {
          resultPrismCast = 6;
          getInventoryFeedsItemDTO.QtyAvailPrismCast = 0;
          getInventoryFeedsItemDTO.AmazonQtyPrismCast = 0;
          getInventoryFeedsItemDTO.BPMWebQtyPrismCast = 0;
          getInventoryFeedsItemDTO.MellowWebQtyPrismCast = 0;
          //getInventoryFeedsItemDTO.HouzzQtyPrismCast = 0;
          getInventoryFeedsItemDTO.OverstockQtyPrismCast = 0;
          getInventoryFeedsItemDTO.WalmartQtyPrismCast = 0;
          getInventoryFeedsItemDTO.WayfairQtyPrismCast = 0;
          getInventoryFeedsItemDTO.eBayQtyPrismCast = 0;
          getInventoryFeedsItemDTO.HomeDepotQtyPrismCast = 0;
          getInventoryFeedsItemDTO.TargetQtyPrismCast = 0;
        }
        else if (inventoryConfig.LowInventoryQty >= getInventoryFeedsItemDTO.QtyAvailPrismCast)
        {
          resultPrismCast = 5;
        }
        else if (invFeedsRuleSKU != null)
        {
          resultPrismCast = 3;
        }
        else
        {
          resultPrismCast = checkWalmartTopSellers(itemNoId, wmtTopSellers);
        }
        //getInventoryFeedsItemDTO.WalmartQtyPrismCast = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyPrismCast, 5);
        getInventoryFeedsItemDTO.AppliedFeedingRuleNoPrismCast = resultPrismCast;
        getInventoryFeedsItemDTO.AppliedFeedingRuleTypePrismCast = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == resultPrismCast).FirstOrDefault().Description;


        // For PRISM-CALT
        if (3 >= getInventoryFeedsItemDTO.QtyAvailPrismCalt)
        {
          resultPrismCast = 6;
          getInventoryFeedsItemDTO.QtyAvailPrismCalt = 0;
          getInventoryFeedsItemDTO.AmazonQtyPrismCalt = 0;
          getInventoryFeedsItemDTO.BPMWebQtyPrismCalt = 0;
          getInventoryFeedsItemDTO.MellowWebQtyPrismCalt = 0;
          // getInventoryFeedsItemDTO.HouzzQtyPrismCast = 0;
          getInventoryFeedsItemDTO.OverstockQtyPrismCalt = 0;
          getInventoryFeedsItemDTO.WalmartQtyPrismCalt = 0;
          getInventoryFeedsItemDTO.WayfairQtyPrismCalt = 0;
          getInventoryFeedsItemDTO.eBayQtyPrismCalt = 0;
          getInventoryFeedsItemDTO.HomeDepotQtyPrismCalt = 0;
          getInventoryFeedsItemDTO.TargetQtyPrismCalt = 0;
        }
        else if (inventoryConfig.LowInventoryQty >= getInventoryFeedsItemDTO.QtyAvailPrismCalt)
        {
          resultPrismCalt = 5;
        }
        else if (invFeedsRuleSKU != null)
        {
          resultPrismCalt = 3;
        }
        else
        {
          resultPrismCalt = checkWalmartTopSellers(itemNoId, wmtTopSellers);
        }
        //getInventoryFeedsItemDTO.WalmartQtyPrismCast = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyPrismCast, 5);
        getInventoryFeedsItemDTO.AppliedFeedingRuleNoPrismCalt = resultPrismCalt;
        getInventoryFeedsItemDTO.AppliedFeedingRuleTypePrismCalt = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == resultPrismCalt).FirstOrDefault().Description;
        */

        // For Zinus-Tracy
        if (3 >= getInventoryFeedsItemDTO.QtyAvailZinusTracy)
        {
          resultZinusTracy = 6;
          getInventoryFeedsItemDTO.QtyAvailZinusTracy = 0;
          getInventoryFeedsItemDTO.AmazonQtyZinusTracy = 0;
          getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = 0;
          getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = 0;
          //getInventoryFeedsItemDTO.HouzzQtyZinusTracy = 0;
          getInventoryFeedsItemDTO.OverstockQtyZinusTracy = 0;
          getInventoryFeedsItemDTO.WalmartQtyZinusTracy = 0;
          getInventoryFeedsItemDTO.WayfairQtyZinusTracy = 0;
          getInventoryFeedsItemDTO.eBayQtyZinusTracy = 0;
          getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = 0;
          getInventoryFeedsItemDTO.TargetQtyZinusTracy = 0;
        }
        else if (inventoryConfig.LowInventoryQty >= getInventoryFeedsItemDTO.QtyAvailZinusTracy)
        {
          resultZinusTracy = 5;
        }
        else if (invFeedsRuleSKU != null)
        {
          resultZinusTracy = 3;
        }
        else
        {
          resultZinusTracy = checkWalmartTopSellers(itemNoId, wmtTopSellers);
        }
        //getInventoryFeedsItemDTO.WalmartQtyZinusTracy = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyZinusTracy, 5);
        getInventoryFeedsItemDTO.AppliedFeedingRuleNoZinusTracy = resultZinusTracy;
        getInventoryFeedsItemDTO.AppliedFeedingRuleTypeZinusTracy = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == resultZinusTracy).FirstOrDefault().Description;


        // For Zinus-CHS
        if (3 >= getInventoryFeedsItemDTO.QtyAvailZinusChs)
        {
          resultZinusChs = 6;
          getInventoryFeedsItemDTO.QtyAvailZinusChs = 0;
          getInventoryFeedsItemDTO.AmazonQtyZinusChs = 0;
          getInventoryFeedsItemDTO.BPMWebQtyZinusChs = 0;
          getInventoryFeedsItemDTO.MellowWebQtyZinusChs = 0;
          //getInventoryFeedsItemDTO.HouzzQtyZinusChs = 0;
          getInventoryFeedsItemDTO.OverstockQtyZinusChs = 0;
          getInventoryFeedsItemDTO.WalmartQtyZinusChs = 0;
          getInventoryFeedsItemDTO.WayfairQtyZinusChs = 0;
          getInventoryFeedsItemDTO.eBayQtyZinusChs = 0;
          getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = 0;
          getInventoryFeedsItemDTO.TargetQtyZinusChs = 0;
        }
        else if (inventoryConfig.LowInventoryQty >= getInventoryFeedsItemDTO.QtyAvailZinusChs)
        {
          resultZinusChs = 5;
        }
        else if (invFeedsRuleSKU != null)
        {
          resultZinusChs = 3;
        }
        else
        {
          resultZinusChs = checkWalmartTopSellers(itemNoId, wmtTopSellers);
        }
        //getInventoryFeedsItemDTO.WalmartQtyZinusChs = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyZinusChs, 5);
        getInventoryFeedsItemDTO.AppliedFeedingRuleNoZinusChs = resultZinusChs;
        getInventoryFeedsItemDTO.AppliedFeedingRuleTypeZinusChs = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == resultZinusChs).FirstOrDefault().Description;

        // End of Warehouses

        // Added by Brian Yi on 02/15/2023 for "New Status" rule
        if (getInventoryFeedsItemDTO.ItemStatusId == 1 && inventoryConfig.IsActivatedNewStatusRule == true)
        {
          getInventoryFeedsItemDTO.AppliedFeedingRuleNoMainsl = 1;
          //getInventoryFeedsItemDTO.AppliedFeedingRuleNoSWCAFT = 1;
          getInventoryFeedsItemDTO.AppliedFeedingRuleNoBanc = 1;
          getInventoryFeedsItemDTO.AppliedFeedingRuleNoBanc = 1;
          // getInventoryFeedsItemDTO.AppliedFeedingRuleNoPrismCast = 1;
          //getInventoryFeedsItemDTO.AppliedFeedingRuleNoPrismCalt = 1;
          getInventoryFeedsItemDTO.AppliedFeedingRuleNoZinusTracy = 1;
          getInventoryFeedsItemDTO.AppliedFeedingRuleNoZinusChs = 1;
          // getInventoryFeedsItemDTO.AppliedFeedingRuleTypeBasc = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == 10).FirstOrDefault().Description;
          // getInventoryFeedsItemDTO.AppliedFeedingRuleTypeBanc = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == 10).FirstOrDefault().Description;
          // getInventoryFeedsItemDTO.AppliedFeedingRuleTypeMainsl = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == 10).FirstOrDefault().Description;
          // getInventoryFeedsItemDTO.AppliedFeedingRuleTypeSWCAFT = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == 10).FirstOrDefault().Description;

        }//&& resultSWCAFT == 6  && resultPrismCast == 6 && resultPrismCalt == 6; resultBanc == 6 && resultBasc == 6 && 
        if (resultMainsl == 6 && resultZinusTracy == 6 && resultZinusChs == 6)
        {
          int result2;
          result = (result2 = 6);
          return getInventoryFeedsItemDTO;
        }


        /*
        foreach (InvFeedsItemLocQty tmpLocQty in invFeedsItem.InvFeedsItemLocQties)
        {
          if (tmpLocQty.ItemLocId == bancId)
          {
            if (inventoryConfig.ZeroOutBufferBanc >= tmpLocQty.QtyAvail)
            {
              resultBanc = 6;
              getInventoryFeedsItemDTO.QtyAvailBanc = 0;
              getInventoryFeedsItemDTO.AmazonQtyBanc = 0;
              getInventoryFeedsItemDTO.BPMWebQtyBanc = 0;
              getInventoryFeedsItemDTO.MellowWebQtyBanc = 0;
              getInventoryFeedsItemDTO.HouzzQtyBanc = 0;
              getInventoryFeedsItemDTO.OverstockQtyBanc = 0;
              getInventoryFeedsItemDTO.WalmartQtyBanc = 0;
              getInventoryFeedsItemDTO.WayfairQtyBanc = 0;
              getInventoryFeedsItemDTO.eBayQtyBanc = 0;
              getInventoryFeedsItemDTO.HomeDepotQtyBanc = 0;
              getInventoryFeedsItemDTO.TargetQtyBanc = 0;
            }
            else if (inventoryConfig.LowInventoryQty >= tmpLocQty.QtyAvail)
            {
              resultBanc = 5;
            }
            else if (invFeedsRuleSKU != null)
            {
              resultBanc = 3;
            }
            else
            {
              resultBanc = checkWalmartTopSellers(invFeedsItem.ItemNoId.Value, wmtTopSellers);
            }
            //getInventoryFeedsItemDTO.WalmartQtyBanc = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyBanc, 5);
            getInventoryFeedsItemDTO.AppliedFeedingRuleNoBanc = resultBanc;
            getInventoryFeedsItemDTO.AppliedFeedingRuleTypeBanc = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == resultBanc).FirstOrDefault().Description;
          }
          else if (tmpLocQty.ItemLocId == mainslId)
          {
            if (inventoryConfig.ZeroOutBufferMainSl >= tmpLocQty.QtyAvail)
            {
              resultMainsl = 6;
              getInventoryFeedsItemDTO.QtyAvailMainsl = 0;
              getInventoryFeedsItemDTO.AmazonQtyMainsl = 0;
              getInventoryFeedsItemDTO.BPMWebQtyMainsl = 0;
              getInventoryFeedsItemDTO.MellowWebQtyMainsl = 0;
              getInventoryFeedsItemDTO.HouzzQtyMainsl = 0;
              getInventoryFeedsItemDTO.OverstockQtyMainsl = 0;
              getInventoryFeedsItemDTO.WalmartQtyMainsl = 0;
              getInventoryFeedsItemDTO.WayfairQtyMainsl = 0;
              getInventoryFeedsItemDTO.eBayQtyMainsl = 0;
              getInventoryFeedsItemDTO.HomeDepotQtyMainsl = 0;
              getInventoryFeedsItemDTO.TargetQtyMainsl = 0;
            }
            else if (inventoryConfig.LowInventoryQty >= tmpLocQty.QtyAvail)
            {
              resultMainsl = 5;
            }
            else if (invFeedsRuleSKU != null)
            {
              resultMainsl = 3;
            }
            else
            {
              resultMainsl = checkWalmartTopSellers(invFeedsItem.ItemNoId.Value, wmtTopSellers);
            }
            //getInventoryFeedsItemDTO.WalmartQtyMainsl = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyMainsl, 5);
            getInventoryFeedsItemDTO.AppliedFeedingRuleNoMainsl = resultMainsl;
            getInventoryFeedsItemDTO.AppliedFeedingRuleTypeMainsl = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == resultMainsl).FirstOrDefault().Description;
          }
          else if (tmpLocQty.ItemLocId == swcaftId)
          {
            if (3 >= tmpLocQty.QtyAvail)
            {
              resultSWCAFT = 6;
              getInventoryFeedsItemDTO.QtyAvailSWCAFT = 0;
              getInventoryFeedsItemDTO.AmazonQtySWCAFT = 0;
              getInventoryFeedsItemDTO.BPMWebQtySWCAFT = 0;
              getInventoryFeedsItemDTO.MellowWebQtySWCAFT = 0;
              getInventoryFeedsItemDTO.HouzzQtySWCAFT = 0;
              getInventoryFeedsItemDTO.OverstockQtySWCAFT = 0;
              getInventoryFeedsItemDTO.WalmartQtySWCAFT = 0;
              getInventoryFeedsItemDTO.WayfairQtySWCAFT = 0;
              getInventoryFeedsItemDTO.eBayQtySWCAFT = 0;
              getInventoryFeedsItemDTO.HomeDepotQtySWCAFT = 0;
              getInventoryFeedsItemDTO.TargetQtySWCAFT = 0;
            }
            else if (inventoryConfig.LowInventoryQty >= tmpLocQty.QtyAvail)
            {
              resultSWCAFT = 5;
            }
            else if (invFeedsRuleSKU != null)
            {
              resultSWCAFT = 3;
            }
            else
            {
              resultSWCAFT = checkWalmartTopSellers(invFeedsItem.ItemNoId.Value, wmtTopSellers);
            }
            //getInventoryFeedsItemDTO.WalmartQtySWCAFT = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtySWCAFT, 5);
            getInventoryFeedsItemDTO.AppliedFeedingRuleNoSWCAFT = resultSWCAFT;
            getInventoryFeedsItemDTO.AppliedFeedingRuleTypeSWCAFT = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == resultSWCAFT).FirstOrDefault().Description;
          }
          else if (tmpLocQty.ItemLocId == bascId)
          {
            if (3 >= tmpLocQty.QtyAvail)
            {
              resultBasc = 6;
              getInventoryFeedsItemDTO.QtyAvailBasc = 0;
              getInventoryFeedsItemDTO.AmazonQtyBasc = 0;
              getInventoryFeedsItemDTO.BPMWebQtyBasc = 0;
              getInventoryFeedsItemDTO.MellowWebQtyBasc = 0;
              getInventoryFeedsItemDTO.HouzzQtyBasc = 0;
              getInventoryFeedsItemDTO.OverstockQtyBasc = 0;
              getInventoryFeedsItemDTO.WalmartQtyBasc = 0;
              getInventoryFeedsItemDTO.WayfairQtyBasc = 0;
              getInventoryFeedsItemDTO.eBayQtyBasc = 0;
              getInventoryFeedsItemDTO.HomeDepotQtyBasc = 0;
              getInventoryFeedsItemDTO.TargetQtyBasc = 0;
            }
            else if (inventoryConfig.LowInventoryQty >= tmpLocQty.QtyAvail)
            {
              resultBasc = 5;
            }
            else if (invFeedsRuleSKU != null)
            {
              resultBasc = 3;
            }
            else
            {
              resultBasc = checkWalmartTopSellers(invFeedsItem.ItemNoId.Value, wmtTopSellers);
            }
            //getInventoryFeedsItemDTO.WalmartQtyBasc = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyBasc, 5);
            getInventoryFeedsItemDTO.AppliedFeedingRuleNoBasc = resultBasc;
            getInventoryFeedsItemDTO.AppliedFeedingRuleTypeBasc = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == resultBasc).FirstOrDefault().Description;
         


          }
          // Added by Brian Yi on 02/15/2023 for "New Status" rule
          if(getInventoryFeedsItemDTO.ItemStatusId == 1 && inventoryConfig.IsActivatedNewStatusRule == true)
          {
            getInventoryFeedsItemDTO.AppliedFeedingRuleNoMainsl = 1;
            getInventoryFeedsItemDTO.AppliedFeedingRuleNoSWCAFT = 1;
            getInventoryFeedsItemDTO.AppliedFeedingRuleNoBanc = 1;
            getInventoryFeedsItemDTO.AppliedFeedingRuleNoBanc = 1; 
           // getInventoryFeedsItemDTO.AppliedFeedingRuleTypeBasc = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == 10).FirstOrDefault().Description;
           // getInventoryFeedsItemDTO.AppliedFeedingRuleTypeBanc = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == 10).FirstOrDefault().Description;
           // getInventoryFeedsItemDTO.AppliedFeedingRuleTypeMainsl = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == 10).FirstOrDefault().Description;
           // getInventoryFeedsItemDTO.AppliedFeedingRuleTypeSWCAFT = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == 10).FirstOrDefault().Description;

          }
          if (resultBanc == 6 && resultMainsl == 6 && resultSWCAFT == 6 && resultBasc == 6)
          {
            int result2;
            result = (result2 = 6);
            return result2;
          }

        } // End of foreach


        */
      }

      return getInventoryFeedsItemDTO;
    }


    public async Task<GetInventoryFeedsItemDTO> InventoryFeedsCustomRulesParetoDataRule(int LocId, int smallMarketsCnt, InvSalesParetoRuleListItemDTO invParetoListItem, InventoryConfig inventoryConfig, List<InvFeedsRule> invFeedsRules, InvFeedsRuleSku invFeedsRuleSku, GetInventoryFeedsItemDTO getInventoryFeedsItemDTO)
    {
      //int bancId = 4;
      int mainslId = 25;
      //int swcaftId = 54;
      //int bascId = 62;
      //int prsmCastId = 51;
      //int prsmCaltId = 67;
      int zinusTracyId = 57;
      int zinusChsId = 108;
      int amazonID = 5;
      int bpmWebID = 9;
      int ebayID = 12;
      int houzzID = 14;
      int mellowWebID = 18;
      int ostID = 21;
      int walmartID = 26;
      int wayfairID = 29;
      int homeDepotID = 40;
      int targetID = 51;
      int OthersID = 10;
      int backOrdered = 0;
      bool isTotalZero = false;
      bool newStatusOn = false; // For 'New Status Rule'
      bool discoStatusOn = false; // For 'Disco Status Rule'
      bool discoFeedDone = false; // For 'Disco Status Rule'; the indicator for whether feeding is done or not

      // For special market ratio
      bool amazonRule = false;
      bool eBayRule = false;
      bool walmartRule = false;
      bool mellowRule = false;
      bool overstockRule = false;
      bool wayfairRule = false;
      bool homeDepotRule = false;
      bool targetRule = false;
      bool bpmRule = false;
      InvFeedsRule tmpMarketRule = new InvFeedsRule();
      List<InvFeedsRuleSkumkt> invFeedsRuleSkumkts = new List<InvFeedsRuleSkumkt>();
      if (invFeedsRuleSku != null)
      {
        invFeedsRuleSkumkts = await _kc.InvFeedsRuleSkumkts.Where((InvFeedsRuleSkumkt i) => i.InvFeedsRuleSkuid == (long?)invFeedsRuleSku.InvFeedsRuleSkuid).ToListAsync();
      }
      new InvFeedsRule();
      new InvFeedsRuleSkumkt();

      // Added by Brian Yi for 'New SKU/Status Rule' on 02/15/2023
      if (getInventoryFeedsItemDTO.ItemStatusId == 1 && inventoryConfig.IsActivatedNewStatusRule == true)
      {
        newStatusOn = true;
      }

      // Added by Brian Yi for 'New SKU/Status Rule' on 02/17/2023
      if (getInventoryFeedsItemDTO.ItemStatusId == 4 && inventoryConfig.IsActivatedDiscoRule == true)
      {
        discoStatusOn = true;
      }

      /*
      if (LocId == bancId)
      {
        int totalQty = getInventoryFeedsItemDTO.QtyAvailBanc;
        int customRatioQty = 0;
        //backOrdered = await calculateStageBackOrderSUM(LocId, invParetoListItem.ItemNoId);
        //getInventoryFeedsItemDTO.totalStagePOQtyBanc = backOrdered;
        backOrdered = getInventoryFeedsItemDTO.totalStagePOQtyBanc;
        if (totalQty - backOrdered <= 0)
        {
          getInventoryFeedsItemDTO.BancFeedable = false;
          getInventoryFeedsItemDTO.QtyAvailBanc = 0;
          isTotalZero = true;
          goto SkipThisFeedBanc;
        }
        else
        { // Added for "New Status" rule
          if (newStatusOn == true)
          {
            //invParetoListItem.CGQty > 0
            totalQty = (int)Math.Floor((double)totalQty * 0.8);
          }
          else
          { totalQty = totalQty - backOrdered; }
          // Added by Brian Yi on 06/12/2024
          getInventoryFeedsItemDTO.QtyAvailBanc = totalQty;

          if ((discoStatusOn == true) && (totalQty < 10))// For "Disco.SKU" rule added by Brian on 02/17/2023
          {
            discoFeedDone = false;
            if ((invParetoListItem.AmazonOBABC.ToUpper() == "A") && getInventoryFeedsItemDTO.AmazonFeedable)
            {
              getInventoryFeedsItemDTO.AmazonQtyBanc = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedBanc;
            }
            if ((invParetoListItem.WalmartABC.ToUpper() == "A") && getInventoryFeedsItemDTO.WalmartFeedable
              && (discoFeedDone == false))
            {
              getInventoryFeedsItemDTO.WalmartQtyBanc = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedBanc;
            }
            if ((invParetoListItem.WayfairOBABC.ToUpper() == "A") && getInventoryFeedsItemDTO.WalmartFeedable
              && (discoFeedDone == false))
            {
              getInventoryFeedsItemDTO.WayfairQtyBanc = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedBanc;
            }
            if (discoFeedDone == false)
            {
              getInventoryFeedsItemDTO.eBayQtyBanc = totalQty;
              goto SkipThisFeedBanc;
            }
          }// End of new rule; For BANC
        }

        //if (getInventoryFeedsItemDTO.ItemNoId == 795)
        //{ Console.WriteLine("Here"); }
        // Amazon
        if (getInventoryFeedsItemDTO.AmazonFeedable)
        {
          if (getInventoryFeedsItemDTO.AmazonBancPercentage > 0)
          {
            amazonRule = true;
            //getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.AmazonQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.AmazonBancPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.AmazonQtyBanc;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == amazonID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                amazonRule = true;
                //getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.AmazonQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.AmazonQtyBanc;
              }
            }
          }
        }
        // eBay
        if (getInventoryFeedsItemDTO.eBayFeedable)
        {
          if (getInventoryFeedsItemDTO.eBayBancPercentage > 0)
          {
            eBayRule = true;
            //getInventoryFeedsItemDTO.eBayQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.eBayQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.eBayBancPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.eBayQtyBanc;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ebayID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                eBayRule = true;
                // getInventoryFeedsItemDTO.eBayQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.eBayQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.eBayQtyBanc;
              }
            }
          }
        }
        // Overstock
        if (getInventoryFeedsItemDTO.OverstockFeedable)
        {
          if (getInventoryFeedsItemDTO.OverstockBancPercentage > 0)
          {
            overstockRule = true;
            //getInventoryFeedsItemDTO.overstockQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.OverstockQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.OverstockBancPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.OverstockQtyBanc;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ostID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                overstockRule = true;
                // getInventoryFeedsItemDTO.OverstockQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.OverstockQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.OverstockQtyBanc;
              }
            }
          }
        }
        // Walmart
        if (getInventoryFeedsItemDTO.WalmartFeedable)
        {
          if (getInventoryFeedsItemDTO.WalmartBancPercentage > 0)
          {
            walmartRule = true;
            //getInventoryFeedsItemDTO.overstockQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.WalmartQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.WalmartBancPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.WalmartQtyBanc;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == walmartID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                walmartRule = true;
                //getInventoryFeedsItemDTO.WalmartQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.WalmartQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.WalmartQtyBanc;
              }
            }
          }
        }
        // Wayfair
        if (getInventoryFeedsItemDTO.WayfairFeedable)
        {
          if (getInventoryFeedsItemDTO.WayfairBancPercentage > 0)
          {
            wayfairRule = true;
            //getInventoryFeedsItemDTO.overstockQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.WayfairQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.WayfairBancPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.WayfairQtyBanc;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == wayfairID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                wayfairRule = true;
                //getInventoryFeedsItemDTO.WayfairQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.WayfairQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.WayfairQtyBanc;
              }
            }
          }
        }
        // BPM
        if (getInventoryFeedsItemDTO.BPMFeedable)
        {
          if (getInventoryFeedsItemDTO.BPMWebBancPercentage > 0)
          {
            bpmRule = true;
            //getInventoryFeedsItemDTO.overstockQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.BPMWebQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.BPMWebBancPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.BPMWebQtyBanc;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == bpmWebID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                bpmRule = true;
                //getInventoryFeedsItemDTO.BPMWebQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.BPMWebQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.BPMWebQtyBanc;
              }
            }
          }
        }
        // Mellow
        if (getInventoryFeedsItemDTO.MellowFeedable)
        {
          if (getInventoryFeedsItemDTO.MellowWebBancPercentage > 0)
          {
            mellowRule = true;
            //getInventoryFeedsItemDTO.overstockQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.MellowWebQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.MellowWebBancPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.MellowWebQtyBanc;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == mellowWebID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                mellowRule = true;
                //getInventoryFeedsItemDTO.MellowWebQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.MellowWebQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.MellowWebQtyBanc;
              }
            }
          }
        }
        // Home Depot
        if (getInventoryFeedsItemDTO.HomeDepotFeedable)
        {
          if (getInventoryFeedsItemDTO.HomeDepotBancPercentage > 0)
          {
            homeDepotRule = true;
            //getInventoryFeedsItemDTO.overstockQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.HomeDepotQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.HomeDepotBancPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.HomeDepotQtyBanc;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == homeDepotID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                homeDepotRule = true;
                //getInventoryFeedsItemDTO.HomeDepotQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.HomeDepotQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.HomeDepotQtyBanc;
              }
            }
          }
        }
        // Target
        if (getInventoryFeedsItemDTO.TargetFeedable)
        {
          if (getInventoryFeedsItemDTO.TargetBancPercentage > 0)
          {
            targetRule = true;
            //getInventoryFeedsItemDTO.overstockQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.TargetQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.TargetBancPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.TargetQtyBanc;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == targetID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                targetRule = true;
                //getInventoryFeedsItemDTO.TargetQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.TargetQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.TargetQtyBanc;
              }
            }
          }
        }
        totalQty = totalQty - customRatioQty;

        if (getInventoryFeedsItemDTO.AmazonFeedable && (amazonRule == false))
        {
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == amazonID);
          //getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.AmazonQtyBanc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBanc)
            {
              getInventoryFeedsItemDTO.AmazonQtyBanc = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.AmazonQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == amazonID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == amazonID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBanc)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.AmazonQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.AmazonQtyBanc = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.AmazonQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.AmazonQtyBanc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));

          }
        }
        if (getInventoryFeedsItemDTO.OverstockFeedable && (overstockRule == false))
        {
          //getInventoryFeedsItemDTO.OverstockQtyBanc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.OverstockQtyBanc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ostID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBanc)
            {
              getInventoryFeedsItemDTO.OverstockQtyBanc = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              getInventoryFeedsItemDTO.OverstockQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ostID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ostID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBanc)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.OverstockQtyBanc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.OverstockQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.OverstockQtyBanc = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.OverstockQtyBanc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.OverstockQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.OverstockQtyBanc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.OverstockQtyBanc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.WalmartFeedable && (walmartRule == false))
        {
          //getInventoryFeedsItemDTO.WalmartQtyBanc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.WalmartQtyBanc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == walmartID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBanc)
            {
              getInventoryFeedsItemDTO.WalmartQtyBanc = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.WalmartQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.WalmartQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == walmartID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == walmartID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBanc)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.WalmartQtyBanc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.WalmartQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.WalmartQtyBanc = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.WalmartQtyBanc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.WalmartQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.WalmartQtyBanc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.WalmartQtyBanc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.WayfairFeedable && (wayfairRule == false))
        {
          //getInventoryFeedsItemDTO.WayfairQtyBanc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.WayfairQtyBanc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == wayfairID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBanc)
            {
              getInventoryFeedsItemDTO.WayfairQtyBanc = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.WayfairQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.WayfairQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == wayfairID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == wayfairID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBanc)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.WayfairQtyBanc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.WayfairQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.WayfairQtyBanc = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.WayfairQtyBanc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.WayfairQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.WayfairQtyBanc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.WayfairQtyBanc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.eBayFeedable && (eBayRule == false))
        {
          //getInventoryFeedsItemDTO.eBayQtyBanc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.eBayQtyBanc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ebayID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBanc)
            {
              getInventoryFeedsItemDTO.eBayQtyBanc = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.eBayQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.eBayQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ebayID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ebayID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBanc)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.eBayQtyBanc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.eBayQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.eBayQtyBanc = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.eBayQtyBanc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.eBayQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.eBayQtyBanc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.eBayQtyBanc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.BPMFeedable && (bpmRule == false))
        {
          //getInventoryFeedsItemDTO.BPMWebQtyBanc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.BPMWebQtyBanc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == bpmWebID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBanc)
            {
              getInventoryFeedsItemDTO.BPMWebQtyBanc = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.BPMWebQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.BPMWebQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == bpmWebID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == bpmWebID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBanc)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.BPMWebQtyBanc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.BPMWebQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.BPMWebQtyBanc = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.BPMWebQtyBanc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.BPMWebQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.BPMWebQtyBanc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.BPMWebQtyBanc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.MellowFeedable && (mellowRule == false))
        {
          //getInventoryFeedsItemDTO.MellowWebQtyBanc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.MellowWebQtyBanc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == mellowWebID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBanc)
            {
              getInventoryFeedsItemDTO.MellowWebQtyBanc = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.MellowWebQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.MellowWebQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == mellowWebID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == mellowWebID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBanc)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.MellowWebQtyBanc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.MellowWebQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.MellowWebQtyBanc = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.MellowWebQtyBanc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.MellowWebQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.MellowWebQtyBanc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.MellowWebQtyBanc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.HouzzFeedable)
        {
          getInventoryFeedsItemDTO.HouzzQtyBanc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == houzzID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBanc)
            {
              getInventoryFeedsItemDTO.HouzzQtyBanc = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              getInventoryFeedsItemDTO.HouzzQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == houzzID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == houzzID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBanc)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  getInventoryFeedsItemDTO.HouzzQtyBanc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.HouzzQtyBanc = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              getInventoryFeedsItemDTO.HouzzQtyBanc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            getInventoryFeedsItemDTO.HouzzQtyBanc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.HomeDepotFeedable && (homeDepotRule == false))
        {
          //getInventoryFeedsItemDTO.HomeDepotQtyBanc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.HomeDepotQtyBanc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == homeDepotID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBanc)
            {
              getInventoryFeedsItemDTO.HomeDepotQtyBanc = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.HomeDepotQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.HomeDepotQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == homeDepotID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == homeDepotID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBanc)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.HomeDepotQtyBanc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.HomeDepotQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.HomeDepotQtyBanc = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.HomeDepotQtyBanc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.HomeDepotQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.HomeDepotQtyBanc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.HomeDepotQtyBanc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.TargetFeedable && (targetRule == false))
        {
          //getInventoryFeedsItemDTO.TargetQtyBanc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.TargetQtyBanc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == targetID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBanc)
            {
              getInventoryFeedsItemDTO.TargetQtyBanc = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.TargetQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.TargetQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == targetID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == targetID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBanc)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.TargetQtyBanc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.TargetQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.TargetQtyBanc = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.TargetQtyBanc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.TargetQtyBanc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.TargetQtyBanc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.TargetQtyBanc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
      // getInventoryFeedsItemDTO.WalmartQtyBanc = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyBanc, 5);
      SkipThisFeedBanc:
        int AmazonQty2 = 0;
        int OverstockQty2 = 0;
        int WalmartQty2 = 0;
        int WayfairQty2 = 0;
        int eBayQty2 = 0;
        int BPMQty2 = 0;
        int MellowQty2 = 0;
        int HouzzQty2 = 0;
        int HomeDepotQty2 = 0;
        int TargetQty2 = 0;
        totalQty = getInventoryFeedsItemDTO.QtyAvailBanc;
        if (isTotalZero == false)
        {
          AmazonQty2 = getInventoryFeedsItemDTO.AmazonQtyBanc;
          OverstockQty2 = getInventoryFeedsItemDTO.OverstockQtyBanc;
          WalmartQty2 = getInventoryFeedsItemDTO.WalmartQtyBanc;
          WayfairQty2 = getInventoryFeedsItemDTO.WayfairQtyBanc;
          eBayQty2 = getInventoryFeedsItemDTO.eBayQtyBanc;
          BPMQty2 = getInventoryFeedsItemDTO.BPMWebQtyBanc;
          MellowQty2 = getInventoryFeedsItemDTO.MellowWebQtyBanc;
          HouzzQty2 = getInventoryFeedsItemDTO.HouzzQtyBanc;
          HomeDepotQty2 = getInventoryFeedsItemDTO.HomeDepotQtyBanc;
          TargetQty2 = getInventoryFeedsItemDTO.TargetQtyBanc;
          getInventoryFeedsItemDTO.leftOverQtyBanc = totalQty - (AmazonQty2 + OverstockQty2 + WalmartQty2 + WayfairQty2 + eBayQty2 + BPMQty2 + MellowQty2 + HouzzQty2 + HomeDepotQty2 + TargetQty2);
          //getInventoryFeedsItemDTO.WalmartQtyBanc = 0; // Changed on 8/4
        }

        // Floor -> Round
        getInventoryFeedsItemDTO.AmazonBancPercentage = (int)Math.Round((double)AmazonQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.OverstockBancPercentage = (int)Math.Round((double)OverstockQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.WalmartBancPercentage = (int)Math.Round((double)WalmartQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.WayfairBancPercentage = (int)Math.Round((double)WayfairQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.BPMWebBancPercentage = (int)Math.Round((double)BPMQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.MellowWebBancPercentage = (int)Math.Round((double)MellowQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.eBayBancPercentage = (int)Math.Round((double)eBayQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.HouzzBancPercentage = (int)Math.Round((double)HouzzQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.HomeDepotBancPercentage = (int)Math.Round((double)HomeDepotQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.TargetBancPercentage = (int)Math.Round((double)TargetQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
      }
      else */
      if (LocId == mainslId)
      {
        int totalQty = getInventoryFeedsItemDTO.QtyAvailMainsl;
        int customRatioQty = 0;
        isTotalZero = false;
        amazonRule = false;
        eBayRule = false;
        walmartRule = false;
        mellowRule = false;
        overstockRule = false;
        wayfairRule = false;
        homeDepotRule = false;
        targetRule = false;
        bpmRule = false;
        //backOrdered = await calculateStageBackOrderSUM(LocId, invParetoListItem.ItemNoId);
        //getInventoryFeedsItemDTO.totalStagePOQtyMainsl = backOrdered;
        backOrdered = getInventoryFeedsItemDTO.totalStagePOQtyMainsl;
        if (totalQty - (backOrdered + 15) <= 0)
        {
          getInventoryFeedsItemDTO.MainslFeedable = false;
          getInventoryFeedsItemDTO.QtyAvailMainsl = 0;
          isTotalZero = true;
          goto SkipThisFeedMainsl;
        }
        else
        {
          if (newStatusOn == true)
          { totalQty = (int)Math.Floor((double)totalQty * 0.8); }
          else
          {
            totalQty = totalQty - backOrdered;
            if (totalQty <= 60)
            { totalQty = (int)Math.Floor((double)totalQty * 0.8); };
          }
          // Added by Brian Yi on 06/12/2024
          getInventoryFeedsItemDTO.QtyAvailMainsl = totalQty;


          if ((discoStatusOn == true) && (totalQty < 10))// For "Disco.SKU" rule added by Brian on 02/17/2023
          {
            discoFeedDone = false;
            if ((invParetoListItem.AmazonOBABC.ToUpper() == "A") && getInventoryFeedsItemDTO.AmazonFeedable)
            {
              getInventoryFeedsItemDTO.AmazonQtyMainsl = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedMainsl;
            }
            if ((invParetoListItem.WalmartABC.ToUpper() == "A") && getInventoryFeedsItemDTO.WalmartFeedable
              && (discoFeedDone == false))
            {
              getInventoryFeedsItemDTO.WalmartQtyMainsl = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedMainsl;
            }
            if ((invParetoListItem.WayfairOBABC.ToUpper() == "A") && getInventoryFeedsItemDTO.WalmartFeedable
              && (discoFeedDone == false))
            {
              getInventoryFeedsItemDTO.WayfairQtyMainsl = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedMainsl;
            }
            if (discoFeedDone == false)
            {
              getInventoryFeedsItemDTO.eBayQtyMainsl = totalQty;
              goto SkipThisFeedMainsl;
            }
          }// End of new rule; For MainSL
        }

        // For market specific ratio
        // Amazon
        if (getInventoryFeedsItemDTO.AmazonFeedable)
        {
          if (getInventoryFeedsItemDTO.AmazonMainslPercentage > 0)
          {
            amazonRule = true;
            //getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.AmazonQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.AmazonMainslPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.AmazonQtyMainsl;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == amazonID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                amazonRule = true;
                // getInventoryFeedsItemDTO.AmazonQtyMainsl = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.AmazonQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.AmazonQtyMainsl;
              }
            }
          }
        }
        // eBay
        if (getInventoryFeedsItemDTO.eBayFeedable)
        {
          if (getInventoryFeedsItemDTO.eBayMainslPercentage > 0)
          {
            eBayRule = true;
            //getInventoryFeedsItemDTO.eBayQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.eBayQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.eBayMainslPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.eBayQtyMainsl;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ebayID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                eBayRule = true;
                //getInventoryFeedsItemDTO.eBayQtyMainsl = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.eBayQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.eBayQtyMainsl;
              }
            }
          }
        }
        // Overstock
        if (getInventoryFeedsItemDTO.OverstockFeedable)
        {
          if (getInventoryFeedsItemDTO.OverstockMainslPercentage > 0)
          {
            overstockRule = true;
            //getInventoryFeedsItemDTO.overstockQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.OverstockQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.OverstockMainslPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.OverstockQtyMainsl;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ostID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                overstockRule = true;
                //getInventoryFeedsItemDTO.OverstockQtyMainsl = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.OverstockQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.OverstockQtyMainsl;
              }
            }
          }
        }
        // Walmart
        if (getInventoryFeedsItemDTO.WalmartFeedable)
        {
          if (getInventoryFeedsItemDTO.WalmartMainslPercentage > 0)
          {
            walmartRule = true;
            //getInventoryFeedsItemDTO.overstockQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.WalmartQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.WalmartMainslPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.WalmartQtyMainsl;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == walmartID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                walmartRule = true;
                // getInventoryFeedsItemDTO.WalmartQtyMainsl = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.WalmartQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.WalmartQtyMainsl;
              }
            }
          }
        }
        // Wayfair
        if (getInventoryFeedsItemDTO.WayfairFeedable)
        {
          if (getInventoryFeedsItemDTO.WayfairMainslPercentage > 0)
          {
            wayfairRule = true;
            //getInventoryFeedsItemDTO.overstockQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.WayfairQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.WayfairMainslPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.WayfairQtyMainsl;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == wayfairID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                wayfairRule = true;
                // getInventoryFeedsItemDTO.WayfairQtyMainsl = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.WayfairQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.WayfairQtyMainsl;
              }
            }
          }
        }
        // BPM
        if (getInventoryFeedsItemDTO.BPMFeedable)
        {
          if (getInventoryFeedsItemDTO.BPMWebMainslPercentage > 0)
          {
            bpmRule = true;
            //getInventoryFeedsItemDTO.overstockQtyMainsl = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.BPMWebQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.BPMWebMainslPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.BPMWebQtyMainsl;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == bpmWebID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                bpmRule = true;
                //getInventoryFeedsItemDTO.BPMWebQtyMainsl = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.BPMWebQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.BPMWebQtyMainsl;
              }
            }
          }
        }
        // Mellow
        if (getInventoryFeedsItemDTO.MellowFeedable)
        {
          if (getInventoryFeedsItemDTO.MellowWebMainslPercentage > 0)
          {
            mellowRule = true;
            //getInventoryFeedsItemDTO.overstockQtyMainsl = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.MellowWebQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.MellowWebMainslPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.MellowWebQtyMainsl;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == mellowWebID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                mellowRule = true;
                // getInventoryFeedsItemDTO.MellowWebQtyMainsl = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.MellowWebQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.MellowWebQtyMainsl;
              }
            }
          }
        }
        // Home Depot
        if (getInventoryFeedsItemDTO.HomeDepotFeedable)
        {
          if (getInventoryFeedsItemDTO.HomeDepotMainslPercentage > 0)
          {
            homeDepotRule = true;
            //getInventoryFeedsItemDTO.overstockQtyMainsl = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.HomeDepotQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.HomeDepotMainslPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.HomeDepotQtyMainsl;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == homeDepotID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                homeDepotRule = true;
                //getInventoryFeedsItemDTO.HomeDepotQtyMainsl = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.HomeDepotQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.HomeDepotQtyMainsl;
              }
            }
          }
        }
        // Target
        if (getInventoryFeedsItemDTO.TargetFeedable)
        {
          if (getInventoryFeedsItemDTO.TargetMainslPercentage > 0)
          {
            targetRule = true;
            //getInventoryFeedsItemDTO.overstockQtyMainsl = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.TargetQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.TargetMainslPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.TargetQtyMainsl;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == targetID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                targetRule = true;
                //getInventoryFeedsItemDTO.TargetQtyMainsl = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.TargetQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.TargetQtyMainsl;
              }
            }
          }
        }
        totalQty = totalQty - customRatioQty;

        // SKU Specific
        if (getInventoryFeedsItemDTO.AmazonFeedable && (amazonRule == false))
        {
          //getInventoryFeedsItemDTO.AmazonQtyMainsl = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.AmazonQtyMainsl = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == amazonID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailMainsl)
            {
              getInventoryFeedsItemDTO.AmazonQtyMainsl = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.AmazonQtyMainsl = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.AmazonQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == amazonID) != null)
          {
           //if (getInventoryFeedsItemDTO.ItemNoId == 551)
            //{ Console.WriteLine("Hell!");}
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == amazonID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.AmazonQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.AmazonQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.AmazonQtyMainsl = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.AmazonQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.AmazonQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              } // End if of SKU specific rule
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.AmazonQtyMainsl = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.AmazonQtyMainsl = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.OverstockFeedable && (overstockRule == false))
        {
          //getInventoryFeedsItemDTO.OverstockQtyMainsl = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.OverstockQtyMainsl = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ostID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailMainsl)
            {
              getInventoryFeedsItemDTO.OverstockQtyMainsl = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.OverstockQtyMainsl = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.OverstockQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ostID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ostID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.OverstockQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.OverstockQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.OverstockQtyMainsl = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.OverstockQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.OverstockQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.OverstockQtyMainsl = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.OverstockQtyMainsl = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.WalmartFeedable && (walmartRule == false))
        {
          //getInventoryFeedsItemDTO.WalmartQtyMainsl = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.WalmartQtyMainsl = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == walmartID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailMainsl)
            {
              getInventoryFeedsItemDTO.WalmartQtyMainsl = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.WalmartQtyMainsl = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.WalmartQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == walmartID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == walmartID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.WalmartQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.WalmartQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.WalmartQtyMainsl = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.WalmartQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.WalmartQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.WalmartQtyMainsl = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.WalmartQtyMainsl = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.WayfairFeedable && (wayfairRule == false))
        {
          //getInventoryFeedsItemDTO.WayfairQtyMainsl = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.WayfairQtyMainsl = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == wayfairID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailMainsl)
            {
              getInventoryFeedsItemDTO.WayfairQtyMainsl = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.WayfairQtyMainsl = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.WayfairQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == wayfairID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == wayfairID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.WayfairQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.WayfairQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.WayfairQtyMainsl = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.WayfairQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.WayfairQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.WayfairQtyMainsl = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.WayfairQtyMainsl = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.eBayFeedable && (eBayRule == false))
        {
          //getInventoryFeedsItemDTO.eBayQtyMainsl = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.eBayQtyMainsl = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ebayID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailMainsl)
            {
              getInventoryFeedsItemDTO.eBayQtyMainsl = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.eBayQtyMainsl = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.eBayQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ebayID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ebayID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.eBayQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.eBayQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.eBayQtyMainsl = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.eBayQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.eBayQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.eBayQtyMainsl = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.eBayQtyMainsl = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.BPMFeedable && (bpmRule == false))
        {
          //getInventoryFeedsItemDTO.BPMWebQtyMainsl = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.BPMWebQtyMainsl = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == bpmWebID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailMainsl)
            {
              getInventoryFeedsItemDTO.BPMWebQtyMainsl = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.BPMWebQtyMainsl = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.BPMWebQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == bpmWebID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == bpmWebID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.BPMWebQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.BPMWebQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.BPMWebQtyMainsl = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.BPMWebQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.BPMWebQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.BPMWebQtyMainsl = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.BPMWebQtyMainsl = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.MellowFeedable && (mellowRule == false))
        {
          //getInventoryFeedsItemDTO.MellowWebQtyMainsl = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.MellowWebQtyMainsl = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == mellowWebID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailMainsl)
            {
              getInventoryFeedsItemDTO.MellowWebQtyMainsl = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.MellowWebQtyMainsl = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.MellowWebQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == mellowWebID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == mellowWebID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.MellowWebQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.MellowWebQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.MellowWebQtyMainsl = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.MellowWebQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.MellowWebQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.MellowWebQtyMainsl = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.MellowWebQtyMainsl = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.HouzzFeedable)
        {
          getInventoryFeedsItemDTO.HouzzQtyMainsl = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == houzzID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailMainsl)
            {
              getInventoryFeedsItemDTO.HouzzQtyMainsl = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              getInventoryFeedsItemDTO.HouzzQtyMainsl = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == houzzID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == houzzID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    getInventoryFeedsItemDTO.HouzzQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.HouzzQtyMainsl = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                getInventoryFeedsItemDTO.HouzzQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            getInventoryFeedsItemDTO.HouzzQtyMainsl = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.HomeDepotFeedable && (homeDepotRule == false))
        {
          //getInventoryFeedsItemDTO.HomeDepotQtyMainsl = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.HomeDepotQtyMainsl = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == homeDepotID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailMainsl)
            {
              getInventoryFeedsItemDTO.HomeDepotQtyMainsl = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.HomeDepotQtyMainsl = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.HomeDepotQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == homeDepotID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == homeDepotID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.HomeDepotQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.HomeDepotQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.HomeDepotQtyMainsl = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.HomeDepotQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.HomeDepotQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.HomeDepotQtyMainsl = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.HomeDepotQtyMainsl = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.TargetFeedable && (targetRule == false))
        {
          //getInventoryFeedsItemDTO.TargetQtyMainsl = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.TargetQtyMainsl = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == targetID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailMainsl)
            {
              getInventoryFeedsItemDTO.TargetQtyMainsl = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.TargetQtyMainsl = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.TargetQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == targetID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == targetID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailMainsl)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.TargetQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.TargetQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.TargetQtyMainsl = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.TargetQtyMainsl = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.TargetQtyMainsl = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.TargetQtyMainsl = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.TargetQtyMainsl = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
      //getInventoryFeedsItemDTO.WalmartQtyMainsl = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyMainsl, 5);
      SkipThisFeedMainsl:
        int AmazonQty2 = 0;
        int OverstockQty2 = 0;
        int WalmartQty2 = 0;
        int WayfairQty2 = 0;
        int eBayQty2 = 0;
        int BPMQty2 = 0;
        int MellowQty2 = 0;
        int HouzzQty2 = 0;
        int HomeDepotQty2 = 0;
        int TargetQty2 = 0;
        totalQty = getInventoryFeedsItemDTO.QtyAvailMainsl;
        if (isTotalZero == false)
        {
          AmazonQty2 = getInventoryFeedsItemDTO.AmazonQtyMainsl;
          OverstockQty2 = getInventoryFeedsItemDTO.OverstockQtyMainsl;
          WalmartQty2 = getInventoryFeedsItemDTO.WalmartQtyMainsl;
          WayfairQty2 = getInventoryFeedsItemDTO.WayfairQtyMainsl;
          eBayQty2 = getInventoryFeedsItemDTO.eBayQtyMainsl;
          BPMQty2 = getInventoryFeedsItemDTO.BPMWebQtyMainsl;
          MellowQty2 = getInventoryFeedsItemDTO.MellowWebQtyMainsl;
          HouzzQty2 = getInventoryFeedsItemDTO.HouzzQtyMainsl;
          HomeDepotQty2 = getInventoryFeedsItemDTO.HomeDepotQtyMainsl;
          TargetQty2 = getInventoryFeedsItemDTO.TargetQtyMainsl;
          getInventoryFeedsItemDTO.leftOverQtyMainsl = totalQty - (AmazonQty2 + OverstockQty2 + WalmartQty2 + WayfairQty2 + eBayQty2 + BPMQty2 + MellowQty2 + HouzzQty2 + HomeDepotQty2 + TargetQty2);
        }
        getInventoryFeedsItemDTO.AmazonMainslPercentage = (int)Math.Round((double)AmazonQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.OverstockMainslPercentage = (int)Math.Round((double)OverstockQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.WalmartMainslPercentage = (int)Math.Round((double)WalmartQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.WayfairMainslPercentage = (int)Math.Round((double)WayfairQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.BPMWebMainslPercentage = (int)Math.Round((double)BPMQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.MellowWebMainslPercentage = (int)Math.Round((double)MellowQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.eBayMainslPercentage = (int)Math.Round((double)eBayQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.HouzzMainslPercentage = (int)Math.Round((double)HouzzQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.HomeDepotMainslPercentage = (int)Math.Round((double)HomeDepotQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.TargetMainslPercentage = (int)Math.Round((double)TargetQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
      } /*
      else if (LocId == swcaftId)
      {
        int totalQty = getInventoryFeedsItemDTO.QtyAvailSWCAFT;
        int customRatioQty = 0;
        isTotalZero = false;

        amazonRule = false;
        eBayRule = false;
        walmartRule = false;
        mellowRule = false;
        overstockRule = false;
        wayfairRule = false;
        homeDepotRule = false;
        targetRule = false;
        bpmRule = false;

        //backOrdered = await calculateStageBackOrderSUM(LocId, invParetoListItem.ItemNoId);
        //getInventoryFeedsItemDTO.totalStagePOQtySWCAFT = backOrdered;
        backOrdered = getInventoryFeedsItemDTO.totalStagePOQtySWCAFT;
        if (totalQty - backOrdered <= 0)
        {
          isTotalZero = true;
          goto SkipThisFeedSWCAFT;
        }
        else
        {
          if (newStatusOn == true)
          { totalQty = (int)Math.Floor((double)totalQty * 0.8); }
          else
          { totalQty = totalQty - backOrdered; }

          if ((discoStatusOn == true) && (totalQty < 10))// For "Disco.SKU" rule added by Brian on 02/17/2023
          {
            discoFeedDone = false;
            if ((invParetoListItem.AmazonOBABC.ToUpper() == "A") && getInventoryFeedsItemDTO.AmazonFeedable)
            {
              getInventoryFeedsItemDTO.AmazonQtySWCAFT = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedSWCAFT;
            }
            if ((invParetoListItem.WalmartABC.ToUpper() == "A") && getInventoryFeedsItemDTO.WalmartFeedable
              && (discoFeedDone == false))
            {
              getInventoryFeedsItemDTO.WalmartQtySWCAFT = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedSWCAFT;
            }
            if ((invParetoListItem.WayfairOBABC.ToUpper() == "A") && getInventoryFeedsItemDTO.WalmartFeedable
              && (discoFeedDone == false))
            {
              getInventoryFeedsItemDTO.WayfairQtySWCAFT = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedSWCAFT;
            }
            if (discoFeedDone == false)
            {
              getInventoryFeedsItemDTO.eBayQtySWCAFT = totalQty;
              goto SkipThisFeedSWCAFT;
            }
          }// End of new rule; For SW-CAFT
        }

        // For market specific ratio
        // Amazon
        if (getInventoryFeedsItemDTO.AmazonFeedable)
        {
          if (getInventoryFeedsItemDTO.AmazonSWCAFTPercentage > 0)
          {
            amazonRule = true;
            //getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.AmazonQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.AmazonSWCAFTPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.AmazonQtySWCAFT;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == amazonID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              amazonRule = true;
              //getInventoryFeedsItemDTO.AmazonQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.AmazonQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.AmazonQtySWCAFT;
            }
          }
        }
        // eBay
        if (getInventoryFeedsItemDTO.eBayFeedable)
        {
          if (getInventoryFeedsItemDTO.eBaySWCAFTPercentage > 0)
          {
            eBayRule = true;
            //getInventoryFeedsItemDTO.eBayQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.eBayQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.eBaySWCAFTPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.eBayQtySWCAFT;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ebayID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              eBayRule = true;
              //getInventoryFeedsItemDTO.eBayQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.eBayQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.eBayQtySWCAFT;
            }
          }
        }
        // Overstock
        if (getInventoryFeedsItemDTO.OverstockFeedable)
        {
          if (getInventoryFeedsItemDTO.OverstockSWCAFTPercentage > 0)
          {
            overstockRule = true;
            //getInventoryFeedsItemDTO.overstockQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.OverstockQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.OverstockSWCAFTPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.OverstockQtySWCAFT;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ostID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              overstockRule = true;
              //getInventoryFeedsItemDTO.OverstockQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.OverstockQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.OverstockQtySWCAFT;
            }
          }
        }
        // Walmart
        if (getInventoryFeedsItemDTO.WalmartFeedable)
        {
          if (getInventoryFeedsItemDTO.WalmartSWCAFTPercentage > 0)
          {
            walmartRule = true;
            //getInventoryFeedsItemDTO.overstockQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.WalmartQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.WalmartSWCAFTPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.WalmartQtySWCAFT;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == walmartID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              walmartRule = true;
              //getInventoryFeedsItemDTO.WalmartQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.WalmartQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.WalmartQtySWCAFT;
            }
          }
        }
        // Wayfair
        if (getInventoryFeedsItemDTO.WayfairFeedable)
        {
          if (getInventoryFeedsItemDTO.WayfairSWCAFTPercentage > 0)
          {
            wayfairRule = true;
            //getInventoryFeedsItemDTO.overstockQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.WayfairQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.WayfairSWCAFTPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.WayfairQtySWCAFT;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == wayfairID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              wayfairRule = true;
              // getInventoryFeedsItemDTO.WayfairQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.WayfairQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.WayfairQtySWCAFT;
            }
          }
        }
        // BPM
        if (getInventoryFeedsItemDTO.BPMFeedable)
        {
          if (getInventoryFeedsItemDTO.BPMWebSWCAFTPercentage > 0)
          {
            bpmRule = true;
            //getInventoryFeedsItemDTO.overstockQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.BPMWebQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.BPMWebSWCAFTPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.BPMWebQtySWCAFT;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == bpmWebID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              bpmRule = true;
              // getInventoryFeedsItemDTO.BPMWebQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.BPMWebQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.BPMWebQtySWCAFT;
            }
          }
        }
        // Mellow
        if (getInventoryFeedsItemDTO.MellowFeedable)
        {
          if (getInventoryFeedsItemDTO.MellowWebSWCAFTPercentage > 0)
          {
            mellowRule = true;
            //getInventoryFeedsItemDTO.overstockQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.MellowWebQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.MellowWebSWCAFTPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.MellowWebQtySWCAFT;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == mellowWebID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              mellowRule = true;
              // getInventoryFeedsItemDTO.MellowWebQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.MellowWebQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.MellowWebQtySWCAFT;
            }
          }
        }
        // Home Depot
        if (getInventoryFeedsItemDTO.HomeDepotFeedable)
        {
          if (getInventoryFeedsItemDTO.HomeDepotSWCAFTPercentage > 0)
          {
            homeDepotRule = true;
            //getInventoryFeedsItemDTO.overstockQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.HomeDepotQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.HomeDepotSWCAFTPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.HomeDepotQtySWCAFT;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == homeDepotID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              homeDepotRule = true;
              // getInventoryFeedsItemDTO.HomeDepotQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.HomeDepotQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.HomeDepotQtySWCAFT;
            }
          }
        }
        // Target
        if (getInventoryFeedsItemDTO.TargetFeedable)
        {
          if (getInventoryFeedsItemDTO.TargetSWCAFTPercentage > 0)
          {
            targetRule = true;
            //getInventoryFeedsItemDTO.overstockQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.TargetQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.TargetSWCAFTPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.TargetQtySWCAFT;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == targetID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              targetRule = true;
              // getInventoryFeedsItemDTO.TargetQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.TargetQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.TargetQtySWCAFT;
            }
          }
        }
        totalQty = totalQty - customRatioQty;

        if (getInventoryFeedsItemDTO.AmazonFeedable && (amazonRule == false))
        {
          //getInventoryFeedsItemDTO.AmazonQtySWCAFT = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.AmazonQtySWCAFT = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == amazonID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailSWCAFT)
          {
            getInventoryFeedsItemDTO.AmazonQtySWCAFT = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.AmazonQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.AmazonQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == amazonID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == amazonID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailSWCAFT)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.AmazonQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.AmazonQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.AmazonQtySWCAFT = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.AmazonQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.AmazonQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.AmazonQtySWCAFT = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.AmazonQtySWCAFT = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.OverstockFeedable && (overstockRule == false))
        {
          //getInventoryFeedsItemDTO.OverstockQtySWCAFT = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.OverstockQtySWCAFT = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ostID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailSWCAFT)
          {
            getInventoryFeedsItemDTO.OverstockQtySWCAFT = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.OverstockQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.OverstockQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ostID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ostID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailSWCAFT)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.OverstockQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.OverstockQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.OverstockQtySWCAFT = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.OverstockQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.OverstockQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.OverstockQtySWCAFT = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.OverstockQtySWCAFT = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.WalmartFeedable && (walmartRule == false))
        {
          //getInventoryFeedsItemDTO.WalmartQtySWCAFT = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.WalmartQtySWCAFT = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == walmartID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailSWCAFT)
          {
            getInventoryFeedsItemDTO.WalmartQtySWCAFT = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.WalmartQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.WalmartQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == walmartID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == walmartID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailSWCAFT)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.WalmartQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.WalmartQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.WalmartQtySWCAFT = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.WalmartQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.WalmartQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.WalmartQtySWCAFT = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.WalmartQtySWCAFT = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.WayfairFeedable && (wayfairRule == false))
        {
          //getInventoryFeedsItemDTO.WayfairQtySWCAFT = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.WayfairQtySWCAFT = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == wayfairID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailSWCAFT)
          {
            getInventoryFeedsItemDTO.WayfairQtySWCAFT = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.WayfairQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.WayfairQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == wayfairID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == wayfairID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailSWCAFT)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.WayfairQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.WayfairQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.WayfairQtySWCAFT = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.WayfairQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.WayfairQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.WayfairQtySWCAFT = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.WayfairQtySWCAFT = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.eBayFeedable && (eBayRule == false))
        {
          //getInventoryFeedsItemDTO.eBayQtySWCAFT = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.eBayQtySWCAFT = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ebayID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailSWCAFT)
          {
            getInventoryFeedsItemDTO.eBayQtySWCAFT = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.eBayQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.eBayQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ebayID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ebayID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailSWCAFT)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.eBayQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.eBayQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.eBayQtySWCAFT = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.eBayQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.eBayQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.eBayQtySWCAFT = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.eBayQtySWCAFT = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.BPMFeedable && (bpmRule == false))
        {
          //getInventoryFeedsItemDTO.BPMWebQtySWCAFT = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.BPMWebQtySWCAFT = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == bpmWebID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailSWCAFT)
          {
            getInventoryFeedsItemDTO.BPMWebQtySWCAFT = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.BPMWebQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.BPMWebQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == bpmWebID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == bpmWebID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailSWCAFT)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.BPMWebQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.BPMWebQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.BPMWebQtySWCAFT = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.BPMWebQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.BPMWebQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.BPMWebQtySWCAFT = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.BPMWebQtySWCAFT = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.MellowFeedable && (mellowRule == false))
        {
          //getInventoryFeedsItemDTO.MellowWebQtySWCAFT = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.MellowWebQtySWCAFT = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == mellowWebID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailSWCAFT)
          {
            getInventoryFeedsItemDTO.MellowWebQtySWCAFT = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.MellowWebQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.MellowWebQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == mellowWebID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == mellowWebID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailSWCAFT)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.MellowWebQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.MellowWebQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.MellowWebQtySWCAFT = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.MellowWebQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.MellowWebQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.MellowWebQtySWCAFT = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.MellowWebQtySWCAFT = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.HouzzFeedable)
        {
          getInventoryFeedsItemDTO.HouzzQtySWCAFT = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == houzzID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailSWCAFT)
          {
            getInventoryFeedsItemDTO.HouzzQtySWCAFT = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            getInventoryFeedsItemDTO.HouzzQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == houzzID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == houzzID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailSWCAFT)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  getInventoryFeedsItemDTO.HouzzQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.HouzzQtySWCAFT = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              getInventoryFeedsItemDTO.HouzzQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            getInventoryFeedsItemDTO.HouzzQtySWCAFT = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.HomeDepotFeedable && (homeDepotRule == false))
        {
          //getInventoryFeedsItemDTO.HomeDepotQtySWCAFT = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.HomeDepotQtySWCAFT = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == homeDepotID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailSWCAFT)
          {
            getInventoryFeedsItemDTO.HomeDepotQtySWCAFT = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.HomeDepotQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.HomeDepotQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == homeDepotID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == homeDepotID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailSWCAFT)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.HomeDepotQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.HomeDepotQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.HomeDepotQtySWCAFT = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.HomeDepotQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.HomeDepotQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.HomeDepotQtySWCAFT = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.HomeDepotQtySWCAFT = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.TargetFeedable && (targetRule == false))
        {
          //getInventoryFeedsItemDTO.TargetQtySWCAFT = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.TargetQtySWCAFT = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == targetID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailSWCAFT)
          {
            getInventoryFeedsItemDTO.TargetQtySWCAFT = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.TargetQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.TargetQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == targetID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == targetID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailSWCAFT)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.TargetQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.TargetQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.TargetQtySWCAFT = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.TargetQtySWCAFT = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.TargetQtySWCAFT = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.TargetQtySWCAFT = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.TargetQtySWCAFT = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
      // getInventoryFeedsItemDTO.WalmartQtySWCAFT = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtySWCAFT, 5);
      SkipThisFeedSWCAFT:
        int AmazonQty2 = 0;
        int OverstockQty2 = 0;
        int WalmartQty2 = 0;
        int WayfairQty2 = 0;
        int eBayQty2 = 0;
        int BPMQty2 = 0;
        int MellowQty2 = 0;
        int HouzzQty2 = 0;
        int HomeDepotQty2 = 0;
        int TargetQty2 = 0;

        //if (getInventoryFeedsItemDTO.ItemNoId == 1607)
        //{ Console.WriteLine("Here"); }
        totalQty = getInventoryFeedsItemDTO.QtyAvailSWCAFT;
        if (isTotalZero == false)
        {
          AmazonQty2 = getInventoryFeedsItemDTO.AmazonQtySWCAFT;
          OverstockQty2 = getInventoryFeedsItemDTO.OverstockQtySWCAFT;
          WalmartQty2 = getInventoryFeedsItemDTO.WalmartQtySWCAFT;
          WayfairQty2 = getInventoryFeedsItemDTO.WayfairQtySWCAFT;
          eBayQty2 = getInventoryFeedsItemDTO.eBayQtySWCAFT;
          BPMQty2 = getInventoryFeedsItemDTO.BPMWebQtySWCAFT;
          MellowQty2 = getInventoryFeedsItemDTO.MellowWebQtySWCAFT;
          HouzzQty2 = getInventoryFeedsItemDTO.HouzzQtySWCAFT;
          HomeDepotQty2 = getInventoryFeedsItemDTO.HomeDepotQtySWCAFT;
          TargetQty2 = getInventoryFeedsItemDTO.TargetQtySWCAFT;
          getInventoryFeedsItemDTO.leftOverQtySWCAFT = totalQty - (AmazonQty2 + OverstockQty2 + WalmartQty2 + WayfairQty2 + eBayQty2 + BPMQty2 + MellowQty2 + HouzzQty2 + HomeDepotQty2 + TargetQty2);
        }
        getInventoryFeedsItemDTO.AmazonSWCAFTPercentage = (int)Math.Round((double)AmazonQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.OverstockSWCAFTPercentage = (int)Math.Round((double)OverstockQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.WalmartSWCAFTPercentage = (int)Math.Round((double)WalmartQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.WayfairSWCAFTPercentage = (int)Math.Round((double)WayfairQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.BPMWebSWCAFTPercentage = (int)Math.Round((double)BPMQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.MellowWebSWCAFTPercentage = (int)Math.Round((double)MellowQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.eBaySWCAFTPercentage = (int)Math.Round((double)eBayQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.HouzzSWCAFTPercentage = (int)Math.Round((double)HouzzQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.HomeDepotSWCAFTPercentage = (int)Math.Round((double)HomeDepotQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.TargetSWCAFTPercentage = (int)Math.Round((double)TargetQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
      } */
      /*else if (LocId == bascId)
      {
        int totalQty = getInventoryFeedsItemDTO.QtyAvailBasc;
        int customRatioQty = 0;
        isTotalZero = false;
        amazonRule = false;
        eBayRule = false;
        walmartRule = false;
        mellowRule = false;
        overstockRule = false;
        wayfairRule = false;
        homeDepotRule = false;
        targetRule = false;
        bpmRule = false;
        //backOrdered = await calculateStageBackOrderSUM(LocId, invParetoListItem.ItemNoId);
        //getInventoryFeedsItemDTO.totalStagePOQtyBasc = backOrdered;
        backOrdered = getInventoryFeedsItemDTO.totalStagePOQtyBasc;
        if (totalQty - backOrdered <= 0)
        {
          getInventoryFeedsItemDTO.BascFeedable = false;
          getInventoryFeedsItemDTO.totalStagePOQtyBasc = 0;
          isTotalZero = true;
          goto SkipThisFeedBasc;
        }
        else
        {
          if (newStatusOn == true)
          { totalQty = (int)Math.Floor((double)totalQty * 0.8); }
          else
          { totalQty = totalQty - backOrdered; }
          // Added by Brian Yi on 06/12/2024
          getInventoryFeedsItemDTO.QtyAvailBasc = totalQty;

          if ((discoStatusOn == true) && (totalQty < 10))// For "Disco.SKU" rule added by Brian on 02/17/2023
          {
            discoFeedDone = false;
            if ((invParetoListItem.AmazonOBABC.ToUpper() == "A") && getInventoryFeedsItemDTO.AmazonFeedable)
            {
              getInventoryFeedsItemDTO.AmazonQtyBasc = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedBasc;
            }
            if ((invParetoListItem.WalmartABC.ToUpper() == "A") && getInventoryFeedsItemDTO.WalmartFeedable
              && (discoFeedDone == false))
            {
              getInventoryFeedsItemDTO.WalmartQtyBasc = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedBasc;
            }
            if ((invParetoListItem.WayfairOBABC.ToUpper() == "A") && getInventoryFeedsItemDTO.WalmartFeedable
              && (discoFeedDone == false))
            {
              getInventoryFeedsItemDTO.WayfairQtyBasc = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedBasc;
            }
            if (discoFeedDone == false)
            {
              getInventoryFeedsItemDTO.eBayQtyBasc = totalQty;
              goto SkipThisFeedBasc;
            }
          }// End of new rule; For BASC
        }

        // For market specific ratio
        // Amazon
        if (getInventoryFeedsItemDTO.AmazonFeedable)
        {
          if (getInventoryFeedsItemDTO.AmazonBascPercentage > 0)
          {
            amazonRule = true;
            //getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.AmazonQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.AmazonBascPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.AmazonQtyBasc;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == amazonID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                amazonRule = true;
                //getInventoryFeedsItemDTO.AmazonQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.AmazonQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.AmazonQtyBasc;
              }
            }
          }
        }
        // eBay
        if (getInventoryFeedsItemDTO.eBayFeedable)
        {
          if (getInventoryFeedsItemDTO.eBayBascPercentage > 0)
          {
            eBayRule = true;
            //getInventoryFeedsItemDTO.eBayQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.eBayQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.eBayBascPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.eBayQtyBasc;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ebayID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                eBayRule = true;
                //getInventoryFeedsItemDTO.eBayQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.eBayQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.eBayQtyBasc;
              }
            }
          }
        }
        // Overstock
        if (getInventoryFeedsItemDTO.OverstockFeedable)
        {
          if (getInventoryFeedsItemDTO.OverstockBascPercentage > 0)
          {
            overstockRule = true;
            //getInventoryFeedsItemDTO.overstockQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.OverstockQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.OverstockBascPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.OverstockQtyBasc;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ostID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                overstockRule = true;
                //getInventoryFeedsItemDTO.OverstockQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.OverstockQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.OverstockQtyBasc;
              }
            }
          }
        }
        // Walmart
        if (getInventoryFeedsItemDTO.WalmartFeedable)
        {
          if (getInventoryFeedsItemDTO.WalmartBascPercentage > 0)
          {
            walmartRule = true;
            //getInventoryFeedsItemDTO.overstockQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.WalmartQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.WalmartBascPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.WalmartQtyBasc;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == walmartID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                walmartRule = true;
                //getInventoryFeedsItemDTO.WalmartQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.WalmartQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.WalmartQtyBasc;
              }
            }
          }
        }
        // Wayfair
        if (getInventoryFeedsItemDTO.WayfairFeedable)
        {
          if (getInventoryFeedsItemDTO.WayfairBascPercentage > 0)
          {
            wayfairRule = true;
            //getInventoryFeedsItemDTO.overstockQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.WayfairQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.WayfairBascPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.WayfairQtyBasc;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == wayfairID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                wayfairRule = true;
                //getInventoryFeedsItemDTO.WayfairQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.WayfairQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.WayfairQtyBasc;
              }
            }
          }
        }
        // BPM
        if (getInventoryFeedsItemDTO.BPMFeedable)
        {
          if (getInventoryFeedsItemDTO.BPMWebBascPercentage > 0)
          {
            bpmRule = true;
            //getInventoryFeedsItemDTO.overstockQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.BPMWebQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.BPMWebBascPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.BPMWebQtyBasc;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == bpmWebID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                bpmRule = true;
                //getInventoryFeedsItemDTO.BPMWebQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.BPMWebQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.BPMWebQtyBasc;
              }
            }
          }
        }
        // Mellow
        if (getInventoryFeedsItemDTO.MellowFeedable)
        {
          if (getInventoryFeedsItemDTO.MellowWebBascPercentage > 0)
          {
            mellowRule = true;
            //getInventoryFeedsItemDTO.overstockQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.MellowWebQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.MellowWebBascPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.MellowWebQtyBasc;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == mellowWebID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                mellowRule = true;
                //getInventoryFeedsItemDTO.MellowWebQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.MellowWebQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.MellowWebQtyBasc;
              }
            }
          }
        }
        // Home Depot
        if (getInventoryFeedsItemDTO.HomeDepotFeedable)
        {
          if (getInventoryFeedsItemDTO.HomeDepotBascPercentage > 0)
          {
            homeDepotRule = true;
            //getInventoryFeedsItemDTO.overstockQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.HomeDepotQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.HomeDepotBascPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.HomeDepotQtyBasc;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == homeDepotID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                homeDepotRule = true;
                //getInventoryFeedsItemDTO.HomeDepotQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.HomeDepotQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.HomeDepotQtyBasc;
              }
            }
          }
        }
        // Target
        if (getInventoryFeedsItemDTO.TargetFeedable)
        {
          if (getInventoryFeedsItemDTO.TargetBascPercentage > 0)
          {
            targetRule = true;
            //getInventoryFeedsItemDTO.overstockQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.TargetQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.TargetBascPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.TargetQtyBasc;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == targetID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                targetRule = true;
                //getInventoryFeedsItemDTO.TargetQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.TargetQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.TargetQtyBasc;
              }
            }
          }
        }
        totalQty = totalQty - customRatioQty;

        if (getInventoryFeedsItemDTO.AmazonFeedable && (amazonRule == false))
        {
          //getInventoryFeedsItemDTO.AmazonQtyBasc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.AmazonQtyBasc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == amazonID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBasc)
            {
              getInventoryFeedsItemDTO.AmazonQtyBasc = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              // getInventoryFeedsItemDTO.AmazonQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.AmazonQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == amazonID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == amazonID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBasc)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.AmazonQtyBasc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.AmazonQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.AmazonQtyBasc = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              // getInventoryFeedsItemDTO.AmazonQtyBasc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.AmazonQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.AmazonQtyBasc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.AmazonQtyBasc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.OverstockFeedable && (overstockRule == false))
        {
          //getInventoryFeedsItemDTO.OverstockQtyBasc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.OverstockQtyBasc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ostID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBasc)
            {
              getInventoryFeedsItemDTO.OverstockQtyBasc = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.OverstockQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.OverstockQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ostID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ostID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBasc)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.OverstockQtyBasc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.OverstockQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.OverstockQtyBasc = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.OverstockQtyBasc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.OverstockQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            // getInventoryFeedsItemDTO.OverstockQtyBasc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.OverstockQtyBasc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.WalmartFeedable && (walmartRule == false))
        {
          // getInventoryFeedsItemDTO.WalmartQtyBasc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.WalmartQtyBasc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == walmartID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBasc)
            {
              getInventoryFeedsItemDTO.WalmartQtyBasc = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.WalmartQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.WalmartQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == walmartID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == walmartID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBasc)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.WalmartQtyBasc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.WalmartQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.WalmartQtyBasc = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.WalmartQtyBasc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.WalmartQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.WalmartQtyBasc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.WalmartQtyBasc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.WayfairFeedable && (wayfairRule == false))
        {
          //getInventoryFeedsItemDTO.WayfairQtyBasc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.WayfairQtyBasc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == wayfairID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBasc)
            {
              getInventoryFeedsItemDTO.WayfairQtyBasc = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.WayfairQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.WayfairQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == wayfairID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == wayfairID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBasc)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.WayfairQtyBasc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.WayfairQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.WayfairQtyBasc = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.WayfairQtyBasc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.WayfairQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.WayfairQtyBasc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.WayfairQtyBasc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.eBayFeedable && (eBayRule == false))
        {
          // getInventoryFeedsItemDTO.eBayQtyBasc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.eBayQtyBasc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ebayID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBasc)
            {
              getInventoryFeedsItemDTO.eBayQtyBasc = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.eBayQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.eBayQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ebayID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ebayID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBasc)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.eBayQtyBasc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.eBayQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.eBayQtyBasc = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              // getInventoryFeedsItemDTO.eBayQtyBasc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.eBayQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            // getInventoryFeedsItemDTO.eBayQtyBasc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.eBayQtyBasc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.BPMFeedable && (bpmRule == false))
        {
          // getInventoryFeedsItemDTO.BPMWebQtyBasc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.BPMWebQtyBasc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == bpmWebID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBasc)
            {
              getInventoryFeedsItemDTO.BPMWebQtyBasc = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.BPMWebQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.BPMWebQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == bpmWebID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == bpmWebID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBasc)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.BPMWebQtyBasc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.BPMWebQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.BPMWebQtyBasc = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.BPMWebQtyBasc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.BPMWebQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.BPMWebQtyBasc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.BPMWebQtyBasc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.MellowFeedable && (mellowRule == false))
        {
          //getInventoryFeedsItemDTO.MellowWebQtyBasc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.MellowWebQtyBasc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == mellowWebID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBasc)
            {
              getInventoryFeedsItemDTO.MellowWebQtyBasc = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.MellowWebQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.MellowWebQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == mellowWebID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == mellowWebID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBasc)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.MellowWebQtyBasc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.MellowWebQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.MellowWebQtyBasc = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.MellowWebQtyBasc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.MellowWebQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.MellowWebQtyBasc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.MellowWebQtyBasc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.HouzzFeedable)
        {
          getInventoryFeedsItemDTO.HouzzQtyBasc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == houzzID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBasc)
            {
              getInventoryFeedsItemDTO.HouzzQtyBasc = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              getInventoryFeedsItemDTO.HouzzQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == houzzID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == houzzID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBasc)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  getInventoryFeedsItemDTO.HouzzQtyBasc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.HouzzQtyBasc = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              getInventoryFeedsItemDTO.HouzzQtyBasc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            getInventoryFeedsItemDTO.HouzzQtyBasc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.HomeDepotFeedable && (homeDepotRule == false))
        {
          //getInventoryFeedsItemDTO.HomeDepotQtyBasc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.HomeDepotQtyBasc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == homeDepotID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBasc)
            {
              getInventoryFeedsItemDTO.HomeDepotQtyBasc = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.HomeDepotQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.HomeDepotQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == homeDepotID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == homeDepotID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBasc)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.HomeDepotQtyBasc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.HomeDepotQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.HomeDepotQtyBasc = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.HomeDepotQtyBasc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.HomeDepotQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.HomeDepotQtyBasc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.HomeDepotQtyBasc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.TargetFeedable && (targetRule == false))
        {
          //getInventoryFeedsItemDTO.TargetQtyBasc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.TargetQtyBasc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == targetID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailBasc)
            {
              getInventoryFeedsItemDTO.TargetQtyBasc = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.TargetQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.TargetQtyBasc = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == targetID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == targetID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailBasc)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.TargetQtyBasc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.TargetQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.TargetQtyBasc = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.TargetQtyBasc = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.TargetQtyBasc = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            // getInventoryFeedsItemDTO.TargetQtyBasc = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.TargetQtyBasc = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
      //getInventoryFeedsItemDTO.WalmartQtyBasc = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyBasc, 5);
      SkipThisFeedBasc:
        int AmazonQty2 = 0;
        int OverstockQty2 = 0;
        int WalmartQty2 = 0;
        int WayfairQty2 = 0;
        int eBayQty2 = 0;
        int BPMQty2 = 0;
        int MellowQty2 = 0;
        int HouzzQty2 = 0;
        int HomeDepotQty2 = 0;
        int TargetQty2 = 0;
        totalQty = getInventoryFeedsItemDTO.QtyAvailBasc;
        if (isTotalZero == false)
        {
          AmazonQty2 = getInventoryFeedsItemDTO.AmazonQtyBasc;
          OverstockQty2 = getInventoryFeedsItemDTO.OverstockQtyBasc;
          WalmartQty2 = getInventoryFeedsItemDTO.WalmartQtyBasc;
          WayfairQty2 = getInventoryFeedsItemDTO.WayfairQtyBasc;
          eBayQty2 = getInventoryFeedsItemDTO.eBayQtyBasc;
          BPMQty2 = getInventoryFeedsItemDTO.BPMWebQtyBasc;
          MellowQty2 = getInventoryFeedsItemDTO.MellowWebQtyBasc;
          HouzzQty2 = getInventoryFeedsItemDTO.HouzzQtyBasc;
          HomeDepotQty2 = getInventoryFeedsItemDTO.HomeDepotQtyBasc;
          TargetQty2 = getInventoryFeedsItemDTO.TargetQtyBasc;
          getInventoryFeedsItemDTO.leftOverQtyBasc = totalQty - (AmazonQty2 + OverstockQty2 + WalmartQty2 + WayfairQty2 + eBayQty2 + BPMQty2 + MellowQty2 + HouzzQty2 + HomeDepotQty2 + TargetQty2);
          //if (getInventoryFeedsItemDTO.ItemNoId == 606)
          //{ Console.WriteLine("HERE!!!!!!!!"); }
        }
        getInventoryFeedsItemDTO.AmazonBascPercentage = (int)Math.Round((double)AmazonQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.OverstockBascPercentage = (int)Math.Round((double)OverstockQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.WalmartBascPercentage = (int)Math.Round((double)WalmartQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.WayfairBascPercentage = (int)Math.Round((double)WayfairQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.BPMWebBascPercentage = (int)Math.Round((double)BPMQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.MellowWebBascPercentage = (int)Math.Round((double)MellowQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.eBayBascPercentage = (int)Math.Round((double)eBayQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.HouzzBascPercentage = (int)Math.Round((double)HouzzQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.HomeDepotBascPercentage = (int)Math.Round((double)HomeDepotQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.TargetBascPercentage = (int)Math.Round((double)TargetQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);

      }*//*
      else if (LocId == prsmCastId)
      {
        int totalQty = getInventoryFeedsItemDTO.QtyAvailPrismCast;
        int customRatioQty = 0;
        isTotalZero = false;
        amazonRule = false;
        eBayRule = false;
        walmartRule = false;
        mellowRule = false;
        overstockRule = false;
        wayfairRule = false;
        homeDepotRule = false;
        targetRule = false;
        bpmRule = false;
        //backOrdered = await calculateStageBackOrderSUM(LocId, invParetoListItem.ItemNoId);
        //getInventoryFeedsItemDTO.totalStagePOQtyPrismCast = backOrdered;
        backOrdered = getInventoryFeedsItemDTO.totalStagePOQtyPrismCast;
        if (totalQty - backOrdered <= 0)
        {
          isTotalZero = true;
          goto SkipThisFeedPrismCast;
        }
        else
        {
          if (newStatusOn == true)
          { totalQty = (int)Math.Floor((double)totalQty * 0.8); }
          else
          { totalQty = totalQty - backOrdered; }


          if ((discoStatusOn == true) && (totalQty < 10))// For "Disco.SKU" rule added by Brian on 02/17/2023
          {
            discoFeedDone = false;
            if ((invParetoListItem.AmazonOBABC.ToUpper() == "A") && getInventoryFeedsItemDTO.AmazonFeedable)
            {
              getInventoryFeedsItemDTO.AmazonQtyPrismCast = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedPrismCast;
            }
            if ((invParetoListItem.WalmartABC.ToUpper() == "A") && getInventoryFeedsItemDTO.WalmartFeedable
              && (discoFeedDone == false))
            {
              getInventoryFeedsItemDTO.WalmartQtyPrismCast = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedPrismCast;
            }
            if ((invParetoListItem.WayfairOBABC.ToUpper() == "A") && getInventoryFeedsItemDTO.WalmartFeedable
              && (discoFeedDone == false))
            {
              getInventoryFeedsItemDTO.WayfairQtyPrismCast = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedPrismCast;
            }
            if (discoFeedDone == false)
            {
              getInventoryFeedsItemDTO.eBayQtyPrismCast = totalQty;
              goto SkipThisFeedPrismCast;
            }
          }// End of new rule; For MainSL
        }

        // For market specific ratio
        // Amazon
        if (getInventoryFeedsItemDTO.AmazonFeedable)
        {
          if (getInventoryFeedsItemDTO.AmazonPrismCastPercentage > 0)
          {
            amazonRule = true;
            //getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.AmazonQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.AmazonPrismCastPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.AmazonQtyPrismCast;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == amazonID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              amazonRule = true;
              // getInventoryFeedsItemDTO.AmazonQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.AmazonQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.AmazonQtyPrismCast;
            }
          }
        }
        // eBay
        if (getInventoryFeedsItemDTO.eBayFeedable)
        {
          if (getInventoryFeedsItemDTO.eBayPrismCastPercentage > 0)
          {
            eBayRule = true;
            //getInventoryFeedsItemDTO.eBayQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.eBayQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.eBayPrismCastPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.eBayQtyPrismCast;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ebayID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              eBayRule = true;
              //getInventoryFeedsItemDTO.eBayQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.eBayQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.eBayQtyPrismCast;
            }
          }
        }
        // Overstock
        if (getInventoryFeedsItemDTO.OverstockFeedable)
        {
          if (getInventoryFeedsItemDTO.OverstockPrismCastPercentage > 0)
          {
            overstockRule = true;
            //getInventoryFeedsItemDTO.overstockQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.OverstockQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.OverstockPrismCastPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.OverstockQtyPrismCast;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ostID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              overstockRule = true;
              //getInventoryFeedsItemDTO.OverstockQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.OverstockQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.OverstockQtyPrismCast;
            }
          }
        }
        // Walmart
        if (getInventoryFeedsItemDTO.WalmartFeedable)
        {
          if (getInventoryFeedsItemDTO.WalmartPrismCastPercentage > 0)
          {
            walmartRule = true;
            //getInventoryFeedsItemDTO.overstockQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.WalmartQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.WalmartPrismCastPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.WalmartQtyPrismCast;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == walmartID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              walmartRule = true;
              // getInventoryFeedsItemDTO.WalmartQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.WalmartQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.WalmartQtyPrismCast;
            }
          }
        }
        // Wayfair
        if (getInventoryFeedsItemDTO.WayfairFeedable)
        {
          if (getInventoryFeedsItemDTO.WayfairPrismCastPercentage > 0)
          {
            wayfairRule = true;
            //getInventoryFeedsItemDTO.overstockQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.WayfairQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.WayfairPrismCastPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.WayfairQtyPrismCast;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == wayfairID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              wayfairRule = true;
              // getInventoryFeedsItemDTO.WayfairQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.WayfairQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.WayfairQtyPrismCast;
            }
          }
        }
        // BPM
        if (getInventoryFeedsItemDTO.BPMFeedable)
        {
          if (getInventoryFeedsItemDTO.BPMWebPrismCastPercentage > 0)
          {
            bpmRule = true;
            //getInventoryFeedsItemDTO.overstockQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.BPMWebQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.BPMWebPrismCastPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.BPMWebQtyPrismCast;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == bpmWebID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              bpmRule = true;
              //getInventoryFeedsItemDTO.BPMWebQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.BPMWebQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.BPMWebQtyPrismCast;
            }
          }
        }
        // Mellow
        if (getInventoryFeedsItemDTO.MellowFeedable)
        {
          if (getInventoryFeedsItemDTO.MellowWebPrismCastPercentage > 0)
          {
            mellowRule = true;
            //getInventoryFeedsItemDTO.overstockQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.MellowWebQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.MellowWebPrismCastPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.MellowWebQtyPrismCast;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == mellowWebID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              mellowRule = true;
              // getInventoryFeedsItemDTO.MellowWebQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.MellowWebQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.MellowWebQtyPrismCast;
            }
          }
        }
        // Home Depot
        if (getInventoryFeedsItemDTO.HomeDepotFeedable)
        {
          if (getInventoryFeedsItemDTO.HomeDepotPrismCastPercentage > 0)
          {
            homeDepotRule = true;
            //getInventoryFeedsItemDTO.overstockQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.HomeDepotQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.HomeDepotPrismCastPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.HomeDepotQtyPrismCast;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == homeDepotID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              homeDepotRule = true;
              //getInventoryFeedsItemDTO.HomeDepotQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.HomeDepotQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.HomeDepotQtyPrismCast;
            }
          }
        }
        // Target
        if (getInventoryFeedsItemDTO.TargetFeedable)
        {
          if (getInventoryFeedsItemDTO.TargetPrismCastPercentage > 0)
          {
            targetRule = true;
            //getInventoryFeedsItemDTO.overstockQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.TargetQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.TargetPrismCastPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.TargetQtyPrismCast;
          }
          else
          {
            targetRule = true;
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == targetID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.TargetQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.TargetQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.TargetQtyPrismCast;
            }
          }
        }
        totalQty = totalQty - customRatioQty;


        if (getInventoryFeedsItemDTO.AmazonFeedable && (amazonRule == false))
        {
          //getInventoryFeedsItemDTO.AmazonQtyPrismCast = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.AmazonQtyPrismCast = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == amazonID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailPrismCast)
          {
            getInventoryFeedsItemDTO.AmazonQtyPrismCast = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.AmazonQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.AmazonQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == amazonID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == amazonID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailPrismCast)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.AmazonQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.AmazonQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.AmazonQtyPrismCast = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.AmazonQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.AmazonQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.AmazonQtyPrismCast = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.AmazonQtyPrismCast = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.OverstockFeedable && (overstockRule == false))
        {
          //getInventoryFeedsItemDTO.OverstockQtyPrismCast = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.OverstockQtyPrismCast = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ostID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailPrismCast)
          {
            getInventoryFeedsItemDTO.OverstockQtyPrismCast = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.OverstockQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.OverstockQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ostID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ostID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailPrismCast)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.OverstockQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.OverstockQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.OverstockQtyPrismCast = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.OverstockQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.OverstockQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.OverstockQtyPrismCast = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.OverstockQtyPrismCast = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.WalmartFeedable && (walmartRule == false))
        {
          //getInventoryFeedsItemDTO.WalmartQtyPrismCast = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.WalmartQtyPrismCast = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == walmartID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailPrismCast)
          {
            getInventoryFeedsItemDTO.WalmartQtyPrismCast = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.WalmartQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.WalmartQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == walmartID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == walmartID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailPrismCast)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.WalmartQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.WalmartQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.WalmartQtyPrismCast = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.WalmartQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.WalmartQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.WalmartQtyPrismCast = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.WalmartQtyPrismCast = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.WayfairFeedable && (wayfairRule == false))
        {
          //getInventoryFeedsItemDTO.WayfairQtyPrismCast = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.WayfairQtyPrismCast = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == wayfairID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailPrismCast)
          {
            getInventoryFeedsItemDTO.WayfairQtyPrismCast = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.WayfairQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.WayfairQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == wayfairID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == wayfairID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailPrismCast)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.WayfairQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.WayfairQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.WayfairQtyPrismCast = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.WayfairQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.WayfairQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.WayfairQtyPrismCast = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.WayfairQtyPrismCast = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.eBayFeedable && (eBayRule == false))
        {
          //getInventoryFeedsItemDTO.eBayQtyPrismCast = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.eBayQtyPrismCast = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ebayID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailPrismCast)
          {
            getInventoryFeedsItemDTO.eBayQtyPrismCast = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.eBayQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.eBayQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ebayID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ebayID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailPrismCast)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.eBayQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.eBayQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.eBayQtyPrismCast = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.eBayQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.eBayQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.eBayQtyPrismCast = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.eBayQtyPrismCast = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.BPMFeedable && (bpmRule == false))
        {
          //getInventoryFeedsItemDTO.BPMWebQtyPrismCast = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.BPMWebQtyPrismCast = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == bpmWebID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailPrismCast)
          {
            getInventoryFeedsItemDTO.BPMWebQtyPrismCast = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.BPMWebQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.BPMWebQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == bpmWebID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == bpmWebID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailPrismCast)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.BPMWebQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.BPMWebQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.BPMWebQtyPrismCast = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.BPMWebQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.BPMWebQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.BPMWebQtyPrismCast = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.BPMWebQtyPrismCast = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.MellowFeedable && (mellowRule == false))
        {
          //getInventoryFeedsItemDTO.MellowWebQtyPrismCast = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.MellowWebQtyPrismCast = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == mellowWebID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailPrismCast)
          {
            getInventoryFeedsItemDTO.MellowWebQtyPrismCast = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.MellowWebQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.MellowWebQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == mellowWebID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == mellowWebID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailPrismCast)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.MellowWebQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.MellowWebQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.MellowWebQtyPrismCast = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.MellowWebQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.MellowWebQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.MellowWebQtyPrismCast = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.MellowWebQtyPrismCast = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        /*
        if (getInventoryFeedsItemDTO.HouzzFeedable)
        {
          getInventoryFeedsItemDTO.HouzzQtyPrismCast = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == houzzID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailPrismCast)
          {
            getInventoryFeedsItemDTO.HouzzQtyPrismCast = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            getInventoryFeedsItemDTO.HouzzQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == houzzID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == houzzID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailPrismCast)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  getInventoryFeedsItemDTO.HouzzQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.HouzzQtyPrismCast = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              getInventoryFeedsItemDTO.HouzzQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            getInventoryFeedsItemDTO.HouzzQtyPrismCast = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }*//*
        if (getInventoryFeedsItemDTO.HomeDepotFeedable && (homeDepotRule == false))
        {
          //getInventoryFeedsItemDTO.HomeDepotQtyPrismCast = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.HomeDepotQtyPrismCast = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == homeDepotID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailPrismCast)
          {
            getInventoryFeedsItemDTO.HomeDepotQtyPrismCast = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.HomeDepotQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.HomeDepotQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == homeDepotID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == homeDepotID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailPrismCast)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.HomeDepotQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.HomeDepotQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.HomeDepotQtyPrismCast = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.HomeDepotQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.HomeDepotQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.HomeDepotQtyPrismCast = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.HomeDepotQtyPrismCast = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.TargetFeedable && (targetRule == false))
        {
          //getInventoryFeedsItemDTO.TargetQtyPrismCast = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.TargetQtyPrismCast = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == targetID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailPrismCast)
          {
            getInventoryFeedsItemDTO.TargetQtyPrismCast = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.TargetQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.TargetQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == targetID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == targetID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailPrismCast)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.TargetQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.TargetQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.TargetQtyPrismCast = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.TargetQtyPrismCast = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.TargetQtyPrismCast = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.TargetQtyPrismCast = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.TargetQtyPrismCast = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
      //getInventoryFeedsItemDTO.WalmartQtyPrismCast = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyPrismCast, 5);
      SkipThisFeedPrismCast:
        int AmazonQty2 = 0;
        int OverstockQty2 = 0;
        int WalmartQty2 = 0;
        int WayfairQty2 = 0;
        int eBayQty2 = 0;
        int BPMQty2 = 0;
        int MellowQty2 = 0;
        //int HouzzQty2 = 0;
        int HomeDepotQty2 = 0;
        int TargetQty2 = 0;
        totalQty = getInventoryFeedsItemDTO.QtyAvailPrismCast;
        if (isTotalZero == false)
        {
          AmazonQty2 = getInventoryFeedsItemDTO.AmazonQtyPrismCast;
          OverstockQty2 = getInventoryFeedsItemDTO.OverstockQtyPrismCast;
          WalmartQty2 = getInventoryFeedsItemDTO.WalmartQtyPrismCast;
          WayfairQty2 = getInventoryFeedsItemDTO.WayfairQtyPrismCast;
          eBayQty2 = getInventoryFeedsItemDTO.eBayQtyPrismCast;
          BPMQty2 = getInventoryFeedsItemDTO.BPMWebQtyPrismCast;
          MellowQty2 = getInventoryFeedsItemDTO.MellowWebQtyPrismCast;
          // HouzzQty2 = getInventoryFeedsItemDTO.HouzzQtyPrismCast;
          HomeDepotQty2 = getInventoryFeedsItemDTO.HomeDepotQtyPrismCast;
          TargetQty2 = getInventoryFeedsItemDTO.TargetQtyPrismCast;
          getInventoryFeedsItemDTO.leftOverQtyPrismCast = totalQty - (AmazonQty2 + OverstockQty2 + WalmartQty2 + WayfairQty2 + eBayQty2 + BPMQty2 + MellowQty2 + HomeDepotQty2 + TargetQty2);
        }
        getInventoryFeedsItemDTO.AmazonPrismCastPercentage = (int)Math.Round((double)AmazonQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.OverstockPrismCastPercentage = (int)Math.Round((double)OverstockQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.WalmartPrismCastPercentage = (int)Math.Round((double)WalmartQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.WayfairPrismCastPercentage = (int)Math.Round((double)WayfairQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.BPMWebPrismCastPercentage = (int)Math.Round((double)BPMQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.MellowWebPrismCastPercentage = (int)Math.Round((double)MellowQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.eBayPrismCastPercentage = (int)Math.Round((double)eBayQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        // getInventoryFeedsItemDTO.HouzzPrismCastPercentage = (int)Math.Round((double)HouzzQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.HomeDepotPrismCastPercentage = (int)Math.Round((double)HomeDepotQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.TargetPrismCastPercentage = (int)Math.Round((double)TargetQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
      }
      else if (LocId == prsmCaltId)
      {
        int totalQty = getInventoryFeedsItemDTO.QtyAvailPrismCalt;
        int customRatioQty = 0;
        isTotalZero = false;
        amazonRule = false;
        eBayRule = false;
        walmartRule = false;
        mellowRule = false;
        overstockRule = false;
        wayfairRule = false;
        homeDepotRule = false;
        targetRule = false;
        bpmRule = false;
        //backOrdered = await calculateStageBackOrderSUM(LocId, invParetoListItem.ItemNoId);
        //getInventoryFeedsItemDTO.totalStagePOQtyPrismCalt = backOrdered;
        backOrdered = getInventoryFeedsItemDTO.totalStagePOQtyPrismCalt;
        if (totalQty - backOrdered <= 0)
        {
          isTotalZero = true;
          goto SkipThisFeedPrismCalt;
        }
        else
        {
          if (newStatusOn == true)
          { totalQty = (int)Math.Floor((double)totalQty * 0.8); }
          else
          { totalQty = totalQty - backOrdered; }


          if ((discoStatusOn == true) && (totalQty < 10))// For "Disco.SKU" rule added by Brian on 02/17/2023
          {
            discoFeedDone = false;
            if ((invParetoListItem.AmazonOBABC.ToUpper() == "A") && getInventoryFeedsItemDTO.AmazonFeedable)
            {
              getInventoryFeedsItemDTO.AmazonQtyPrismCalt = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedPrismCalt;
            }
            if ((invParetoListItem.WalmartABC.ToUpper() == "A") && getInventoryFeedsItemDTO.WalmartFeedable
              && (discoFeedDone == false))
            {
              getInventoryFeedsItemDTO.WalmartQtyPrismCalt = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedPrismCalt;
            }
            if ((invParetoListItem.WayfairOBABC.ToUpper() == "A") && getInventoryFeedsItemDTO.WalmartFeedable
              && (discoFeedDone == false))
            {
              getInventoryFeedsItemDTO.WayfairQtyPrismCalt = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedPrismCalt;
            }
            if (discoFeedDone == false)
            {
              getInventoryFeedsItemDTO.eBayQtyPrismCalt = totalQty;
              goto SkipThisFeedPrismCalt;
            }
          }// End of new rule; For MainSL
        }

        // For market specific ratio
        // Amazon
        if (getInventoryFeedsItemDTO.AmazonFeedable)
        {
          if (getInventoryFeedsItemDTO.AmazonPrismCaltPercentage > 0)
          {
            amazonRule = true;
            //getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.AmazonQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.AmazonPrismCaltPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.AmazonQtyPrismCalt;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == amazonID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              amazonRule = true;
              // getInventoryFeedsItemDTO.AmazonQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.AmazonQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.AmazonQtyPrismCalt;
            }
          }
        }
        // eBay
        if (getInventoryFeedsItemDTO.eBayFeedable)
        {
          if (getInventoryFeedsItemDTO.eBayPrismCaltPercentage > 0)
          {
            eBayRule = true;
            //getInventoryFeedsItemDTO.eBayQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.eBayQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.eBayPrismCaltPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.eBayQtyPrismCalt;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ebayID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              eBayRule = true;
              //getInventoryFeedsItemDTO.eBayQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.eBayQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.eBayQtyPrismCalt;
            }
          }
        }
        // Overstock
        if (getInventoryFeedsItemDTO.OverstockFeedable)
        {
          if (getInventoryFeedsItemDTO.OverstockPrismCaltPercentage > 0)
          {
            overstockRule = true;
            //getInventoryFeedsItemDTO.overstockQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.OverstockQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.OverstockPrismCaltPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.OverstockQtyPrismCalt;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ostID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              overstockRule = true;
              //getInventoryFeedsItemDTO.OverstockQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.OverstockQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.OverstockQtyPrismCalt;
            }
          }
        }
        // Walmart
        if (getInventoryFeedsItemDTO.WalmartFeedable)
        {
          if (getInventoryFeedsItemDTO.WalmartPrismCaltPercentage > 0)
          {
            walmartRule = true;
            //getInventoryFeedsItemDTO.overstockQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.WalmartQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.WalmartPrismCaltPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.WalmartQtyPrismCalt;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == walmartID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              walmartRule = true;
              // getInventoryFeedsItemDTO.WalmartQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.WalmartQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.WalmartQtyPrismCalt;
            }
          }
        }
        // Wayfair
        if (getInventoryFeedsItemDTO.WayfairFeedable)
        {
          if (getInventoryFeedsItemDTO.WayfairPrismCaltPercentage > 0)
          {
            wayfairRule = true;
            //getInventoryFeedsItemDTO.overstockQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.WayfairQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.WayfairPrismCaltPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.WayfairQtyPrismCalt;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == wayfairID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              wayfairRule = true;
              // getInventoryFeedsItemDTO.WayfairQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.WayfairQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.WayfairQtyPrismCalt;
            }
          }
        }
        // BPM
        if (getInventoryFeedsItemDTO.BPMFeedable)
        {
          if (getInventoryFeedsItemDTO.BPMWebPrismCaltPercentage > 0)
          {
            bpmRule = true;
            //getInventoryFeedsItemDTO.overstockQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.BPMWebQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.BPMWebPrismCaltPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.BPMWebQtyPrismCalt;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == bpmWebID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              bpmRule = true;
              //getInventoryFeedsItemDTO.BPMWebQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.BPMWebQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.BPMWebQtyPrismCalt;
            }
          }
        }
        // Mellow
        if (getInventoryFeedsItemDTO.MellowFeedable)
        {
          if (getInventoryFeedsItemDTO.MellowWebPrismCaltPercentage > 0)
          {
            mellowRule = true;
            //getInventoryFeedsItemDTO.overstockQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.MellowWebQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.MellowWebPrismCaltPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.MellowWebQtyPrismCalt;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == mellowWebID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              mellowRule = true;
              // getInventoryFeedsItemDTO.MellowWebQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.MellowWebQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.MellowWebQtyPrismCalt;
            }
          }
        }
        // Home Depot
        if (getInventoryFeedsItemDTO.HomeDepotFeedable)
        {
          if (getInventoryFeedsItemDTO.HomeDepotPrismCaltPercentage > 0)
          {
            homeDepotRule = true;
            //getInventoryFeedsItemDTO.overstockQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.HomeDepotQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.HomeDepotPrismCaltPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.HomeDepotQtyPrismCalt;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == homeDepotID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              homeDepotRule = true;
              //getInventoryFeedsItemDTO.HomeDepotQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.HomeDepotQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.HomeDepotQtyPrismCalt;
            }
          }
        }
        // Target
        if (getInventoryFeedsItemDTO.TargetFeedable)
        {
          if (getInventoryFeedsItemDTO.TargetPrismCaltPercentage > 0)
          {
            targetRule = true;
            //getInventoryFeedsItemDTO.overstockQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.TargetQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.TargetPrismCaltPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.TargetQtyPrismCalt;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == targetID);
            if (tmpMarketRule.CustomFeedRatio > 0)
            {
              targetRule = true;
              //getInventoryFeedsItemDTO.TargetQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              getInventoryFeedsItemDTO.TargetQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
              customRatioQty += getInventoryFeedsItemDTO.TargetQtyPrismCalt;
            }
          }
        }
        totalQty = totalQty - customRatioQty;


        if (getInventoryFeedsItemDTO.AmazonFeedable && (amazonRule == false))
        {
          //getInventoryFeedsItemDTO.AmazonQtyPrismCalt = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.AmazonQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == amazonID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailPrismCalt)
          {
            getInventoryFeedsItemDTO.AmazonQtyPrismCalt = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.AmazonQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.AmazonQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == amazonID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == amazonID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailPrismCalt)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.AmazonQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.AmazonQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.AmazonQtyPrismCalt = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.AmazonQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.AmazonQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.AmazonQtyPrismCalt = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.AmazonQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.OverstockFeedable && (overstockRule == false))
        {
          //getInventoryFeedsItemDTO.OverstockQtyPrismCalt = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.OverstockQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ostID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailPrismCalt)
          {
            getInventoryFeedsItemDTO.OverstockQtyPrismCalt = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.OverstockQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.OverstockQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ostID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ostID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailPrismCalt)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.OverstockQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.OverstockQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.OverstockQtyPrismCalt = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.OverstockQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.OverstockQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.OverstockQtyPrismCalt = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.OverstockQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.WalmartFeedable && (walmartRule == false))
        {
          //getInventoryFeedsItemDTO.WalmartQtyPrismCalt = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.WalmartQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == walmartID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailPrismCalt)
          {
            getInventoryFeedsItemDTO.WalmartQtyPrismCalt = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.WalmartQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.WalmartQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == walmartID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == walmartID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailPrismCalt)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.WalmartQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.WalmartQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.WalmartQtyPrismCalt = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.WalmartQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.WalmartQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.WalmartQtyPrismCalt = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.WalmartQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.WayfairFeedable && (wayfairRule == false))
        {
          //getInventoryFeedsItemDTO.WayfairQtyPrismCalt = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.WayfairQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == wayfairID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailPrismCalt)
          {
            getInventoryFeedsItemDTO.WayfairQtyPrismCalt = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.WayfairQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.WayfairQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == wayfairID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == wayfairID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailPrismCalt)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.WayfairQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.WayfairQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.WayfairQtyPrismCalt = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.WayfairQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.WayfairQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.WayfairQtyPrismCalt = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.WayfairQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.eBayFeedable && (eBayRule == false))
        {
          //getInventoryFeedsItemDTO.eBayQtyPrismCalt = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.eBayQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ebayID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailPrismCalt)
          {
            getInventoryFeedsItemDTO.eBayQtyPrismCalt = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.eBayQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.eBayQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ebayID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ebayID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailPrismCalt)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.eBayQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.eBayQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.eBayQtyPrismCalt = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.eBayQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.eBayQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.eBayQtyPrismCalt = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.eBayQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.BPMFeedable && (bpmRule == false))
        {
          //getInventoryFeedsItemDTO.BPMWebQtyPrismCalt = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.BPMWebQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == bpmWebID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailPrismCalt)
          {
            getInventoryFeedsItemDTO.BPMWebQtyPrismCalt = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.BPMWebQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.BPMWebQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == bpmWebID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == bpmWebID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailPrismCalt)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.BPMWebQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.BPMWebQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.BPMWebQtyPrismCalt = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.BPMWebQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.BPMWebQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.BPMWebQtyPrismCalt = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.BPMWebQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.MellowFeedable && (mellowRule == false))
        {
          //getInventoryFeedsItemDTO.MellowWebQtyPrismCalt = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.MellowWebQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == mellowWebID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailPrismCalt)
          {
            getInventoryFeedsItemDTO.MellowWebQtyPrismCalt = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.MellowWebQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.MellowWebQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == mellowWebID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == mellowWebID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailPrismCalt)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.MellowWebQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.MellowWebQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.MellowWebQtyPrismCalt = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.MellowWebQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.MellowWebQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.MellowWebQtyPrismCalt = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.MellowWebQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        /*
        if (getInventoryFeedsItemDTO.HouzzFeedable)
        {
          getInventoryFeedsItemDTO.HouzzQtyPrismCalt = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == houzzID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailPrismCalt)
          {
            getInventoryFeedsItemDTO.HouzzQtyPrismCalt = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            getInventoryFeedsItemDTO.HouzzQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == houzzID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == houzzID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailPrismCalt)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  getInventoryFeedsItemDTO.HouzzQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.HouzzQtyPrismCalt = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              getInventoryFeedsItemDTO.HouzzQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            getInventoryFeedsItemDTO.HouzzQtyPrismCalt = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }*//*
        if (getInventoryFeedsItemDTO.HomeDepotFeedable && (homeDepotRule == false))
        {
          //getInventoryFeedsItemDTO.HomeDepotQtyPrismCalt = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.HomeDepotQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == homeDepotID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailPrismCalt)
          {
            getInventoryFeedsItemDTO.HomeDepotQtyPrismCalt = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.HomeDepotQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.HomeDepotQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == homeDepotID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == homeDepotID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailPrismCalt)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.HomeDepotQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.HomeDepotQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.HomeDepotQtyPrismCalt = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.HomeDepotQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.HomeDepotQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.HomeDepotQtyPrismCalt = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.HomeDepotQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.TargetFeedable && (targetRule == false))
        {
          //getInventoryFeedsItemDTO.TargetQtyPrismCalt = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.TargetQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == targetID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailPrismCalt)
          {
            getInventoryFeedsItemDTO.TargetQtyPrismCalt = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            //getInventoryFeedsItemDTO.TargetQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            getInventoryFeedsItemDTO.TargetQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == targetID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == targetID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailPrismCalt)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  //getInventoryFeedsItemDTO.TargetQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  getInventoryFeedsItemDTO.TargetQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.TargetQtyPrismCalt = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              //getInventoryFeedsItemDTO.TargetQtyPrismCalt = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              getInventoryFeedsItemDTO.TargetQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.TargetQtyPrismCalt = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.TargetQtyPrismCalt = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
      //getInventoryFeedsItemDTO.WalmartQtyPrismCalt = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyPrismCalt, 5);
      SkipThisFeedPrismCalt:
        int AmazonQty2 = 0;
        int OverstockQty2 = 0;
        int WalmartQty2 = 0;
        int WayfairQty2 = 0;
        int eBayQty2 = 0;
        int BPMQty2 = 0;
        int MellowQty2 = 0;
        //int HouzzQty2 = 0;
        int HomeDepotQty2 = 0;
        int TargetQty2 = 0;
        totalQty = getInventoryFeedsItemDTO.QtyAvailPrismCalt;
        if (isTotalZero == false)
        {
          AmazonQty2 = getInventoryFeedsItemDTO.AmazonQtyPrismCalt;
          OverstockQty2 = getInventoryFeedsItemDTO.OverstockQtyPrismCalt;
          WalmartQty2 = getInventoryFeedsItemDTO.WalmartQtyPrismCalt;
          WayfairQty2 = getInventoryFeedsItemDTO.WayfairQtyPrismCalt;
          eBayQty2 = getInventoryFeedsItemDTO.eBayQtyPrismCalt;
          BPMQty2 = getInventoryFeedsItemDTO.BPMWebQtyPrismCalt;
          MellowQty2 = getInventoryFeedsItemDTO.MellowWebQtyPrismCalt;
          // HouzzQty2 = getInventoryFeedsItemDTO.HouzzQtyPrismCalt;
          HomeDepotQty2 = getInventoryFeedsItemDTO.HomeDepotQtyPrismCalt;
          TargetQty2 = getInventoryFeedsItemDTO.TargetQtyPrismCalt;
          getInventoryFeedsItemDTO.leftOverQtyPrismCalt = totalQty - (AmazonQty2 + OverstockQty2 + WalmartQty2 + WayfairQty2 + eBayQty2 + BPMQty2 + MellowQty2 + HomeDepotQty2 + TargetQty2);
        }
        getInventoryFeedsItemDTO.AmazonPrismCaltPercentage = (int)Math.Round((double)AmazonQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.OverstockPrismCaltPercentage = (int)Math.Round((double)OverstockQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.WalmartPrismCaltPercentage = (int)Math.Round((double)WalmartQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.WayfairPrismCaltPercentage = (int)Math.Round((double)WayfairQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.BPMWebPrismCaltPercentage = (int)Math.Round((double)BPMQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.MellowWebPrismCaltPercentage = (int)Math.Round((double)MellowQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.eBayPrismCaltPercentage = (int)Math.Round((double)eBayQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        // getInventoryFeedsItemDTO.HouzzPrismCaltPercentage = (int)Math.Round((double)HouzzQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.HomeDepotPrismCaltPercentage = (int)Math.Round((double)HomeDepotQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.TargetPrismCaltPercentage = (int)Math.Round((double)TargetQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
      }*/
      else if (LocId == zinusTracyId)
      {
        int totalQty = getInventoryFeedsItemDTO.QtyAvailZinusTracy;
        int customRatioQty = 0;
        isTotalZero = false;
        amazonRule = false;
        eBayRule = false;
        walmartRule = false;
        mellowRule = false;
        overstockRule = false;
        wayfairRule = false;
        homeDepotRule = false;
        targetRule = false;
        bpmRule = false;
        //backOrdered = await calculateStageBackOrderSUM(LocId, invParetoListItem.ItemNoId);
        //getInventoryFeedsItemDTO.totalStagePOQtyZinusTracy = backOrdered;
        //if(getInventoryFeedsItemDTO.ItemNoId == 2234)
        //{ Console.WriteLine("Here");}
        backOrdered = getInventoryFeedsItemDTO.totalStagePOQtyZinusTracy;
        if (totalQty - (backOrdered + 15) <= 0)
        {
          getInventoryFeedsItemDTO.ZinusTracyFeedable = false;
          getInventoryFeedsItemDTO.QtyAvailZinusTracy = 0;
          isTotalZero = true;
          goto SkipThisFeedZinusTracy;
        }
        else
        {
          if (newStatusOn == true)
          { totalQty = (int)Math.Floor((double)totalQty * 0.8); }
          else
          {
            totalQty = totalQty - backOrdered;
            if (totalQty <= 60)
            { totalQty = (int)Math.Floor((double)totalQty * 0.8); };
          }

          // Added by Brian Yi on 06/12/2024
          getInventoryFeedsItemDTO.QtyAvailZinusTracy = totalQty;

          if ((discoStatusOn == true) && (totalQty < 10))// For "Disco.SKU" rule added by Brian on 02/17/2023
          {
            discoFeedDone = false;
            if ((invParetoListItem.AmazonOBABC.ToUpper() == "A") && getInventoryFeedsItemDTO.AmazonFeedable)
            {
              getInventoryFeedsItemDTO.AmazonQtyZinusTracy = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedZinusTracy;
            }
            if ((invParetoListItem.WalmartABC.ToUpper() == "A") && getInventoryFeedsItemDTO.WalmartFeedable
              && (discoFeedDone == false))
            {
              getInventoryFeedsItemDTO.WalmartQtyZinusTracy = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedZinusTracy;
            }
            if ((invParetoListItem.WayfairOBABC.ToUpper() == "A") && getInventoryFeedsItemDTO.WalmartFeedable
              && (discoFeedDone == false))
            {
              getInventoryFeedsItemDTO.WayfairQtyZinusTracy = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedZinusTracy;
            }
            if (discoFeedDone == false)
            {
              getInventoryFeedsItemDTO.eBayQtyZinusTracy = totalQty;
              goto SkipThisFeedZinusTracy;
            }
          }// End of new rule; For MainSL
        }

        // For market specific ratio
        // Amazon
        if (getInventoryFeedsItemDTO.AmazonFeedable)
        {
          if (getInventoryFeedsItemDTO.AmazonZinusTracyPercentage > 0)
          {
            amazonRule = true;
            //getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.AmazonQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.AmazonZinusTracyPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.AmazonQtyZinusTracy;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == amazonID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                amazonRule = true;
                // getInventoryFeedsItemDTO.AmazonQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.AmazonQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.AmazonQtyZinusTracy;
              }
            }
          }
        }
        // eBay
        if (getInventoryFeedsItemDTO.eBayFeedable)
        {
          if (getInventoryFeedsItemDTO.eBayZinusTracyPercentage > 0)
          {
            eBayRule = true;
            //getInventoryFeedsItemDTO.eBayQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.eBayQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.eBayZinusTracyPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.eBayQtyZinusTracy;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ebayID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                eBayRule = true;
                //getInventoryFeedsItemDTO.eBayQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.eBayQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.eBayQtyZinusTracy;
              }
            }
          }
        }
        // Overstock
        if (getInventoryFeedsItemDTO.OverstockFeedable)
        {
          if (getInventoryFeedsItemDTO.OverstockZinusTracyPercentage > 0)
          {
            overstockRule = true;
            //getInventoryFeedsItemDTO.overstockQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.OverstockQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.OverstockZinusTracyPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.OverstockQtyZinusTracy;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ostID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                overstockRule = true;
                //getInventoryFeedsItemDTO.OverstockQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.OverstockQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.OverstockQtyZinusTracy;
              }
            }
          }
        }
        // Walmart
        if (getInventoryFeedsItemDTO.WalmartFeedable)
        {
          if (getInventoryFeedsItemDTO.WalmartZinusTracyPercentage > 0)
          {
            walmartRule = true;
            //getInventoryFeedsItemDTO.overstockQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.WalmartQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.WalmartZinusTracyPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.WalmartQtyZinusTracy;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == walmartID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                walmartRule = true;
                // getInventoryFeedsItemDTO.WalmartQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.WalmartQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.WalmartQtyZinusTracy;
              }
            }
          }
        }
        // Wayfair
        if (getInventoryFeedsItemDTO.WayfairFeedable)
        {
          if (getInventoryFeedsItemDTO.WayfairZinusTracyPercentage > 0)
          {
            wayfairRule = true;
            //getInventoryFeedsItemDTO.overstockQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.WayfairQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.WayfairZinusTracyPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.WayfairQtyZinusTracy;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == wayfairID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                wayfairRule = true;
                // getInventoryFeedsItemDTO.WayfairQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.WayfairQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.WayfairQtyZinusTracy;
              }
            }
          }
        }
        // BPM
        if (getInventoryFeedsItemDTO.BPMFeedable)
        {
          if (getInventoryFeedsItemDTO.BPMWebZinusTracyPercentage > 0)
          {
            bpmRule = true;
            //getInventoryFeedsItemDTO.overstockQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.BPMWebZinusTracyPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.BPMWebQtyZinusTracy;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == bpmWebID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                bpmRule = true;
                //getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.BPMWebQtyZinusTracy;
              }
            }
          }
        }
        // Mellow
        if (getInventoryFeedsItemDTO.MellowFeedable)
        {
          if (getInventoryFeedsItemDTO.MellowWebZinusTracyPercentage > 0)
          {
            mellowRule = true;
            //getInventoryFeedsItemDTO.overstockQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.MellowWebZinusTracyPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.MellowWebQtyZinusTracy;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == mellowWebID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                mellowRule = true;
                // getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.MellowWebQtyZinusTracy;
              }
            }
          }
        }
        // Home Depot
        if (getInventoryFeedsItemDTO.HomeDepotFeedable)
        {
          if (getInventoryFeedsItemDTO.HomeDepotZinusTracyPercentage > 0)
          {
            homeDepotRule = true;
            //getInventoryFeedsItemDTO.overstockQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.HomeDepotZinusTracyPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == homeDepotID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                homeDepotRule = true;
                //getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy;
              }
            }
          }
        }
        // Target
        if (getInventoryFeedsItemDTO.TargetFeedable)
        {
          if (getInventoryFeedsItemDTO.TargetZinusTracyPercentage > 0)
          {
            targetRule = true;
            //getInventoryFeedsItemDTO.overstockQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.TargetQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.TargetZinusTracyPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.TargetQtyZinusTracy;
          }
          else
          {
            targetRule = true;
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == targetID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                //getInventoryFeedsItemDTO.TargetQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.TargetQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.TargetQtyZinusTracy;
              }
            }
          }
        }
        totalQty = totalQty - customRatioQty;


        if (getInventoryFeedsItemDTO.AmazonFeedable && (amazonRule == false))
        {
          //getInventoryFeedsItemDTO.AmazonQtyZinusTracy = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.AmazonQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == amazonID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailZinusTracy)
            {
              getInventoryFeedsItemDTO.AmazonQtyZinusTracy = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.AmazonQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.AmazonQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == amazonID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == amazonID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusTracy)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.AmazonQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.AmazonQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.AmazonQtyZinusTracy = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.AmazonQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.AmazonQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.AmazonQtyZinusTracy = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.AmazonQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.OverstockFeedable && (overstockRule == false))
        {
          //getInventoryFeedsItemDTO.OverstockQtyZinusTracy = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.OverstockQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ostID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailZinusTracy)
            {
              getInventoryFeedsItemDTO.OverstockQtyZinusTracy = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.OverstockQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.OverstockQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ostID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ostID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusTracy)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.OverstockQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.OverstockQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.OverstockQtyZinusTracy = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.OverstockQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.OverstockQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.OverstockQtyZinusTracy = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.OverstockQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.WalmartFeedable && (walmartRule == false))
        {
          //getInventoryFeedsItemDTO.WalmartQtyZinusTracy = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.WalmartQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == walmartID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailZinusTracy)
            {
              getInventoryFeedsItemDTO.WalmartQtyZinusTracy = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.WalmartQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.WalmartQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == walmartID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == walmartID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusTracy)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.WalmartQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.WalmartQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.WalmartQtyZinusTracy = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.WalmartQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.WalmartQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.WalmartQtyZinusTracy = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.WalmartQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.WayfairFeedable && (wayfairRule == false))
        {
          //getInventoryFeedsItemDTO.WayfairQtyZinusTracy = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.WayfairQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == wayfairID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailZinusTracy)
            {
              getInventoryFeedsItemDTO.WayfairQtyZinusTracy = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.WayfairQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.WayfairQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == wayfairID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == wayfairID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusTracy)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.WayfairQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.WayfairQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.WayfairQtyZinusTracy = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.WayfairQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.WayfairQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.WayfairQtyZinusTracy = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.WayfairQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.eBayFeedable && (eBayRule == false))
        {
          //getInventoryFeedsItemDTO.eBayQtyZinusTracy = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.eBayQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ebayID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailZinusTracy)
            {
              getInventoryFeedsItemDTO.eBayQtyZinusTracy = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.eBayQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.eBayQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ebayID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ebayID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusTracy)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.eBayQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.eBayQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.eBayQtyZinusTracy = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.eBayQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.eBayQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.eBayQtyZinusTracy = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.eBayQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.BPMFeedable && (bpmRule == false))
        {
          //getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == bpmWebID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailZinusTracy)
            {
              getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == bpmWebID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == bpmWebID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusTracy)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.BPMWebQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.MellowFeedable && (mellowRule == false))
        {
          //getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == mellowWebID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailZinusTracy)
            {
              getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == mellowWebID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == mellowWebID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusTracy)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.MellowWebQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        /*
        if (getInventoryFeedsItemDTO.HouzzFeedable)
        {
          getInventoryFeedsItemDTO.HouzzQtyZinusTracy = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == houzzID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailZinusTracy)
          {
            getInventoryFeedsItemDTO.HouzzQtyZinusTracy = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            getInventoryFeedsItemDTO.HouzzQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == houzzID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == houzzID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusTracy)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  getInventoryFeedsItemDTO.HouzzQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.HouzzQtyZinusTracy = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              getInventoryFeedsItemDTO.HouzzQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            getInventoryFeedsItemDTO.HouzzQtyZinusTracy = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }*/
        if (getInventoryFeedsItemDTO.HomeDepotFeedable && (homeDepotRule == false))
        {
          //getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == homeDepotID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailZinusTracy)
            {
              getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == homeDepotID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == homeDepotID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusTracy)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.TargetFeedable && (targetRule == false))
        {
          //getInventoryFeedsItemDTO.TargetQtyZinusTracy = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.TargetQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == targetID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailZinusTracy)
            {
              getInventoryFeedsItemDTO.TargetQtyZinusTracy = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.TargetQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.TargetQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == targetID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == targetID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusTracy)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.TargetQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.TargetQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.TargetQtyZinusTracy = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.TargetQtyZinusTracy = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.TargetQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.TargetQtyZinusTracy = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.TargetQtyZinusTracy = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
      //getInventoryFeedsItemDTO.WalmartQtyZinusTracy = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyZinusTracy, 5);
      SkipThisFeedZinusTracy:
        int AmazonQty2 = 0;
        int OverstockQty2 = 0;
        int WalmartQty2 = 0;
        int WayfairQty2 = 0;
        int eBayQty2 = 0;
        int BPMQty2 = 0;
        int MellowQty2 = 0;
        //int HouzzQty2 = 0;
        int HomeDepotQty2 = 0;
        int TargetQty2 = 0;
        totalQty = getInventoryFeedsItemDTO.QtyAvailZinusTracy;
        if (isTotalZero == false)
        {
          AmazonQty2 = getInventoryFeedsItemDTO.AmazonQtyZinusTracy;
          OverstockQty2 = getInventoryFeedsItemDTO.OverstockQtyZinusTracy;
          WalmartQty2 = getInventoryFeedsItemDTO.WalmartQtyZinusTracy;
          WayfairQty2 = getInventoryFeedsItemDTO.WayfairQtyZinusTracy;
          eBayQty2 = getInventoryFeedsItemDTO.eBayQtyZinusTracy;
          BPMQty2 = getInventoryFeedsItemDTO.BPMWebQtyZinusTracy;
          MellowQty2 = getInventoryFeedsItemDTO.MellowWebQtyZinusTracy;
          // HouzzQty2 = getInventoryFeedsItemDTO.HouzzQtyZinusTracy;
          HomeDepotQty2 = getInventoryFeedsItemDTO.HomeDepotQtyZinusTracy;
          TargetQty2 = getInventoryFeedsItemDTO.TargetQtyZinusTracy;
          getInventoryFeedsItemDTO.leftOverQtyZinusTracy = totalQty - (AmazonQty2 + OverstockQty2 + WalmartQty2 + WayfairQty2 + eBayQty2 + BPMQty2 + MellowQty2 + HomeDepotQty2 + TargetQty2);
        }
        getInventoryFeedsItemDTO.AmazonZinusTracyPercentage = (int)Math.Round((double)AmazonQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.OverstockZinusTracyPercentage = (int)Math.Round((double)OverstockQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.WalmartZinusTracyPercentage = (int)Math.Round((double)WalmartQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.WayfairZinusTracyPercentage = (int)Math.Round((double)WayfairQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.BPMWebZinusTracyPercentage = (int)Math.Round((double)BPMQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.MellowWebZinusTracyPercentage = (int)Math.Round((double)MellowQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.eBayZinusTracyPercentage = (int)Math.Round((double)eBayQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        // getInventoryFeedsItemDTO.HouzzZinusTracyPercentage = (int)Math.Round((double)HouzzQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.HomeDepotZinusTracyPercentage = (int)Math.Round((double)HomeDepotQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.TargetZinusTracyPercentage = (int)Math.Round((double)TargetQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
      }
      else if (LocId == zinusChsId)
      {
        int totalQty = getInventoryFeedsItemDTO.QtyAvailZinusChs;
        int customRatioQty = 0;
        isTotalZero = false;
        amazonRule = false;
        eBayRule = false;
        walmartRule = false;
        mellowRule = false;
        overstockRule = false;
        wayfairRule = false;
        homeDepotRule = false;
        targetRule = false;
        bpmRule = false;
        //backOrdered = await calculateStageBackOrderSUM(LocId, invParetoListItem.ItemNoId);
        //getInventoryFeedsItemDTO.totalStagePOQtyZinusChs = backOrdered;
        backOrdered = getInventoryFeedsItemDTO.totalStagePOQtyZinusChs;
        if (totalQty - (backOrdered + 15) <= 0)
        {
          getInventoryFeedsItemDTO.ZinusChsFeedable = false;
          getInventoryFeedsItemDTO.QtyAvailZinusChs = 0;
          isTotalZero = true;
          goto SkipThisFeedZinusChs;
        }
        else
        {
          if (newStatusOn == true)
          { totalQty = (int)Math.Floor((double)totalQty * 0.8); }
          else
          {
            totalQty = totalQty - backOrdered;
            if (totalQty <= 60)
            { totalQty = (int)Math.Floor((double)totalQty * 0.8); };
          }

          // Added by Brian Yi on 06/12/2024
          getInventoryFeedsItemDTO.QtyAvailZinusChs = totalQty;

          if ((discoStatusOn == true) && (totalQty < 10))// For "Disco.SKU" rule added by Brian on 02/17/2023
          {
            discoFeedDone = false;
            if ((invParetoListItem.AmazonOBABC.ToUpper() == "A") && getInventoryFeedsItemDTO.AmazonFeedable)
            {
              getInventoryFeedsItemDTO.AmazonQtyZinusChs = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedZinusChs;
            }
            if ((invParetoListItem.WalmartABC.ToUpper() == "A") && getInventoryFeedsItemDTO.WalmartFeedable
              && (discoFeedDone == false))
            {
              getInventoryFeedsItemDTO.WalmartQtyZinusChs = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedZinusChs;
            }
            if ((invParetoListItem.WayfairOBABC.ToUpper() == "A") && getInventoryFeedsItemDTO.WalmartFeedable
              && (discoFeedDone == false))
            {
              getInventoryFeedsItemDTO.WayfairQtyZinusChs = totalQty;
              discoFeedDone = true;
              goto SkipThisFeedZinusChs;
            }
            if (discoFeedDone == false)
            {
              getInventoryFeedsItemDTO.eBayQtyZinusChs = totalQty;
              goto SkipThisFeedZinusChs;
            }
          }// End of new rule; For MainSL
        }

        // For market specific ratio
        // Amazon
        if (getInventoryFeedsItemDTO.AmazonFeedable)
        {
          if (getInventoryFeedsItemDTO.AmazonZinusChsPercentage > 0)
          {
            amazonRule = true;
            //getInventoryFeedsItemDTO.AmazonQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.AmazonQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.AmazonZinusChsPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.AmazonQtyZinusChs;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == amazonID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                amazonRule = true;
                // getInventoryFeedsItemDTO.AmazonQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.AmazonQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.AmazonQtyZinusChs;
              }
            }
          }
        }
        // eBay
        if (getInventoryFeedsItemDTO.eBayFeedable)
        {
          if (getInventoryFeedsItemDTO.eBayZinusChsPercentage > 0)
          {
            eBayRule = true;
            //getInventoryFeedsItemDTO.eBayQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.eBayQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.eBayZinusChsPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.eBayQtyZinusChs;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ebayID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                eBayRule = true;
                //getInventoryFeedsItemDTO.eBayQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.eBayQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.eBayQtyZinusChs;
              }
            }
          }
        }
        // Overstock
        if (getInventoryFeedsItemDTO.OverstockFeedable)
        {
          if (getInventoryFeedsItemDTO.OverstockZinusChsPercentage > 0)
          {
            overstockRule = true;
            //getInventoryFeedsItemDTO.overstockQtyBanc = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.OverstockQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.OverstockZinusChsPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.OverstockQtyZinusChs;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ostID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                overstockRule = true;
                //getInventoryFeedsItemDTO.OverstockQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.OverstockQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.OverstockQtyZinusChs;
              }
            }
          }
        }
        // Walmart
        if (getInventoryFeedsItemDTO.WalmartFeedable)
        {
          if (getInventoryFeedsItemDTO.WalmartZinusChsPercentage > 0)
          {
            walmartRule = true;
            //getInventoryFeedsItemDTO.overstockQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.WalmartQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.WalmartZinusChsPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.WalmartQtyZinusChs;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == walmartID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                walmartRule = true;
                // getInventoryFeedsItemDTO.WalmartQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.WalmartQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.WalmartQtyZinusChs;
              }
            }
          }
        }
        // Wayfair
        if (getInventoryFeedsItemDTO.WayfairFeedable)
        {
          if (getInventoryFeedsItemDTO.WayfairZinusChsPercentage > 0)
          {
            wayfairRule = true;
            //getInventoryFeedsItemDTO.overstockQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.WayfairQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.WayfairZinusChsPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.WayfairQtyZinusChs;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == wayfairID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                wayfairRule = true;
                // getInventoryFeedsItemDTO.WayfairQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.WayfairQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.WayfairQtyZinusChs;
              }
            }
          }
        }
        // BPM
        if (getInventoryFeedsItemDTO.BPMFeedable)
        {
          if (getInventoryFeedsItemDTO.BPMWebZinusChsPercentage > 0)
          {
            bpmRule = true;
            //getInventoryFeedsItemDTO.overstockQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.BPMWebQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.BPMWebZinusChsPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.BPMWebQtyZinusChs;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == bpmWebID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                bpmRule = true;
                //getInventoryFeedsItemDTO.BPMWebQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.BPMWebQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.BPMWebQtyZinusChs;
              }
            }
          }
        }
        // Mellow
        if (getInventoryFeedsItemDTO.MellowFeedable)
        {
          if (getInventoryFeedsItemDTO.MellowWebZinusChsPercentage > 0)
          {
            mellowRule = true;
            //getInventoryFeedsItemDTO.overstockQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.MellowWebQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.MellowWebZinusChsPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.MellowWebQtyZinusChs;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == mellowWebID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                mellowRule = true;
                // getInventoryFeedsItemDTO.MellowWebQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.MellowWebQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.MellowWebQtyZinusChs;
              }
            }
          }
        }
        // Home Depot
        if (getInventoryFeedsItemDTO.HomeDepotFeedable)
        {
          if (getInventoryFeedsItemDTO.HomeDepotZinusChsPercentage > 0)
          {
            homeDepotRule = true;
            //getInventoryFeedsItemDTO.overstockQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.HomeDepotZinusChsPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.HomeDepotQtyZinusChs;
          }
          else
          {
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == homeDepotID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                homeDepotRule = true;
                //getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.HomeDepotQtyZinusChs;
              }
            }
          }
        }
        // Target
        if (getInventoryFeedsItemDTO.TargetFeedable)
        {
          if (getInventoryFeedsItemDTO.TargetZinusChsPercentage > 0)
          {
            targetRule = true;
            //getInventoryFeedsItemDTO.overstockQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
            getInventoryFeedsItemDTO.TargetQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)getInventoryFeedsItemDTO.TargetZinusChsPercentage / 100.0));
            customRatioQty += getInventoryFeedsItemDTO.TargetQtyZinusChs;
          }
          else
          {
            targetRule = true;
            tmpMarketRule = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == targetID);
            if (tmpMarketRule != null)
            {
              if (tmpMarketRule.CustomFeedRatio > 0)
              {
                //getInventoryFeedsItemDTO.TargetQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                getInventoryFeedsItemDTO.TargetQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)tmpMarketRule.CustomFeedRatio / 100.0));
                customRatioQty += getInventoryFeedsItemDTO.TargetQtyZinusChs;
              }
            }
          }
        }
        totalQty = totalQty - customRatioQty;


        if (getInventoryFeedsItemDTO.AmazonFeedable && (amazonRule == false))
        {
          //getInventoryFeedsItemDTO.AmazonQtyZinusChs = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.AmazonQtyZinusChs = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == amazonID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailZinusChs)
            {
              getInventoryFeedsItemDTO.AmazonQtyZinusChs = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.AmazonQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.AmazonQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == amazonID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == amazonID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusChs)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.AmazonQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.AmazonQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.AmazonQtyZinusChs = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.AmazonQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.AmazonQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.AmazonQtyZinusChs = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.AmazonQtyZinusChs = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, amazonID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.OverstockFeedable && (overstockRule == false))
        {
          //getInventoryFeedsItemDTO.OverstockQtyZinusChs = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.OverstockQtyZinusChs = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ostID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailZinusChs)
            {
              getInventoryFeedsItemDTO.OverstockQtyZinusChs = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.OverstockQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.OverstockQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ostID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ostID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusChs)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.OverstockQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.OverstockQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.OverstockQtyZinusChs = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.OverstockQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.OverstockQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.OverstockQtyZinusChs = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.OverstockQtyZinusChs = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.WalmartFeedable && (walmartRule == false))
        {
          //getInventoryFeedsItemDTO.WalmartQtyZinusChs = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.WalmartQtyZinusChs = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == walmartID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailZinusChs)
            {
              getInventoryFeedsItemDTO.WalmartQtyZinusChs = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.WalmartQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.WalmartQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == walmartID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == walmartID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusChs)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.WalmartQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.WalmartQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.WalmartQtyZinusChs = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.WalmartQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.WalmartQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.WalmartQtyZinusChs = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.WalmartQtyZinusChs = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, walmartID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.WayfairFeedable && (wayfairRule == false))
        {
          //getInventoryFeedsItemDTO.WayfairQtyZinusChs = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.WayfairQtyZinusChs = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == wayfairID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailZinusChs)
            {
              getInventoryFeedsItemDTO.WayfairQtyZinusChs = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.WayfairQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.WayfairQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == wayfairID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == wayfairID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusChs)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.WayfairQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.WayfairQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.WayfairQtyZinusChs = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.WayfairQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.WayfairQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.WayfairQtyZinusChs = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.WayfairQtyZinusChs = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, wayfairID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.eBayFeedable && (eBayRule == false))
        {
          //getInventoryFeedsItemDTO.eBayQtyZinusChs = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.eBayQtyZinusChs = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == ebayID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailZinusChs)
            {
              getInventoryFeedsItemDTO.eBayQtyZinusChs = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.eBayQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.eBayQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ebayID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == ebayID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusChs)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.eBayQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.eBayQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.eBayQtyZinusChs = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.eBayQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.eBayQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.eBayQtyZinusChs = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.eBayQtyZinusChs = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.BPMFeedable && (bpmRule == false))
        {
          //getInventoryFeedsItemDTO.BPMWebQtyZinusChs = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.BPMWebQtyZinusChs = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == bpmWebID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailZinusChs)
            {
              getInventoryFeedsItemDTO.BPMWebQtyZinusChs = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.BPMWebQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.BPMWebQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == bpmWebID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == bpmWebID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusChs)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.BPMWebQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.BPMWebQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.BPMWebQtyZinusChs = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.BPMWebQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.BPMWebQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.BPMWebQtyZinusChs = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.BPMWebQtyZinusChs = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.MellowFeedable && (mellowRule == false))
        {
          //getInventoryFeedsItemDTO.MellowWebQtyZinusChs = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.MellowWebQtyZinusChs = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == mellowWebID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailZinusChs)
            {
              getInventoryFeedsItemDTO.MellowWebQtyZinusChs = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.MellowWebQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.MellowWebQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == mellowWebID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == mellowWebID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusChs)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.MellowWebQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.MellowWebQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.MellowWebQtyZinusChs = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.MellowWebQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.MellowWebQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.MellowWebQtyZinusChs = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.MellowWebQtyZinusChs = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        /*
        if (getInventoryFeedsItemDTO.HouzzFeedable)
        {
          getInventoryFeedsItemDTO.HouzzQtyZinusChs = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == houzzID);
          if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailZinusChs)
          {
            getInventoryFeedsItemDTO.HouzzQtyZinusChs = 0;
          }
          if (tmpInvFeedRule2.CustomFeedRatio > 0)
          {
            getInventoryFeedsItemDTO.HouzzQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == houzzID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == houzzID);
            if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
            {
              if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusChs)
              {
                if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                {
                  getInventoryFeedsItemDTO.HouzzQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                }
              }
              else
              {
                getInventoryFeedsItemDTO.HouzzQtyZinusChs = 0;
              }
            }
            else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
            {
              getInventoryFeedsItemDTO.HouzzQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
            }
          }
          else
          {
            getInventoryFeedsItemDTO.HouzzQtyZinusChs = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }*/
        if (getInventoryFeedsItemDTO.HomeDepotFeedable && (homeDepotRule == false))
        {
          //getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == homeDepotID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailZinusChs)
            {
              getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == homeDepotID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == homeDepotID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusChs)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.HomeDepotQtyZinusChs = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
        if (getInventoryFeedsItemDTO.TargetFeedable && (targetRule == false))
        {
          //getInventoryFeedsItemDTO.TargetQtyZinusChs = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          getInventoryFeedsItemDTO.TargetQtyZinusChs = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          InvFeedsRule tmpInvFeedRule2 = invFeedsRules.FindLast((InvFeedsRule i) => i.CustomerId == targetID);
          if (tmpInvFeedRule2 != null)
          {
            if (tmpInvFeedRule2.ZeroOutAt > getInventoryFeedsItemDTO.QtyAvailZinusChs)
            {
              getInventoryFeedsItemDTO.TargetQtyZinusChs = 0;
            }
            if (tmpInvFeedRule2.CustomFeedRatio > 0)
            {
              //getInventoryFeedsItemDTO.TargetQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
              getInventoryFeedsItemDTO.TargetQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)tmpInvFeedRule2.CustomFeedRatio.Value / 100.0));
            }
          }
          if (invFeedsRuleSkumkts.Count > 0 && invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == targetID) != null)
          {
            InvFeedsRuleSkumkt invFeedsRuleSkumkt2 = invFeedsRuleSkumkts.FindLast((InvFeedsRuleSkumkt i) => i.CustomerId == targetID);
            if (CheckSKURulePeriod(invFeedsRuleSkumkt2))
            {
              if (invFeedsRuleSkumkt2.CustomRuleForRatioZeroOut == true)
              {
                if (invFeedsRuleSkumkt2.CustomZeroOutAt < getInventoryFeedsItemDTO.QtyAvailZinusChs)
                {
                  if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
                  {
                    //getInventoryFeedsItemDTO.TargetQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                    getInventoryFeedsItemDTO.TargetQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                  }
                }
                else
                {
                  getInventoryFeedsItemDTO.TargetQtyZinusChs = 0;
                }
              }
              else if (invFeedsRuleSkumkt2.CustomFixedPercentage.HasValue && invFeedsRuleSkumkt2.CustomFixedPercentage > 0)
              {
                //getInventoryFeedsItemDTO.TargetQtyZinusChs = (int)Math.Floor((double)totalQty * ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
                getInventoryFeedsItemDTO.TargetQtyZinusChs = await OverflowQtyPreventor((double)totalQty, ((double)invFeedsRuleSkumkt2.CustomFixedPercentage.Value / 100.0));
              }
            }
          }
          else
          {
            //getInventoryFeedsItemDTO.TargetQtyZinusChs = (int)Math.Floor((double)totalQty * calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
            getInventoryFeedsItemDTO.TargetQtyZinusChs = await OverflowQtyPreventor((double)totalQty, calMarketRatioByParetoRule(2, smallMarketsCnt, OthersID, inventoryConfig, invParetoListItem, getInventoryFeedsItemDTO));
          }
        }
      //getInventoryFeedsItemDTO.WalmartQtyZinusChs = checkWalmartMinQtyRule(getInventoryFeedsItemDTO.WalmartQtyZinusChs, 5);
      SkipThisFeedZinusChs:
        int AmazonQty2 = 0;
        int OverstockQty2 = 0;
        int WalmartQty2 = 0;
        int WayfairQty2 = 0;
        int eBayQty2 = 0;
        int BPMQty2 = 0;
        int MellowQty2 = 0;
        //int HouzzQty2 = 0;
        int HomeDepotQty2 = 0;
        int TargetQty2 = 0;
        totalQty = getInventoryFeedsItemDTO.QtyAvailZinusChs;
        if (isTotalZero == false)
        {
          AmazonQty2 = getInventoryFeedsItemDTO.AmazonQtyZinusChs;
          OverstockQty2 = getInventoryFeedsItemDTO.OverstockQtyZinusChs;
          WalmartQty2 = getInventoryFeedsItemDTO.WalmartQtyZinusChs;
          WayfairQty2 = getInventoryFeedsItemDTO.WayfairQtyZinusChs;
          eBayQty2 = getInventoryFeedsItemDTO.eBayQtyZinusChs;
          BPMQty2 = getInventoryFeedsItemDTO.BPMWebQtyZinusChs;
          MellowQty2 = getInventoryFeedsItemDTO.MellowWebQtyZinusChs;
          // HouzzQty2 = getInventoryFeedsItemDTO.HouzzQtyZinusChs;
          HomeDepotQty2 = getInventoryFeedsItemDTO.HomeDepotQtyZinusChs;
          TargetQty2 = getInventoryFeedsItemDTO.TargetQtyZinusChs;
          getInventoryFeedsItemDTO.leftOverQtyZinusChs = totalQty - (AmazonQty2 + OverstockQty2 + WalmartQty2 + WayfairQty2 + eBayQty2 + BPMQty2 + MellowQty2 + HomeDepotQty2 + TargetQty2);
        }
        getInventoryFeedsItemDTO.AmazonZinusChsPercentage = (int)Math.Round((double)AmazonQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.OverstockZinusChsPercentage = (int)Math.Round((double)OverstockQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.WalmartZinusChsPercentage = (int)Math.Round((double)WalmartQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.WayfairZinusChsPercentage = (int)Math.Round((double)WayfairQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.BPMWebZinusChsPercentage = (int)Math.Round((double)BPMQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.MellowWebZinusChsPercentage = (int)Math.Round((double)MellowQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.eBayZinusChsPercentage = (int)Math.Round((double)eBayQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        // getInventoryFeedsItemDTO.HouzzZinusChsPercentage = (int)Math.Round((double)HouzzQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.HomeDepotZinusChsPercentage = (int)Math.Round((double)HomeDepotQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
        getInventoryFeedsItemDTO.TargetZinusChsPercentage = (int)Math.Round((double)TargetQty2 / (double)totalQty * 100.0, 0, MidpointRounding.AwayFromZero);
      }
      else
      {
        Console.WriteLine("Should NOT Come here!!!");
      }

      // Added by Brian Yi for 'New SKU/Status Rule' on 02/15/2023
      if (newStatusOn == true)
      {
        getInventoryFeedsItemDTO.AppliedFeedingRuleNoMainsl = 10;
        //getInventoryFeedsItemDTO.AppliedFeedingRuleNoSWCAFT = 10;
        //getInventoryFeedsItemDTO.AppliedFeedingRuleNoBanc = 10;
        //getInventoryFeedsItemDTO.AppliedFeedingRuleNoBasc = 10;
        //getInventoryFeedsItemDTO.AppliedFeedingRuleNoPrismCast = 10;
        //getInventoryFeedsItemDTO.AppliedFeedingRuleNoPrismCalt = 10;
        getInventoryFeedsItemDTO.AppliedFeedingRuleNoZinusTracy = 10;
        getInventoryFeedsItemDTO.AppliedFeedingRuleNoZinusChs = 10;
      }
      // Added by Brian Yi for 'Disco. SKU/Status Rule' on 02/17/2023
      if (discoStatusOn == true)
      {
        getInventoryFeedsItemDTO.AppliedFeedingRuleNoMainsl = 11;
        //getInventoryFeedsItemDTO.AppliedFeedingRuleNoSWCAFT = 11;
        //getInventoryFeedsItemDTO.AppliedFeedingRuleNoBanc = 11;
        //getInventoryFeedsItemDTO.AppliedFeedingRuleNoBasc = 11;
        //getInventoryFeedsItemDTO.AppliedFeedingRuleNoPrismCast = 11;
        //getInventoryFeedsItemDTO.AppliedFeedingRuleNoPrismCalt = 11;
        getInventoryFeedsItemDTO.AppliedFeedingRuleNoZinusTracy = 11;
        getInventoryFeedsItemDTO.AppliedFeedingRuleNoZinusChs = 11;
      }

      getInventoryFeedsItemDTO.AmazonRule = amazonRule;
      getInventoryFeedsItemDTO.eBayRule = eBayRule;
      getInventoryFeedsItemDTO.WalmartRule = walmartRule;
      getInventoryFeedsItemDTO.WayfairRule = wayfairRule;
      getInventoryFeedsItemDTO.BPMRule = bpmRule;
      getInventoryFeedsItemDTO.MellowRule = mellowRule;
      getInventoryFeedsItemDTO.OverstockRule = overstockRule;
      getInventoryFeedsItemDTO.HomeDepotRule = homeDepotRule;
      getInventoryFeedsItemDTO.TargetRule = targetRule;
      return getInventoryFeedsItemDTO;
    }


    // Walmart Minimum Qty. rule
    // By Brian Yi on 04/??/2022
    public int checkWalmartMinQtyRule(int qty, int bufferSize)
    {
      if (qty >= 10)
      {
        return qty;
      }

      if (qty < 10 && qty >= bufferSize)
      {
        return 10;
      }
      if (qty < bufferSize)
      {
        return 0;
      }
      return qty;
    }

    // Overstock Minimum Qty. rule
    // By Brian Yi on 02/26/2024
    public int checkOverstockMinQtyRule(int qty, int bufferSize)
    {
      if (qty >= 15)
      {
        return qty;
      }

      if (qty < 15 && qty >= bufferSize)
      {
        return 15;
      }
      if (qty < bufferSize)
      {
        return 0;
      }
      return qty;
    }



    // Calculate Pareto Rule
    // By Brian Yi on 05/??/2022
    // Modified by Brian on 09/30/2022

    public double calMarketRatioByParetoRule(int calMethod, int smallMarketsCnt, int marketId, InventoryConfig inventoryConfig, InvSalesParetoRuleListItemDTO invParetoListItem, GetInventoryFeedsItemDTO getInventoryFeedsItemDTO)
    {
      // Added by Brian on 02/15/2023 for "New Status" rule
      bool newStatusOn = (bool)inventoryConfig.IsActivatedNewStatusRule;
      // Added by Brian on 02/15/2023 for "Disco Status" rule
      bool discoStatusOn = (bool)inventoryConfig.IsActivatedDiscoRule;

      double result = 0.0;
      double newStatusRatio = 0.25; // Added by Brian on 02/15/2023 for "New Status" rule
      double newStatusRestRatio = 1.0; // Added by Brian on 02/15/2023 for "New Status" rule
      double discoRatio = 0.9; // Added by Brian on 02/15/2023 for "Disco Status" rule
      double abcA = 0.8;
      double abcB = 0.1;
      double abcC = 0.1;
      double smallMarkets = 1.0 * smallMarketsCnt; // <- HomeDepot, Target, BPM Web, Mellow Web, Houzz; Change later for live
      double walmartTopSeller = (double)inventoryConfig.WalmartTopSellersDistributionRatio / 100 - 0.05;
      double walmartTopSellerRestOf = 1 - (double)inventoryConfig.WalmartTopSellersDistributionRatio / 100 - 0.05;
      //if (getInventoryFeedsItemDTO.AppliedFeedingRuleNoBanc != 9) { walmartTopSellerRestOf = 1.0; }
      //if (getInventoryFeedsItemDTO.AppliedFeedingRuleNoBasc != 9) { walmartTopSellerRestOf = 1.0; }
      //if (getInventoryFeedsItemDTO.AppliedFeedingRuleNoMainsl != 9) { walmartTopSellerRestOf = 1.0; }
      //if (getInventoryFeedsItemDTO.AppliedFeedingRuleNoSWCAFT != 9) { walmartTopSellerRestOf = 1.0; }

      //
      if (invParetoListItem == null) return 0.0;
      if ((newStatusOn == true) && (getInventoryFeedsItemDTO.QtyAvailCGInv > 0)) // "New Status" rule; Added by Brian on 02/15/2023
      {
        newStatusRestRatio = 1 - newStatusRatio;
      }
      if ((discoStatusOn == true) && (getInventoryFeedsItemDTO.ItemStatusId == 4))
      {
        return discoRatio;
      }
      switch (marketId)
      {
        case 5:
          if (invParetoListItem.AmazonOBWOS > 5m)
          {
            result = 0.1;
          }
          else if (getInventoryFeedsItemDTO.AppliedFeedingRuleNoBanc == 9 || getInventoryFeedsItemDTO.AppliedFeedingRuleNoBasc == 9 ||
            getInventoryFeedsItemDTO.AppliedFeedingRuleNoMainsl == 9) // || getInventoryFeedsItemDTO.AppliedFeedingRuleNoSWCAFT == 9
          {
            if (invParetoListItem.AmazonOBABC.ToUpper() == "A")
            {
              result = walmartTopSellerRestOf * abcA / (double)(invParetoListItem.countA - 1);
              getInventoryFeedsItemDTO.countParetoA++;
              getInventoryFeedsItemDTO.paretoAqty = -1;
            }
            else if (invParetoListItem.AmazonOBABC.ToUpper() == "B")
            {
              result = walmartTopSellerRestOf * abcB / (double)invParetoListItem.countB;
              getInventoryFeedsItemDTO.countParetoB++;
              getInventoryFeedsItemDTO.paretoBqty = -1;
            }
            else if (invParetoListItem.AmazonOBABC.ToUpper() == "C")
            {
              result = walmartTopSellerRestOf * abcC / (double)invParetoListItem.countC;
              getInventoryFeedsItemDTO.countParetoC++;
            }
          }
          else if (invParetoListItem.AmazonOBABC.ToUpper() == "A")
          {
            result = abcA / (double)invParetoListItem.countA;
            getInventoryFeedsItemDTO.countParetoA++;
            getInventoryFeedsItemDTO.paretoAqty = -1;
          }
          else if (invParetoListItem.AmazonOBABC.ToUpper() == "B")
          {
            result = abcB / (double)invParetoListItem.countB;
            getInventoryFeedsItemDTO.countParetoB++;
            getInventoryFeedsItemDTO.paretoBqty = -1;
          }
          else if (invParetoListItem.AmazonOBABC.ToUpper() == "C")
          {
            result = abcC / (double)invParetoListItem.countC;
            getInventoryFeedsItemDTO.countParetoC++;
          }
          break;
        case 26:
          if (getInventoryFeedsItemDTO.AppliedFeedingRuleNoBanc == 9 || getInventoryFeedsItemDTO.AppliedFeedingRuleNoBasc == 9 ||
            getInventoryFeedsItemDTO.AppliedFeedingRuleNoMainsl == 9)//||
                                                                     //getInventoryFeedsItemDTO.AppliedFeedingRuleNoPrismCast == 9 || getInventoryFeedsItemDTO.AppliedFeedingRuleNoPrismCalt == 9) // || getInventoryFeedsItemDTO.AppliedFeedingRuleNoSWCAFT == 9
          {
            result = walmartTopSeller;
          }
          else if (invParetoListItem.WalmartABC.ToUpper() == "A")
          {
            result = abcA / (double)invParetoListItem.countA;
            getInventoryFeedsItemDTO.countParetoA++;
            getInventoryFeedsItemDTO.paretoAqty = -1;
          }
          else if (invParetoListItem.WalmartABC.ToUpper() == "B")
          {
            result = abcB / (double)invParetoListItem.countB;
            getInventoryFeedsItemDTO.countParetoB++;
            getInventoryFeedsItemDTO.paretoBqty = -1;
          }
          else if (invParetoListItem.WalmartABC.ToUpper() == "C")
          {
            result = abcC / (double)invParetoListItem.countC;
            getInventoryFeedsItemDTO.countParetoC++;
          }
          break;
        case 29:
          if (invParetoListItem.WayfairOBWOS > 30m)
          {
            result = 0.1;
          }
          else if (getInventoryFeedsItemDTO.AppliedFeedingRuleNoBanc == 9 || getInventoryFeedsItemDTO.AppliedFeedingRuleNoBasc == 9 ||
            getInventoryFeedsItemDTO.AppliedFeedingRuleNoMainsl == 9)// ||
                                                                     //getInventoryFeedsItemDTO.AppliedFeedingRuleNoPrismCast == 9 || getInventoryFeedsItemDTO.AppliedFeedingRuleNoPrismCalt == 9) // || getInventoryFeedsItemDTO.AppliedFeedingRuleNoSWCAFT == 9 
          {

            if (invParetoListItem.WayfairOBABC.ToUpper() == "A")
            {
              result = walmartTopSellerRestOf * abcA / (double)(invParetoListItem.countA); //(double)(invParetoListItem.countA - 1);
              getInventoryFeedsItemDTO.countParetoA++;
              getInventoryFeedsItemDTO.paretoAqty = -1;

            }
            else if (invParetoListItem.WayfairOBABC.ToUpper() == "B")
            {
              result = walmartTopSellerRestOf * abcB / (double)invParetoListItem.countB;
              getInventoryFeedsItemDTO.countParetoB++;
              getInventoryFeedsItemDTO.paretoBqty = -1;
            }
            else if (invParetoListItem.WayfairOBABC.ToUpper() == "C")
            {
              result = walmartTopSellerRestOf * abcC / (double)invParetoListItem.countC;
              getInventoryFeedsItemDTO.countParetoC++;
            }
          }
          else if (invParetoListItem.WayfairOBABC.ToUpper() == "A")
          {
            if ((newStatusOn == true) && (getInventoryFeedsItemDTO.QtyAvailCGInv > 0)) // "New Status" rule; Added by Brian on 02/15/2023
            {
              result = newStatusRatio;
            }
            else
            {
              result = abcA / (double)invParetoListItem.countA;
              getInventoryFeedsItemDTO.countParetoA++;
              getInventoryFeedsItemDTO.paretoAqty = -1;
            }
          }
          else if (invParetoListItem.WayfairOBABC.ToUpper() == "B")
          {
            if ((newStatusOn == true) && (getInventoryFeedsItemDTO.QtyAvailCGInv > 0)) // "New Status" rule; Added by Brian on 02/15/2023
            {
              result = newStatusRatio;
            }
            else
            {
              result = abcB / (double)invParetoListItem.countB;
              getInventoryFeedsItemDTO.countParetoB++;
              getInventoryFeedsItemDTO.paretoBqty = -1;
            }
          }
          else if (invParetoListItem.WayfairOBABC.ToUpper() == "C")
          {
            if ((newStatusOn == true) && (getInventoryFeedsItemDTO.QtyAvailCGInv > 0)) // "New Status" rule; Added by Brian on 02/15/2023
            {
              result = newStatusRatio;
            }
            else
            {
              result = abcC / (double)invParetoListItem.countC;
              getInventoryFeedsItemDTO.countParetoC++;
            }
          }
          break;
        default:
          if (getInventoryFeedsItemDTO.AppliedFeedingRuleNoBanc == 9 || getInventoryFeedsItemDTO.AppliedFeedingRuleNoBasc == 9 ||
            getInventoryFeedsItemDTO.AppliedFeedingRuleNoMainsl == 9)//||
                                                                     //getInventoryFeedsItemDTO.AppliedFeedingRuleNoPrismCast == 9 || getInventoryFeedsItemDTO.AppliedFeedingRuleNoPrismCalt == 9) // || getInventoryFeedsItemDTO.AppliedFeedingRuleNoSWCAFT == 9
          {
            if (invParetoListItem.OthersABC.ToUpper() == "A")
            {
              result = walmartTopSellerRestOf * abcA / (double)(invParetoListItem.countA - 1) / smallMarkets;
              getInventoryFeedsItemDTO.countParetoA++;
              getInventoryFeedsItemDTO.paretoAqty = -1;
            }
            else if (invParetoListItem.OthersABC.ToUpper() == "B")
            {
              result = walmartTopSellerRestOf * abcB / (double)invParetoListItem.countB / smallMarkets;
              getInventoryFeedsItemDTO.countParetoB++;
              getInventoryFeedsItemDTO.paretoBqty = -1;
            }
            else if (invParetoListItem.OthersABC.ToUpper() == "C")
            {
              result = walmartTopSellerRestOf * abcC / (double)invParetoListItem.countC / smallMarkets;
              getInventoryFeedsItemDTO.countParetoC++;
            }
          }
          else if (invParetoListItem.OthersABC.ToUpper() == "A")
          {
            result = abcA / (double)invParetoListItem.countA / smallMarkets;
            getInventoryFeedsItemDTO.countParetoA++;
            getInventoryFeedsItemDTO.paretoAqty = -1;
          }
          else if (invParetoListItem.OthersABC.ToUpper() == "B")
          {
            result = abcB / (double)invParetoListItem.countB / smallMarkets;
            getInventoryFeedsItemDTO.countParetoB++;
            getInventoryFeedsItemDTO.paretoBqty = -1;
          }
          else if (invParetoListItem.OthersABC.ToUpper() == "C")
          {
            result = abcC / (double)invParetoListItem.countC / smallMarkets;
            getInventoryFeedsItemDTO.countParetoC++;
          }
          break;
      }
      result = newStatusRestRatio * result;// For "New Status" rule
      switch (calMethod)
      {
        case 0:
          result = Math.Round(result, 2, MidpointRounding.AwayFromZero);
          break;
        case 1:
          result = Math.Round(result, 2, MidpointRounding.AwayFromZero);
          break;
        case 2:
          result = Math.Round(result, 2, MidpointRounding.AwayFromZero);
          break;
      }
      if (result > 1)
      { Console.WriteLine("Should not come!"); }
      return result;
    }



    public int checkWalmartTopSellers(int itemNoId, List<ItemSoldQty> wmtTopSellers)
    {
      int result = wmtTopSellers.FindIndex((ItemSoldQty i) => i.ItemNoId == itemNoId);
      if (result >= 0)
      {
        return 9;
      }
      return 1;
    }

    public async Task<int> calculateStageBackOrderSUM(int locId, int leadTime, int itemNoId)
    {
      DateTime today = DateTime.Now;
      //DateTime startDate = today.AddDays(-1);
      DateTime endDate = today.AddDays(leadTime + 1);

      //if (itemNoId == 1613)
      //{ Console.Write("Here!"); }
      //List<StagePO> result = (from so in _kc.SoDs
      //             group so by so.ItemNoId into si
      //             join st in _kc.SoTs on si.FirstOrDefault().SoTId equals st.SoTId
      //             join sb in _kc.SodBols on si.FirstOrDefault().SoDId equals sb.SoDId
      //             where st.CustomerId == 1 && si.FirstOrDefault().ItemNoId == itemNoId && si.FirstOrDefault().ShipFromWhId == locId && si.FirstOrDefault().ExpShipDate > startDate && si.FirstOrDefault().ExpShipDate < endDate && si.FirstOrDefault().AcptStatusId == 1 
      //              && si.FirstOrDefault().SoStatusNsId != 7 && si.FirstOrDefault().QtyShipped == 0 && (sb.NsSyncFail == null || sb.NsSyncFail == 0)
      //             select new StagePO
      //             {
      //               LocId = locId,
      //               TotalQtyOrdered = si.Sum((SoD s) => s.QtyOrdered),
      //               ItemNoId = itemNoId
      //             }).ToList();
      /*
      StagePO result = (from so in _kc.SoDs
                              join st in _kc.SoTs on so.SoTId equals st.SoTId
                              select new { st, so} into sto
                              join sb in _kc.SodBols on sto.so.SoDId equals sb.SoDId
                              select new { sto, sb} into stb
                              where stb.sto.st.CustomerId == 1 && stb.sto.so.ItemNoId == itemNoId && stb.sto.so.ShipFromWhId == locId && stb.sto.so.ExpShipDate > startDate && stb.sto.so.ExpShipDate < endDate && stb.sto.so.AcptStatusId == 1
                               && stb.sto.so.SoStatusNsId != 7 && stb.sto.so.QtyShipped == 0 && (stb.sb.NsSyncFail == null || stb.sb.NsSyncFail == 0)
                              group stb by stb.sto.so.ItemNoId into si
                              select new StagePO
                              {
                                LocId = locId,
                                TotalQtyOrdered = si.Sum(x => x.sto.so.QtyOrdered),// si.Sum((SoD s) => s.QtyOrdered), //si.Sum((SoD s) => s.QtyOrdered),
                                ItemNoId = itemNoId
                              }).FirstOrDefault();*/
      /*
      List<StagePO> result02 = (from so in _kc.SoDs
                        join st in _kc.SoTs on so.SoTId equals st.SoTId into sto
                        from sto2 in sto.DefaultIfEmpty()
                        join sb in _kc.SodBols on sto2.SoDs.FirstOrDefault().SoDId equals sb.SoDId into stb
                        where so.SoT.CustomerId == 1 && so.ItemNoId == itemNoId && so.ShipFromWhId == locId && so.ExpShipDate > startDate && so.ExpShipDate < endDate && so.AcptStatusId == 1
                         && so.SoStatusNsId != 7 && so.QtyShipped == 0 && (stb.FirstOrDefault().NsSyncFail == null || stb.FirstOrDefault().NsSyncFail == 0)
                        group stb by so.ItemNoId into si
                        select new StagePO
                        {
                          LocId = locId,
                          TotalQtyOrdered = si.Sum(x => x.FirstOrDefault().QtyOrdered),// si.Sum((SoD s) => s.QtyOrdered), //si.Sum((SoD s) => s.QtyOrdered),
                          ItemNoId = itemNoId
                        }).ToList();*/
      /*      List<StagePO> tmpResult = await _kc.SoDs
              .Include(s => s.SoT)
              .Include(s => s.SodBols)
              //.Join(_kc.SoTs, s => s.SoTId, st => st.SoTId, (s, st) => new { s, st})
              //.Join(_kc.SodBols, s => s.s.SoDId, sb => sb.SoDId, (s, sb) => new { s, sb})
              .Where(s => s.SoT.CustomerId == 1 || s.SoT.CustomerId == 2)
              .Where(s => s.ItemNoId == itemNoId && s.ShipFromWhId == locId && (s.ShipWindowStart < endDate && s.ShipWindowStart > startDate) && s.AcptStatusId == 1
                               && s.SoStatusNsId != 7 && s.QtyShipped == 0 && (s.SodBols.FirstOrDefault().NsSyncFail == null || s.SodBols.FirstOrDefault().NsSyncFail == 0))
              .GroupBy(s => s.ItemNoId)
              .Select(g => new StagePO
              {
                LocId = locId,
                TotalQtyOrdered = g.Sum(so => (int)so.QtyBackOrdered),
                ItemNoId = itemNoId
              }).ToListAsync();*/

      /*   List<StagePO> tmpResult = await _kc.SoDs
     .Include(s => s.SoT)
     .Include(s => s.SodBols)
     //.Join(_kc.SoTs, s => s.SoTId, st => st.SoTId, (s, st) => new { s, st})
     //.Join(_kc.SodBols, s => s.s.SoDId, sb => sb.SoDId, (s, sb) => new { s, sb})
     .Where(s => s.SoT.CustomerId == 1 || s.SoT.CustomerId == 2)
     .Where(s => s.ItemNoId == itemNoId && s.ShipFromWhId == locId && (s.ShipWindowEnd < endDate) && s.AcptStatusId == 1
                      && s.SoStatusNsId != 7 && s.QtyShipped == 0 && (s.SodBols.FirstOrDefault().NsSyncFail == null || s.SodBols.FirstOrDefault().NsSyncFail == 0))
     .Where(s => s.QtyBackOrdered > 0)
     .GroupBy(s => s.ItemNoId)
     .Select(g => new StagePO
     {
       LocId = locId,
       TotalQtyOrdered = g.Sum(so => (int)so.QtyBackOrdered),
       ItemNoId = itemNoId
     }).ToListAsync();*/


      var tmpResult = _kc.SoDs
  .Include(s => s.SoT)
  .Include(s => s.SodBols)
  .Where(s => s.SoT.CustomerId == 1 || s.SoT.CustomerId == 2)
  .Where(s => s.ItemNoId == itemNoId && s.ShipFromWhId == locId && (s.ShipWindowEnd < endDate) && s.AcptStatusId == 1
                   && s.SoStatusNsId != 7 && s.QtyShipped == 0 && (s.SodBols.FirstOrDefault().NsSyncFail == null || s.SodBols.FirstOrDefault().NsSyncFail == 0))
  //.Where(s => s.QtyBackOrdered > 0)
  .GroupBy(s => s.ItemNoId)
  .Select(s => s.Sum(so => (int)so.QtyBackOrdered)).FirstOrDefault();
      /*

            List<StagePO> tmpResult = await _kc.SoDs
      .Include(s => s.SoT)
      .Include(s => s.SodBols)
      //.Join(_kc.SoTs, s => s.SoTId, st => st.SoTId, (s, st) => new { s, st})
      //.Join(_kc.SodBols, s => s.s.SoDId, sb => sb.SoDId, (s, sb) => new { s, sb})
      .Where(s => s.SoT.CustomerId == 1 || s.SoT.CustomerId == 2)
      .Where(s => s.ItemNoId == itemNoId && s.ShipFromWhId == locId && (s.ShipWindowStart < endDate && s.ShipWindowStart > startDate) && s.AcptStatusId == 1
                   && s.SoStatusNsId != 7 && s.QtyShipped == 0 && (s.SodBols.FirstOrDefault().NsSyncFail == null || s.SodBols.FirstOrDefault().NsSyncFail == 0))
      .Where(s => s.QtyBackOrdered > 0)
      //.GroupBy(s => s.ItemNoId)
      .Select(g => new StagePO
      {
        LocId = locId,
        TotalQtyOrdered = (int)g.QtyBackOrdered,
        ItemNoId = itemNoId
      }).ToListAsync();*/

      //List<StagePO> tmpResult02 = new List<StagePO>();

      //Here here
      //var tmpVarResult;
      return (int)tmpResult;
      /*
      if (tmpResult.Count >= 1) {

        var tmpVarResult = tmpResult
        .GroupBy(x => x.ItemNoId)
        .Select(x => x.Sum(y => y.TotalQtyOrdered)).FirstOrDefault();

        return (int)tmpVarResult;
      }

      if (tmpResult != null)
        return 0;
     // if (tmpResult != null && tmpResult.Count != 0)
     //   return tmpResult.FirstOrDefault().TotalQtyOrdered;
      return 0;*/
    }

    public async Task<List<BackOrderedQty>> revCalculateStageBackOrderSUM(List<int> locIds, int leadTime, int itemNoId)
    {
      DateTime today = DateTime.Now;
      DateTime endDate = today.AddDays(leadTime + 1);
      int[] warehouseIDs = locIds.ToArray();
      //s.ShipFromWhId
      List<BackOrderedQty> tmpResult = await _kc.SoDs
        .Include(s => s.SoT)
        .Include(s => s.SodBols)
        .Where(s => s.SoT.CustomerId == 1 || s.SoT.CustomerId == 2)
        .Where(s => s.ItemNoId == itemNoId && warehouseIDs.Contains(s.ShipFromWhId) && (s.ShipWindowEnd < endDate) && s.AcptStatusId == 1
                   && s.SoStatusNsId != 7 && s.QtyShipped == 0 && (s.SodBols.FirstOrDefault().NsSyncFail == null || s.SodBols.FirstOrDefault().NsSyncFail == 0))
        //.GroupBy(s => s.ItemNoId)
        .GroupBy(s => new { s.ItemNoId, s.ShipFromWhId })
        .Select(s => new BackOrderedQty()
        {
          TotalQtyOrdered = s.Sum(so => (int)so.QtyBackOrdered),
          LocId = s.Key.ShipFromWhId
        }).ToListAsync();
      //       .Select(s => s.Sum(so => (int)so.QtyBackOrdered) & s.GroupBy(so => so.ShipFromWhId))
      //     .FirstOrDefault();

      foreach (BackOrderedQty tmpDto in tmpResult)
      {
        if (tmpDto.TotalQtyOrdered == null) tmpDto.TotalQtyOrdered = 0;
      }
      //if(tmpResult.Count > 0)
      //{ Console.WriteLine("Working!!!");}
      return tmpResult;

    }





    public async Task<int> taskCalculateStageBackOrderSUM(int locId, int leadTime, int itemNoId, int result)
    {
      DateTime today = DateTime.Now;
      //DateTime startDate = today.AddDays(-1);
      DateTime endDate = today.AddDays(leadTime + 1);

      //if (itemNoId == 1613)
      //{ Console.Write("Here!"); }
      //List<StagePO> result = (from so in _kc.SoDs
      //             group so by so.ItemNoId into si
      //             join st in _kc.SoTs on si.FirstOrDefault().SoTId equals st.SoTId
      //             join sb in _kc.SodBols on si.FirstOrDefault().SoDId equals sb.SoDId
      //             where st.CustomerId == 1 && si.FirstOrDefault().ItemNoId == itemNoId && si.FirstOrDefault().ShipFromWhId == locId && si.FirstOrDefault().ExpShipDate > startDate && si.FirstOrDefault().ExpShipDate < endDate && si.FirstOrDefault().AcptStatusId == 1 
      //              && si.FirstOrDefault().SoStatusNsId != 7 && si.FirstOrDefault().QtyShipped == 0 && (sb.NsSyncFail == null || sb.NsSyncFail == 0)
      //             select new StagePO
      //             {
      //               LocId = locId,
      //               TotalQtyOrdered = si.Sum((SoD s) => s.QtyOrdered),
      //               ItemNoId = itemNoId
      //             }).ToList();
      /*
      StagePO result = (from so in _kc.SoDs
                              join st in _kc.SoTs on so.SoTId equals st.SoTId
                              select new { st, so} into sto
                              join sb in _kc.SodBols on sto.so.SoDId equals sb.SoDId
                              select new { sto, sb} into stb
                              where stb.sto.st.CustomerId == 1 && stb.sto.so.ItemNoId == itemNoId && stb.sto.so.ShipFromWhId == locId && stb.sto.so.ExpShipDate > startDate && stb.sto.so.ExpShipDate < endDate && stb.sto.so.AcptStatusId == 1
                               && stb.sto.so.SoStatusNsId != 7 && stb.sto.so.QtyShipped == 0 && (stb.sb.NsSyncFail == null || stb.sb.NsSyncFail == 0)
                              group stb by stb.sto.so.ItemNoId into si
                              select new StagePO
                              {
                                LocId = locId,
                                TotalQtyOrdered = si.Sum(x => x.sto.so.QtyOrdered),// si.Sum((SoD s) => s.QtyOrdered), //si.Sum((SoD s) => s.QtyOrdered),
                                ItemNoId = itemNoId
                              }).FirstOrDefault();*/
      /*
      List<StagePO> result02 = (from so in _kc.SoDs
                        join st in _kc.SoTs on so.SoTId equals st.SoTId into sto
                        from sto2 in sto.DefaultIfEmpty()
                        join sb in _kc.SodBols on sto2.SoDs.FirstOrDefault().SoDId equals sb.SoDId into stb
                        where so.SoT.CustomerId == 1 && so.ItemNoId == itemNoId && so.ShipFromWhId == locId && so.ExpShipDate > startDate && so.ExpShipDate < endDate && so.AcptStatusId == 1
                         && so.SoStatusNsId != 7 && so.QtyShipped == 0 && (stb.FirstOrDefault().NsSyncFail == null || stb.FirstOrDefault().NsSyncFail == 0)
                        group stb by so.ItemNoId into si
                        select new StagePO
                        {
                          LocId = locId,
                          TotalQtyOrdered = si.Sum(x => x.FirstOrDefault().QtyOrdered),// si.Sum((SoD s) => s.QtyOrdered), //si.Sum((SoD s) => s.QtyOrdered),
                          ItemNoId = itemNoId
                        }).ToList();*/
      /*      List<StagePO> tmpResult = await _kc.SoDs
              .Include(s => s.SoT)
              .Include(s => s.SodBols)
              //.Join(_kc.SoTs, s => s.SoTId, st => st.SoTId, (s, st) => new { s, st})
              //.Join(_kc.SodBols, s => s.s.SoDId, sb => sb.SoDId, (s, sb) => new { s, sb})
              .Where(s => s.SoT.CustomerId == 1 || s.SoT.CustomerId == 2)
              .Where(s => s.ItemNoId == itemNoId && s.ShipFromWhId == locId && (s.ShipWindowStart < endDate && s.ShipWindowStart > startDate) && s.AcptStatusId == 1
                               && s.SoStatusNsId != 7 && s.QtyShipped == 0 && (s.SodBols.FirstOrDefault().NsSyncFail == null || s.SodBols.FirstOrDefault().NsSyncFail == 0))
              .GroupBy(s => s.ItemNoId)
              .Select(g => new StagePO
              {
                LocId = locId,
                TotalQtyOrdered = g.Sum(so => (int)so.QtyBackOrdered),
                ItemNoId = itemNoId
              }).ToListAsync();*/

      /*   List<StagePO> tmpResult = await _kc.SoDs
     .Include(s => s.SoT)
     .Include(s => s.SodBols)
     //.Join(_kc.SoTs, s => s.SoTId, st => st.SoTId, (s, st) => new { s, st})
     //.Join(_kc.SodBols, s => s.s.SoDId, sb => sb.SoDId, (s, sb) => new { s, sb})
     .Where(s => s.SoT.CustomerId == 1 || s.SoT.CustomerId == 2)
     .Where(s => s.ItemNoId == itemNoId && s.ShipFromWhId == locId && (s.ShipWindowEnd < endDate) && s.AcptStatusId == 1
                      && s.SoStatusNsId != 7 && s.QtyShipped == 0 && (s.SodBols.FirstOrDefault().NsSyncFail == null || s.SodBols.FirstOrDefault().NsSyncFail == 0))
     .Where(s => s.QtyBackOrdered > 0)
     .GroupBy(s => s.ItemNoId)
     .Select(g => new StagePO
     {
       LocId = locId,
       TotalQtyOrdered = g.Sum(so => (int)so.QtyBackOrdered),
       ItemNoId = itemNoId
     }).ToListAsync();*/


      var tmpResult = _kc.SoDs
  .Include(s => s.SoT)
  .Include(s => s.SodBols)
  .Where(s => s.SoT.CustomerId == 1 || s.SoT.CustomerId == 2)
  .Where(s => s.ItemNoId == itemNoId && s.ShipFromWhId == locId && (s.ShipWindowEnd < endDate) && s.AcptStatusId == 1
                   && s.SoStatusNsId != 7 && s.QtyShipped == 0 && (s.SodBols.FirstOrDefault().NsSyncFail == null || s.SodBols.FirstOrDefault().NsSyncFail == 0))
  //.Where(s => s.QtyBackOrdered > 0)
  .GroupBy(s => s.ItemNoId)
  .Select(s => s.Sum(so => (int)so.QtyBackOrdered)).FirstOrDefault();
      /*

            List<StagePO> tmpResult = await _kc.SoDs
      .Include(s => s.SoT)
      .Include(s => s.SodBols)
      //.Join(_kc.SoTs, s => s.SoTId, st => st.SoTId, (s, st) => new { s, st})
      //.Join(_kc.SodBols, s => s.s.SoDId, sb => sb.SoDId, (s, sb) => new { s, sb})
      .Where(s => s.SoT.CustomerId == 1 || s.SoT.CustomerId == 2)
      .Where(s => s.ItemNoId == itemNoId && s.ShipFromWhId == locId && (s.ShipWindowStart < endDate && s.ShipWindowStart > startDate) && s.AcptStatusId == 1
                   && s.SoStatusNsId != 7 && s.QtyShipped == 0 && (s.SodBols.FirstOrDefault().NsSyncFail == null || s.SodBols.FirstOrDefault().NsSyncFail == 0))
      .Where(s => s.QtyBackOrdered > 0)
      //.GroupBy(s => s.ItemNoId)
      .Select(g => new StagePO
      {
        LocId = locId,
        TotalQtyOrdered = (int)g.QtyBackOrdered,
        ItemNoId = itemNoId
      }).ToListAsync();*/

      //List<StagePO> tmpResult02 = new List<StagePO>();

      //Here here
      //var tmpVarResult;
      result = (int)tmpResult;
      // if(result > 0)
      //{ Console.WriteLine("I'm here");}
      return result;
      //return (int)tmpResult;
      /*
      if (tmpResult.Count >= 1) {

        var tmpVarResult = tmpResult
        .GroupBy(x => x.ItemNoId)
        .Select(x => x.Sum(y => y.TotalQtyOrdered)).FirstOrDefault();

        return (int)tmpVarResult;
      }

      if (tmpResult != null)
        return 0;
     // if (tmpResult != null && tmpResult.Count != 0)
     //   return tmpResult.FirstOrDefault().TotalQtyOrdered;
      return 0;*/
    }

    // Get a list of ItemNoIds that have stagePO
    // Here Here
    /*
    public async Task<List<StagePO>> getAllStagePOSKUs()
    {
      int bancLocId = 4, mainslLocId = 25, swcaftId = 54, bascId = 62;

      DateTime today = DateTime.Now;
      DateTime startDate = today.AddDays(-1);
      DateTime endDate = today.AddDays(61);

      List<StagePO> serviceResponse = await _kc.SoDs
  .Include(s => s.SoT)
  .Include(s => s.SodBols)
  .Where(s => s.SoT.CustomerId == 1 || s.SoT.CustomerId == 2)
  .Where(s => s.SoT.CustomerId == 1 || s.SoT.CustomerId == 2)
  .Where(s => s.ItemNoId == itemNoId && s.ShipFromWhId == locId && (s.ShipWindowEnd < endDate) && s.AcptStatusId == 1
                   && s.SoStatusNsId != 7 && s.QtyShipped == 0 && (s.SodBols.FirstOrDefault().NsSyncFail == null || s.SodBols.FirstOrDefault().NsSyncFail == 0))
  .Where(s => s.QtyBackOrdered > 0)
  .GroupBy(s => s.ItemNoId)
  .Select(s => s.Sum(so => (int)so.QtyBackOrdered)).ToListAsync();

      return serviceResponse;
    }*/

    // Import from user
    public async Task<InventoryFeedsImportResponseDTO> ReviseInventoryFeedsByUser(int empId, List<UserRevisedInvFeedsDTO> invFeedsByUserList)
    {
      // Added for Zero Out SKUs on 9/26/2023
      List<InvFeedsDailyZeroOutSku> invFeedsDailyZeroOuts = await _kc.InvFeedsDailyZeroOutSkus
        .Where(z => z.ZeroOutDate.Value.Date == DateTime.Now.Date)
        .ToListAsync();

      InventoryFeedsImportResponseDTO serviceResponse = new InventoryFeedsImportResponseDTO();
      bool result = true;
      //int bancId = 4;
      int mainslId = 25;
      //int swcaftId = 54;
      //int bascId = 62;
      //int prsmCastId = 51;
      //int prsmCaltId = 67;
      int zinusTracyId = 57;
      int zinusChsId = 108;
      int amazonID = 5;
      int bpmWebID = 9;
      int ebayID = 12;
      int houzzID = 14;
      int mellowWebID = 18;
      int ostID = 21;
      int walmartID = 26;
      int wayfairID = 29;
      int homedepotId = 40;
      int targetId = 51;
      int walmartTopSellers = 25;
      _kc.Database.SetCommandTimeout(150000);
      List<int> cgIds = new List<int>
        {
            5, 6, 8, 9, 10, 11, 12, 13, 14, 15,
            16, 17, 18, 20, 41, 59, 60
        };
      List<int> bpmIds = new List<int> { 4, 25, 222, 224 };
      DateTime today = DateTime.Now;
      DateTime beforeDate = new DateTime(today.AddDays(-1.0).Year, today.AddDays(-1.0).Month, today.AddDays(-1.0).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(today.AddDays(1.0).Year, today.AddDays(1.0).Month, today.AddDays(1.0).Day, 0, 0, 0);
      InvFeedsReport invFeedReport = await (from x in _kc.InvFeedsReports
                                            .Where((InvFeedsReport ifr) => (DateTime)ifr.CreatedDate > beforeDate && (DateTime)ifr.CreatedDate < afterDate)
                                            .Include((InvFeedsReport x) => x.InvFeedsItems)
                                            .Include(x => x.InvFeedsReportItems)
                                            orderby x.CreatedDate descending
                                            select x).FirstOrDefaultAsync();

      if (invFeedReport == null)
      {
        serviceResponse.isOkay = false;
        serviceResponse.errorMessages = new List<string>() { "There is no current inventory feeds report to import!" };
        return serviceResponse;
      }
      int smallMarketsCnt = await _kc.InvFeedsRules
        .Where(c => c.CustomerId != amazonID && c.CustomerId != walmartID && c.CustomerId != wayfairID && c.CustomerId != ostID)
        .Where(c => c.IsActivated == true)
        .CountAsync();

      //      serviceResponse.isOkay = true;
      //      serviceResponse.errorMessages.Add("Good!");
      //ItemNoIdSku
      List<ItemNoIdSku> invFeedsReportItems = await _kc.InvFeedsReportItems
          .Where(x => x.InvFeedsReportId == invFeedReport.InvFeedsReportId)
          .Include(x => x.ItemNo)
          .Select(s => new ItemNoIdSku
          {
            InvFeedsReportItemId = s.InvFeedsReportItemId,
            ItemNoId = (int)s.ItemNoId,
            ItemName = s.ItemNo.ItemName
          }).ToListAsync();
      //List<InvSalesParetoRuleListItemDTO> invParetoRuleList = await GetInvFeedParetoRuleItems(today, invFeedReport, cgIds, bpmIds);
      //GetInventoryFeedsItemDTO tmpInvFeedsItem = new GetInventoryFeedsItemDTO();
      List<GetInventoryFeedsItemDTO> importedInvFeedsItems = (from importedByUser in invFeedsByUserList
                                                              join itemList in invFeedsReportItems on importedByUser.sku equals itemList.ItemName
                                                              select new GetInventoryFeedsItemDTO
                                                              {
                                                                ItemNoId = itemList.ItemNoId,
                                                                InvFeedsReportItemId = itemList.InvFeedsReportItemId,
                                                                ItemStatus = "",
                                                                ItemName = itemList.ItemName,// invFeedsByUserList.sku,
                                                                //AppliedFeedingRuleNoBanc = 1,
                                                                //AppliedFeedingRuleTypeBanc = "",
                                                                //AppliedFeedingRuleNoBasc = 1,
                                                                //AppliedFeedingRuleTypeBasc = "",
                                                                AppliedFeedingRuleNoMainsl = 1,
                                                                AppliedFeedingRuleTypeMainsl = "",
                                                                //AppliedFeedingRuleNoSWCAFT = 1,
                                                                //AppliedFeedingRuleTypeSWCAFT = "",
                                                                //AppliedFeedingRuleNoPrismCast = 1,
                                                                //AppliedFeedingRuleTypePrismCast = "",
                                                                //AppliedFeedingRuleNoPrismCalt = 1,
                                                                //AppliedFeedingRuleTypePrismCalt = "",
                                                                AppliedFeedingRuleNoZinusTracy = 1,
                                                                AppliedFeedingRuleTypeZinusTracy = "",
                                                                AppliedFeedingRuleNoZinusChs = 1,
                                                                AppliedFeedingRuleTypeZinusChs = "",
                                                                //QtyAvailBanc = importedByUser.qtyAvailBanc,
                                                                //QtyAvailBasc = importedByUser.qtyAvailBasc,
                                                                QtyAvailMainsl = importedByUser.qtyAvailMainsl,
                                                                //QtyAvailSWCAFT = importedByUser.qtyAvailSwcaft,
                                                                //QtyAvailPrismCast = importedByUser.qtyAvailPrismCast,
                                                                //QtyAvailPrismCalt = importedByUser.qtyAvailPrismCalt,
                                                                QtyAvailZinusTracy = importedByUser.qtyAvailZinusTracy,
                                                                QtyAvailZinusChs = importedByUser.qtyAvailZinusChs,
                                                                QtyAvailAmzInv = 0,
                                                                QtyAvailCGInv = importedByUser.qtyAvailCastleGate,
                                                                QtyOnHandGCInv = 0,
                                                                //QtyOnHandBanc = 0,
                                                                //QtyOnHandBasc = 0,
                                                                QtyOnHandMainsl = 0,
                                                                //QtyOnHandSWCAFT = 0,
                                                                //QtyOnHandPrismCast = 0,
                                                                //QtyOnHandPrismCalt = 0,
                                                                QtyOnHandZinusTracy = 0,
                                                                QtyOnHandZinusChs = 0,
                                                                QtyOnHandAmzInv = 0,
                                                                BancFeedable = false,
                                                                BascFeedable = false,
                                                                MainslFeedable = true,
                                                                //SWCAFTFeedable = true,
                                                                //PrismCastFeedable = true,
                                                                //PrismCaltFeedable = true,
                                                                ZinusTracyFeedable = true,
                                                                ZinusChsFeedable = true,
                                                                AmazonCustSKU = "",
                                                                //AmazonQtyBanc = 0,
                                                                //AmazonQtyBasc = 0,
                                                                AmazonQtyMainsl = 0,
                                                                //AmazonQtySWCAFT = 0,
                                                                //AmazonQtyPrismCast = 0,
                                                                //AmazonQtyPrismCalt = 0,
                                                                AmazonQtyZinusTracy = 0,
                                                                AmazonQtyZinusChs = 0,
                                                                AmazonPercentage = 0,
                                                                //AmazonBancPercentage = 0,
                                                                AmazonMainslPercentage = 0,
                                                                //AmazonSWCAFTPercentage = 0,
                                                                //AmazonBascPercentage = 0,
                                                                //AmazonPrismCastPercentage = 0,
                                                                //AmazonPrismCaltPercentage = 0,
                                                                AmazonZinusTracyPercentage = 0,
                                                                AmazonZinusChsPercentage = 0,
                                                                AmazonFeedable = true,
                                                                AmazonDupCount = 0,
                                                                WayfairCustSKU = "",
                                                                //WayfairQtyBanc = 0,
                                                                //WayfairQtyBasc = 0,
                                                                WayfairQtyMainsl = 0,
                                                                //WayfairQtySWCAFT = 0,
                                                                //WayfairQtyPrismCast = 0,
                                                                //WayfairQtyPrismCalt = 0,
                                                                WayfairQtyZinusTracy = 0,
                                                                WayfairQtyZinusChs = 0,
                                                                WayfairPercentage = 0,
                                                                //WayfairBancPercentage = 0,
                                                                WayfairMainslPercentage = 0,
                                                                //WayfairSWCAFTPercentage = 0,
                                                                WayfairBascPercentage = 0,
                                                                //WayfairPrismCastPercentage = 0,
                                                                //WayfairPrismCaltPercentage = 0,
                                                                WayfairZinusTracyPercentage = 0,
                                                                WayfairZinusChsPercentage = 0,
                                                                WayfairFeedable = true,
                                                                WayfairDupCount = 0,
                                                                WalmartCustSKU = "",
                                                                //WalmartQtyBanc = 0,
                                                                //WalmartQtyBasc = 0,
                                                                WalmartQtyMainsl = 0,
                                                                //WalmartQtySWCAFT = 0,
                                                                //WalmartQtyPrismCast = 0,
                                                                //WalmartQtyPrismCalt = 0,
                                                                WalmartQtyZinusTracy = 0,
                                                                WalmartQtyZinusChs = 0,
                                                                WalmartPercentage = 0,
                                                                WalmartBancPercentage = 0,
                                                                WalmartMainslPercentage = 0,
                                                                //WalmartSWCAFTPercentage = 0,
                                                                WalmartBascPercentage = 0,
                                                                //WalmartPrismCastPercentage = 0,
                                                                //WalmartPrismCaltPercentage = 0,
                                                                WalmartZinusTracyPercentage = 0,
                                                                WalmartZinusChsPercentage = 0,
                                                                WalmartFeedable = true,
                                                                WalmartDupCount = 0,
                                                                OverstockCustSKU = "",
                                                                //OverstockQtyBanc = 0,
                                                                //OverstockQtyBasc = 0,
                                                                OverstockQtyMainsl = 0,
                                                                //OverstockQtySWCAFT = 0,
                                                                //OverstockQtyPrismCast = 0,
                                                                //OverstockQtyPrismCalt = 0,
                                                                OverstockQtyZinusTracy = 0,
                                                                OverstockQtyZinusChs = 0,
                                                                OverstockPercentage = 0,
                                                                //OverstockBancPercentage = 0,
                                                                OverstockMainslPercentage = 0,
                                                                //OverstockSWCAFTPercentage = 0,
                                                                //OverstockBascPercentage = 0,
                                                                //OverstockPrismCastPercentage = 0,
                                                                //OverstockPrismCaltPercentage = 0,
                                                                OverstockZinusTracyPercentage = 0,
                                                                OverstockZinusChsPercentage = 0,
                                                                OverstockFeedable = true,
                                                                OverstockDupCount = 0,
                                                                eBayCustSKU = "",
                                                                //eBayQtyBanc = 0,
                                                                //eBayQtyBasc = 0,
                                                                eBayQtyMainsl = 0,
                                                                //eBayQtySWCAFT = 0,
                                                                //eBayQtyPrismCast = 0,
                                                                //eBayQtyPrismCalt = 0,
                                                                eBayQtyZinusTracy = 0,
                                                                eBayQtyZinusChs = 0,
                                                                eBayPercentage = 0,
                                                                //eBayBancPercentage = 0,
                                                                eBayMainslPercentage = 0,
                                                                //eBaySWCAFTPercentage = 0,
                                                                //eBayBascPercentage = 0,
                                                                //eBayPrismCastPercentage = 0,
                                                                //eBayPrismCaltPercentage = 0,
                                                                eBayZinusTracyPercentage = 0,
                                                                eBayZinusChsPercentage = 0,
                                                                eBayFeedable = true,
                                                                eBayDupCount = 0,
                                                                BPMWebCustSKU = "",
                                                                //BPMWebQtyBanc = 0,
                                                                //BPMWebQtyBasc = 0,
                                                                BPMWebQtyMainsl = 0,
                                                                //BPMWebQtySWCAFT = 0,
                                                                //BPMWebQtyPrismCast = 0,
                                                                //BPMWebQtyPrismCalt = 0,
                                                                BPMWebQtyZinusTracy = 0,
                                                                BPMWebQtyZinusChs = 0,
                                                                BPMWebPercentage = 0,
                                                                //BPMWebBancPercentage = 0,
                                                                BPMWebMainslPercentage = 0,
                                                                //BPMWebSWCAFTPercentage = 0,
                                                                //BPMWebBascPercentage = 0,
                                                                //BPMWebPrismCastPercentage = 0,
                                                                //BPMWebPrismCaltPercentage = 0,
                                                                BPMWebZinusTracyPercentage = 0,
                                                                BPMWebZinusChsPercentage = 0,
                                                                BPMFeedable = true,
                                                                BPMDupCount = 0,
                                                                MellowWebCustSKU = "",
                                                                //MellowWebQtyBanc = 0,
                                                                //MellowWebQtyBasc = 0,
                                                                MellowWebQtyMainsl = 0,
                                                                //MellowWebQtySWCAFT = 0,
                                                                //MellowWebQtyPrismCast = 0,
                                                                //MellowWebQtyPrismCalt = 0,
                                                                MellowWebQtyZinusTracy = 0,
                                                                MellowWebQtyZinusChs = 0,
                                                                MellowWebPercentage = 0,
                                                                //MellowWebBancPercentage = 0,
                                                                MellowWebMainslPercentage = 0,
                                                                //MellowWebSWCAFTPercentage = 0,
                                                                //MellowWebBascPercentage = 0,
                                                                //MellowWebPrismCastPercentage = 0,
                                                                //MellowWebPrismCaltPercentage = 0,
                                                                MellowWebZinusTracyPercentage = 0,
                                                                MellowWebZinusChsPercentage = 0,
                                                                MellowFeedable = true,
                                                                MellowDupCount = 0,
                                                                HouzzCustSKU = "",
                                                                HouzzQtyBanc = 0,
                                                                HouzzQtyBasc = 0,
                                                                HouzzQtyMainsl = 0,
                                                                //HouzzQtySWCAFT = 0,
                                                                HouzzPercentage = 0,
                                                                HouzzBancPercentage = 0,
                                                                HouzzMainslPercentage = 0,
                                                                //HouzzSWCAFTPercentage = 0,
                                                                HouzzFeedable = false,
                                                                HouzzDupCount = 0,
                                                                HomeDepotCustSKU = "",
                                                                HomeDepotQtyBanc = 0,
                                                                HomeDepotQtyBasc = 0,
                                                                HomeDepotQtyMainsl = 0,
                                                                //HomeDepotQtySWCAFT = 0,
                                                                //HomeDepotQtyPrismCast = 0,
                                                                //HomeDepotQtyPrismCalt = 0,
                                                                HomeDepotQtyZinusTracy = 0,
                                                                HomeDepotQtyZinusChs = 0,
                                                                HomeDepotPercentage = 0,
                                                                HomeDepotBancPercentage = 0,
                                                                HomeDepotMainslPercentage = 0,
                                                                //HomeDepotSWCAFTPercentage = 0,
                                                                HomeDepotBascPercentage = 0,
                                                                //HomeDepotPrismCastPercentage = 0,
                                                                //HomeDepotPrismCaltPercentage = 0,
                                                                HomeDepotZinusTracyPercentage = 0,
                                                                HomeDepotZinusChsPercentage = 0,
                                                                HomeDepotFeedable = true,
                                                                HomeDepotDupCount = 0,
                                                                TargetCustSKU = "",
                                                                //TargetQtyBanc = 0,
                                                                //TargetQtyBasc = 0,
                                                                TargetQtyMainsl = 0,
                                                                //TargetQtySWCAFT = 0,
                                                                //TargetQtyPrismCast = 0,
                                                                //TargetQtyPrismCalt = 0,
                                                                TargetQtyZinusTracy = 0,
                                                                TargetQtyZinusChs = 0,
                                                                TargetPercentage = 0,
                                                                //TargetBancPercentage = 0,
                                                                TargetMainslPercentage = 0,
                                                                //TargetSWCAFTPercentage = 0,
                                                                //TargetBascPercentage = 0,
                                                                //TargetPrismCastPercentage = 0,
                                                                //TargetPrismCaltPercentage = 0,
                                                                TargetZinusTracyPercentage = 0,
                                                                TargetZinusChsPercentage = 0,
                                                                TargetFeedable = true,
                                                                TargetDupCount = 0,
                                                                etcMarketQty = 0,
                                                                etcMarketPercentage = 0,
                                                                //totalStagePOQtyBanc = importedByUser.totalStagePOQtyBanc,
                                                                //totalStagePOQtyBasc = importedByUser.totalStagePOQtyBasc,
                                                                totalStagePOQtyMainsl = importedByUser.totalStagePOQtyMainsl,
                                                                //totalStagePOQtySWCAFT = importedByUser.totalStagePOQtySwcaft,
                                                                //totalStagePOQtyPrismCast = importedByUser.totalStagePOQtyPrismCast,
                                                                //totalStagePOQtyPrismCalt = importedByUser.totalStagePOQtyPrismCalt,
                                                                totalStagePOQtyZinusTracy = importedByUser.totalStagePOQtyZinusTracy,
                                                                totalStagePOQtyZinusChs = importedByUser.totalStagePOQtyZinusChs,
                                                                //leftOverQtyBanc = 0,
                                                                leftOverQtyMainsl = 0,
                                                                //leftOverQtySWCAFT = 0,
                                                                //leftOverQtyBasc = 0,
                                                                //leftOverQtyPrismCast = 0,
                                                                //leftOverQtyPrismCalt = 0,
                                                                leftOverQtyZinusTracy = 0,
                                                                leftOverQtyZinusChs = 0,
                                                                isCooMasterSku = true,
                                                                hasCooSlaveSku = true,
                                                                countParetoA = 0,
                                                                countParetoB = 0,
                                                                countParetoC = 0,
                                                                paretoAqty = 0,
                                                                paretoBqty = 0,
                                                                AmazonRule = false,
                                                                eBayRule = false,
                                                                WayfairRule = false,
                                                                WalmartRule = false,
                                                                OverstockRule = false,
                                                                BPMRule = false,
                                                                MellowRule = false,
                                                                HomeDepotRule = false,
                                                                TargetRule = false
                                                              }).ToList();

      // Added for re-calculating feeding qty.
      List<InvFeedsItem> invFeedsItems = await _kc.InvFeedsItems
        .Where((InvFeedsItem i) => i.InvFeedsReportId == (long?)invFeedReport.InvFeedsReportId)
        .Include((InvFeedsItem i) => i.InvFeedsItemLocQties)
        .ToListAsync();
      List<InvFeedsAppliedRule> invFeedsAppliedRules = await _kc.InvFeedsAppliedRules
        .ToListAsync();
      List<InvFeedsRuleSku> invFeedsRuleSKUs = await _kc.InvFeedsRuleSkus
        .Include((InvFeedsRuleSku ifrs) => ifrs.InvFeedsRuleSkumkts)
        .ToListAsync();
      List<InvFeedsRule> invFeedsRules = await _kc.InvFeedsRules
        .Where((InvFeedsRule ifr) => ifr.IsActivated == (bool?)true)
        .Include((InvFeedsRule ifr) => ifr.Customer)
        .Include((InvFeedsRule ifr) => ifr.LastModifiedByNavigation)
        .ToListAsync();
      InventoryConfig inventoryConfig = await _kc.InventoryConfigs
        .Where((InventoryConfig i) => i.InventoryConfigId == 1)
        .FirstOrDefaultAsync();
      List<InvSalesParetoRuleListItemDTO> invParetoRuleList = await GetInvFeedParetoRuleItems(true, today, invFeedReport, cgIds, bpmIds);
      List<ItemSoldQty> wmtTopSellers = await (from i in _kc.InvDs
                                               where i.SoDate >= today.AddDays(-1095.0)
                                               group i by i.ItemNoId into i
                                               select new ItemSoldQty
                                               {
                                                 ItemNoId = i.Key,
                                                 SumQty = i.Sum((InvD i) => i.QtyInv)
                                               } into i
                                               orderby i.SumQty descending
                                               select i).Take(walmartTopSellers).ToListAsync();

      int index = 0;
      InvFeedsItem invFeedsItem = new InvFeedsItem();
      List<Task<int>> duplicatedCounters = new List<Task<int>>();
      while (index < importedInvFeedsItems.Count)
      {
        invFeedsItem = invFeedsItems.Where((InvFeedsItem bi) => bi.ItemNoId == importedInvFeedsItems[index].ItemNoId).FirstOrDefault();
        GetInventoryFeedsItemDTO getInventoryFeedsItemDTO = importedInvFeedsItems[index];
        getInventoryFeedsItemDTO.AmazonDupCount = await countDuplicatedSKU(amazonID, importedInvFeedsItems[index].ItemNoId);
        //duplicatedCounters.Add(countDuplicatedSKU(amazonID, importedInvFeedsItems[index].ItemNoId));
        GetInventoryFeedsItemDTO getInventoryFeedsItemDTO2 = importedInvFeedsItems[index];
        getInventoryFeedsItemDTO2.OverstockDupCount = await countDuplicatedSKU(ostID, importedInvFeedsItems[index].ItemNoId);
        //duplicatedCounters.Add(countDuplicatedSKU(ostID, importedInvFeedsItems[index].ItemNoId));
        GetInventoryFeedsItemDTO getInventoryFeedsItemDTO3 = importedInvFeedsItems[index];
        getInventoryFeedsItemDTO3.WalmartDupCount = await countDuplicatedSKU(walmartID, importedInvFeedsItems[index].ItemNoId);
        //duplicatedCounters.Add(countDuplicatedSKU(walmartID, importedInvFeedsItems[index].ItemNoId));
        GetInventoryFeedsItemDTO getInventoryFeedsItemDTO4 = importedInvFeedsItems[index];
        getInventoryFeedsItemDTO4.WayfairDupCount = await countDuplicatedSKU(wayfairID, importedInvFeedsItems[index].ItemNoId);
        //duplicatedCounters.Add(countDuplicatedSKU(wayfairID, importedInvFeedsItems[index].ItemNoId));
        GetInventoryFeedsItemDTO getInventoryFeedsItemDTO5 = importedInvFeedsItems[index];
        getInventoryFeedsItemDTO5.BPMDupCount = await countDuplicatedSKU(bpmWebID, importedInvFeedsItems[index].ItemNoId);
        //duplicatedCounters.Add(countDuplicatedSKU(bpmWebID, importedInvFeedsItems[index].ItemNoId));
        GetInventoryFeedsItemDTO getInventoryFeedsItemDTO6 = importedInvFeedsItems[index];
        getInventoryFeedsItemDTO6.eBayDupCount = await countDuplicatedSKU(ebayID, importedInvFeedsItems[index].ItemNoId);
        //duplicatedCounters.Add(countDuplicatedSKU(ebayID, importedInvFeedsItems[index].ItemNoId));
        GetInventoryFeedsItemDTO getInventoryFeedsItemDTO7 = importedInvFeedsItems[index];
        getInventoryFeedsItemDTO7.MellowDupCount = await countDuplicatedSKU(mellowWebID, importedInvFeedsItems[index].ItemNoId);
        //duplicatedCounters.Add(countDuplicatedSKU(mellowWebID, importedInvFeedsItems[index].ItemNoId));
        GetInventoryFeedsItemDTO getInventoryFeedsItemDTO8 = importedInvFeedsItems[index];
        getInventoryFeedsItemDTO8.HouzzDupCount = await countDuplicatedSKU(houzzID, importedInvFeedsItems[index].ItemNoId);
        //duplicatedCounters.Add(countDuplicatedSKU(houzzID, importedInvFeedsItems[index].ItemNoId));
        GetInventoryFeedsItemDTO getInventoryFeedsItemDTO9 = importedInvFeedsItems[index];
        getInventoryFeedsItemDTO9.HomeDepotDupCount = await countDuplicatedSKU(homedepotId, importedInvFeedsItems[index].ItemNoId);
        //duplicatedCounters.Add(countDuplicatedSKU(homedepotId, importedInvFeedsItems[index].ItemNoId));
        GetInventoryFeedsItemDTO getInventoryFeedsItemDT1O = importedInvFeedsItems[index];
        getInventoryFeedsItemDTO9.TargetDupCount = await countDuplicatedSKU(targetId, importedInvFeedsItems[index].ItemNoId);
        //duplicatedCounters.Add(countDuplicatedSKU(targetId, importedInvFeedsItems[index].ItemNoId));
        /*
        await Task.WhenAll(duplicatedCounters);

        importedInvFeedsItems[index].AmazonDupCount = await duplicatedCounters[0];
        importedInvFeedsItems[index].OverstockDupCount = await duplicatedCounters[1];
        importedInvFeedsItems[index].WalmartDupCount = await duplicatedCounters[2];
        importedInvFeedsItems[index].WayfairDupCount = await duplicatedCounters[3];
        importedInvFeedsItems[index].BPMDupCount = await duplicatedCounters[4];
        importedInvFeedsItems[index].eBayDupCount = await duplicatedCounters[5];
        importedInvFeedsItems[index].MellowDupCount = await duplicatedCounters[6];
        importedInvFeedsItems[index].HouzzDupCount = await duplicatedCounters[7];
        importedInvFeedsItems[index].HomeDepotDupCount = await duplicatedCounters[8];
        importedInvFeedsItems[index].TargetDupCount = await duplicatedCounters[9];*/

        if (importedInvFeedsItems[index].AmazonDupCount == 0)
        {
          importedInvFeedsItems[index].AmazonFeedable = false;
        }
        if (importedInvFeedsItems[index].OverstockDupCount == 0)
        {
          importedInvFeedsItems[index].OverstockFeedable = false;
        }
        if (importedInvFeedsItems[index].WalmartDupCount == 0)
        {
          importedInvFeedsItems[index].WalmartFeedable = false;
        }
        if (importedInvFeedsItems[index].WayfairDupCount == 0)
        {
          importedInvFeedsItems[index].WayfairFeedable = false;
        }
        if (importedInvFeedsItems[index].BPMDupCount == 0)
        {
          importedInvFeedsItems[index].BPMFeedable = false;
        }
        if (importedInvFeedsItems[index].eBayDupCount == 0)
        {
          importedInvFeedsItems[index].eBayFeedable = false;
        }
        if (importedInvFeedsItems[index].MellowDupCount == 0)
        {
          importedInvFeedsItems[index].MellowFeedable = false;
        }
        if (importedInvFeedsItems[index].HouzzDupCount == 0)
        {
          importedInvFeedsItems[index].HouzzFeedable = false;
        }
        if (importedInvFeedsItems[index].HomeDepotDupCount == 0)
        {
          importedInvFeedsItems[index].HomeDepotFeedable = false;
        }
        if (importedInvFeedsItems[index].TargetDupCount == 0)
        {
          importedInvFeedsItems[index].TargetFeedable = false;
        }
        if (invFeedsItem != null || importedInvFeedsItems[index].hasCooSlaveSku == true)
        {
          InvFeedsRuleSku invFeedsRuleSku = invFeedsRuleSKUs.FindLast((InvFeedsRuleSku i) => i.ItemNoId == importedInvFeedsItems[index].ItemNoId);
          importedInvFeedsItems[index] = await DeterminedFeedingParetoRuleForSKU(true, inventoryConfig, importedInvFeedsItems[index].ItemNoId, importedInvFeedsItems[index], invFeedsRules, invFeedsRuleSku, wmtTopSellers, invFeedsDailyZeroOuts);
          /*switch (importedInvFeedsItems[index].AppliedFeedingRuleNoBanc)
          {
            case 9:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                  if (importedInvFeedsItems[index].BancFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(bancId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyBanc = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyBanc, 5);
                    importedInvFeedsItems[index].OverstockQtyBanc = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyBanc, 5);
                  }
                }
                break;
              }
            case 5:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                }
                if (importedInvFeedsItems[index].BancFeedable)
                {
                  importedInvFeedsItems[index] = InventoryFeedsLowInventoryRule(bancId, invFeedsRules, importedInvFeedsItems[index], inventoryConfig);
                  importedInvFeedsItems[index].WalmartQtyBanc = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyBanc, 5);
                  importedInvFeedsItems[index].OverstockQtyBanc = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyBanc, 5);
                  importedInvFeedsItems[index].leftOverQtyBanc = importedInvFeedsItems[index].QtyAvailActualBanc - (importedInvFeedsItems[index].AmazonQtyBanc + importedInvFeedsItems[index].eBayQtyBanc
                      + importedInvFeedsItems[index].OverstockQtyBanc + importedInvFeedsItems[index].WayfairQtyBanc + importedInvFeedsItems[index].WalmartQtyBanc + importedInvFeedsItems[index].HomeDepotQtyBanc
                      + importedInvFeedsItems[index].TargetQtyBanc + importedInvFeedsItems[index].BPMWebQtyBanc + importedInvFeedsItems[index].MellowWebQtyBanc);
                }
                break;
              }
            case 4:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);

                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                  if (importedInvFeedsItems[index].BancFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(bancId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyBanc = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyBanc, 5);
                    importedInvFeedsItems[index].OverstockQtyBanc = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyBanc, 5);
                  }
                }
                break;
              }
            case 3:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);

                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                  if (importedInvFeedsItems[index].BancFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(bancId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyBanc = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyBanc, 5);
                    importedInvFeedsItems[index].OverstockQtyBanc = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyBanc, 5);
                  }
                }
                break;
              }
            case 2:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                }
                if (importedInvFeedsItems[index].BancFeedable)
                {
                  importedInvFeedsItems[index] = InventoryFeedsNewItemLowSalesDataRule(bancId, invFeedsRules, importedInvFeedsItems[index]);
                  importedInvFeedsItems[index].WalmartQtyBanc = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyBanc, 5);
                  importedInvFeedsItems[index].OverstockQtyBanc = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyBanc, 5);
                  importedInvFeedsItems[index].leftOverQtyBanc = importedInvFeedsItems[index].QtyAvailActualBanc - (importedInvFeedsItems[index].AmazonQtyBanc + importedInvFeedsItems[index].eBayQtyBanc
                      + importedInvFeedsItems[index].OverstockQtyBanc + importedInvFeedsItems[index].WayfairQtyBanc + importedInvFeedsItems[index].WalmartQtyBanc + importedInvFeedsItems[index].HomeDepotQtyBanc
                      + importedInvFeedsItems[index].TargetQtyBanc + importedInvFeedsItems[index].BPMWebQtyBanc + importedInvFeedsItems[index].MellowWebQtyBanc);
                }
                break;
              }
            case 1:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);

                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                  if (importedInvFeedsItems[index].BancFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(bancId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyBanc = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyBanc, 5);
                    importedInvFeedsItems[index].OverstockQtyBanc = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyBanc, 5);
                  }
                }
                break;
              }
          }*/
          switch (importedInvFeedsItems[index].AppliedFeedingRuleNoMainsl)
          {
            case 9:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                //importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                  if (importedInvFeedsItems[index].MainslFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(mainslId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyMainsl = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyMainsl, 5);
                    importedInvFeedsItems[index].OverstockQtyMainsl = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyMainsl, 5);
                  }
                }
                break;
              }
            case 5:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                }
                if (importedInvFeedsItems[index].MainslFeedable)
                {
                  importedInvFeedsItems[index] = await InventoryFeedsLowInventoryRule(mainslId, invFeedsRules, importedInvFeedsItems[index], inventoryConfig);
                  importedInvFeedsItems[index].WalmartQtyMainsl = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyMainsl, 5);
                  importedInvFeedsItems[index].OverstockQtyMainsl = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyMainsl, 5);
                  importedInvFeedsItems[index].leftOverQtyMainsl = importedInvFeedsItems[index].QtyAvailActualMainsl - (importedInvFeedsItems[index].AmazonQtyMainsl + importedInvFeedsItems[index].eBayQtyMainsl
                      + importedInvFeedsItems[index].OverstockQtyMainsl + importedInvFeedsItems[index].WayfairQtyMainsl + importedInvFeedsItems[index].WalmartQtyMainsl + importedInvFeedsItems[index].HomeDepotQtyMainsl
                      + importedInvFeedsItems[index].TargetQtyMainsl + importedInvFeedsItems[index].BPMWebQtyMainsl + importedInvFeedsItems[index].MellowWebQtyMainsl);
                }
                break;
              }
            case 4:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                //importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                  if (importedInvFeedsItems[index].MainslFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(mainslId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyMainsl = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyMainsl, 5);
                    importedInvFeedsItems[index].OverstockQtyMainsl = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyMainsl, 5);
                  }
                }
                break;
              }
            case 3:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                //importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                  if (importedInvFeedsItems[index].MainslFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(mainslId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyMainsl = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyMainsl, 5);
                    importedInvFeedsItems[index].OverstockQtyMainsl = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyMainsl, 5);
                  }
                }
                break;
              }
            case 2:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                }
                if (importedInvFeedsItems[index].MainslFeedable)
                {
                  importedInvFeedsItems[index] = await InventoryFeedsNewItemLowSalesDataRule(mainslId, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                  importedInvFeedsItems[index].WalmartQtyMainsl = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyMainsl, 5);
                  importedInvFeedsItems[index].OverstockQtyMainsl = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyMainsl, 5);
                  importedInvFeedsItems[index].leftOverQtyMainsl = importedInvFeedsItems[index].QtyAvailActualMainsl - (importedInvFeedsItems[index].AmazonQtyMainsl + importedInvFeedsItems[index].eBayQtyMainsl
                      + importedInvFeedsItems[index].OverstockQtyMainsl + importedInvFeedsItems[index].WayfairQtyMainsl + importedInvFeedsItems[index].WalmartQtyMainsl + importedInvFeedsItems[index].HomeDepotQtyMainsl
                      + importedInvFeedsItems[index].TargetQtyMainsl + importedInvFeedsItems[index].BPMWebQtyMainsl + importedInvFeedsItems[index].MellowWebQtyMainsl);
                }
                break;
              }
            case 1:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                //importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                  if (importedInvFeedsItems[index].MainslFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(mainslId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyMainsl = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyMainsl, 5);
                    importedInvFeedsItems[index].OverstockQtyMainsl = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyMainsl, 5);
                  }
                }
                break;
              }
          }
          /*
          switch (importedInvFeedsItems[index].AppliedFeedingRuleNoSWCAFT)
          {
            case 9:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                //importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                if (invParetoRuleData12 != null)
                {
                  if (importedInvFeedsItems[index].SWCAFTFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(swcaftId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtySWCAFT = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtySWCAFT, 5);
                    importedInvFeedsItems[index].OverstockQtySWCAFT = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtySWCAFT, 5);
                  }
                }
                break;
              }
            case 5:
              if (importedInvFeedsItems[index].SWCAFTFeedable)
              {
                importedInvFeedsItems[index] = InventoryFeedsLowInventoryRule(swcaftId, invFeedsRules, importedInvFeedsItems[index], inventoryConfig);
                importedInvFeedsItems[index].WalmartQtySWCAFT = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtySWCAFT, 5);
                importedInvFeedsItems[index].OverstockQtySWCAFT = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtySWCAFT, 5);
              }
              break;
            case 4:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                //importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                if (invParetoRuleData12 != null)
                {
                  if (importedInvFeedsItems[index].SWCAFTFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(swcaftId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtySWCAFT = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtySWCAFT, 5);
                    importedInvFeedsItems[index].OverstockQtySWCAFT = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtySWCAFT, 5);
                  }
                }
                break;
              }
            case 3:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                //importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                if (invParetoRuleData12 != null)
                {
                  if (importedInvFeedsItems[index].SWCAFTFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(swcaftId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtySWCAFT = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtySWCAFT, 5);
                    importedInvFeedsItems[index].OverstockQtySWCAFT = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtySWCAFT, 5);
                  }
                }
                break;
              }
            case 2:
              if (importedInvFeedsItems[index].SWCAFTFeedable)
              {
                importedInvFeedsItems[index] = InventoryFeedsNewItemLowSalesDataRule(swcaftId, invFeedsRules, importedInvFeedsItems[index]);
                importedInvFeedsItems[index].WalmartQtySWCAFT = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtySWCAFT, 5);
                importedInvFeedsItems[index].OverstockQtySWCAFT = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtySWCAFT, 5);
              }
              break;
            case 1:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                //importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                if (invParetoRuleData12 != null)
                {
                  if (importedInvFeedsItems[index].SWCAFTFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(swcaftId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtySWCAFT = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtySWCAFT, 5);
                    importedInvFeedsItems[index].OverstockQtySWCAFT = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtySWCAFT, 5);
                  }
                }
                break;
              }
          }*/
          /*switch (importedInvFeedsItems[index].AppliedFeedingRuleNoBasc)
          {
            case 9:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                // importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                  if (importedInvFeedsItems[index].BascFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(bascId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyBasc = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyBasc, 5);
                    importedInvFeedsItems[index].OverstockQtyBasc = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyBasc, 5);
                  }
                }
                break;
              }
            case 5:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                }
                if (importedInvFeedsItems[index].BascFeedable)
                {
                  importedInvFeedsItems[index] = InventoryFeedsLowInventoryRule(bascId, invFeedsRules, importedInvFeedsItems[index], inventoryConfig);
                  importedInvFeedsItems[index].WalmartQtyBasc = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyBasc, 5);
                  importedInvFeedsItems[index].OverstockQtyBasc = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyBasc, 5);
                  importedInvFeedsItems[index].leftOverQtyBasc = importedInvFeedsItems[index].QtyAvailActualBasc - (importedInvFeedsItems[index].AmazonQtyBasc + importedInvFeedsItems[index].eBayQtyBasc
                      + importedInvFeedsItems[index].OverstockQtyBasc + importedInvFeedsItems[index].WayfairQtyBasc + importedInvFeedsItems[index].WalmartQtyBasc + importedInvFeedsItems[index].HomeDepotQtyBasc
                      + importedInvFeedsItems[index].TargetQtyBasc + importedInvFeedsItems[index].BPMWebQtyBasc + importedInvFeedsItems[index].MellowWebQtyBasc);
                }
                break;
              }
            case 4:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                //importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                  if (importedInvFeedsItems[index].BascFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(bascId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyBasc = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyBasc, 5);
                    importedInvFeedsItems[index].OverstockQtyBasc = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyBasc, 5);
                  }
                }
                break;
              }
            case 3:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                //importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                  if (importedInvFeedsItems[index].BascFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(bascId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyBasc = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyBasc, 5);
                    importedInvFeedsItems[index].OverstockQtyBasc = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyBasc, 5);
                  }
                }
                break;
              }
            case 2:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                }
                if (importedInvFeedsItems[index].BascFeedable)
                {
                  importedInvFeedsItems[index] = InventoryFeedsNewItemLowSalesDataRule(bascId, invFeedsRules, importedInvFeedsItems[index]);
                  importedInvFeedsItems[index].WalmartQtyBasc = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyBasc, 5);
                  importedInvFeedsItems[index].OverstockQtyBasc = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyBasc, 5);
                  importedInvFeedsItems[index].leftOverQtyBasc = importedInvFeedsItems[index].QtyAvailActualBasc - (importedInvFeedsItems[index].AmazonQtyBasc + importedInvFeedsItems[index].eBayQtyBasc
                      + importedInvFeedsItems[index].OverstockQtyBasc + importedInvFeedsItems[index].WayfairQtyBasc + importedInvFeedsItems[index].WalmartQtyBasc + importedInvFeedsItems[index].HomeDepotQtyBasc
                      + importedInvFeedsItems[index].TargetQtyBasc + importedInvFeedsItems[index].BPMWebQtyBasc + importedInvFeedsItems[index].MellowWebQtyBasc);
                }
                break;
              }
            case 1:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                //importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                  if (importedInvFeedsItems[index].BascFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(bascId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyBasc = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyBasc, 5);
                    importedInvFeedsItems[index].OverstockQtyBasc = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyBasc, 5);
                  }
                }
                break;
              }
          }*//*
          switch (importedInvFeedsItems[index].AppliedFeedingRuleNoPrismCast)
          {
            case 9:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  if (importedInvFeedsItems[index].PrismCastFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(prsmCastId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyPrismCast = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyPrismCast, 5);
                    importedInvFeedsItems[index].OverstockQtyPrismCast = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyPrismCast, 5);
                  }
                }
                break;
              }
            case 5:
              if (importedInvFeedsItems[index].PrismCastFeedable)
              {
                importedInvFeedsItems[index] = InventoryFeedsLowInventoryRule(prsmCastId, invFeedsRules, importedInvFeedsItems[index], inventoryConfig);
                importedInvFeedsItems[index].WalmartQtyPrismCast = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyPrismCast, 5);
                importedInvFeedsItems[index].OverstockQtyPrismCast = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyPrismCast, 5);
              }
              break;
            case 4:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  if (importedInvFeedsItems[index].PrismCastFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(prsmCastId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyPrismCast = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyPrismCast, 5);
                    importedInvFeedsItems[index].OverstockQtyPrismCast = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyPrismCast, 5);
                  }
                }
                break;
              }
            case 3:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  if (importedInvFeedsItems[index].PrismCastFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(prsmCastId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyPrismCast = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyPrismCast, 5);
                    importedInvFeedsItems[index].OverstockQtyPrismCast = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyPrismCast, 5);
                  }
                }
                break;
              }
            case 2:
              if (importedInvFeedsItems[index].PrismCastFeedable)
              {
                importedInvFeedsItems[index] = InventoryFeedsNewItemLowSalesDataRule(prsmCastId, invFeedsRules, importedInvFeedsItems[index]);
                importedInvFeedsItems[index].WalmartQtyPrismCast = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyPrismCast, 5);
                importedInvFeedsItems[index].OverstockQtyPrismCast = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyPrismCast, 5);
              }
              break;
            case 1:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  if (importedInvFeedsItems[index].PrismCastFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(prsmCastId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyPrismCast = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyPrismCast, 5);
                    importedInvFeedsItems[index].OverstockQtyPrismCast = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyPrismCast, 5);
                  }
                }
                break;
              }
          }
          switch (importedInvFeedsItems[index].AppliedFeedingRuleNoPrismCalt)
          {
            case 9:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  if (importedInvFeedsItems[index].PrismCaltFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(prsmCaltId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyPrismCalt = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyPrismCalt, 5);
                    importedInvFeedsItems[index].OverstockQtyPrismCalt = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyPrismCalt, 5);
                  }
                }
                break;
              }
            case 5:
              if (importedInvFeedsItems[index].PrismCaltFeedable)
              {
                importedInvFeedsItems[index] = InventoryFeedsLowInventoryRule(prsmCaltId, invFeedsRules, importedInvFeedsItems[index], inventoryConfig);
                importedInvFeedsItems[index].WalmartQtyPrismCalt = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyPrismCalt, 5);
                importedInvFeedsItems[index].OverstockQtyPrismCalt = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyPrismCalt, 5);
              }
              break;
            case 4:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  if (importedInvFeedsItems[index].PrismCaltFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(prsmCaltId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyPrismCalt = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyPrismCalt, 5);
                    importedInvFeedsItems[index].OverstockQtyPrismCalt = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyPrismCalt, 5);
                  }
                }
                break;
              }
            case 3:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  if (importedInvFeedsItems[index].PrismCaltFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(prsmCaltId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyPrismCalt = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyPrismCalt, 5);
                    importedInvFeedsItems[index].OverstockQtyPrismCalt = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyPrismCalt, 5);
                  }
                }
                break;
              }
            case 2:
              if (importedInvFeedsItems[index].PrismCaltFeedable)
              {
                importedInvFeedsItems[index] = InventoryFeedsNewItemLowSalesDataRule(prsmCaltId, invFeedsRules, importedInvFeedsItems[index]);
                importedInvFeedsItems[index].WalmartQtyPrismCalt = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyPrismCalt, 5);
                importedInvFeedsItems[index].OverstockQtyPrismCalt = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyPrismCalt, 5);
              }
              break;
            case 1:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  if (importedInvFeedsItems[index].PrismCaltFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(prsmCaltId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyPrismCalt = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyPrismCalt, 5);
                    importedInvFeedsItems[index].OverstockQtyPrismCalt = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyPrismCalt, 5);
                  }
                }
                break;
              }
          }*/
          switch (importedInvFeedsItems[index].AppliedFeedingRuleNoZinusTracy)
          {
            case 9:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                  if (importedInvFeedsItems[index].ZinusTracyFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(zinusTracyId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyZinusTracy = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyZinusTracy, 5);
                    importedInvFeedsItems[index].OverstockQtyZinusTracy = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyZinusTracy, 5);
                  }
                }
                break;
              }
            case 5:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                }
                if (importedInvFeedsItems[index].ZinusTracyFeedable)
                {
                  importedInvFeedsItems[index] = await InventoryFeedsLowInventoryRule(zinusTracyId, invFeedsRules, importedInvFeedsItems[index], inventoryConfig);
                  importedInvFeedsItems[index].WalmartQtyZinusTracy = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyZinusTracy, 5);
                  importedInvFeedsItems[index].OverstockQtyZinusTracy = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyZinusTracy, 5);
                  importedInvFeedsItems[index].leftOverQtyZinusTracy = importedInvFeedsItems[index].QtyAvailActualZinusTracy - (importedInvFeedsItems[index].AmazonQtyZinusTracy + importedInvFeedsItems[index].eBayQtyZinusTracy
                      + importedInvFeedsItems[index].OverstockQtyZinusTracy + importedInvFeedsItems[index].WayfairQtyZinusTracy + importedInvFeedsItems[index].WalmartQtyZinusTracy + importedInvFeedsItems[index].HomeDepotQtyZinusTracy
                      + importedInvFeedsItems[index].TargetQtyZinusTracy + importedInvFeedsItems[index].BPMWebQtyZinusTracy + importedInvFeedsItems[index].MellowWebQtyZinusTracy);
                }
                break;
              }
            case 4:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                  if (importedInvFeedsItems[index].ZinusTracyFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(zinusTracyId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyZinusTracy = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyZinusTracy, 5);
                    importedInvFeedsItems[index].OverstockQtyZinusTracy = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyZinusTracy, 5);
                  }
                }
                break;
              }
            case 3:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                  if (importedInvFeedsItems[index].ZinusTracyFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(zinusTracyId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyZinusTracy = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyZinusTracy, 5);
                    importedInvFeedsItems[index].OverstockQtyZinusTracy = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyZinusTracy, 5);
                  }
                }
                break;
              }
            case 2:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                }
                if (importedInvFeedsItems[index].ZinusTracyFeedable)
                {
                  importedInvFeedsItems[index] = await InventoryFeedsNewItemLowSalesDataRule(mainslId, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                  importedInvFeedsItems[index].WalmartQtyZinusTracy = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyZinusTracy, 5);
                  importedInvFeedsItems[index].OverstockQtyZinusTracy = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyZinusTracy, 5);
                  importedInvFeedsItems[index].leftOverQtyZinusTracy = importedInvFeedsItems[index].QtyAvailActualZinusTracy - (importedInvFeedsItems[index].AmazonQtyZinusTracy + importedInvFeedsItems[index].eBayQtyZinusTracy
                      + importedInvFeedsItems[index].OverstockQtyZinusTracy + importedInvFeedsItems[index].WayfairQtyZinusTracy + importedInvFeedsItems[index].WalmartQtyZinusTracy + importedInvFeedsItems[index].HomeDepotQtyZinusTracy
                      + importedInvFeedsItems[index].TargetQtyZinusTracy + importedInvFeedsItems[index].BPMWebQtyZinusTracy + importedInvFeedsItems[index].MellowWebQtyZinusTracy);
                }
                break;
              }
            case 1:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                  if (importedInvFeedsItems[index].ZinusTracyFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(zinusTracyId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyZinusTracy = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyZinusTracy, 5);
                    importedInvFeedsItems[index].OverstockQtyZinusTracy = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyZinusTracy, 5);
                  }
                }
                break;
              }
          }
          switch (importedInvFeedsItems[index].AppliedFeedingRuleNoZinusChs)
          {
            case 9:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                  if (importedInvFeedsItems[index].ZinusChsFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(zinusChsId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyZinusChs = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyZinusChs, 5);
                    importedInvFeedsItems[index].OverstockQtyZinusChs = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyZinusChs, 5);
                  }
                }
                break;
              }
            case 5:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                }
                if (importedInvFeedsItems[index].ZinusChsFeedable)
                {
                  importedInvFeedsItems[index] = await InventoryFeedsLowInventoryRule(zinusChsId, invFeedsRules, importedInvFeedsItems[index], inventoryConfig);
                  importedInvFeedsItems[index].WalmartQtyZinusChs = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyZinusChs, 5);
                  importedInvFeedsItems[index].OverstockQtyZinusChs = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyZinusChs, 5);
                  importedInvFeedsItems[index].leftOverQtyZinusChs = importedInvFeedsItems[index].QtyAvailActualZinusChs - (importedInvFeedsItems[index].AmazonQtyZinusChs + importedInvFeedsItems[index].eBayQtyZinusChs
                      + importedInvFeedsItems[index].OverstockQtyZinusChs + importedInvFeedsItems[index].WayfairQtyZinusChs + importedInvFeedsItems[index].WalmartQtyZinusChs + importedInvFeedsItems[index].HomeDepotQtyZinusChs
                      + importedInvFeedsItems[index].TargetQtyZinusChs + importedInvFeedsItems[index].BPMWebQtyZinusChs + importedInvFeedsItems[index].MellowWebQtyZinusChs);
                }
                break;
              }
            case 4:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                  if (importedInvFeedsItems[index].ZinusChsFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(zinusChsId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyZinusChs = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyZinusChs, 5);
                    importedInvFeedsItems[index].OverstockQtyZinusChs = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyZinusChs, 5);
                  }
                }
                break;
              }
            case 3:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                  if (importedInvFeedsItems[index].ZinusChsFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(zinusChsId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyZinusChs = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyZinusChs, 5);
                    importedInvFeedsItems[index].OverstockQtyZinusChs = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyZinusChs, 5);
                  }
                }
                break;
              }
            case 2:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                }
                if (importedInvFeedsItems[index].ZinusChsFeedable)
                {
                  importedInvFeedsItems[index] = await InventoryFeedsNewItemLowSalesDataRule(mainslId, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                  importedInvFeedsItems[index].WalmartQtyZinusChs = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyZinusChs, 5);
                  importedInvFeedsItems[index].OverstockQtyZinusChs = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyZinusChs, 5);
                  importedInvFeedsItems[index].leftOverQtyZinusChs = importedInvFeedsItems[index].QtyAvailActualZinusChs - (importedInvFeedsItems[index].AmazonQtyZinusChs + importedInvFeedsItems[index].eBayQtyZinusChs
                      + importedInvFeedsItems[index].OverstockQtyZinusChs + importedInvFeedsItems[index].WayfairQtyZinusChs + importedInvFeedsItems[index].WalmartQtyZinusChs + importedInvFeedsItems[index].HomeDepotQtyZinusChs
                      + importedInvFeedsItems[index].TargetQtyZinusChs + importedInvFeedsItems[index].BPMWebQtyZinusChs + importedInvFeedsItems[index].MellowWebQtyZinusChs);
                }
                break;
              }
            case 1:
              {
                InvSalesParetoRuleListItemDTO invParetoRuleData12 = invParetoRuleList.FindLast((InvSalesParetoRuleListItemDTO ish) => ish.ItemNoId == importedInvFeedsItems[index].ItemNoId);
                if (invParetoRuleData12 != null)
                {
                  importedInvFeedsItems[index].QtyAvailCGInv = invParetoRuleData12.CGQty;
                  importedInvFeedsItems[index] = await CheckWayfairCGStockRule((int)inventoryConfig.WayfairCgstockMinQty, importedInvFeedsItems[index]);
                  if (importedInvFeedsItems[index].ZinusChsFeedable)
                  {
                    importedInvFeedsItems[index] = await InventoryFeedsCustomRulesParetoDataRule(zinusChsId, smallMarketsCnt, invParetoRuleData12, inventoryConfig, invFeedsRules, invFeedsRuleSku, importedInvFeedsItems[index]);
                    importedInvFeedsItems[index].WalmartQtyZinusChs = checkWalmartMinQtyRule(importedInvFeedsItems[index].WalmartQtyZinusChs, 5);
                    importedInvFeedsItems[index].OverstockQtyZinusChs = checkOverstockMinQtyRule(importedInvFeedsItems[index].OverstockQtyZinusChs, 5);
                  }
                }
                break;
              }
          }
          // End of Switch

          //continue;
        }
        //List<NsIcr> nsIcrs = await _kc.NsIcrs.Where((NsIcr n) => n.ItemNoId == importedInvFeedsItems[index].ItemNoId && n.IsInvFeed > (int?)0).ToListAsync();
        List<MkIcr> mkIcrs = await _kc.MkIcrs.Where((MkIcr n) => n.ItemNoId == importedInvFeedsItems[index].ItemNoId && n.IsInvFeed == true).ToListAsync();
        if (mkIcrs != null && (importedInvFeedsItems[index].isCooMasterSku == true))
        {
          /*
          importedInvFeedsItems[index].AppliedFeedingRuleNoBanc = 0;
          importedInvFeedsItems[index].AppliedFeedingRuleTypeBanc = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == 0).FirstOrDefault().Description;
          importedInvFeedsItems[index].AppliedFeedingRuleNoMainsl = 0;
          importedInvFeedsItems[index].AppliedFeedingRuleTypeMainsl = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == 0).FirstOrDefault().Description;
          importedInvFeedsItems[index].AppliedFeedingRuleNoSWCAFT = 0;
          importedInvFeedsItems[index].AppliedFeedingRuleTypeSWCAFT = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == 0).FirstOrDefault().Description;
          importedInvFeedsItems[index].AppliedFeedingRuleNoBasc = 0;
          importedInvFeedsItems[index].AppliedFeedingRuleTypeBasc = invFeedsAppliedRules.Where((InvFeedsAppliedRule i) => i.RuleNo == 0).FirstOrDefault().Description;
          */
          foreach (MkIcr tmpIcr in mkIcrs)
          {
            updateEachMarketSKUByMarketID(tmpIcr.MarketId, tmpIcr.CustSku, importedInvFeedsItems[index]);
          }
          /*
          foreach (NsIcr tmpIcr in nsIcrs)
          {
            updateEachMarketSKU(tmpIcr.CustomerId, tmpIcr.CustSku, importedInvFeedsItems[index]);
          }*/
        }
        if (importedInvFeedsItems[index].isCooMasterSku == false)
        {
          importedInvFeedsItems.Remove(importedInvFeedsItems[index]);
        }
        else
        {
          index++;
        }
      }


      // End

      serviceResponse.isOkay = true;
      try
      {

        List<InvFeedsRepItemDetail> invFeedsRepItemDetailList = new List<InvFeedsRepItemDetail>();
        List<InvFeedsRepItemLoc> invFeedsRepItemLocList = new List<InvFeedsRepItemLoc>();
        List<InvFeedsReportItem> tmpInvFeedsReportItems = new List<InvFeedsReportItem>();
        InvFeedsReportItem tmpInvFeedsReportItem = new InvFeedsReportItem();
        List<InvFeedsRepTableDetail> invFeedsRepTableDetails = new List<InvFeedsRepTableDetail>();
        InvFeedsRepTableDetail invFeedsRepTableDetail = new InvFeedsRepTableDetail();

        foreach (GetInventoryFeedsItemDTO tmpDTO in importedInvFeedsItems)
        {
          invFeedsRepItemDetailList = await _kc.InvFeedsRepItemDetails
            .Where(i => i.InvFeedsReportItemId == tmpDTO.InvFeedsReportItemId)
            .Include(i => i.InvFeedsReportItem)
            .Include(i => i.InvFeedsRepItemLocs)
            .ToListAsync();
          foreach (InvFeedsRepItemDetail tmpDetail in invFeedsRepItemDetailList)
          //Parallel.ForEach(invFeedsRepItemDetailList, tmpDetail =>
          {
            invFeedsRepItemLocList = tmpDetail.InvFeedsRepItemLocs.ToList();
            await _kc.BulkDeleteAsync(invFeedsRepItemLocList);
            //await _kc.SaveChangesAsync();
          }
          await _kc.BulkDeleteAsync(invFeedsRepItemDetailList);
          //await _kc.SaveChangesAsync();
          tmpInvFeedsReportItem = await _kc.InvFeedsReportItems
            .Where(i => i.InvFeedsReportItemId == tmpDTO.InvFeedsReportItemId)
            .Include(i => i.InvFeedsRepTableDetail)
            .Include(i => i.InvFeedsRepItemDetails)
            .FirstOrDefaultAsync();
          invFeedsRepTableDetail = await _kc.InvFeedsRepTableDetails
            .Where(i => i.InvFeedsReportItemId == tmpDTO.InvFeedsReportItemId)
            .Include(i => i.InvFeedsReportItem)
            .FirstOrDefaultAsync();
          //_kc.InvFeedsRepTableDetails.Remove(invFeedsRepTableDetail);
          //_kc.InvFeedsReportItems.Remove(tmpInvFeedsReportItem);
          //await _kc.SaveChangesAsync();
          if (tmpInvFeedsReportItem != null)
          { tmpInvFeedsReportItems.Add(tmpInvFeedsReportItem); }
          if (invFeedsRepTableDetail != null)
          { invFeedsRepTableDetails.Add(invFeedsRepTableDetail); }
          //result = await UpdateInvFeedItemDetail(empId, tmpDTO);
        }
        await _kc.BulkDeleteAsync(invFeedsRepTableDetails);
        //_kc.InvFeedsRepTableDetails.RemoveRange(invFeedsRepTableDetails);
        //await _kc.SaveChangesAsync();
        //_kc.InvFeedsReportItems.RemoveRange(tmpInvFeedsReportItems);

        await _kc.BulkDeleteAsync(tmpInvFeedsReportItems);
        //await _kc.SaveChangesAsync();
        importedInvFeedsItems = DistributeLeftOverQty(smallMarketsCnt, importedInvFeedsItems);
        //        result = true;
        result = await SaveInventoryFeeds(true, invFeedReport.InvFeedsReportId, importedInvFeedsItems);
        //await UpsertInvFeedsTable(invFeedReport.InvFeedsReportId, importedInvFeedsItems);
      }
      catch (Exception ex)
      {
        serviceResponse.isOkay = false;
        serviceResponse.errorMessages = new List<string>() { ex.Message };
        //serviceResponse.errorMessages.Add(ex.Message);
      }
      return serviceResponse;
    }

    // Import StagePO/Warehouse Qty from user
    // By Brian Yi on 05/27/2022
    public async Task<InventoryFeedsImportResponseDTO> ReviseWarehouseQtyByUser(int empId, List<UserRevisedWarehouseQtyDTO> warehouseQtyByUserList)
    {
      int bancId = 4, mainslId = 25, swcaftId = 54, bascId = 62, prsmCastId = 51, prsmCaltId = 67, zinusTracyId = 57, zinusChsId = 108, amazonID = 5, bpmWebID = 9, ebayID = 12, houzzID = 14, mellowWebID = 18, ostID = 21, walmartID = 26, wayfairID = 29, homeDepotID = 40, targetID = 51;

      InventoryFeedsImportResponseDTO serviceResponse = new InventoryFeedsImportResponseDTO();
      bool result = true;
      DateTime today = DateTime.Now;
      DateTime beforeDate = new DateTime(today.AddDays(-1.0).Year, today.AddDays(-1.0).Month, today.AddDays(-1.0).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(today.AddDays(1.0).Year, today.AddDays(1.0).Month, today.AddDays(1.0).Day, 0, 0, 0);

      InvFeedsReport invFeedReport = await (from x in _kc.InvFeedsReports
                                           .Where((InvFeedsReport ifr) => (DateTime)ifr.CreatedDate > beforeDate && (DateTime)ifr.CreatedDate < afterDate)
                                           .Include((InvFeedsReport x) => x.InvFeedsItems)
                                           .Include(x => x.InvFeedsReportItems)
                                            orderby x.CreatedDate descending
                                            select x).FirstOrDefaultAsync();

      if (invFeedReport == null)
      {
        serviceResponse.isOkay = false;
        serviceResponse.errorMessages = new List<string>() { "There is no current warehouse report to revise! Get current inventory first!" };
        //serviceResponse.errorMessages.Add("There is no current warehouse report to revise! Get current inventory first!");
        return serviceResponse;
      }
      serviceResponse.isOkay = true;
      serviceResponse.errorMessages = new List<string>() { "Done!" };
      List<InvFeedsItem> invFeedsItems = await _kc.InvFeedsItems
        .Where(x => x.InvFeedsReportId == invFeedReport.InvFeedsReportId)
        .Include(x => x.ItemNo)
        .Include(x => x.InvFeedsItemLocQties)
        .ToListAsync();

      InvFeedsItem tmpInvFeedsItem = new InvFeedsItem();
      InvFeedsItemLocQty tmpLocQty = new InvFeedsItemLocQty();
      foreach (UserRevisedWarehouseQtyDTO tmpDto in warehouseQtyByUserList)
      {
        try
        {
          tmpInvFeedsItem = invFeedsItems.Where(x => x.ItemNo.ItemName == tmpDto.sku).FirstOrDefault();
          if (tmpInvFeedsItem != null)
          {
            if (tmpInvFeedsItem.InvFeedsItemLocQties.Count > 0)
            {
              // BANC
              tmpLocQty = tmpInvFeedsItem.InvFeedsItemLocQties.Where(x => x.ItemLocId == bancId).FirstOrDefault();
              if (tmpLocQty != null)
              {
                tmpLocQty.QtyAvail = tmpDto.qtyAvailBanc;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOBanc;
                _kc.InvFeedsItemLocQties.Update(tmpLocQty);
              }
              else if (tmpLocQty == null && (tmpDto.qtyAvailBanc > 0 || tmpDto.qtyStagePOBanc > 0))
              {
                tmpLocQty = new InvFeedsItemLocQty();
                tmpLocQty.ItemLocId = bancId;
                tmpLocQty.InvFeedsItemId = tmpInvFeedsItem.InvFeedsItemId;
                tmpLocQty.QtyAvail = tmpDto.qtyAvailBanc;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOBanc;
                await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
              }

              // BASC
              tmpLocQty = tmpInvFeedsItem.InvFeedsItemLocQties.Where(x => x.ItemLocId == bascId).FirstOrDefault();
              if (tmpLocQty != null)
              {
                tmpLocQty.QtyAvail = tmpDto.qtyAvailBasc;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOBasc;
                _kc.InvFeedsItemLocQties.Update(tmpLocQty);
              }
              else if (tmpLocQty == null && (tmpDto.qtyAvailBasc > 0 || tmpDto.qtyStagePOBasc > 0))
              {
                tmpLocQty = new InvFeedsItemLocQty();
                tmpLocQty.ItemLocId = bascId;
                tmpLocQty.InvFeedsItemId = tmpInvFeedsItem.InvFeedsItemId;
                tmpLocQty.QtyAvail = tmpDto.qtyAvailBasc;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOBasc;
                await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
              }

              // Mainsl
              tmpLocQty = tmpInvFeedsItem.InvFeedsItemLocQties.Where(x => x.ItemLocId == mainslId).FirstOrDefault();
              if (tmpLocQty != null)
              {
                tmpLocQty.QtyAvail = tmpDto.qtyAvailMainsl;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOMainsl;
                _kc.InvFeedsItemLocQties.Update(tmpLocQty);
              }
              else if (tmpLocQty == null && (tmpDto.qtyAvailMainsl > 0 || tmpDto.qtyStagePOMainsl > 0))
              {
                tmpLocQty = new InvFeedsItemLocQty();
                tmpLocQty.ItemLocId = mainslId;
                tmpLocQty.InvFeedsItemId = tmpInvFeedsItem.InvFeedsItemId;
                tmpLocQty.QtyAvail = tmpDto.qtyAvailMainsl;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOMainsl;
                await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
              }

              // Swcaft
              tmpLocQty = tmpInvFeedsItem.InvFeedsItemLocQties.Where(x => x.ItemLocId == swcaftId).FirstOrDefault();
              if (tmpLocQty != null)
              {
                tmpLocQty.QtyAvail = tmpDto.qtyAvailSwcaft;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOSwcaft;
                _kc.InvFeedsItemLocQties.Update(tmpLocQty);
              }
              else if (tmpLocQty == null && (tmpDto.qtyAvailSwcaft > 0 || tmpDto.qtyStagePOSwcaft > 0))
              {
                tmpLocQty = new InvFeedsItemLocQty();
                tmpLocQty.ItemLocId = swcaftId;
                tmpLocQty.InvFeedsItemId = tmpInvFeedsItem.InvFeedsItemId;
                tmpLocQty.QtyAvail = tmpDto.qtyAvailSwcaft;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOSwcaft;
                await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
              }

              // Prism-Cast
              tmpLocQty = tmpInvFeedsItem.InvFeedsItemLocQties.Where(x => x.ItemLocId == prsmCastId).FirstOrDefault();
              if (tmpLocQty != null)
              {
                tmpLocQty.QtyAvail = tmpDto.qtyAvailPrismCast;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOPrismCast;
                _kc.InvFeedsItemLocQties.Update(tmpLocQty);
              }
              else if (tmpLocQty == null && (tmpDto.qtyAvailPrismCast > 0 || tmpDto.qtyStagePOPrismCast > 0))
              {
                tmpLocQty = new InvFeedsItemLocQty();
                tmpLocQty.ItemLocId = prsmCastId;
                tmpLocQty.InvFeedsItemId = tmpInvFeedsItem.InvFeedsItemId;
                tmpLocQty.QtyAvail = tmpDto.qtyAvailPrismCast;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOPrismCast;
                await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
              }

              // Prism-Calt
              tmpLocQty = tmpInvFeedsItem.InvFeedsItemLocQties.Where(x => x.ItemLocId == prsmCaltId).FirstOrDefault();
              if (tmpLocQty != null)
              {
                tmpLocQty.QtyAvail = tmpDto.qtyAvailPrismCalt;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOPrismCalt;
                _kc.InvFeedsItemLocQties.Update(tmpLocQty);
              }
              else if (tmpLocQty == null && (tmpDto.qtyAvailPrismCalt > 0 || tmpDto.qtyStagePOPrismCalt > 0))
              {
                tmpLocQty = new InvFeedsItemLocQty();
                tmpLocQty.ItemLocId = prsmCaltId;
                tmpLocQty.InvFeedsItemId = tmpInvFeedsItem.InvFeedsItemId;
                tmpLocQty.QtyAvail = tmpDto.qtyAvailPrismCalt;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOPrismCalt;
                await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
              }

              // Zinus-Tracy
              tmpLocQty = tmpInvFeedsItem.InvFeedsItemLocQties.Where(x => x.ItemLocId == zinusTracyId).FirstOrDefault();
              if (tmpLocQty != null)
              {
                tmpLocQty.QtyAvail = tmpDto.qtyAvailZinusTracy;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOZinusTracy;
                _kc.InvFeedsItemLocQties.Update(tmpLocQty);
              }
              else if (tmpLocQty == null && (tmpDto.qtyAvailZinusTracy > 0 || tmpDto.qtyStagePOZinusTracy > 0))
              {
                tmpLocQty = new InvFeedsItemLocQty();
                tmpLocQty.ItemLocId = zinusTracyId;
                tmpLocQty.InvFeedsItemId = tmpInvFeedsItem.InvFeedsItemId;
                tmpLocQty.QtyAvail = tmpDto.qtyAvailZinusTracy;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOZinusTracy;
                await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
              }

              // Zinus-CHS
              tmpLocQty = tmpInvFeedsItem.InvFeedsItemLocQties.Where(x => x.ItemLocId == zinusChsId).FirstOrDefault();
              if (tmpLocQty != null)
              {
                tmpLocQty.QtyAvail = tmpDto.qtyAvailZinusChs;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOZinusChs;
                _kc.InvFeedsItemLocQties.Update(tmpLocQty);
              }
              else if (tmpLocQty == null && (tmpDto.qtyAvailZinusChs > 0 || tmpDto.qtyStagePOZinusChs > 0))
              {
                tmpLocQty = new InvFeedsItemLocQty();
                tmpLocQty.ItemLocId = zinusChsId;
                tmpLocQty.InvFeedsItemId = tmpInvFeedsItem.InvFeedsItemId;
                tmpLocQty.QtyAvail = tmpDto.qtyAvailZinusChs;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOZinusChs;
                await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
              }

              await _kc.SaveChangesAsync();
            }
            else if (tmpInvFeedsItem.InvFeedsItemLocQties.Count == 0)
            {

              // Banc
              if (tmpDto.qtyAvailBanc > 0 || tmpDto.qtyStagePOBanc > 0)
              {
                tmpLocQty = new InvFeedsItemLocQty();
                tmpLocQty.ItemLocId = bancId;
                tmpLocQty.InvFeedsItemId = tmpInvFeedsItem.InvFeedsItemId;
                tmpLocQty.QtyAvail = tmpDto.qtyAvailBanc;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOBanc;
                await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
              }

              // Basc
              if (tmpDto.qtyAvailBasc > 0 || tmpDto.qtyStagePOBasc > 0)
              {
                tmpLocQty = new InvFeedsItemLocQty();
                tmpLocQty.ItemLocId = bascId;
                tmpLocQty.InvFeedsItemId = tmpInvFeedsItem.InvFeedsItemId;
                tmpLocQty.QtyAvail = tmpDto.qtyAvailBasc;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOBasc;
                await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
              }

              // Mainsl
              if (tmpDto.qtyAvailMainsl > 0 || tmpDto.qtyStagePOMainsl > 0)
              {
                tmpLocQty = new InvFeedsItemLocQty();
                tmpLocQty.ItemLocId = mainslId;
                tmpLocQty.InvFeedsItemId = tmpInvFeedsItem.InvFeedsItemId;
                tmpLocQty.QtyAvail = tmpDto.qtyAvailMainsl;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOMainsl;
                await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
              }

              // SWCAFT
              if (tmpDto.qtyAvailSwcaft > 0 || tmpDto.qtyStagePOSwcaft > 0)
              {
                tmpLocQty = new InvFeedsItemLocQty();
                tmpLocQty.ItemLocId = swcaftId;
                tmpLocQty.InvFeedsItemId = tmpInvFeedsItem.InvFeedsItemId;
                tmpLocQty.QtyAvail = tmpDto.qtyAvailSwcaft;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOSwcaft;
                await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
              }

              // PRISM-CAST
              if (tmpDto.qtyAvailPrismCast > 0 || tmpDto.qtyStagePOPrismCast > 0)
              {
                tmpLocQty = new InvFeedsItemLocQty();
                tmpLocQty.ItemLocId = prsmCastId;
                tmpLocQty.InvFeedsItemId = tmpInvFeedsItem.InvFeedsItemId;
                tmpLocQty.QtyAvail = tmpDto.qtyAvailPrismCast;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOPrismCast;
                await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
              }

              // PRISM-CALT
              if (tmpDto.qtyAvailPrismCalt > 0 || tmpDto.qtyStagePOPrismCalt > 0)
              {
                tmpLocQty = new InvFeedsItemLocQty();
                tmpLocQty.ItemLocId = prsmCaltId;
                tmpLocQty.InvFeedsItemId = tmpInvFeedsItem.InvFeedsItemId;
                tmpLocQty.QtyAvail = tmpDto.qtyAvailPrismCalt;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOPrismCalt;
                await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
              }

              // Zinus-Tracy
              if (tmpDto.qtyAvailZinusTracy > 0 || tmpDto.qtyStagePOZinusTracy > 0)
              {
                tmpLocQty = new InvFeedsItemLocQty();
                tmpLocQty.ItemLocId = zinusTracyId;
                tmpLocQty.InvFeedsItemId = tmpInvFeedsItem.InvFeedsItemId;
                tmpLocQty.QtyAvail = tmpDto.qtyAvailZinusTracy;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOZinusTracy;
                await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
              }

              // Zinus-Chs
              if (tmpDto.qtyAvailZinusChs > 0 || tmpDto.qtyStagePOZinusChs > 0)
              {
                tmpLocQty = new InvFeedsItemLocQty();
                tmpLocQty.ItemLocId = prsmCastId;
                tmpLocQty.InvFeedsItemId = tmpInvFeedsItem.InvFeedsItemId;
                tmpLocQty.QtyAvail = tmpDto.qtyAvailZinusChs;
                tmpLocQty.StagePoqtyModified = tmpDto.qtyStagePOZinusChs;
                await _kc.InvFeedsItemLocQties.AddAsync(tmpLocQty);
              }

              await _kc.SaveChangesAsync();
            } // End of if update

          }
        }
        catch (Exception ex)
        {
          serviceResponse.isOkay = false;
          serviceResponse.errorMessages = new List<string>() { ex.Message };
        }
      }

      return serviceResponse;
    }

    public async Task<bool> UpsertInvFeedsTable(long invFeedsRepId, List<GetInventoryFeedsItemDTO> invFeedsItemList)
    {
      List<InvFeedsRepTableDetail> invFeedsRepTableDetails = new List<InvFeedsRepTableDetail>();

      //List<InvFeedsRepTableDetail> curInvFeedsRepTableDetails = await _kc.InvFeedsRepTableDetails
      //  .Where(i => i.InvFeedsReportId == invFeedsRepId)
      //  .ToListAsync();

      InvFeedsReport invFeedsReport = await _kc.InvFeedsReports
        .Where(i => i.InvFeedsReportId == invFeedsRepId)
        .FirstOrDefaultAsync();
      InvFeedsRepTableDetail tmpDetail = new InvFeedsRepTableDetail();
      //invFeedsRepTableDetails = 
      try
      {
        invFeedsRepTableDetails = invFeedsItemList.Select(i =>
        new InvFeedsRepTableDetail()
        {
          InvFeedsReport = invFeedsReport,
          InvFeedsReportId = invFeedsReport.InvFeedsReportId,
          InvFeedsReportItemId = i.InvFeedsReportItemId,
          ItemNoId = i.ItemNoId,
          ItemName = i.ItemName,
          //QtyAvailBanc = i.QtyAvailBanc,
          //QtyAvailBasc = i.QtyAvailBasc,
          QtyAvailMainSl = i.QtyAvailMainsl,
          QtyAvailCastleGate = i.QtyAvailCGInv,
          //QtyAvailSwcaft = i.QtyAvailSWCAFT,
          QtyAvailAmazon = i.QtyAvailAmzInv,
          //QtyAvailPrismCast = i.QtyAvailPrismCast,
          //QtyAvailPrismCalt = i.QtyAvailPrismCalt,
          QtyAvailZinusTracy = i.QtyAvailZinusTracy,
          QtyAvailZinusChs = i.QtyAvailZinusChs,
          //TotalStagePoqtyBanc = i.totalStagePOQtyBanc,
          //TotalStagePoqtyBasc = i.totalStagePOQtyBasc,
          TotalStagePoqtyMainSl = i.totalStagePOQtyMainsl,
          //TotalStagePoqtySwcaft = i.totalStagePOQtySWCAFT,
          //TotalStagePoqtyPrismCast = i.totalStagePOQtyPrismCast,
          //TotalStagePoqtyPrismCalt = i.totalStagePOQtyPrismCalt,
          TotalStagePoqtyZinusTracy = i.totalStagePOQtyZinusTracy,
          TotalStagePoqtyZinusChs = i.totalStagePOQtyZinusChs,
          //AmazonQtyBanc = i.AmazonQtyBanc,
          //AmazonQtyBasc = i.AmazonQtyBasc,
          AmazonQtyMainSl = i.AmazonQtyMainsl,
          //AmazonQtySwcaft = i.AmazonQtySWCAFT,
          //AmazonQtyPrismCast = i.AmazonQtyPrismCast,
          //AmazonQtyPrismCalt = i.AmazonQtyPrismCalt,
          AmazonQtyZinusTracy = i.AmazonQtyZinusTracy,
          AmazonQtyZinusChs = i.AmazonQtyZinusChs,
          //WalmartQtyBanc = i.WalmartQtyBanc,
          //WalmartQtyBasc = i.WalmartQtyBasc,
          WalmartQtyMainSl = i.WalmartQtyMainsl,
          //WalmartQtySwcaft = i.WalmartQtySWCAFT,
          //WalmartQtyPrismCast = i.WalmartQtyPrismCast,
          //WalmartQtyPrismCalt = i.WalmartQtyPrismCalt,
          WalmartQtyZinusTracy = i.WalmartQtyZinusTracy,
          WalmartQtyZinusChs = i.WalmartQtyZinusChs,
          //WayfairQtyBanc = i.WayfairQtyBanc,
          //WayfairQtyBasc = i.WayfairQtyBasc,
          WayfairQtyMainSl = i.WayfairQtyMainsl,
          //WayfairQtySwcaft = i.WayfairQtySWCAFT,
          //WayfairQtyPrismCast = i.WayfairQtyPrismCast,
          //WayfairQtyPrismCalt = i.WayfairQtyPrismCalt,
          WayfairQtyZinusTracy = i.WayfairQtyZinusTracy,
          WayfairQtyZinusChs = i.WayfairQtyZinusChs,
          //OverstockQtyBanc = i.OverstockQtyBanc,
          //OverstockQtyBasc = i.OverstockQtyBasc,
          OverstockQtyMainSl = i.OverstockQtyMainsl,
          //OverstockQtySwcaft = i.OverstockQtySWCAFT,
          //OverstockQtyPrismCast = i.OverstockQtyPrismCast,
          //OverstockQtyPrismCalt = i.OverstockQtyPrismCalt,
          OverstockQtyZinusTracy = i.OverstockQtyZinusTracy,
          OverstockQtyZinusChs = i.OverstockQtyZinusChs,
          //HomeDepotQtyBanc = i.HomeDepotQtyBanc,
          //HomeDepotQtyBasc = i.HomeDepotQtyBasc,
          HomeDepotQtyMainSl = i.HomeDepotQtyMainsl,
          //HomeDepotQtySwcaft = i.HomeDepotQtySWCAFT,
          //HomeDepotQtyPrismCast = i.HomeDepotQtyPrismCast,
          //HomeDepotQtyPrismCalt = i.HomeDepotQtyPrismCalt,
          HomeDepotQtyZinusTracy = i.HomeDepotQtyZinusTracy,
          HomeDepotQtyZinusChs = i.HomeDepotQtyZinusChs,
          //TargetQtyBanc = i.TargetQtyBanc,
          //TargetQtyBasc = i.TargetQtyBasc,
          TargetQtyMainSl = i.TargetQtyMainsl,
          //TargetQtySwcaft = i.TargetQtySWCAFT,
          //TargetQtyPrismCast = i.TargetQtyPrismCast,
          //TargetQtyPrismCalt = i.TargetQtyPrismCalt,
          TargetQtyZinusTracy = i.TargetQtyZinusTracy,
          TargetQtyZinusChs = i.TargetQtyZinusChs,
          //EBayQtyBanc = i.eBayQtyBanc,
          //EBayQtyBasc = i.eBayQtyBasc,
          EBayQtyMainSl = i.eBayQtyMainsl,
          //EBayQtySwcaft = i.eBayQtySWCAFT,
          //EBayQtyPrismCast = i.eBayQtyPrismCast,
          //EBayQtyPrismCalt = i.eBayQtyPrismCalt,
          EBayQtyZinusTracy = i.eBayQtyZinusTracy,
          EBayQtyZinusChs = i.eBayQtyZinusChs,
          //BpmWebQtyBanc = i.BPMWebQtyBanc,
          //BpmWebQtyBasc = i.BPMWebQtyBasc,
          BpmWebQtyMainSl = i.BPMWebQtyMainsl,
          //BpmWebQtySwcaft = i.BPMWebQtySWCAFT,
          //BpmWebQtyPrismCast = i.BPMWebQtyPrismCast,
          //BpmWebQtyPrismCalt = i.BPMWebQtyPrismCalt,
          BpmWebQtyZinusTracy = i.BPMWebQtyZinusTracy,
          BpmWebQtyZinusChs = i.BPMWebQtyZinusChs,
          //MellowWebQtyBanc = i.MellowWebQtyBanc,
          //MellowWebQtyBasc = i.MellowWebQtyBasc,
          MellowWebQtyMainSl = i.MellowWebQtyMainsl,
          //MellowWebQtySwcaft = i.MellowWebQtySWCAFT,
          //MellowWebQtyPrismCast = i.MellowWebQtyPrismCast,
          //MellowWebQtyPrismCalt = i.MellowWebQtyPrismCalt,
          MellowWebQtyZinusTracy = i.MellowWebQtyZinusTracy,
          MellowWebQtyZinusChs = i.MellowWebQtyZinusChs,
          HouzzQtyBanc = i.HouzzQtyBanc,
          HouzzQtyBasc = i.HouzzQtyBasc,
          HouzzQtyMainSl = i.HouzzQtyMainsl,
          //HouzzQtySwcaft = i.HouzzQtySWCAFT,
          //QtyOnHandBanc = i.QtyOnHandBanc,
          //QtyOnHandBasc = i.QtyOnHandBasc,
          QtyOnHandMainSl = i.QtyOnHandMainsl,
          //QtyOnHandSwcaft = i.QtyOnHandSWCAFT,
          //QtyOnHandPrismCast = i.QtyOnHandPrismCast,
          //QtyOnHandPrismCalt = i.QtyOnHandPrismCalt,
          QtyOnHandZinusTracy = i.QtyOnHandZinusTracy,
          QtyOnHandZinusChs = i.QtyOnHandZinusChs
        }).ToList();

        //List<InvFeedsRepTableDetail> bads = invFeedsRepTableDetails.Where(i => i.InvFeedsReportItemId == null || i.InvFeedsReportItemId == 0).ToList();
        invFeedsRepTableDetails.RemoveAll(i => i.InvFeedsReportItemId == null || i.InvFeedsReportItemId < 1);
        invFeedsRepTableDetails.RemoveAll(i => i.ItemNoId.HasValue == false || i.InvFeedsReportItemId < 1);
        //curInvFeedsRepTableDetails
        //foreach (InvFeedsRepTableDetail tmpDto in invFeedsRepTableDetails)
        //{
        //  tmpDetail = curInvFeedsRepTableDetails.Where(i => i.ItemNoId == tmpDto.ItemNoId).First();
        //  if(tmpDetail != null) 
        //  { 
        //    _kc.InvFeedsRepTableDetails.Remove(tmpDetail); 
        //    await _kc.SaveChangesAsync();
        //  }
        //}
        // _kc.BulkInsertOrUpdate(invFeedsRepTableDetails);
        //await _kc.BulkInsertAsync(invFeedsRepTableDetails);
        await _kc.InvFeedsRepTableDetails.AddRangeAsync(invFeedsRepTableDetails);
        await _kc.SaveChangesAsync();
      }
      catch (Exception ex)
      {
        Console.WriteLine(ex);
      }
      return true;
    }

    // Send Inventory Feeds Qty to EDI (for Target)
    // By Brian Yi
    // return 1 : Everything good
    //  -1: Error on Inventory Feeds Report
    //  -2: Error on something else
    public async Task<int> InvFeedsQtyToTargetEDI(int empId, DateTime today)
    {
      int targetCustNo = 51, targetMkId = 341, bancId = 4, mainslId = 25, swcaftId = 54, bascId = 62, prsmCastId = 51, prsmCaltId = 67, zinusTracyId = 57, zinusChsId = 108;
      DateTime beforeDate = new DateTime(today.AddDays(-1).Year, today.AddDays(-1).Month, today.AddDays(-1).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(today.AddDays(1).Year, today.AddDays(1).Month, today.AddDays(1).Day, 0, 0, 0);
      InvFeedsReport invFeedsReport = await _kc.InvFeedsReports
        .Where(i => (DateTime)i.CreatedDate > beforeDate && (DateTime)i.CreatedDate < afterDate && i.IsApproved == true && i.HasSentToEdi == false)
        .OrderByDescending(i => i.CreatedDate)
        .FirstOrDefaultAsync();

      if (invFeedsReport == null) return -1;

      List<InvFeedsRepTableDetail> invFeedsRepTableDetail = await _kc.InvFeedsRepTableDetails
        .Where(i => i.InvFeedsReportId == invFeedsReport.InvFeedsReportId)
        .ToListAsync();


      List<MkIcr> mkIcrs = await _kc.MkIcrs
            .Where(n => n.MarketId == targetMkId && n.IsInvFeed == true)
            .Include(n => n.ItemNo)
            .ToListAsync();


      MkInvFeedT mkInvFeedTBanc;
      MkInvFeedT mkInvFeedTBasc;
      MkInvFeedT mkInvFeedTMainsl;
      MkInvFeedT mkInvFeedTSwcaft;
      MkInvFeedT mkInvFeedTPrismCast;
      MkInvFeedT mkInvFeedTPrismCalt;
      MkInvFeedT mkInvFeedTZinusTracy;
      MkInvFeedT mkInvFeedTZinusChs;

      List<MkInvFeedD> mkInvFeedDsBanc = new List<MkInvFeedD>();
      List<MkInvFeedD> mkInvFeedDsBasc = new List<MkInvFeedD>();
      List<MkInvFeedD> mkInvFeedDsMainsl = new List<MkInvFeedD>();
      List<MkInvFeedD> mkInvFeedDsSwcaft = new List<MkInvFeedD>();
      List<MkInvFeedD> mkInvFeedDsPrismCast = new List<MkInvFeedD>();
      List<MkInvFeedD> mkInvFeedDsPrismCalt = new List<MkInvFeedD>();
      List<MkInvFeedD> mkInvFeedDsZinusTracy = new List<MkInvFeedD>();
      List<MkInvFeedD> mkInvFeedDsZinusChs = new List<MkInvFeedD>();
      MkInvFeedD tmpMkInvFeedD = new MkInvFeedD();

      try
      {
        var bulkConfigBanc = new BulkConfig()
        {
          SetOutputIdentity = true,
          PreserveInsertOrder = true
        };

        var bulkConfigBasc = new BulkConfig()
        {
          SetOutputIdentity = true,
          PreserveInsertOrder = true
        };

        var bulkConfigMainsl = new BulkConfig()
        {
          SetOutputIdentity = true,
          PreserveInsertOrder = true
        };

        var bulkConfigSwcaft = new BulkConfig()
        {
          SetOutputIdentity = true,
          PreserveInsertOrder = true
        };

        var bulkConfigPrismCast = new BulkConfig()
        {
          SetOutputIdentity = true,
          PreserveInsertOrder = true
        };

        var bulkConfigPrismCalt = new BulkConfig()
        {
          SetOutputIdentity = true,
          PreserveInsertOrder = true
        };

        var bulkConfigZinusTracy = new BulkConfig()
        {
          SetOutputIdentity = true,
          PreserveInsertOrder = true
        };

        var bulkConfigZinusChs = new BulkConfig()
        {
          SetOutputIdentity = true,
          PreserveInsertOrder = true
        };


        // From BANC
        mkInvFeedTBanc = new MkInvFeedT()
        {
          CustomerId = 51,
          LocationId = bancId,
          EmpSentId = empId,
          FeedDate = today
        };
        await _kc.MkInvFeedTs.AddAsync(mkInvFeedTBanc);
        await _kc.SaveChangesAsync();

        // From BASC
        mkInvFeedTBasc = new MkInvFeedT()
        {
          CustomerId = 51,
          LocationId = bascId,
          EmpSentId = empId,
          FeedDate = today
        };
        await _kc.MkInvFeedTs.AddAsync(mkInvFeedTBasc);
        await _kc.SaveChangesAsync();


        // From MainSL
        mkInvFeedTMainsl = new MkInvFeedT()
        {
          CustomerId = 51,
          LocationId = mainslId,
          EmpSentId = empId,
          FeedDate = today
        };
        await _kc.MkInvFeedTs.AddAsync(mkInvFeedTMainsl);
        await _kc.SaveChangesAsync();

        // From SWCAFT
        mkInvFeedTSwcaft = new MkInvFeedT()
        {
          CustomerId = 51,
          LocationId = swcaftId,
          EmpSentId = empId,
          FeedDate = today
        };
        await _kc.MkInvFeedTs.AddAsync(mkInvFeedTSwcaft);
        await _kc.SaveChangesAsync();

        // From PRISM-CAST
        mkInvFeedTPrismCast = new MkInvFeedT()
        {
          CustomerId = 51,
          LocationId = prsmCastId,
          EmpSentId = empId,
          FeedDate = today
        };
        await _kc.MkInvFeedTs.AddAsync(mkInvFeedTPrismCast);
        await _kc.SaveChangesAsync();

        // From PRISM-CALT
        mkInvFeedTPrismCalt = new MkInvFeedT()
        {
          CustomerId = 51,
          LocationId = prsmCaltId,
          EmpSentId = empId,
          FeedDate = today
        };
        await _kc.MkInvFeedTs.AddAsync(mkInvFeedTPrismCalt);
        await _kc.SaveChangesAsync();

        // From Zinus-Tracy
        mkInvFeedTZinusTracy = new MkInvFeedT()
        {
          CustomerId = 51,
          LocationId = zinusTracyId,
          EmpSentId = empId,
          FeedDate = today
        };
        await _kc.MkInvFeedTs.AddAsync(mkInvFeedTZinusTracy);
        await _kc.SaveChangesAsync();

        // From Zinus-Chs
        mkInvFeedTZinusChs = new MkInvFeedT()
        {
          CustomerId = 51,
          LocationId = zinusChsId,
          EmpSentId = empId,
          FeedDate = today
        };
        await _kc.MkInvFeedTs.AddAsync(mkInvFeedTZinusChs);
        await _kc.SaveChangesAsync();

        int icrId = 0;

        foreach (InvFeedsRepTableDetail tmpModel in invFeedsRepTableDetail)
        {
          if (tmpModel.TargetQtyBanc != 0 || tmpModel.TargetQtyBasc != 0
            || tmpModel.TargetQtyMainSl != 0 || tmpModel.TargetQtySwcaft != 0
            || tmpModel.TargetQtyPrismCast != 0 || tmpModel.TargetQtyPrismCalt != 0
            || tmpModel.TargetQtyZinusTracy != 0 || tmpModel.TargetQtyZinusChs != 0)
          {
            icrId = mkIcrs.Where(i => i.ItemNoId == (int)tmpModel.ItemNoId).FirstOrDefault().ItemNoId;

            // For Banc
            if (tmpModel.TargetQtyBanc != 0)
            {
              tmpMkInvFeedD = new MkInvFeedD()
              {
                InvFeedT = mkInvFeedTBanc,
                InvFeedTId = mkInvFeedTBanc.InvFeedTId,
                IcrId = icrId,
                FeedQty = (int)tmpModel.TargetQtyBanc
              };
              mkInvFeedDsBanc.Add(tmpMkInvFeedD);
            }

            // For Basc
            if (tmpModel.TargetQtyBasc != 0)
            {
              tmpMkInvFeedD = new MkInvFeedD()
              {
                InvFeedT = mkInvFeedTBasc,
                InvFeedTId = mkInvFeedTBasc.InvFeedTId,
                IcrId = icrId,
                FeedQty = (int)tmpModel.TargetQtyBasc
              };
              mkInvFeedDsBasc.Add(tmpMkInvFeedD);
            }

            // For Mainsl
            if (tmpModel.TargetQtyMainSl != 0)
            {
              tmpMkInvFeedD = new MkInvFeedD()
              {
                InvFeedT = mkInvFeedTMainsl,
                InvFeedTId = mkInvFeedTMainsl.InvFeedTId,
                IcrId = icrId,
                FeedQty = (int)tmpModel.TargetQtyMainSl
              };
              mkInvFeedDsMainsl.Add(tmpMkInvFeedD);
            }

            // For Swcaft
            if (tmpModel.TargetQtySwcaft != 0)
            {
              tmpMkInvFeedD = new MkInvFeedD()
              {
                InvFeedT = mkInvFeedTSwcaft,
                InvFeedTId = mkInvFeedTSwcaft.InvFeedTId,
                IcrId = icrId,
                FeedQty = (int)tmpModel.TargetQtySwcaft
              };
              mkInvFeedDsSwcaft.Add(tmpMkInvFeedD);
            }

            // For Prism-cast
            if (tmpModel.TargetQtyPrismCast != 0)
            {
              tmpMkInvFeedD = new MkInvFeedD()
              {
                InvFeedT = mkInvFeedTPrismCast,
                InvFeedTId = mkInvFeedTPrismCast.InvFeedTId,
                IcrId = icrId,
                FeedQty = (int)tmpModel.TargetQtyPrismCast
              };
              mkInvFeedDsPrismCast.Add(tmpMkInvFeedD);
            }

            // For Prism-calt
            if (tmpModel.TargetQtyPrismCalt != 0)
            {
              tmpMkInvFeedD = new MkInvFeedD()
              {
                InvFeedT = mkInvFeedTPrismCalt,
                InvFeedTId = mkInvFeedTPrismCalt.InvFeedTId,
                IcrId = icrId,
                FeedQty = (int)tmpModel.TargetQtyPrismCalt
              };
              mkInvFeedDsPrismCalt.Add(tmpMkInvFeedD);
            }

            // For Zinus-Tracy
            if (tmpModel.TargetQtyZinusTracy != 0)
            {
              tmpMkInvFeedD = new MkInvFeedD()
              {
                InvFeedT = mkInvFeedTZinusTracy,
                InvFeedTId = mkInvFeedTZinusTracy.InvFeedTId,
                IcrId = icrId,
                FeedQty = (int)tmpModel.TargetQtyZinusTracy
              };
              mkInvFeedDsZinusTracy.Add(tmpMkInvFeedD);
            }

            // For Zinus-Chs
            if (tmpModel.TargetQtyZinusChs != 0)
            {
              tmpMkInvFeedD = new MkInvFeedD()
              {
                InvFeedT = mkInvFeedTZinusChs,
                InvFeedTId = mkInvFeedTZinusChs.InvFeedTId,
                IcrId = icrId,
                FeedQty = (int)tmpModel.TargetQtyZinusChs
              };
              mkInvFeedDsZinusChs.Add(tmpMkInvFeedD);
            }

            icrId = 0;
          }
        }
        _kc.BulkInsert(mkInvFeedDsBanc, bulkConfigBanc);
        _kc.BulkInsert(mkInvFeedDsBasc, bulkConfigBasc);
        _kc.BulkInsert(mkInvFeedDsMainsl, bulkConfigMainsl);
        _kc.BulkInsert(mkInvFeedDsSwcaft, bulkConfigSwcaft);
        _kc.BulkInsert(mkInvFeedDsPrismCast, bulkConfigPrismCast);
        _kc.BulkInsert(mkInvFeedDsPrismCalt, bulkConfigPrismCalt);
        _kc.BulkInsert(mkInvFeedDsZinusTracy, bulkConfigZinusTracy);
        _kc.BulkInsert(mkInvFeedDsZinusChs, bulkConfigZinusChs);
      }
      catch (Exception ex)
      {
        Console.WriteLine(ex.Message);
        return -1;
      }
      invFeedsReport.HasSentToEdi = true;
      _kc.Update(invFeedsReport);
      await _kc.SaveChangesAsync();
      return 1;
    }

    public int CustomerIDtoMarketID(int customerId)
    {
      const int amazonID = 5, bpmWebID = 9, ebayID = 12, houzzID = 14, mellowWebID = 18, ostID = 21, walmartID = 26, wayfairID = 29, homeDepotID = 40, targetID = 51;
      switch (customerId)
      {
        case amazonID:
          return 1;
        case bpmWebID:
          return 3;
        case ebayID:
          return 5;
        case houzzID:
          return 7;
        case mellowWebID:
          return 10;
        case ostID:
          return 12;
        case walmartID:
          return 16;
        case wayfairID:
          return 4;
        case homeDepotID:
          return 340;
        case targetID:
          return 341;
        default:
          return 0;
      }
      return 0;
    }


    public async Task<bool> CalculateItemABCPM()
    {
      DateTime today = DateTime.Now.Date;
      DateTime sunday = (from o in _kc.DimDates
                         where o.Date == today
                         select o.MondayOfWeek).Single().AddDays(-1.0);
      DateTime dateFr = sunday.AddDays(-364.0);
      DateTime dateTo = sunday.AddDays(-1.0);
      List<ItemABCDTO> invRawA = (from vd in _kc.KoAmzvendorRptSales
                                  join it in _kc.BpmItems on vd.ItemNo equals it.ItemName
                                  join dd in _kc.DimDates on vd.DateStart equals dd.Date
                                  where vd.DateStart >= dateFr && vd.DateStart <= dateTo && (it.ItemTypeId == 1 || it.ItemTypeId == 2) && vd.OrdRevenue != (decimal?)0m
                                  group vd by new { dd.MondayOfWeek, it.ItemNoId } into vg
                                  select new ItemABCDTO
                                  {
                                    mkid = 1,
                                    itid = vg.Key.ItemNoId,
                                    invDate = vg.Key.MondayOfWeek,
                                    invAmt = (decimal)vg.Sum((KoAmzvendorRptSale s) => s.OrdRevenue),
                                    invQty = (int)vg.Sum((KoAmzvendorRptSale s) => s.UnitOrdered)
                                  } into s
                                  orderby s.invAmt descending
                                  select s).ToList();
      List<int> amazonMarket = new List<int> { 4 };
      List<ItemABCDTO> invRawO = (from vt in _kc.InvTs
                                  join vd in _kc.InvDs on vt.InvTId equals vd.InvTId
                                  join it in _kc.BpmItems on vd.ItemNoId equals it.ItemNoId
                                  join dd in _kc.DimDates on vt.InvDate equals dd.Date
                                  where vt.InvDate >= dateFr && vt.InvDate <= dateTo && (it.ItemTypeId == 1 || it.ItemTypeId == 2) && amazonMarket.Contains(vt.CustomerId.Value) == false
                                  group vd by new { dd.MondayOfWeek, vt.CustomerId, vd.ItemNoId } into vg
                                  select new ItemABCDTO
                                  {
                                    mkid = (int)vg.Key.CustomerId,
                                    itid = vg.Key.ItemNoId,
                                    invDate = vg.Key.MondayOfWeek,
                                    invAmt = vg.Sum((InvD s) => s.LineTotal),
                                    invQty = vg.Sum((InvD s) => s.QtyInv)
                                  } into s
                                  orderby s.invAmt descending
                                  select s).ToList();
      foreach (ItemABCDTO raw in invRawO)
      {
        switch (raw.mkid)
        {
          case 1:
          case 2:
            raw.mkid = 3;
            break;
          case 5:
            raw.mkid = 4;
            break;
          case 28:
          case 34:
            raw.mkid = 7;
            break;
          case 29:
            raw.mkid = 8;
            break;
          case 26:
            raw.mkid = 9;
            break;
          default:
            raw.mkid = 10;
            break;
        }
      }
      List<ItemABCDTO> invRawAFC = new List<ItemABCDTO>();
      foreach (ItemABCDTO item3 in invRawA)
      {
        invRawAFC.Add(new ItemABCDTO
        {
          mkid = 2,
          invAmt = item3.invAmt,
          invQty = item3.invQty,
          itid = item3.itid,
          invDate = item3.invDate
        });
      }
      foreach (ItemABCDTO amzds in invRawO.FindAll((ItemABCDTO x) => x.mkid == 7))
      {
        ItemABCDTO amaA = invRawAFC.Find((ItemABCDTO x) => x.itid == amzds.itid && x.invDate == amzds.invDate);
        if (amaA != null)
        {
          amaA.invAmt -= amzds.invAmt;
          amaA.invQty -= amzds.invQty;
        }
      }
      List<ItemABCDTO> wayfairOB = new List<ItemABCDTO>();
      foreach (ItemABCDTO item in invRawO.FindAll((ItemABCDTO x) => x.mkid == 7 || x.mkid == 8))
      {
        ItemABCDTO temp = wayfairOB.Find((ItemABCDTO x) => x.invDate == item.invDate && x.itid == item.itid);
        if (temp != null)
        {
          temp.invAmt += item.invAmt;
          temp.invQty += item.invQty;
          continue;
        }
        wayfairOB.Add(new ItemABCDTO
        {
          mkid = 6,
          invAmt = item.invAmt,
          invQty = item.invQty,
          itid = item.itid,
          invDate = item.invDate
        });
      }
      List<ItemABCDTO> invRaw = invRawA.Union(invRawO).Union(invRawAFC).Union(wayfairOB)
          .ToList();
      List<ItemABCDTO> invWkAll = (from s in invRaw
                                   group s by new { s.mkid, s.itid, s.invDate } into g
                                   select new ItemABCDTO
                                   {
                                     mkid = g.Key.mkid,
                                     itid = g.Key.itid,
                                     invDate = g.Key.invDate,
                                     invAmt = g.Sum((ItemABCDTO x) => x.invAmt),
                                     invQty = g.Sum((ItemABCDTO x) => x.invQty)
                                   } into s
                                   orderby s.mkid, s.itid
                                   select s).ToList();
      List<ItemAbcPm> itAbcList = new List<ItemAbcPm>();
      List<short> mkidAll = _kc.FcstMarkets.Select((FcstMarket x) => x.FcstMarketId).ToList();
      foreach (short market in mkidAll)
      {
        List<ItemABCDTO> invMkAll = invWkAll.Where((ItemABCDTO s) => s.mkid == market).ToList();
        List<ItemABCDTO> itList = (from s in invMkAll
                                   group s by s.itid into g
                                   select new ItemABCDTO
                                   {
                                     itid = g.Key,
                                     invQty = g.Sum((ItemABCDTO x) => x.invQty)
                                   } into s
                                   orderby s.invQty descending
                                   select s).ToList();
        decimal totalQty = (decimal)invMkAll.Sum((ItemABCDTO s) => s.invQty);
        decimal aggQty = default(decimal);
        foreach (ItemABCDTO item2 in itList)
        {
          ItemAbcPm itabc = new ItemAbcPm();
          int currItId = (int)item2.itid;
          itabc.FcstDate = sunday;
          itabc.MarketId = market;
          itabc.ItemNoId = currItId;
          itabc.TotalSale = (decimal)item2.invQty;
          aggQty += (decimal)item2.invQty;
          decimal aggRate = aggQty / totalQty;
          if (aggRate <= 0.75m)
          {
            itabc.Abc = "A";
          }
          else if (aggRate < 0.9m)
          {
            itabc.Abc = "B";
          }
          else
          {
            itabc.Abc = "C";
          }
          List<ItemABCDTO> invCurrItem = (from s in invMkAll
                                          where s.itid == currItId
                                          orderby s.invDate
                                          select s).ToList();
          if (invCurrItem.Count > 0)
          {
            double avg = Convert.ToDouble(invCurrItem.Sum((ItemABCDTO x) => x.invQty)) / 52.0;
            double stdev = 100.0 * Math.Sqrt(invCurrItem.Average((ItemABCDTO v) => Math.Pow(((double)v.invQty - avg) / (double)invCurrItem.Count, 2.0))) / avg;
            itabc.AvgQty = Math.Round(Convert.ToDecimal(avg), 2);
            if (!double.IsNaN(stdev) && !double.IsInfinity(stdev))
            {
              itabc.StdDev = Convert.ToDecimal(stdev);
            }
            if (stdev <= 2.0)
            {
              itabc.Xyz = "X";
            }
            else if (stdev < 5.0)
            {
              itabc.Xyz = "Y";
            }
            else
            {
              itabc.Xyz = "Z";
            }
          }
          itAbcList.Add(itabc);
        }
      }
      try
      {
        if (itAbcList.Count > 0)
        {
          await _kc.BulkInsertAsync(itAbcList);
        }
      }
      catch (Exception ex)
      {
        Console.WriteLine(ex.Message);
        return false;
      }
      return true;
    }



    public async Task<bool> FillAvgSO(DateTime refDate)
    {
      try
      {
        DateTime sunday = refDate.AddDays(0 - refDate.DayOfWeek);
        List<AvgSODTO> sum6 = (from x in GetInvoeceSum(_kc, sunday, 52)
                               select new AvgSODTO
                               {
                                 CustomerId = x.CustomerId,
                                 ItemNoId = x.ItemNoId,
                                 As52wk = x.QtySum
                               }).ToList();
        List<AvgSODTO> sum5 = (from x in GetInvoeceSum(_kc, sunday, 12)
                               select new AvgSODTO
                               {
                                 CustomerId = x.CustomerId,
                                 ItemNoId = x.ItemNoId,
                                 As12wk = x.QtySum
                               }).ToList();
        List<AvgSODTO> sum4 = (from x in GetInvoeceSum(_kc, sunday, 4)
                               select new AvgSODTO
                               {
                                 CustomerId = x.CustomerId,
                                 ItemNoId = x.ItemNoId,
                                 As4wk = x.QtySum
                               }).ToList();
        List<AvgSODTO> sumLW = (from x in GetInvoeceSum(_kc, sunday, 1)
                                select new AvgSODTO
                                {
                                  CustomerId = x.CustomerId,
                                  ItemNoId = x.ItemNoId,
                                  AsLwk = x.QtySum
                                }).ToList();
        DateTime avgStart = sunday.AddDays(-84.0);
        DateTime avgEnd = sunday.AddDays(-1.0);
        var mm12 = (from dd in _kc.DimDates
                    join vt in _kc.InvTs on dd.Date equals vt.InvDate into vta
                    from vt in vta.DefaultIfEmpty()
                    join vd in _kc.InvDs on vt.InvTId equals vd.InvTId into vda
                    from vd in vda.DefaultIfEmpty()
                    join it in _kc.BpmItems on vd.ItemNoId equals it.ItemNoId into ita
                    from it in ita.DefaultIfEmpty()
                    where dd.MondayOfWeek > avgStart && dd.MondayOfWeek < avgEnd && (it.ItemTypeId == 1 || it.ItemTypeId == 2)
                    group vd by new { dd.MondayOfWeek, vt.CustomerId, vd.ItemNoId } into vdg
                    orderby vdg.Key.ItemNoId, vdg.Key.MondayOfWeek
                    select new
                    {
                      CustomerId = (vdg.Key.CustomerId.HasValue ? vdg.Key.CustomerId.Value : 0),
                      ItemNoId = vdg.Key.ItemNoId,
                      AsSum = vdg.Sum((InvD s) => s.QtyInv)
                    }).ToList();
        List<AvgSODTO> sum12MM = (from x in mm12
                                  group x by new { x.CustomerId, x.ItemNoId } into x
                                  select new AvgSODTO
                                  {
                                    CustomerId = x.Key.CustomerId,
                                    ItemNoId = x.Key.ItemNoId,
                                    AsMin = x.Min(x => x.AsSum),
                                    AsMax = x.Max(x => x.AsSum)
                                  }).ToList();
        List<AvgSODTO> sum52a = (from x in GetInvoeceSumAmazon(_kc, sunday, 52)
                                 select new AvgSODTO
                                 {
                                   CustomerId = x.CustomerId,
                                   ItemNoId = x.ItemNoId,
                                   As52wk = x.QtySum
                                 }).ToList();
        List<AvgSODTO> sum12a = (from x in GetInvoeceSumAmazon(_kc, sunday, 12)
                                 select new AvgSODTO
                                 {
                                   CustomerId = x.CustomerId,
                                   ItemNoId = x.ItemNoId,
                                   As12wk = x.QtySum
                                 }).ToList();
        List<AvgSODTO> sum04a = (from x in GetInvoeceSumAmazon(_kc, sunday, 4)
                                 select new AvgSODTO
                                 {
                                   CustomerId = x.CustomerId,
                                   ItemNoId = x.ItemNoId,
                                   As4wk = x.QtySum
                                 }).ToList();
        List<AvgSODTO> sumLWa = (from x in GetInvoeceSumAmazon(_kc, sunday, 1)
                                 select new AvgSODTO
                                 {
                                   CustomerId = x.CustomerId,
                                   ItemNoId = x.ItemNoId,
                                   AsLwk = x.QtySum
                                 }).ToList();
        var mm12a = (from dd in _kc.DimDates
                     join vd in _kc.KoAmzvendorRptSales on dd.Date equals vd.DateStart into vda
                     from vd in vda.DefaultIfEmpty()
                     join it in _kc.BpmItems on vd.ItemNo equals it.ItemName into ita
                     from it in ita.DefaultIfEmpty()
                     where dd.MondayOfWeek > avgStart && dd.MondayOfWeek < avgEnd && (it.ItemTypeId == 1 || it.ItemTypeId == 2)
                     group vd by new { dd.MondayOfWeek, it.ItemNoId } into vdg
                     orderby vdg.Key.ItemNoId, vdg.Key.MondayOfWeek
                     select new
                     {
                       CustomerId = -1,
                       ItemNoId = vdg.Key.ItemNoId,
                       AsSum = (int)vdg.Sum((KoAmzvendorRptSale s) => s.UnitOrdered)
                     }).ToList();
        List<AvgSODTO> sum12MMa = (from x in mm12a
                                   group x by new { x.ItemNoId } into x
                                   select new AvgSODTO
                                   {
                                     CustomerId = -1,
                                     ItemNoId = x.Key.ItemNoId,
                                     AsMin = x.Min(x => x.AsSum),
                                     AsMax = x.Max(x => x.AsSum)
                                   }).ToList();
        DbContextBulkExtensions.BulkDelete(entities: await _kc.FcstAvgSos.Where((FcstAvgSo x) => x.FcstDate == sunday.Date).ToListAsync(), context: _kc);
        Dictionary<int, List<int>> customers = new Dictionary<int, List<int>>
            {
                { 3, new List<int> { 1, 2 } },
                { 4, new List<int> { 5 } },
                { 6, new List<int> { 28, 29, 34 }},
                { 7, new List<int> { 28, 34 } },
                { 8, new List<int> { 29 } },
                { 9, new List<int> { 26 } }
            };
        List<int> amazonMarkets = new List<int> { 1, 2, 4, 5 };
        List<int> spCusts = customers.SelectMany((KeyValuePair<int, List<int>> x) => x.Value).ToList();
        spCusts.AddRange(amazonMarkets);
        customers.Add(10, _kc.Customers.Where(x => x.IsActive == true && spCusts.Contains(x.CustomerId) == false).Select(x => x.CustomerId).ToList());
        /*customers.Add(10, (from x in _kc.Customers
                           where (bool)x.IsActive != false && spCusts.Contains(x.CustomerId) == false
                           select x.CustomerId).ToList());*/
        DbContextBulkExtensions.BulkDelete(entities: await _kc.FcstAvgSos.Where((FcstAvgSo x) => x.FcstDate == sunday.Date).ToListAsync(), context: _kc);
        List<AvgSODTO> avgPM = sum6.Union(sum5).Union(sum4).Union(sumLW)
            .ToList();
        avgPM.RemoveAll((AvgSODTO x) => (!(x.CustomerId.HasValue)));
        List<AvgSODTO> avgA = sum52a.Union(sum12a).Union(sum04a).Union(sumLWa)
            .ToList();
        avgA.RemoveAll((AvgSODTO x) => (!(x.CustomerId.HasValue)));
        List<AvgSODTO> avgStat = avgPM.Union(avgA).ToList();
        avgStat.RemoveAll((AvgSODTO x) => (!(x.CustomerId.HasValue)));
        avgStat.RemoveAll((AvgSODTO x) => (!(x.ItemNoId.HasValue)));

        avgStat.RemoveAll((AvgSODTO x) => amazonMarkets.Contains((int)x.CustomerId));
        List<AvgSODTO> mmStat = sum12MM.Union(sum12MMa).ToList();
        mmStat.RemoveAll((AvgSODTO x) => (!(x.CustomerId.HasValue)));
        // mmStat.RemoveAll((AvgSODTO x) => amazonMarkets.Contains((int)x.CustomerId));
        List<FcstAvgSo> fcstAgv = (from s in avgStat
                                   group s by new { s.ItemNoId } into g
                                   select new FcstAvgSo
                                   {
                                     FcstMarketId = null,
                                     ItemNoId = (int)(g.Key.ItemNoId.HasValue ? g.Key.ItemNoId : 0),//(int)g.Key.ItemNoId,
                                     QtyAvg12wk = Math.Round(g.Sum((AvgSODTO x) => x.As12wk) / 12m, 2),
                                     QtyAvg4wk = Math.Round(g.Sum((AvgSODTO x) => x.As4wk) / 4m, 2),
                                     QtyLastWk = g.Sum((AvgSODTO x) => x.AsLwk),
                                     QtyMin = ((int)((mmStat.Count((AvgSODTO x) => x.ItemNoId == g.Key.ItemNoId) > 0) ? mmStat.FindAll((AvgSODTO x) => x.ItemNoId == g.Key.ItemNoId).Min((AvgSODTO x) => x.AsMin) : 0)),
                                     //QtyMin = ((int)((mmStat.Count((AvgSODTO x) => x.ItemNoId == (int)(g.Key.ItemNoId.HasValue ? g.Key.ItemNoId : 0)
                                     //) > 0) ? mmStat.FindAll((AvgSODTO x) => x.ItemNoId == (int)(g.Key.ItemNoId.HasValue ? g.Key.ItemNoId : 0)
                                     //).Min((AvgSODTO x) => x.AsMin) : 0)),

                                     QtyMax = ((int)((mmStat.Count((AvgSODTO x) => x.ItemNoId == g.Key.ItemNoId) > 0) ? mmStat.FindAll((AvgSODTO x) => x.ItemNoId == g.Key.ItemNoId).Max((AvgSODTO x) => x.AsMax) : 0)),
                                     //QtyMax = ((int)((mmStat.Count((AvgSODTO x) => x.ItemNoId == (int)(g.Key.ItemNoId.HasValue ? g.Key.ItemNoId : 0)
                                     //) > 0) ? mmStat.FindAll((AvgSODTO x) => x.ItemNoId == (int)(g.Key.ItemNoId.HasValue ? g.Key.ItemNoId : 0)
                                     //).Max((AvgSODTO x) => x.AsMax) : 0)),

                                     FcstDate = sunday,
                                     LastModDate = DateTime.Now
                                   }).ToList();
        await _kc.BulkInsertAsync(fcstAgv);
        fcstAgv.Clear();
        fcstAgv.AddRange((from s in avgA
                          group s by new { s.ItemNoId } into g
                          select new FcstAvgSo
                          {
                            FcstMarketId = (short)1,
                            ItemNoId = (int)(g.Key.ItemNoId.HasValue ? g.Key.ItemNoId : 0),
                            QtyAvg12wk = Math.Round(g.Sum((AvgSODTO x) => x.As12wk) / 12m, 2),
                            QtyAvg4wk = Math.Round(g.Sum((AvgSODTO x) => x.As4wk) / 4m, 2),
                            QtyLastWk = g.Sum((AvgSODTO x) => x.AsLwk),
                            QtyMin = ((int)((sum12MMa.Count((AvgSODTO x) => x.ItemNoId == g.Key.ItemNoId) > 0) ? sum12MMa.FindAll((AvgSODTO x) => x.ItemNoId == g.Key.ItemNoId).Min((AvgSODTO x) => x.AsMin) : 0)),
                            QtyMax = ((int)((sum12MMa.Count((AvgSODTO x) => x.ItemNoId == g.Key.ItemNoId) > 0) ? sum12MMa.FindAll((AvgSODTO x) => x.ItemNoId == g.Key.ItemNoId).Max((AvgSODTO x) => x.AsMax) : 0)),
                            FcstDate = sunday,
                            LastModDate = DateTime.Now
                          }).ToList());
        await _kc.BulkInsertAsync(fcstAgv);
        foreach (AvgSODTO amzds in avgPM.FindAll((AvgSODTO x) => x.CustomerId == 5))
        {
          AvgSODTO amaA = avgA.Find((AvgSODTO x) => x.ItemNoId == amzds.ItemNoId);
          if (amaA != null)
          {
            amaA.As52wk -= amzds.As52wk;
            amaA.As12wk -= amzds.As12wk;
            amaA.As4wk -= amzds.As4wk;
            amaA.AsLwk -= amzds.AsLwk;
          }
        }
        fcstAgv.Clear();
        fcstAgv.AddRange((from s in avgA
                          group s by new { s.ItemNoId } into g
                          select new FcstAvgSo
                          {
                            FcstMarketId = (short)2,
                            ItemNoId = (int)g.Key.ItemNoId,
                            QtyAvg12wk = Math.Round(g.Sum((AvgSODTO x) => x.As12wk) / 12m, 2),
                            QtyAvg4wk = Math.Round(g.Sum((AvgSODTO x) => x.As4wk) / 4m, 2),
                            QtyLastWk = g.Sum((AvgSODTO x) => x.AsLwk),
                            QtyMin = ((int)((sum12MMa.Count((AvgSODTO x) => x.ItemNoId == g.Key.ItemNoId) > 0) ? sum12MMa.FindAll((AvgSODTO x) => x.ItemNoId == g.Key.ItemNoId).Min((AvgSODTO x) => x.AsMin) : 0)),
                            QtyMax = ((int)((sum12MMa.Count((AvgSODTO x) => x.ItemNoId == g.Key.ItemNoId) > 0) ? sum12MMa.FindAll((AvgSODTO x) => x.ItemNoId == g.Key.ItemNoId).Max((AvgSODTO x) => x.AsMax) : 0)),
                            FcstDate = sunday,
                            LastModDate = DateTime.Now
                          }).ToList());
        await _kc.BulkInsertAsync(fcstAgv);
        fcstAgv.Clear();

        avgPM.RemoveAll((AvgSODTO x) => (!(x.CustomerId.HasValue)));
        avgPM.RemoveAll((AvgSODTO x) => (!(x.ItemNoId.HasValue)));
        foreach (KeyValuePair<int, List<int>> cust in customers)
        {
          //int? chkInt = cust.Key;
          //if (chkInt.HasValue) { 
          fcstAgv.AddRange((from x in avgPM
                            where cust.Value.Contains((int)x.CustomerId)
                            select x into s
                            group s by new { s.ItemNoId } into g
                            select new FcstAvgSo
                            {
                              FcstMarketId = (short)cust.Key,//(chkInt.HasValue ? (short)cust.Key : null),//
                              ItemNoId = (int)g.Key.ItemNoId,
                              QtyAvg12wk = Math.Round(g.Sum((AvgSODTO x) => x.As12wk) / 12m, 2),
                              QtyAvg4wk = Math.Round(g.Sum((AvgSODTO x) => x.As4wk) / 4m, 2),
                              QtyLastWk = g.Sum((AvgSODTO x) => x.AsLwk),
                              QtyMin = ((int)((sum12MM.Count((AvgSODTO x) => cust.Value.Contains((int)x.CustomerId) && x.ItemNoId == g.Key.ItemNoId) > 0) ? sum12MM.FindAll((AvgSODTO x) => cust.Value.Contains((int)x.CustomerId) && x.ItemNoId == g.Key.ItemNoId).Min((AvgSODTO x) => x.AsMin) : 0)),
                              QtyMax = ((int)((sum12MM.Count((AvgSODTO x) => cust.Value.Contains((int)x.CustomerId) && x.ItemNoId == g.Key.ItemNoId) > 0) ? sum12MM.FindAll((AvgSODTO x) => cust.Value.Contains((int)x.CustomerId) && x.ItemNoId == g.Key.ItemNoId).Max((AvgSODTO x) => x.AsMax) : 0)),
                              FcstDate = sunday,
                              LastModDate = DateTime.Now
                            }).ToList());
          //}
          await _kc.BulkInsertOrUpdateOrDeleteAsync(fcstAgv);
        }
      }
      catch (Exception ex2)
      {
        Exception ex = ex2;
        Console.WriteLine(ex.Message);
        return false;
      }
      return true;
    }

    public async Task<bool> FillItemAbcPM(DateTime refDate)
    {
      try
      {
        DateTime sunday = refDate.AddDays(0 - refDate.DayOfWeek);
        DateTime dateFr = sunday.AddDays(-364.0);
        DateTime dateTo = sunday.AddDays(-1.0);
        List<ItemABCDTO> invRawA = (from vd in _kc.KoAmzvendorRptSales
                                    join it in _kc.BpmItems on vd.ItemNo equals it.ItemName
                                    join dd in _kc.DimDates on vd.DateStart equals dd.Date
                                    where vd.DateStart >= dateFr && vd.DateStart <= dateTo && (it.ItemTypeId == 1 || it.ItemTypeId == 2) && vd.OrdRevenue != (decimal?)0m
                                    group vd by new { dd.MondayOfWeek, it.ItemNoId } into vg
                                    select new ItemABCDTO
                                    {
                                      mkid = 1,
                                      itid = vg.Key.ItemNoId,
                                      invDate = vg.Key.MondayOfWeek,
                                      invAmt = (decimal)vg.Sum((KoAmzvendorRptSale s) => s.OrdRevenue),
                                      invQty = (int)vg.Sum((KoAmzvendorRptSale s) => s.UnitOrdered)
                                    } into s
                                    orderby s.invAmt descending
                                    select s).ToList();
        List<int> amazonMarket = new List<int> { 4 };
        List<ItemABCDTO> invRawO = (from vt in _kc.InvTs
                                    join vd in _kc.InvDs on vt.InvTId equals vd.InvTId
                                    join it in _kc.BpmItems on vd.ItemNoId equals it.ItemNoId
                                    join dd in _kc.DimDates on vt.InvDate equals dd.Date
                                    where vt.InvDate >= dateFr && vt.InvDate <= dateTo && (it.ItemTypeId == 1 || it.ItemTypeId == 2) && amazonMarket.Contains(vt.CustomerId.Value) == false
                                    group vd by new { dd.MondayOfWeek, vt.CustomerId, vd.ItemNoId } into vg
                                    select new ItemABCDTO
                                    {
                                      mkid = (int)vg.Key.CustomerId,
                                      itid = vg.Key.ItemNoId,
                                      invDate = vg.Key.MondayOfWeek,
                                      invAmt = vg.Sum((InvD s) => s.LineTotal),
                                      invQty = vg.Sum((InvD s) => s.QtyInv)
                                    } into s
                                    orderby s.invAmt descending
                                    select s).ToList();
        foreach (ItemABCDTO raw in invRawO)
        {
          switch (raw.mkid)
          {
            case 1:
            case 2:
              raw.mkid = 3;
              break;
            case 5:
              raw.mkid = 4;
              break;
            case 28:
            case 34:
              raw.mkid = 7;
              break;
            case 29:
              raw.mkid = 8;
              break;
            case 26:
              raw.mkid = 9;
              break;
            default:
              raw.mkid = 10;
              break;
          }
        }
        List<ItemABCDTO> invRawAFC = new List<ItemABCDTO>();
        foreach (ItemABCDTO item3 in invRawA)
        {
          invRawAFC.Add(new ItemABCDTO
          {
            mkid = 2,
            invAmt = item3.invAmt,
            invQty = item3.invQty,
            itid = item3.itid,
            invDate = item3.invDate
          });
        }
        foreach (ItemABCDTO amzds in invRawO.FindAll((ItemABCDTO x) => x.mkid == 7))
        {
          ItemABCDTO amaA = invRawAFC.Find((ItemABCDTO x) => x.itid == amzds.itid && x.invDate == amzds.invDate);
          //if (amzds.itid == 551)
          //{ Console.WriteLine("Catch it!"); }
          if (amaA != null)
          {
            amaA.invAmt -= amzds.invAmt;
            amaA.invQty -= amzds.invQty;
          }
        }
        List<ItemABCDTO> wayfairOB = new List<ItemABCDTO>();
        foreach (ItemABCDTO item in invRawO.FindAll((ItemABCDTO x) => x.mkid == 7 || x.mkid == 8))
        {
          ItemABCDTO temp = wayfairOB.Find((ItemABCDTO x) => x.invDate == item.invDate && x.itid == item.itid);
          // if(item.itid == 551)
          // { Console.WriteLine("Catch it!");}
          if (temp != null)
          {
            temp.invAmt += item.invAmt;
            temp.invQty += item.invQty;
            continue;
          }
          wayfairOB.Add(new ItemABCDTO
          {
            mkid = 6,
            invAmt = item.invAmt,
            invQty = item.invQty,
            itid = item.itid,
            invDate = item.invDate
          });
        }
        List<ItemABCDTO> invRaw = invRawA.Union(invRawO).Union(invRawAFC).Union(wayfairOB)
            .ToList();
        List<ItemABCDTO> invWkAll = (from s in invRaw
                                     group s by new { s.mkid, s.itid, s.invDate } into g
                                     select new ItemABCDTO
                                     {
                                       mkid = g.Key.mkid,
                                       itid = g.Key.itid,
                                       invDate = g.Key.invDate,
                                       invAmt = g.Sum((ItemABCDTO x) => x.invAmt),
                                       invQty = g.Sum((ItemABCDTO x) => x.invQty)
                                     } into s
                                     orderby s.mkid, s.itid
                                     select s).ToList();
        List<ItemAbcPm> itAbcList = new List<ItemAbcPm>();
        List<short> mkidAll = _kc.FcstMarkets.Select((FcstMarket x) => x.FcstMarketId).ToList();
        foreach (short market in mkidAll)
        {
          List<ItemABCDTO> invMkAll = invWkAll.Where((ItemABCDTO s) => s.mkid == market).ToList();
          List<ItemABCDTO> itList = (from s in invMkAll
                                     group s by s.itid into g
                                     select new ItemABCDTO
                                     {
                                       itid = g.Key,
                                       invQty = g.Sum((ItemABCDTO x) => x.invQty)
                                     } into s
                                     orderby s.invQty descending
                                     select s).ToList();
          decimal totalQty = (decimal)invMkAll.Sum((ItemABCDTO s) => s.invQty);
          decimal aggQty = default(decimal);
          foreach (ItemABCDTO item2 in itList)
          {
            ItemAbcPm itabc = new ItemAbcPm();
            int currItId = (int)item2.itid;
            itabc.FcstDate = sunday;
            itabc.MarketId = market;
            itabc.ItemNoId = currItId;
            itabc.TotalSale = (decimal)item2.invQty;
            aggQty += (decimal)item2.invQty;
            decimal aggRate = aggQty / totalQty;
            if (aggRate <= 0.8m)
            {
              itabc.Abc = "A";
            }
            else if (aggRate < 0.9m)
            {
              itabc.Abc = "B";
            }
            else
            {
              itabc.Abc = "C";
            }
            List<ItemABCDTO> invCurrItem = (from s in invMkAll
                                            where s.itid == currItId
                                            orderby s.invDate
                                            select s).ToList();
            if (invCurrItem.Count > 0)
            {
              double avg = Convert.ToDouble(invCurrItem.Sum((ItemABCDTO x) => x.invQty)) / 52.0;
              double stdev = 100.0 * Math.Sqrt(invCurrItem.Average((ItemABCDTO v) => Math.Pow(((double)v.invQty - avg) / (double)invCurrItem.Count, 2.0))) / avg;
              itabc.AvgQty = Math.Round(Convert.ToDecimal(avg), 2);
              if (!double.IsNaN(stdev) && !double.IsInfinity(stdev))
              {
                itabc.StdDev = Convert.ToDecimal(stdev);
              }
              if (stdev <= 2.0)
              {
                itabc.Xyz = "X";
              }
              else if (stdev < 5.0)
              {
                itabc.Xyz = "Y";
              }
              else
              {
                itabc.Xyz = "Z";
              }
            }
            itAbcList.Add(itabc);
          }
        }
        DbContextBulkExtensions.BulkDelete(entities: await _kc.ItemAbcPms.Where((ItemAbcPm x) => x.FcstDate == sunday.Date).ToListAsync(), context: _kc);
        if (itAbcList.Count > 0)
        {
          await _kc.BulkInsertAsync(itAbcList);
        }
      }
      catch (Exception ex2)
      {
        Exception ex = ex2;
        Console.WriteLine(ex.Message);
        return false;
      }
      return true;

    }

    private static List<dynamic> GetInvoeceSum(KOALAContext _kc, DateTime sunday, int startBeforeWeek)
    {
      DateTime avgStart = sunday.AddDays(-startBeforeWeek * 7);
      DateTime avgEnd = sunday.AddDays(-1.0);
      return ((IEnumerable<object>)(from vd in _kc.InvDs
                                    join vt in _kc.InvTs on vd.InvTId equals vt.InvTId
                                    join it in _kc.BpmItems on vd.ItemNoId equals it.ItemNoId
                                    where vt.InvDate >= avgStart && vt.InvDate <= avgEnd && vd.QtyInv > 0 && (it.ItemTypeId == 1 || it.ItemTypeId == 2)
                                    group vd by new { vt.CustomerId, it.ItemNoId } into vdg
                                    where vdg.Sum((InvD s) => s.QtyInv) > 0
                                    select new
                                    {
                                      CustomerId = vdg.Key.CustomerId,
                                      ItemNoId = vdg.Key.ItemNoId,
                                      QtySum = vdg.Sum((InvD s) => s.QtyInv)
                                    })).ToList();
    }

    private static List<dynamic> GetInvoeceSumAmazon(KOALAContext _kc, DateTime sunday, int startBeforeWeek)
    {
      DateTime avgStart = sunday.AddDays(-startBeforeWeek * 7);
      DateTime avgEnd = sunday.AddDays(-1.0);
      return ((IEnumerable<object>)(from vd in _kc.KoAmzvendorRptSales
                                    join it in _kc.BpmItems on vd.ItemNo equals it.ItemName
                                    join dd in _kc.DimDates on vd.DateStart equals dd.Date
                                    where vd.DateStart >= avgStart && vd.DateStart <= avgEnd && it.ItemStatusId != null && (it.ItemTypeId == 1 || it.ItemTypeId == 2)
                                    group vd by new { it.ItemStatusId, it.Cat3Id, it.ItemNoId, dd.MondayOfWeek } into vg
                                    select new
                                    {
                                      CustomerId = -1,
                                      ItemNoId = vg.Key.ItemNoId,
                                      QtySum = (int)vg.Sum((KoAmzvendorRptSale s) => s.UnitOrdered)
                                    })).ToList();
    }





    public async Task<bool> ResetAllTheRulesOnSKUs(int empId)
    {
      DateTime today = DateTime.Now;

      List<InvFeedsRuleSku> invFeedsRuleSkus = await _kc.InvFeedsRuleSkus.ToListAsync();
      List<InvFeedsRuleSkumkt> invFeedsRuleSkumkts = await _kc.InvFeedsRuleSkumkts.ToListAsync();
      List<InvFeedsRemark> invFeedsRemarks = await _kc.InvFeedsRemarks.ToListAsync();
      List<InvFeedsMrktSpecificSku> invFeedsMrktSpecificSkus = await _kc.InvFeedsMrktSpecificSkus.ToListAsync();
      try
      {
        foreach (InvFeedsRuleSku tmpModel in invFeedsRuleSkus)
        {
          tmpModel.DoNotFeedFromBanc = false;
          tmpModel.DoNotFeedFromBasc = false;
          tmpModel.DoNotFeedFromMainsl = false;
          tmpModel.DoNotFeedFromSwcaft = false;
          tmpModel.DoNotFeedFromPrismCast = false;
          tmpModel.DoNotFeedFromPrismCalt = false;
          tmpModel.DoNotFeedFromZinusTracy = false;
          tmpModel.DoNotFeedFromZinusChs = false;
          tmpModel.LastModifiedDate = today;
          tmpModel.LastModifiedBy = empId;
        }

        foreach (InvFeedsRuleSkumkt tmpModel in invFeedsRuleSkumkts)
        {
          tmpModel.DoNotFeedToHere = false; ;
          tmpModel.CustomFixedPercentage = -1;
          tmpModel.CustomZeroOutAt = -1;
          tmpModel.CustomRuleForRatioZeroOut = false;
          tmpModel.IsActivated = false;
        }

        foreach (InvFeedsRemark tmpModel in invFeedsRemarks)
        {
          tmpModel.IsActivated = false;
        }

        foreach (InvFeedsMrktSpecificSku tmpModel in invFeedsMrktSpecificSkus)
        {
          tmpModel.IsActivated = false;
        }

        await _kc.BulkUpdateAsync(invFeedsRuleSkus);
        await _kc.BulkUpdateAsync(invFeedsRuleSkumkts);
        await _kc.BulkUpdateAsync(invFeedsRemarks);
        await _kc.BulkUpdateAsync(invFeedsMrktSpecificSkus);
        await _kc.SaveChangesAsync();
      }
      catch (Exception ex)
      {
        Console.WriteLine(ex.Message);
        return false;
      }
      return true;
    }

    // Get detail of Set SKU(BOM)
    // By Brian Yi on 10/17/2022
    public async Task<SetSKUDetail> GetSetSKUDetail(int itemId)
    {
      SetSKUDetail serviceResponse = new SetSKUDetail()
      {
        bomId = 0,
        parentItemId = 0,
        parentItemSku = "",
        parentItemDescrition = "",
        childItemId01 = 0,
        childItemKittingQty01 = 0,
        childItemSku01 = "",
        childItemDescription01 = "",
        childItemId02 = 0,
        childItemKittingQty02 = 0,
        childItemSku02 = "",
        childItemDescription02 = "",
        childItemId03 = 0,
        childItemKittingQty03 = 0,
        childItemSku03 = "",
        childItemDescription03 = "",
        childItemId04 = 0,
        childItemKittingQty04 = 0,
        childItemSku04 = "",
        childItemDescription04 = "",
        childItemId05 = 0,
        childItemKittingQty05 = 0,
        childItemSku05 = "",
        childItemDescription05 = ""
      };

      List<Bom> setSKUs = await _kc.Boms
        .Where(x => x.ParentItemId == itemId)
        .Include(x => x.ParentItem)
        .Include(x => x.ChildItem)
        .ToListAsync();

      if (setSKUs != null && setSKUs.Count > 0)
      {
        for (int i = 0; i < setSKUs.Count; i++)
        {
          if (i == 0) // parent Info.
          {
            serviceResponse.parentItemId = setSKUs[0].ParentItemId;
            serviceResponse.parentItemSku = setSKUs[0].ParentItem.ItemName;
            serviceResponse.parentItemDescrition = setSKUs[0].ParentItem.Description;

            serviceResponse.childItemId01 = setSKUs[0].ChildItemId;
            serviceResponse.childItemKittingQty01 = setSKUs[0].KittingQty;
            serviceResponse.childItemSku01 = setSKUs[0].ChildItem.ItemName;
            serviceResponse.childItemDescription01 = setSKUs[0].ChildItem.Description;
          }
          else if (i == 1)
          {
            serviceResponse.childItemId02 = setSKUs[i].ChildItemId;
            serviceResponse.childItemKittingQty02 = setSKUs[i].KittingQty;
            serviceResponse.childItemSku02 = setSKUs[i].ChildItem.ItemName;
            serviceResponse.childItemDescription02 = setSKUs[i].ChildItem.Description;
          }
          else if (i == 2)
          {
            serviceResponse.childItemId03 = setSKUs[i].ChildItemId;
            serviceResponse.childItemKittingQty03 = setSKUs[i].KittingQty;
            serviceResponse.childItemSku03 = setSKUs[i].ChildItem.ItemName;
            serviceResponse.childItemDescription03 = setSKUs[i].ChildItem.Description;
          }
          else if (i == 3)
          {
            serviceResponse.childItemId04 = setSKUs[i].ChildItemId;
            serviceResponse.childItemKittingQty04 = setSKUs[i].KittingQty;
            serviceResponse.childItemSku04 = setSKUs[i].ChildItem.ItemName;
            serviceResponse.childItemDescription04 = setSKUs[i].ChildItem.Description;
          }
          else if (i == 4)
          {
            serviceResponse.childItemId05 = setSKUs[i].ChildItemId;
            serviceResponse.childItemKittingQty05 = setSKUs[i].KittingQty;
            serviceResponse.childItemSku05 = setSKUs[i].ChildItem.ItemName;
            serviceResponse.childItemDescription05 = setSKUs[i].ChildItem.Description;
          }
        }
      }

      return serviceResponse;
    }

    public async Task<List<LeftOverWarehouseQtyDTO>> GetLeftOverQty(DateTime today)
    {
      //List<BpmItem> bpmItems = await _kc.BpmItems
      //.
      //inventoryConfig.
      List<LeftOverWarehouseQtyDTO> serviceResponse = new List<LeftOverWarehouseQtyDTO>();
      RealTimeInvUpdate realTimeInvUpdate = await _kc.RealTimeInvUpdates
        .Where(i => ((DateTime)i.CreatedTime).Date.CompareTo(today) == 0)
        .OrderByDescending(i => i.CreatedTime)
        .Include(i => i.RealTimeInvUpdDetails)
        .FirstOrDefaultAsync();
      if (realTimeInvUpdate == null) return serviceResponse;

      InvFeedsReport invFeedsReport = await _kc.InvFeedsReports
        .Where(i => ((DateTime)i.CreatedDate).Date.CompareTo(today) == 0)
        .OrderByDescending(i => i.CreatedDate)
        .FirstOrDefaultAsync();
      if (invFeedsReport != null)
      {
        //serviceResponse = await LoadAllMainslBancInvFromDB(invFeedsReport);
        serviceResponse = await LoadLeftOverQtyFromAllWarehouses(invFeedsReport);

        return serviceResponse;
      }
      //serviceResponse = await GetUpdatedMainslBancInv(empId, today);
      //serviceResponse = await GetUpdatedAllWarehousesInv(empId, today, 0);
      return serviceResponse;
    }
    public async Task<List<LeftOverWarehouseQtyDTO>> LoadLeftOverQtyFromAllWarehouses(InvFeedsReport invFeedsReport)
    {
      int amazonMkId = 1, bpmMkId = 3, wayfairMkId = 4, eBayMkId = 5, houzzMkId = 7, mellowMkId = 10, overstockMkId = 12, walmartMkId = 16, homeDepotMkId = 340, targetMkId = 341;

      InventoryConfig inventoryConfig = await _kc.InventoryConfigs
        .Where(i => i.InventoryConfigId == 1)
        .FirstOrDefaultAsync();

      List<LeftOverWarehouseQtyDTO> serviceResponse = new List<LeftOverWarehouseQtyDTO>();
      /* List<InvFeedsRepTableDetail> invFeedsRepTableDetails = await _kc.InvFeedsRepTableDetails
         .Where(i => i.InvFeedsReportId == invFeedsReport.InvFeedsReportId)
         .ToListAsync();*/

      List<InvFeedsItem> invFeedsItems = await _kc.InvFeedsItems
        .Where(i => i.InvFeedsReportId == invFeedsReport.InvFeedsReportId)
        .Include(i => i.InvFeedsItemLocQties)
        .Include(i => i.ItemNo)
        .ToListAsync();


      int invMainsl = 25, invBanc = 4, invBasc = 62; //  invSwcaft = 54,

      List<BpmItem> bpmItems = await _kc.BpmItems
        .Where(b => b.ItemTypeId < 3)
        .Where(b => b.LeftOverBancassgndMktId >= 0 || b.LeftOverBascassgndMktId >= 0 ||
        b.LeftOverMainSlassgndMktId >= 0 || b.LeftOverSwcaftassgndMktId >= 0)
        .Include(b => b.ItemStatus)
        .ToListAsync();
      List<Market> markets = await _kc.Markets
        .ToListAsync();
      LeftOverWarehouseQtyDTO newItem = new LeftOverWarehouseQtyDTO();
      InvFeedsItem tmpInvFeedsItem = new InvFeedsItem();
      foreach (BpmItem tmpDto in bpmItems)
      {
        //newItem = new LeftOverWarehouseQtyDTO();
        // InvFeedsRepTableDetail tmpDetail = invFeedsRepTableDetails.Find(i => i.ItemNoId == tmpDto.ItemNoId);
        tmpInvFeedsItem = invFeedsItems.Find(i => i.ItemNoId == tmpDto.ItemNoId);
        if (tmpInvFeedsItem != null)
        {
          if (tmpDto.LeftOverMainSlassgndMktId > 0 && tmpDto.LeftOverMainSlassgndMktId.HasValue == true)
          {
            newItem = new LeftOverWarehouseQtyDTO()
            {
              isEdited = false,
              itemNoId = tmpDto.ItemNoId,
              itemName = tmpDto.ItemName,
              itemStatus = tmpDto.ItemStatus.StatusItem,
              itemStatusId = (int)tmpDto.ItemStatusId,
              warehouse = "Main SL",
              warehouseId = invMainsl,
              qty = (int)(tmpInvFeedsItem.InvFeedsItemLocQties.Where(i => i.ItemLocId == invMainsl).FirstOrDefault().QtyAvail),
              assignedMarketId = ((int)tmpDto.LeftOverMainSlassgndMktId > 0 ? (int)tmpDto.LeftOverMainSlassgndMktId : 0),
              assignedMarket = ((int)tmpDto.LeftOverMainSlassgndMktId > 0 ? markets.Find(i => i.MarketId == (int)tmpDto.LeftOverMainSlassgndMktId).MarketPlace : "")
            };
            serviceResponse.Add(newItem);
          }
          /*
          if (tmpDto.LeftOverSwcaftassgndMktId > 0 && tmpDto.LeftOverSwcaftassgndMktId.HasValue == true)
          {
            newItem = new LeftOverWarehouseQtyDTO()
            {
              isEdited = false,
              itemNoId = tmpDto.ItemNoId,
              itemName = tmpDto.ItemName,
              itemStatus = tmpDto.ItemStatus.StatusItem,
              itemStatusId = (int)tmpDto.ItemStatusId,
              warehouse = "SW-CAFT",
              warehouseId = invSwcaft,
              qty = (int)(tmpInvFeedsItem.InvFeedsItemLocQties.Where(i => i.ItemLocId == invSwcaft).FirstOrDefault().QtyAvail),
              assignedMarketId = ((int)tmpDto.LeftOverSwcaftassgndMktId > 0 ? (int)tmpDto.LeftOverSwcaftassgndMktId : 0),
              assignedMarket = ((int)tmpDto.LeftOverSwcaftassgndMktId > 0 ? markets.Find(i => i.MarketId == (int)tmpDto.LeftOverSwcaftassgndMktId).MarketPlace : "")
            };
            serviceResponse.Add(newItem);
          }*/
          if (tmpDto.LeftOverBancassgndMktId > 0 && tmpDto.LeftOverBancassgndMktId.HasValue == true)
          {
            newItem = new LeftOverWarehouseQtyDTO()
            {
              isEdited = false,
              itemNoId = tmpDto.ItemNoId,
              itemName = tmpDto.ItemName,
              itemStatus = tmpDto.ItemStatus.StatusItem,
              itemStatusId = (int)tmpDto.ItemStatusId,
              warehouse = "BANC",
              warehouseId = invBanc,
              qty = (int)(tmpInvFeedsItem.InvFeedsItemLocQties.Where(i => i.ItemLocId == invBanc).FirstOrDefault().QtyAvail),
              assignedMarketId = ((int)tmpDto.LeftOverBancassgndMktId > 0 ? (int)tmpDto.LeftOverBancassgndMktId : 0),
              assignedMarket = ((int)tmpDto.LeftOverBancassgndMktId > 0 ? markets.Find(i => i.MarketId == (int)tmpDto.LeftOverBancassgndMktId).MarketPlace : "")
            };
            serviceResponse.Add(newItem);
          }

          if (tmpDto.LeftOverBascassgndMktId > 0 && tmpDto.LeftOverBascassgndMktId.HasValue == true)
          {
            newItem = new LeftOverWarehouseQtyDTO()
            {
              isEdited = false,
              itemNoId = tmpDto.ItemNoId,
              itemName = tmpDto.ItemName,
              itemStatus = tmpDto.ItemStatus.StatusItem,
              itemStatusId = (int)tmpDto.ItemStatusId,
              warehouse = "BASC",
              warehouseId = invBasc,
              qty = (int)(tmpInvFeedsItem.InvFeedsItemLocQties.Where(i => i.ItemLocId == invBasc).FirstOrDefault().QtyAvail),
              assignedMarketId = ((int)tmpDto.LeftOverBascassgndMktId > 0 ? (int)tmpDto.LeftOverBascassgndMktId : 0),
              assignedMarket = ((int)tmpDto.LeftOverBascassgndMktId > 0 ? markets.Find(i => i.MarketId == (int)tmpDto.LeftOverBascassgndMktId).MarketPlace : "")
            };
            serviceResponse.Add(newItem);
          }
        }// End of IF
      }// End of foreach

      return serviceResponse;
    }

    public async Task<bool> UpdateInvFeedsLeftOverAtWarehousesList(int empId, LeftOverWarehouseQtyListDTO leftOverList)
    {
      DateTime todayDate = DateTime.Now;
      List<BpmItem> bpmItems = await _kc.BpmItems
        .Where(b => b.ItemTypeId < 3)
        .Where(b => b.LeftOverBancassgndMktId >= 0 || b.LeftOverBascassgndMktId >= 0 ||
        b.LeftOverMainSlassgndMktId >= 0 || b.LeftOverSwcaftassgndMktId >= 0)
        .ToListAsync();

      BpmItem tmpItem = new BpmItem();
      List<BpmItem> updateItems = new List<BpmItem>();
      const int invMainsl = 25, invBanc = 4, invBasc = 62, invPrsmCast = 51, invPrsmCaltId = 67; // invSwcaft = 54,

      foreach (LeftOverWarehouseQtyDTO tmpDto in leftOverList.skuList)
      {
        if (tmpDto.isEdited == true)
        {
          tmpItem = bpmItems
            .Where(b => b.ItemNoId == tmpDto.itemNoId)
            .FirstOrDefault();

          if (tmpItem != null)
          {
            switch (tmpDto.warehouseId)
            {
              case invBanc:
                tmpItem.LeftOverBancassgndMktId = tmpDto.assignedMarketId;
                break;
              case invBasc:
                tmpItem.LeftOverBascassgndMktId = tmpDto.assignedMarketId;
                break;
              case invMainsl:
                tmpItem.LeftOverMainSlassgndMktId = tmpDto.assignedMarketId;
                break;
              /* case invSwcaft:
                 tmpItem.LeftOverSwcaftassgndMktId = tmpDto.assignedMarketId;
                 break; */
              case invPrsmCast:
                tmpItem.LeftOverPrsmStcktnAssgndMktId = tmpDto.assignedMarketId;
                break;
              case invPrsmCaltId:
                tmpItem.LeftOverPrsmLthrpAssgndMktId = tmpDto.assignedMarketId;
                break;
            }
            updateItems.Add(tmpItem);
          }// end of null checking

        }
      }// End of foreach
      try
      {
        await _kc.BulkUpdateAsync(updateItems);
      }
      catch (Exception ex)
      {
        Console.WriteLine(ex.Message);
        return false;
      }
      return true;
    }

    public async Task<List<GetInventoryFeedsItemDTO>> FeedLeftOverQtyFromWarehouse(List<GetInventoryFeedsItemDTO> invFeedsItemList)
    {
      const int amazonMkId = 1, bpmMkId = 3, wayfairMkId = 4, eBayMkId = 5, mellowMkId = 10, overstockMkId = 12, homeDepotMkId = 340, targetMkId = 341;

      List<BpmItem> bpmItems = await _kc.BpmItems
        .Where(b => b.ItemTypeId < 3)
        .Where(b => b.LeftOverBancassgndMktId > 0 || b.LeftOverBascassgndMktId > 0 ||
        b.LeftOverMainSlassgndMktId > 0 || b.LeftOverSwcaftassgndMktId > 0)
        .ToListAsync();
      GetInventoryFeedsItemDTO tmpfeedsItem = new GetInventoryFeedsItemDTO();
      try
      {
        foreach (BpmItem tmpModel in bpmItems)
        {
          tmpfeedsItem = invFeedsItemList
            .Where(i => i.ItemNoId == tmpModel.ItemNoId)
            .FirstOrDefault();

          if (tmpfeedsItem != null)
          {
            if (tmpModel.LeftOverBancassgndMktId > 0) // For BANC
            {
              switch (tmpModel.LeftOverBancassgndMktId)
              {
                case amazonMkId: // Amazon
                  tmpfeedsItem.AmazonQtyBanc += tmpfeedsItem.QtyAvailMainsl;
                  break;
                case wayfairMkId: // Wayfair
                  tmpfeedsItem.WayfairQtyBanc += tmpfeedsItem.QtyAvailMainsl;
                  break;
                case overstockMkId: // Overstock
                  tmpfeedsItem.OverstockQtyBanc += tmpfeedsItem.QtyAvailMainsl;
                  break;
                case eBayMkId: // eBya
                  tmpfeedsItem.eBayQtyBanc += tmpfeedsItem.QtyAvailMainsl;
                  break;
                case homeDepotMkId: // Home Depot
                  tmpfeedsItem.HomeDepotQtyBanc += tmpfeedsItem.QtyAvailMainsl;
                  break;
                case targetMkId: // Target
                  tmpfeedsItem.TargetQtyBanc += tmpfeedsItem.QtyAvailMainsl;
                  break;
                case bpmMkId: // BPM Web
                  tmpfeedsItem.BPMWebQtyBanc += tmpfeedsItem.QtyAvailMainsl;
                  break;
                case mellowMkId: // Mellow Web
                  tmpfeedsItem.MellowWebQtyBanc += tmpfeedsItem.QtyAvailMainsl;
                  break;
              }
            } // End of BANC
            if (tmpModel.LeftOverBascassgndMktId > 0)
            {
              switch (tmpModel.LeftOverBascassgndMktId)
              {
                case amazonMkId: // Amazon
                  tmpfeedsItem.AmazonQtyBasc += tmpfeedsItem.QtyAvailMainsl;
                  break;
                case wayfairMkId: // Wayfair
                  tmpfeedsItem.WayfairQtyBasc += tmpfeedsItem.QtyAvailMainsl;
                  break;
                case overstockMkId: // Overstock
                  tmpfeedsItem.OverstockQtyBasc += tmpfeedsItem.QtyAvailMainsl;
                  break;
                case eBayMkId: // eBya
                  tmpfeedsItem.eBayQtyBasc += tmpfeedsItem.QtyAvailMainsl;
                  break;
                case homeDepotMkId: // Home Depot
                  tmpfeedsItem.HomeDepotQtyBasc += tmpfeedsItem.QtyAvailMainsl;
                  break;
                case targetMkId: // Target
                  tmpfeedsItem.TargetQtyBasc += tmpfeedsItem.QtyAvailMainsl;
                  break;
                case bpmMkId: // BPM Web
                  tmpfeedsItem.BPMWebQtyBasc += tmpfeedsItem.QtyAvailMainsl;
                  break;
                case mellowMkId: // Mellow Web
                  tmpfeedsItem.MellowWebQtyBasc += tmpfeedsItem.QtyAvailMainsl;
                  break;
              }
            } // End of BASC
            if (tmpModel.LeftOverMainSlassgndMktId > 0)
            {
              switch (tmpModel.LeftOverMainSlassgndMktId)
              {
                case amazonMkId: // Amazon
                  tmpfeedsItem.AmazonQtyMainsl += tmpfeedsItem.QtyAvailMainsl;
                  break;
                case wayfairMkId: // Wayfair
                  tmpfeedsItem.WayfairQtyMainsl += tmpfeedsItem.QtyAvailMainsl;
                  break;
                case overstockMkId: // Overstock
                  tmpfeedsItem.OverstockQtyMainsl += tmpfeedsItem.QtyAvailMainsl;
                  break;
                case eBayMkId: // eBya
                  tmpfeedsItem.eBayQtyMainsl += tmpfeedsItem.QtyAvailMainsl;
                  break;
                case homeDepotMkId: // Home Depot
                  tmpfeedsItem.HomeDepotQtyMainsl += tmpfeedsItem.QtyAvailMainsl;
                  break;
                case targetMkId: // Target
                  tmpfeedsItem.TargetQtyMainsl += tmpfeedsItem.QtyAvailMainsl;
                  break;
                case bpmMkId: // BPM Web
                  tmpfeedsItem.BPMWebQtyMainsl += tmpfeedsItem.QtyAvailMainsl;
                  break;
                case mellowMkId: // Mellow Web
                  tmpfeedsItem.MellowWebQtyMainsl += tmpfeedsItem.QtyAvailMainsl;
                  break;
              }
            } // End of MainSL
            /* if (tmpModel.LeftOverSwcaftassgndMktId > 0)
             {
               switch (tmpModel.LeftOverSwcaftassgndMktId)
               {
                 case amazonMkId: // Amazon
                   tmpfeedsItem.AmazonQtySWCAFT += tmpfeedsItem.QtyAvailSWCAFT;
                   break;
                 case wayfairMkId: // Wayfair
                   tmpfeedsItem.WayfairQtySWCAFT += tmpfeedsItem.QtyAvailSWCAFT;
                   break;
                 case overstockMkId: // Overstock
                   tmpfeedsItem.OverstockQtySWCAFT += tmpfeedsItem.QtyAvailSWCAFT;
                   break;
                 case eBayMkId: // eBya
                   tmpfeedsItem.eBayQtySWCAFT += tmpfeedsItem.QtyAvailSWCAFT;
                   break;
                 case homeDepotMkId: // Home Depot
                   tmpfeedsItem.HomeDepotQtySWCAFT += tmpfeedsItem.QtyAvailSWCAFT;
                   break;
                 case targetMkId: // Target
                   tmpfeedsItem.TargetQtySWCAFT += tmpfeedsItem.QtyAvailSWCAFT;
                   break;
                 case bpmMkId: // BPM Web
                   tmpfeedsItem.BPMWebQtySWCAFT += tmpfeedsItem.QtyAvailSWCAFT;
                   break;
                 case mellowMkId: // Mellow Web
                   tmpfeedsItem.MellowWebQtySWCAFT += tmpfeedsItem.QtyAvailSWCAFT;
                   break;
               }
             }// End of SW-CAFT 
            */ /*
            if (tmpModel.LeftOverPrsmStcktnAssgndMktId > 0)
            {
              switch (tmpModel.LeftOverPrsmStcktnAssgndMktId)
              {
                case amazonMkId: // Amazon
                  tmpfeedsItem.AmazonQtyPrismCast += tmpfeedsItem.QtyAvailPrismCast;
                  break;
                case wayfairMkId: // Wayfair
                  tmpfeedsItem.WayfairQtyPrismCast += tmpfeedsItem.QtyAvailPrismCast;
                  break;
                case overstockMkId: // Overstock
                  tmpfeedsItem.OverstockQtyPrismCast += tmpfeedsItem.QtyAvailPrismCast;
                  break;
                case eBayMkId: // eBya
                  tmpfeedsItem.eBayQtyPrismCast += tmpfeedsItem.QtyAvailPrismCast;
                  break;
                case homeDepotMkId: // Home Depot
                  tmpfeedsItem.HomeDepotQtyPrismCast += tmpfeedsItem.QtyAvailPrismCast;
                  break;
                case targetMkId: // Target
                  tmpfeedsItem.TargetQtyPrismCast += tmpfeedsItem.QtyAvailPrismCast;
                  break;
                case bpmMkId: // BPM Web
                  tmpfeedsItem.BPMWebQtyPrismCast += tmpfeedsItem.QtyAvailPrismCast;
                  break;
                case mellowMkId: // Mellow Web
                  tmpfeedsItem.MellowWebQtyPrismCast += tmpfeedsItem.QtyAvailPrismCast;
                  break;
              }
            }// End of PRISM-CAST
            if (tmpModel.LeftOverPrsmLthrpAssgndMktId > 0)
            {
              switch (tmpModel.LeftOverPrsmLthrpAssgndMktId)
              {
                case amazonMkId: // Amazon
                  tmpfeedsItem.AmazonQtyPrismCalt += tmpfeedsItem.QtyAvailPrismCalt;
                  break;
                case wayfairMkId: // Wayfair
                  tmpfeedsItem.WayfairQtyPrismCalt += tmpfeedsItem.QtyAvailPrismCalt;
                  break;
                case overstockMkId: // Overstock
                  tmpfeedsItem.OverstockQtyPrismCalt += tmpfeedsItem.QtyAvailPrismCalt;
                  break;
                case eBayMkId: // eBya
                  tmpfeedsItem.eBayQtyPrismCalt += tmpfeedsItem.QtyAvailPrismCalt;
                  break;
                case homeDepotMkId: // Home Depot
                  tmpfeedsItem.HomeDepotQtyPrismCalt += tmpfeedsItem.QtyAvailPrismCalt;
                  break;
                case targetMkId: // Target
                  tmpfeedsItem.TargetQtyPrismCalt += tmpfeedsItem.QtyAvailPrismCalt;
                  break;
                case bpmMkId: // BPM Web
                  tmpfeedsItem.BPMWebQtyPrismCalt += tmpfeedsItem.QtyAvailPrismCalt;
                  break;
                case mellowMkId: // Mellow Web
                  tmpfeedsItem.MellowWebQtyPrismCalt += tmpfeedsItem.QtyAvailPrismCalt;
                  break;
              }
            }// End of PRISM-CALT */

          }// end of null check
        } // End of foreach
      }
      catch (Exception ex)
      {
        Console.WriteLine(ex.Message);
        return invFeedsItemList;
      }
      return invFeedsItemList;
    }

    public async Task<List<InvFeedsAllStopFeedFrom>> GetAllStopWHsList()
    {
      List<InvFeedsAllStopFeedFrom> serviceResponse = await _kc.InvFeedsAllStopFeedFroms
        .ToListAsync();

      return serviceResponse;
    }

    public async Task<int> OverflowQtyPreventor(double totalQty, double ratio)
    {
      // if (totalQty < 0)
      // { Console.WriteLine("Here!"); }
      if (totalQty <= 0 || ratio <= 0) return 0;
      int result = (int)totalQty;

      while (result < 0 || result >= totalQty)
      {
        result = (int)Math.Floor(totalQty * ratio);
      }

      return result;
    }

    //public async Task<List<GetInventoryFeedsItemDTO>> UpdateFeedingQtyForSlaveSkus (InventoryConfig inventoryConfig, List<GetInventoryFeedsItemDTO> invFeedsItems)
    //{
    //  GetInventoryFeedsItemDTO tmpInvFeedsItem = new GetInventoryFeedsItemDTO();

    //  foreach(GetInventoryFeedsItemDTO tmpDto in invFeedsItems)
    //  {
    //    if(tmpDto.isCooMasterSku == false)
    //    {
    //      tmpInvFeedsItem = invFeedsItems.Where(f => f.ItemNoId == tmpDto.cooSlaveSkuId).FirstOrDefault();

    //      // BANC
    //      if(tmpInvFeedsItem.QtyAvailBanc < inventoryConfig.CooMasterSlaveCrossover)
    //      {
    //        tmpInvFeedsItem.AmazonQtyBanc += tmpDto.AmazonQtyBanc;
    //        tmpInvFeedsItem.AmazonBancPercentage = tmpDto.AmazonBancPercentage;

    //        tmpInvFeedsItem.BPMWebQtyBanc += tmpDto.BPMWebQtyBanc;
    //        tmpInvFeedsItem.BPMWebBancPercentage += tmpDto.BPMWebBancPercentage;

    //        tmpInvFeedsItem.eBayQtyBanc += tmpDto.eBayQtyBanc;
    //        tmpInvFeedsItem.eBayBancPercentage = tmpDto.eBayBancPercentage;

    //        tmpInvFeedsItem.MellowWebQtyBanc += tmpDto.MellowWebQtyBanc;
    //        tmpInvFeedsItem.MellowWebBancPercentage = tmpDto.MellowWebBancPercentage;

    //        tmpInvFeedsItem.OverstockQtyBanc += tmpDto.OverstockQtyBanc;
    //        tmpInvFeedsItem.OverstockBancPercentage = tmpDto.OverstockBancPercentage;

    //        tmpInvFeedsItem.WalmartQtyBanc += tmpDto.WalmartQtyBanc;
    //        tmpInvFeedsItem.WalmartBancPercentage = tmpDto.WalmartBancPercentage;

    //        tmpInvFeedsItem.WayfairQtyBanc += tmpDto.WayfairQtyBanc;
    //        tmpInvFeedsItem.WayfairBancPercentage = tmpDto.WayfairBancPercentage;

    //        tmpInvFeedsItem.HomeDepotQtyBanc += tmpDto.HomeDepotQtyBanc;
    //        tmpInvFeedsItem.HomeDepotBancPercentage = tmpDto.HomeDepotBancPercentage;

    //        tmpInvFeedsItem.TargetQtyBanc += tmpDto.TargetQtyBanc;
    //        tmpInvFeedsItem.TargetBancPercentage = tmpDto.TargetBancPercentage;
    //      }

    //      // BASC
    //      if (tmpInvFeedsItem.QtyAvailBasc < inventoryConfig.CooMasterSlaveCrossover)
    //      {
    //        tmpInvFeedsItem.AmazonQtyBasc += tmpDto.AmazonQtyBasc;
    //        tmpInvFeedsItem.AmazonBascPercentage = tmpDto.AmazonBascPercentage;

    //        tmpInvFeedsItem.BPMWebQtyBasc += tmpDto.BPMWebQtyBasc;
    //        tmpInvFeedsItem.BPMWebBascPercentage += tmpDto.BPMWebBascPercentage;

    //        tmpInvFeedsItem.eBayQtyBasc += tmpDto.eBayQtyBasc;
    //        tmpInvFeedsItem.eBayBascPercentage = tmpDto.eBayBascPercentage;

    //        tmpInvFeedsItem.MellowWebQtyBasc += tmpDto.MellowWebQtyBasc;
    //        tmpInvFeedsItem.MellowWebBascPercentage = tmpDto.MellowWebBascPercentage;

    //        tmpInvFeedsItem.OverstockQtyBasc += tmpDto.OverstockQtyBasc;
    //        tmpInvFeedsItem.OverstockBascPercentage = tmpDto.OverstockBascPercentage;

    //        tmpInvFeedsItem.WalmartQtyBasc += tmpDto.WalmartQtyBasc;
    //        tmpInvFeedsItem.WalmartBascPercentage = tmpDto.WalmartBascPercentage;

    //        tmpInvFeedsItem.WayfairQtyBasc += tmpDto.WayfairQtyBasc;
    //        tmpInvFeedsItem.WayfairBascPercentage = tmpDto.WayfairBascPercentage;

    //        tmpInvFeedsItem.HomeDepotQtyBasc += tmpDto.HomeDepotQtyBasc;
    //        tmpInvFeedsItem.HomeDepotBascPercentage = tmpDto.HomeDepotBascPercentage;

    //        tmpInvFeedsItem.TargetQtyBasc += tmpDto.TargetQtyBasc;
    //        tmpInvFeedsItem.TargetBascPercentage = tmpDto.TargetBascPercentage;
    //      }

    //      // MainSL
    //      if (tmpInvFeedsItem.QtyAvailMainsl < inventoryConfig.CooMasterSlaveCrossover)
    //      {
    //        tmpInvFeedsItem.AmazonQtyMainsl += tmpDto.AmazonQtyMainsl;
    //        tmpInvFeedsItem.AmazonMainslPercentage = tmpDto.AmazonMainslPercentage;

    //        tmpInvFeedsItem.BPMWebQtyMainsl += tmpDto.BPMWebQtyMainsl;
    //        tmpInvFeedsItem.BPMWebMainslPercentage += tmpDto.BPMWebMainslPercentage;

    //        tmpInvFeedsItem.eBayQtyMainsl += tmpDto.eBayQtyMainsl;
    //        tmpInvFeedsItem.eBayMainslPercentage = tmpDto.eBayMainslPercentage;

    //        tmpInvFeedsItem.MellowWebQtyMainsl += tmpDto.MellowWebQtyMainsl;
    //        tmpInvFeedsItem.MellowWebMainslPercentage = tmpDto.MellowWebMainslPercentage;

    //        tmpInvFeedsItem.OverstockQtyMainsl += tmpDto.OverstockQtyMainsl;
    //        tmpInvFeedsItem.OverstockMainslPercentage = tmpDto.OverstockMainslPercentage;

    //        tmpInvFeedsItem.WalmartQtyMainsl += tmpDto.WalmartQtyMainsl;
    //        tmpInvFeedsItem.WalmartMainslPercentage = tmpDto.WalmartMainslPercentage;

    //        tmpInvFeedsItem.WayfairQtyMainsl += tmpDto.WayfairQtyMainsl;
    //        tmpInvFeedsItem.WayfairMainslPercentage = tmpDto.WayfairMainslPercentage;

    //        tmpInvFeedsItem.HomeDepotQtyMainsl += tmpDto.HomeDepotQtyMainsl;
    //        tmpInvFeedsItem.HomeDepotMainslPercentage = tmpDto.HomeDepotMainslPercentage;

    //        tmpInvFeedsItem.TargetQtyMainsl += tmpDto.TargetQtyMainsl;
    //        tmpInvFeedsItem.TargetMainslPercentage = tmpDto.TargetMainslPercentage;
    //      }

    //      // SW-CAFT
    //      if (tmpInvFeedsItem.QtyAvailSWCAFT < inventoryConfig.CooMasterSlaveCrossover)
    //      {
    //        tmpInvFeedsItem.AmazonQtySWCAFT += tmpDto.AmazonQtySWCAFT;
    //        tmpInvFeedsItem.AmazonSWCAFTPercentage = tmpDto.AmazonSWCAFTPercentage;

    //        tmpInvFeedsItem.BPMWebQtySWCAFT += tmpDto.BPMWebQtySWCAFT;
    //        tmpInvFeedsItem.BPMWebSWCAFTPercentage += tmpDto.BPMWebSWCAFTPercentage;

    //        tmpInvFeedsItem.eBayQtySWCAFT += tmpDto.eBayQtySWCAFT;
    //        tmpInvFeedsItem.eBaySWCAFTPercentage = tmpDto.eBaySWCAFTPercentage;

    //        tmpInvFeedsItem.MellowWebQtySWCAFT += tmpDto.MellowWebQtySWCAFT;
    //        tmpInvFeedsItem.MellowWebSWCAFTPercentage = tmpDto.MellowWebSWCAFTPercentage;

    //        tmpInvFeedsItem.OverstockQtySWCAFT += tmpDto.OverstockQtySWCAFT;
    //        tmpInvFeedsItem.OverstockSWCAFTPercentage = tmpDto.OverstockSWCAFTPercentage;

    //        tmpInvFeedsItem.WalmartQtySWCAFT += tmpDto.WalmartQtySWCAFT;
    //        tmpInvFeedsItem.WalmartSWCAFTPercentage = tmpDto.WalmartSWCAFTPercentage;

    //        tmpInvFeedsItem.WayfairQtySWCAFT += tmpDto.WayfairQtySWCAFT;
    //        tmpInvFeedsItem.WayfairSWCAFTPercentage = tmpDto.WayfairSWCAFTPercentage;

    //        tmpInvFeedsItem.HomeDepotQtySWCAFT += tmpDto.HomeDepotQtySWCAFT;
    //        tmpInvFeedsItem.HomeDepotSWCAFTPercentage = tmpDto.HomeDepotSWCAFTPercentage;

    //        tmpInvFeedsItem.TargetQtySWCAFT += tmpDto.TargetQtySWCAFT;
    //        tmpInvFeedsItem.TargetSWCAFTPercentage = tmpDto.TargetSWCAFTPercentage;
    //      }
    //    }
    //  }
    //  return invFeedsItems;
    //}
    public void UpdateInventoryTest()
    {
      int empId = 0;//GetUserId(User.Identity as ClaimsIdentity);
      DateTime today = DateTime.Now;
      Process proc = new Process();
      string tmpStr = System.AppDomain.CurrentDomain.BaseDirectory;
      proc.StartInfo.FileName = tmpStr + "updInv\\NSInvUpdate.exe";
      proc.Start();
      proc.WaitForExitAsync();
      //await _invService.GetUpdatedMainslBancInv(empId, today);
      GetUpdatedAllWarehousesInv(empId, today, 0);

    }

    public async Task<InvFeedsImportResponse> ProcessDailyZeroOutSkus(int empId, List<ZeroOutSKU> zeroOutSkus)
    {
      InvFeedsImportResponse response = new InvFeedsImportResponse() { isOkay = true, errorMessages = new List<string>() };
      string tmpErrorMessage;

      //DateOnly today = new DateOnly(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
      DateTime today = DateTime.Now;
      List<BpmItem> bpmItems = await _kc.BpmItems
        .Where(b => b.ItemStatusId <= itemStatus && b.ItemTypeId <= itemType && b.IsFeedable == true)
        .ToListAsync();

      List<BpmLocation> bpmLocs = await _kc.BpmLocations
        .ToListAsync();

      List<InvFeedsDailyZeroOutSku> invFeedsDailyZeroOuts = zeroOutSkus.Select(i =>
      new InvFeedsDailyZeroOutSku()
      {
        ItemName = ScrubHtml(i.Sku),
        LocationName = ScrubHtml(i.Location),
        OverrideBackOrderRule = (bool)(ScrubHtml(i.OverrideBackOrderRule).HasValue() ? true : false)
      }).ToList();
      int index = 0;
      BpmLocation tmpLoc = new BpmLocation();
      BpmItem tmpItem = new BpmItem();
      InvFeedsDailyZeroOutSku tmpDto = new InvFeedsDailyZeroOutSku();
      while (index < invFeedsDailyZeroOuts.Count)
      {
        tmpDto = invFeedsDailyZeroOuts[index];
        tmpLoc = bpmLocs
          .FirstOrDefault(l => l.LocName.ToLower() == tmpDto.LocationName.ToLower());
        tmpItem = bpmItems
          .FirstOrDefault(i => i.ItemName.ToLower() == tmpDto.ItemName.ToLower());
        if (tmpLoc == null || tmpItem == null)
        {
          response.isOkay = false;
          tmpErrorMessage = "There is no match for either " + tmpDto.ItemName + " or " + tmpDto.LocationName;
          response.errorMessages.Add(tmpErrorMessage);
          invFeedsDailyZeroOuts.RemoveAt(index);
        }
        else
        {
          invFeedsDailyZeroOuts[index].CreatedBy = empId;
          invFeedsDailyZeroOuts[index].ZeroOutDate = today;
          invFeedsDailyZeroOuts[index].ItemNoId = tmpItem.ItemNoId;
          invFeedsDailyZeroOuts[index].ItemLocId = tmpLoc.LocationId;

          index++;
        }
      }// End of while

      await _kc.BulkInsertAsync(invFeedsDailyZeroOuts);

      return response;
    }

    public async Task<InvFeedsImportResponse> DailyFastMovingSKUs(int empId, List<ImportedFastMovingSKUDTO> impFastMovingSkus, IUtilityService _utilService)
    {
      int bancId = 4, mainslId = 25, swcaftId = 54, bascId = 62, prsmCastId = 51, prsmCaltId = 67, zinusTracyId = 57, zinusChsId = 108;

      int tmpMainSL, tmpBanc, tmpBasc, tmpSwcaft, tmpPrismCast, tmpPrismCalt, tmpCgInv, tmpStgMainsl, tmpStgBanc, tmpStgBasc, tmpStgSwcaft, tmpStgPrismCast, tmpStgPrismCalt;

      // To Get Week No. of Year
      CultureInfo myCI = new CultureInfo("en-us");
      Calendar myCal = myCI.Calendar;
      DateTime today = DateTime.Now;
      DateTime beforeDate = new DateTime(today.AddDays(-1.0).Year, today.AddDays(-1.0).Month, today.AddDays(-1.0).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(today.AddDays(1.0).Year, today.AddDays(1.0).Month, today.AddDays(1.0).Day, 0, 0, 0);
      CalendarWeekRule myCWR = myCI.DateTimeFormat.CalendarWeekRule;
      DayOfWeek myFirstDOW = myCI.DateTimeFormat.FirstDayOfWeek;
      DateTime startDate = today.AddDays(-8);
      int dayOfWeek = (int)today.DayOfWeek;
      int lastWeek = myCal.GetWeekOfYear(DateTime.Now, myCWR, myFirstDOW) - 1;
      //int firstDay = 21 + dayOfWeek;
      //int lastDay = 14 + dayOfWeek + 1;
      int firstDay = 7 + dayOfWeek;
      int lastDay = dayOfWeek + 1;
      DateTime beginningDateOfLastWeek = DateTime.Now.AddDays(-firstDay);
      DateTime lastDateOfLastWeek = DateTime.Now.AddDays(-lastDay);

      List<EmailAddressDTO> emailAddresses = await _kc.Employees
        .Where(i => i.IsUserOnFstMvngSkus == true)
        .Select(n => new EmailAddressDTO
        {
          LoginID = n.LoginId
        }).ToListAsync();
      EmailAddressDTO orderProcess = new EmailAddressDTO()
      {
        LoginID = "orderprocess@mellow-home.com"
      };
      emailAddresses.Add(orderProcess);
      //Testing
      /*  
      List<EmailAddressDTO> emailAddresses = await _kc.Employees
        //.Where(i => i.IsUserOnFstMvngSkus == true)
        .Where(i => i.EmployeeId == 210)
        .Select(n => new EmailAddressDTO
        {
          LoginID = n.LoginId
        }).ToListAsync();
      */

      List<FastMovingSkuDTO> fastMovingSKUs = impFastMovingSkus
          .Select(f => new FastMovingSkuDTO
          {
            ItemName = f.sku,
            IsFlagged = (f.isFlagged.Contains("*") ? true : false)
          }).ToList();

      InvFeedsImportResponse response = new InvFeedsImportResponse() { isOkay = true, errorMessages = new List<string>() };
      string tmpErrorMessage;
      string emailContents = "";
      string tmpPreface = "&emsp;This is the list of today's fast moving SKUs.<br/><br/>\r\n<table width=\"70%\" style=\"border: 1px solid CornflowerBlue;border-radius: 10px; border-collapse: separate;\">\r\n  <thead>\r\n    <tr>\r\n      <th colspan = \"3\" style=\"border-radius: 10px; background-color:skyblue;\">\r\n        Abbreviation\r\n      </th>\r\n    </tr>\r\n  </thead>\r\n  <tbody  style=\"border: 1px solid CornflowerBlue;border-radius: 10px;\">\r\n    <tr>\r\n      <td style=\"border: 1px solid CornflowerBlue;text-align: center;border-radius: 10px; background-color:azure;\">\r\n        M: MainSL\r\n      </td>\r\n      <td style=\"border: 1px solid CornflowerBlue;text-align: center;border-radius: 10px; background-color:azure;\">\r\n        ZT: ZINUS_Tracy\r\n      </td>\r\n      <td style=\"border: 1px solid CornflowerBlue;text-align: center;border-radius: 10px; background-color:azure;\">\r\n        ZC: ZINUS_CHS\r\n      </td>\r\n    </tr>\r\n  </tbody>\r\n</table>";

      string tableHeaders = "<table width=\"100%\" style=\"border: 1px solid #6495ED; border-radius: 10px; border-collapse: separate;\">";
      List<string> headers = new List<string>();
      headers.Add(tableHeaders);
      headers.Add("<thead><tr>");
      headers.Add("<th style=\"border: 1px solid #6495ED;border-radius: 10px; background-color:#87CEEB;\">Item Name</th>");
      headers.Add("<th style=\"border: 1px solid #6495ED;border-radius: 10px; background-color:#87CEEB;\">M</th>");
      //headers.Add("<th style=\"border: 1px solid #6495ED;border-radius: 10px; background-color:#87CEEB;\">BN</th>");
      //headers.Add("<th style=\"border: 1px solid #6495ED;border-radius: 10px; background-color:#87CEEB;\">BS</th>");
      //headers.Add("<th style=\"border: 1px solid #6495ED;border-radius: 10px; background-color:#87CEEB;\">SW</th>");
      //headers.Add("<th style=\"border: 1px solid #6495ED;border-radius: 10px; background-color:#87CEEB;\">PS</th>");
      //headers.Add("<th style=\"border: 1px solid #6495ED;border-radius: 10px; background-color:#87CEEB;\">PL</th>");
      headers.Add("<th style=\"border: 1px solid #6495ED;border-radius: 10px; background-color:#87CEEB;\">ZT</th>");
      headers.Add("<th style=\"border: 1px solid #6495ED;border-radius: 10px; background-color:#87CEEB;\">ZC</th>");
      headers.Add("<th style=\"border: 1px solid #6495ED;border-radius: 10px; background-color:#87CEEB;\">Sold Qty. of Week #" + lastWeek + "</th>");
      //headers.Add("<th>CG</th>");

      //headers.Add("<th style=\"border: 1px solid #6495ED;border-radius: 10px; background-color:#87CEEB;\">StgPO_M</th>");
      //headers.Add("<th style=\"border: 1px solid #6495ED;border-radius: 10px; background-color:#87CEEB;\">StgPO_BN</th>");
      //headers.Add("<th style=\"border: 1px solid #6495ED;border-radius: 10px; background-color:#87CEEB;\">StgPO_BS</th>");
      //headers.Add("<th style=\"border: 1px solid #6495ED;border-radius: 10px; background-color:#87CEEB;\">StgPO_SW</th>");
      //headers.Add("<th style=\"border: 1px solid #6495ED;border-radius: 10px; background-color:#87CEEB;\">StgPO_PS</th>");
      //headers.Add("<th style=\"border: 1px solid #6495ED;border-radius: 10px; background-color:#87CEEB;\">StgPO_PL</th>");
      headers.Add("</tr></thead>");
      string tableBody = "<tbody style=\"border: 1px solid #6495ED; border-radius: 10px; background-color:#F0FFFF;\">";
      //string tableContents ="";
      List<string> tableContentsArray = new List<string>();
      tableContentsArray.Add(string.Join("\n", headers));
      tableContentsArray.Add(tableBody);
      string tableEnders = "</table>";
      // USE Array to make headers and make into a string
      InvFeedsReport invFeedReport = await (from x in _kc.InvFeedsReports
                                            .Where((InvFeedsReport ifr) => (DateTime)ifr.CreatedDate > beforeDate && (DateTime)ifr.CreatedDate < afterDate)
                                            .Include((InvFeedsReport x) => x.InvFeedsItems)
                                            .Include(x => x.InvFeedsReportItems)
                                            orderby x.CreatedDate descending
                                            select x).FirstOrDefaultAsync();

      List<InvFeedsItem> loadFeedsItems = await _kc.InvFeedsItems
          .Where((InvFeedsItem lfi) => lfi.InvFeedsReportId == (long?)invFeedReport.InvFeedsReportId)
          .Include((InvFeedsItem lfi) => lfi.InvFeedsItemLocQties)
          .ToListAsync();
      List<BpmItem> bpmItems = await _kc.BpmItems
        .Where(i => i.ItemStatusId <= itemStatus && i.ItemTypeId <= itemType && i.IsFeedable == true)
        .ToListAsync();
      //foreach(FastMovingSkuDTO)

      BpmItem tmpBpmItem;
      InvFeedsItem tmpInvFeedsItem;
      List<InvFeedsItemLocQty> tmpFeedsItemLocQties;
      string tmpWarningState = "background-color:#FFD700;";
      string tmpDefaultState = "background-color:transparent;";

      //      List<SoD> tmpSod = await _kc.SoDs
      //        .Where(s => s.SoDate >= beginningDateOfLastWeek.Date && s.SoDate.Date < lastDateOfLastWeek.AddDays(1).Date)
      //       .ToListAsync();
      List<int> custIDs = new List<int>() { 5, 9, 12, 18, 21, 26, 29, 40, 51 };
      List<SoT> sots = await _kc.SoTs
        .Where(s => s.SoDate > startDate.AddDays(-1).Date && s.SoDate.Date < today.AddDays(1).Date)
        .Where(s => custIDs.Contains(s.CustomerId))
        .Include(s => s.SoDs)
        .ToListAsync();

      List<SoD> sods = new List<SoD>();
      foreach (SoT tmpModel in sots)
      { sods.AddRange(tmpModel.SoDs.ToList()); }

      //SoldQtyOfLastWeek
      foreach (FastMovingSkuDTO tmpDto in fastMovingSKUs)
      {
        tmpInvFeedsItem = new InvFeedsItem();
        tmpMainSL = tmpBanc = tmpBasc = tmpSwcaft = tmpPrismCast = tmpPrismCalt = tmpCgInv = tmpStgMainsl = tmpStgBanc = tmpStgBasc = tmpStgSwcaft = tmpStgPrismCast = tmpStgPrismCalt = 0;
        tableContentsArray.Add("<tr>");
        tmpBpmItem = bpmItems.Where(i => i.ItemName.ToLower() == tmpDto.ItemName.ToLower()).FirstOrDefault();

        if (tmpBpmItem != null)
        {
          tmpDto.ItemNoId = tmpBpmItem.ItemNoId;

          tmpDto.QtyAvailMainsl = 0;
          //tmpDto.QtyAvailBanc = 0;
          //tmpDto.QtyAvailBasc = 0;
          //tmpDto.QtyAvailSwcaft = 0;
          //tmpDto.QtyAvailPrismCast = 0;
          //tmpDto.QtyAvailPrismCalt = 0;
          tmpDto.SoldQtyOfLastWeek = 0;

          //tmpDto.QtyAvailCGInv = 0;
          tmpDto.StagePOQtyMainsl = 0;
          tmpDto.StagePOQtyZinusTracy = 0;
          tmpDto.StagePOQtyZinusChs = 0;
          //tmpDto.TotalStagePOQtyBanc = 0;
          //tmpDto.TotalStagePOQtyBasc = 0;
          //tmpDto.TotalStagePOQtySwcaft = 0;
          //tmpDto.TotalStagePOQtyPrismCast = 0;
          //tmpDto.TotalStagePOQtyPrismCalt = 0;
          tmpDto.SoldQtyOfLastWeek = (int)sods.Where(s => s.ItemNoId == tmpDto.ItemNoId).Sum(s => s.QtyInvoiced);

          tmpFeedsItemLocQties = new List<InvFeedsItemLocQty>();
          tmpInvFeedsItem = loadFeedsItems.FirstOrDefault(a => a.ItemNoId == tmpBpmItem.ItemNoId);
          //if (tmpInvFeedsItem.InvFeedsItemLocQties != null)
          //{ tmpFeedsItemLocQties = loadFeedsItems.FirstOrDefault(a => a.ItemNoId == tmpBpmItem.ItemNoId).InvFeedsItemLocQties.ToList(); }
          if (tmpInvFeedsItem != null)
          {
            //if ()
            if (tmpInvFeedsItem.InvFeedsItemLocQties == null)
            { tmpFeedsItemLocQties = null; }
            else
            {
              tmpFeedsItemLocQties = loadFeedsItems
              .FirstOrDefault(a => a.ItemNoId == tmpBpmItem.ItemNoId)
              .InvFeedsItemLocQties
              .ToList();
            }

          }
          //tmpFeedsItemLocQties = loadFeedsItems.FirstOrDefault(a => a.ItemNoId == tmpBpmItem.ItemNoId).InvFeedsItemLocQties.ToList();

          if (tmpFeedsItemLocQties?.Any() is true)
          {
            foreach (InvFeedsItemLocQty tmpLoc in tmpFeedsItemLocQties)
            {
              /*if (tmpLoc.ItemLocId == bancId)
              {
                tmpDto.QtyAvailBanc = tmpLoc.QtyAvail.Value;
                //tmpDto.TotalStagePOQtyBanc =  (int)(tmpLoc.StagePoqtyModified.HasValue ? tmpLoc.StagePoqtyModified : 0);
              }
              else*/
              if (tmpLoc.ItemLocId == mainslId)
              {
                tmpDto.QtyAvailMainsl = tmpLoc.QtyAvail.Value;
                //tmpDto.TotalStagePOQtyMainsl = (int)(tmpLoc.StagePoqtyModified.HasValue ? tmpLoc.StagePoqtyModified : 0);
              }
              /*else if (tmpLoc.ItemLocId == swcaftId)
              {
                tmpDto.QtyAvailSwcaft = tmpLoc.QtyAvail.Value;
                //tmpDto.TotalStagePOQtySwcaft = (int)(tmpLoc.StagePoqtyModified.HasValue ? tmpLoc.StagePoqtyModified : 0);
              }
              else if (tmpLoc.ItemLocId == bascId)
              {
                tmpDto.QtyAvailBasc = tmpLoc.QtyAvail.Value;
                //tmpDto.TotalStagePOQtyBasc = (int)(tmpLoc.StagePoqtyModified.HasValue ? tmpLoc.StagePoqtyModified : 0);
              }
              else if (tmpLoc.ItemLocId == prsmCastId)
              {
                tmpDto.QtyAvailPrismCast = tmpLoc.QtyAvail.Value;
                //tmpDto.TotalStagePOQtyPrismCast = (int)(tmpLoc.StagePoqtyModified.HasValue ? tmpLoc.StagePoqtyModified : 0);
              }
              else if (tmpLoc.ItemLocId == prsmCaltId)
              {
                tmpDto.QtyAvailPrismCalt = tmpLoc.QtyAvail.Value;
                //tmpDto.TotalStagePOQtyPrismCalt = (int)(tmpLoc.StagePoqtyModified.HasValue ? tmpLoc.StagePoqtyModified : 0);
              }*/
              else if (tmpLoc.ItemLocId == zinusTracyId)
              {
                tmpDto.QtyAvailZinusTracy = tmpLoc.QtyAvail.Value;
                //tmpDto.TotalStagePOQtyPrismCast = (int)(tmpLoc.StagePoqtyModified.HasValue ? tmpLoc.StagePoqtyModified : 0);
              }
              else if (tmpLoc.ItemLocId == zinusChsId)
              {
                tmpDto.QtyAvailZinusChs = tmpLoc.QtyAvail.Value;
                //tmpDto.TotalStagePOQtyPrismCalt = (int)(tmpLoc.StagePoqtyModified.HasValue ? tmpLoc.StagePoqtyModified : 0);
              }
            }
          }

          tableContentsArray.Add("<td style=\"" + (tmpDto.IsFlagged ? tmpWarningState : tmpDefaultState) + "\">" + tmpDto.ItemName + "</td>"); // SKU Name
          tableContentsArray.Add("<td style=\"text-align:right;\">" + tmpDto.QtyAvailMainsl + "</td>");   // MainSL Qty
          //tableContentsArray.Add("<td style=\"text-align:right;\">" + tmpDto.QtyAvailBanc + "</td>");  // BANC Qty
          //tableContentsArray.Add("<td style=\"text-align:right;\">" + tmpDto.QtyAvailBasc + "</td>");  // BASC Qty
          //tableContentsArray.Add("<td style=\"text-align:right;\">" + tmpDto.QtyAvailSwcaft + "</td>");  // SW-CAFT Qty
          //tableContentsArray.Add("<td style=\"text-align:right;\">" + tmpDto.QtyAvailPrismCast + "</td>");  // PRISM-CAST Qty
          //tableContentsArray.Add("<td style=\"text-align:right;\">" + tmpDto.QtyAvailPrismCalt + "</td>");  // PRISM-CALT Qty
          tableContentsArray.Add("<td style=\"text-align:right;\">" + tmpDto.QtyAvailZinusTracy + "</td>");  // ZINUS_WH_Tracy Qty
          tableContentsArray.Add("<td style=\"text-align:right;\">" + tmpDto.QtyAvailZinusChs + "</td>");  // ZINUS_WH_CHS Qty
          tableContentsArray.Add("<td style=\"text-align:right;\">" + tmpDto.SoldQtyOfLastWeek + "</td>");  // Last Week Sold Qty
                                                                                                            //tableContentsArray.Add("<td>" + tmpDto.QtyAvailCGInv + "</td>");  // CG Inventory
                                                                                                            // tableContentsArray.Add("<td style=\"text-align:right;\">" + tmpDto.TotalStagePOQtyMainsl + "</td>");   // Total Stage PO of MainSL
                                                                                                            // tableContentsArray.Add("<td style=\"text-align:right;\">" + tmpDto.TotalStagePOQtyBanc + "</td>");  // Total Stage PO of BANC
                                                                                                            // tableContentsArray.Add("<td style=\"text-align:right;\">" + tmpDto.TotalStagePOQtyBasc + "</td>");  // Total Stage PO of BASC
                                                                                                            // tableContentsArray.Add("<td style=\"text-align:right;\">" + tmpDto.TotalStagePOQtySwcaft + "</td>");  // Total Stage PO of SW-CAFT
                                                                                                            // tableContentsArray.Add("<td style=\"text-align:right;\">" + tmpDto.TotalStagePOQtyPrismCast + "</td>");  // Total Stage PO of PRISM-CAST
                                                                                                            // tableContentsArray.Add("<td style=\"text-align:right;\">" + tmpDto.TotalStagePOQtyPrismCalt + "</td>");  // Total Stage PO of PRISM-CALT
        }
        else
        {
          tableContentsArray.Add("<td>" + tmpDto.ItemName + "</td>");
          tableContentsArray.Add("<td style=\"text-align:right;\">0</td>");
          //tableContentsArray.Add("<td style=\"text-align:right;\">0</td>");
          //tableContentsArray.Add("<td style=\"text-align:right;\">0</td>");
          //tableContentsArray.Add("<td style=\"text-align:right;\">0</td>");
          //tableContentsArray.Add("<td style=\"text-align:right;\">0</td>");
          //tableContentsArray.Add("<td style=\"text-align:right;\">0</td>");
          tableContentsArray.Add("<td style=\"text-align:right;\">0</td>");
          tableContentsArray.Add("<td style=\"text-align:right;\">0</td>");
          tableContentsArray.Add("<td style=\"text-align:right;\">" + tmpDto.SoldQtyOfLastWeek + "</td>");  // Last Week Sold Qty
          //tableContentsArray.Add("<td style=\"text-align:right;\">0</td>");
          //tableContentsArray.Add("<td style=\"text-align:right;\">0</td>");
          //tableContentsArray.Add("<td style=\"text-align:right;\">0</td>");
          //tableContentsArray.Add("<td style=\"text-align:right;\">0</td>");
          // tableContentsArray.Add("<td style=\"text-align:right;\">0</td>");
          //  tableContentsArray.Add("<td style=\"text-align:right;\">0</td>");
          //  tableContentsArray.Add("<td>0</td>"); // for CG Inv.

        }
        tableContentsArray.Add("</tr>");
      }// End of foreach 
      //tableBody.Add(string.Join("\n", tableContentsArray));
      tableContentsArray.Add("</tbody>");
      tableContentsArray.Add(tableEnders);
      emailContents = tmpPreface + "\n<br/><br/>\n" + string.Join("\n", tableContentsArray);
      bool isOkay = await _utilService.SendEmail(emailAddresses, "Today" + today.ToString("MM/dd/yyyy") + "'s Fast Moving SKU(s)", emailContents);

      return response;
    }


    public async Task<List<GetInventoryFeedsItemDTO>> GetSlaveSkuMkIcrFeeding(int ratioOfSku, List<GetInventoryFeedsItemDTO> inventoryFeedsItemDTOs)
    {
      int amazonMkId = 1, bpmMkId = 3, wayfairMkId = 4, eBayMkId = 5, mellowMkId = 10, overstockMkId = 12, walmartMkId = 16, homeDepotMkId = 340, targetMkId = 341;
      double fixedRatio = (double)ratioOfSku * 0.01;

      List<MkIcr> mkIcrs = await _kc.MkIcrs
        .Where(i => i.IsBypassCooMaster == true)
        .Include(i => i.ItemNo)
        .ToListAsync();

      //GetInventoryFeedsItemDTO tmpFeedDto = new GetInventoryFeedsItemDTO();
      // 1. If SKU is not a Master,
      // 2. Check ICR and if there is any,
      // 3. Feeds the fixed ratio to that channel and deduct from available qty

      foreach (GetInventoryFeedsItemDTO tmpDto in inventoryFeedsItemDTOs)
      {
        if (tmpDto.isCooMasterSku == false)
        {
          // if (tmpDto.ItemNoId == 3354)
          // { Console.WriteLine("Check here");}
          foreach (MkIcr tmpIcr in mkIcrs)
          {
            if (tmpIcr.IsInvFeed == true)
            {
              if (tmpIcr.ItemNoId == tmpDto.ItemNoId)
              {
                tmpDto.HasMkIcrNotCooMaster = true;
                if (tmpIcr.MarketId == amazonMkId)
                {
                  // Banc
                  /*
                  if (tmpDto.QtyAvailActualBanc > 0)
                  {
                    tmpDto.AmazonBancPercentage = (int)(fixedRatio * 100);
                    tmpDto.AmazonQtyBanc = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualBanc, fixedRatio);
                    tmpDto.QtyAvailActualBanc = tmpDto.QtyAvailActualBanc - tmpDto.AmazonQtyBanc;
                  }*/

                  // Basc
                  /*
                  if (tmpDto.QtyAvailActualBasc > 0)
                  {
                    tmpDto.AmazonBascPercentage = (int)(fixedRatio * 100);
                    tmpDto.AmazonQtyBasc = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualBasc, fixedRatio);
                    tmpDto.QtyAvailActualBasc = tmpDto.QtyAvailActualBasc - tmpDto.AmazonQtyBasc;
                  }*/

                  // MainSL
                  if (tmpDto.QtyAvailActualMainsl > 0)
                  {
                    tmpDto.AmazonMainslPercentage = (int)(fixedRatio * 100);
                    tmpDto.AmazonQtyMainsl = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualMainsl, fixedRatio);
                    tmpDto.QtyAvailActualMainsl = tmpDto.QtyAvailActualMainsl - tmpDto.AmazonQtyMainsl;
                  }
                  /*
                  // Swcaft
                  if (tmpDto.QtyAvailActualSWCAFT > 0)
                  {
                    tmpDto.AmazonSWCAFTPercentage = (int)(fixedRatio * 100);
                    tmpDto.AmazonQtySWCAFT = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualSWCAFT, fixedRatio);
                    tmpDto.QtyAvailActualSWCAFT = tmpDto.QtyAvailActualSWCAFT - tmpDto.AmazonQtySWCAFT;
                  }
                  */
                  // Prism-Cast
                  /*
                  if (tmpDto.QtyAvailActualPrismCast > 0)
                  {
                    tmpDto.AmazonPrismCastPercentage = (int)(fixedRatio * 100);
                    tmpDto.AmazonQtyPrismCast = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualPrismCast, fixedRatio);
                    tmpDto.QtyAvailActualPrismCast = tmpDto.QtyAvailActualPrismCast - tmpDto.AmazonQtyPrismCast;
                  }*/

                  // Prism-Calt
                  /*
                  if (tmpDto.QtyAvailActualPrismCalt > 0)
                  {
                    tmpDto.AmazonPrismCaltPercentage = (int)(fixedRatio * 100);
                    tmpDto.AmazonQtyPrismCalt = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualPrismCalt, fixedRatio);
                    tmpDto.QtyAvailActualPrismCalt = tmpDto.QtyAvailActualPrismCalt - tmpDto.AmazonQtyPrismCalt;
                  }
                  */
                  // Zinus-Tracy
                  if (tmpDto.QtyAvailActualZinusTracy > 0)
                  {
                    tmpDto.AmazonZinusTracyPercentage = (int)(fixedRatio * 100);
                    tmpDto.AmazonQtyZinusTracy = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualZinusTracy, fixedRatio);
                    tmpDto.QtyAvailActualZinusTracy = tmpDto.QtyAvailActualZinusTracy - tmpDto.AmazonQtyZinusTracy;
                  }

                  // Zinus-Chs
                  if (tmpDto.QtyAvailActualZinusChs > 0)
                  {
                    tmpDto.AmazonZinusChsPercentage = (int)(fixedRatio * 100);
                    tmpDto.AmazonQtyZinusChs = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualZinusChs, fixedRatio);
                    tmpDto.QtyAvailActualZinusChs = tmpDto.QtyAvailActualZinusChs - tmpDto.AmazonQtyZinusChs;
                  }
                } // End of Amazon
                else if (tmpIcr.MarketId == bpmMkId)
                {
                  // Banc
                  /*
                  if (tmpDto.QtyAvailActualBanc > 0)
                  {
                    tmpDto.BPMWebBancPercentage = (int)(fixedRatio * 100);
                    tmpDto.BPMWebQtyBanc = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualBanc, fixedRatio);
                    tmpDto.QtyAvailActualBanc = tmpDto.QtyAvailActualBanc - tmpDto.BPMWebQtyBanc;
                  }*/

                  // Basc
                  /*
                  if (tmpDto.QtyAvailActualBasc > 0)
                  {
                    tmpDto.BPMWebBascPercentage = (int)(fixedRatio * 100);
                    tmpDto.BPMWebQtyBasc = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualBasc, fixedRatio);
                    tmpDto.QtyAvailActualBasc = tmpDto.QtyAvailActualBasc - tmpDto.BPMWebQtyBasc;
                  }*/

                  // MainSL
                  if (tmpDto.QtyAvailActualMainsl > 0)
                  {
                    tmpDto.BPMWebMainslPercentage = (int)(fixedRatio * 100);
                    tmpDto.BPMWebQtyMainsl = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualMainsl, fixedRatio);
                    tmpDto.QtyAvailActualMainsl = tmpDto.QtyAvailActualMainsl - tmpDto.BPMWebQtyMainsl;
                  }
                  /*
                  // Swcaft
                  if (tmpDto.QtyAvailActualSWCAFT > 0)
                  {
                    tmpDto.BPMWebSWCAFTPercentage = (int)(fixedRatio * 100);
                    tmpDto.BPMWebQtySWCAFT = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualSWCAFT, fixedRatio);
                    tmpDto.QtyAvailActualSWCAFT = tmpDto.QtyAvailActualSWCAFT - tmpDto.BPMWebQtySWCAFT;
                  }
                  */
                  // Prism-Cast
                  /*
                  if (tmpDto.QtyAvailActualPrismCast > 0)
                  {
                    tmpDto.BPMWebPrismCastPercentage = (int)(fixedRatio * 100);
                    tmpDto.BPMWebQtyPrismCast = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualPrismCast, fixedRatio);
                    tmpDto.QtyAvailActualPrismCast = tmpDto.QtyAvailActualPrismCast - tmpDto.BPMWebQtyPrismCast;
                  }*/

                  // Prism-Calt
                  /*
                  if (tmpDto.QtyAvailActualPrismCalt > 0)
                  {
                    tmpDto.BPMWebPrismCaltPercentage = (int)(fixedRatio * 100);
                    tmpDto.BPMWebQtyPrismCalt = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualPrismCalt, fixedRatio);
                    tmpDto.QtyAvailActualPrismCalt = tmpDto.QtyAvailActualPrismCalt - tmpDto.BPMWebQtyPrismCalt;
                  }*/

                  // Zinus-Tracy
                  if (tmpDto.QtyAvailActualZinusTracy > 0)
                  {
                    tmpDto.BPMWebZinusTracyPercentage = (int)(fixedRatio * 100);
                    tmpDto.BPMWebQtyZinusTracy = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualZinusTracy, fixedRatio);
                    tmpDto.QtyAvailActualZinusTracy = tmpDto.QtyAvailActualZinusTracy - tmpDto.BPMWebQtyZinusTracy;
                  }

                  // Zinus-Chs
                  if (tmpDto.QtyAvailActualZinusChs > 0)
                  {
                    tmpDto.BPMWebZinusChsPercentage = (int)(fixedRatio * 100);
                    tmpDto.BPMWebQtyZinusChs = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualZinusChs, fixedRatio);
                    tmpDto.QtyAvailActualZinusChs = tmpDto.QtyAvailActualZinusChs - tmpDto.BPMWebQtyZinusChs;
                  }
                } // End of BPM Web
                else if (tmpIcr.MarketId == wayfairMkId)
                {
                  // Banc
                  /*
                  if (tmpDto.QtyAvailActualBanc > 0)
                  {
                    tmpDto.WayfairBancPercentage = (int)(fixedRatio * 100);
                    tmpDto.WayfairQtyBanc = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualBanc, fixedRatio);
                    tmpDto.QtyAvailActualBanc = tmpDto.QtyAvailActualBanc - tmpDto.WayfairQtyBanc;
                  }*/

                  // Basc
                  /*
                  if (tmpDto.QtyAvailActualBasc > 0)
                  {
                    tmpDto.WayfairBascPercentage = (int)(fixedRatio * 100);
                    tmpDto.WayfairQtyBasc = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualBasc, fixedRatio);
                    tmpDto.QtyAvailActualBasc = tmpDto.QtyAvailActualBasc - tmpDto.WayfairQtyBasc;
                  }*/

                  // MainSL
                  if (tmpDto.QtyAvailActualMainsl > 0)
                  {
                    tmpDto.WayfairMainslPercentage = (int)(fixedRatio * 100);
                    tmpDto.WayfairQtyMainsl = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualMainsl, fixedRatio);
                    tmpDto.QtyAvailActualMainsl = tmpDto.QtyAvailActualMainsl - tmpDto.WayfairQtyMainsl;
                  }
                  /*
                  // Swcaft
                  if (tmpDto.QtyAvailActualSWCAFT > 0)
                  {
                    tmpDto.WayfairSWCAFTPercentage = (int)(fixedRatio * 100);
                    tmpDto.WayfairQtySWCAFT = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualSWCAFT, fixedRatio);
                    tmpDto.QtyAvailActualSWCAFT = tmpDto.QtyAvailActualSWCAFT - tmpDto.WayfairQtySWCAFT;
                  }
                  */
                  // Prism-Cast
                  /*
                  if (tmpDto.QtyAvailActualPrismCast > 0)
                  {
                    tmpDto.WayfairPrismCastPercentage = (int)(fixedRatio * 100);
                    tmpDto.WayfairQtyPrismCast = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualPrismCast, fixedRatio);
                    tmpDto.QtyAvailActualPrismCast = tmpDto.QtyAvailActualPrismCast - tmpDto.WayfairQtyPrismCast;
                  }*/

                  // Prism-Calt
                  /*
                  if (tmpDto.QtyAvailActualPrismCalt > 0)
                  {
                    tmpDto.WayfairPrismCaltPercentage = (int)(fixedRatio * 100);
                    tmpDto.WayfairQtyPrismCalt = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualPrismCalt, fixedRatio);
                    tmpDto.QtyAvailActualPrismCalt = tmpDto.QtyAvailActualPrismCalt - tmpDto.WayfairQtyPrismCalt;
                  }*/

                  // Zinus-Tracy
                  if (tmpDto.QtyAvailActualZinusTracy > 0)
                  {
                    tmpDto.WayfairZinusTracyPercentage = (int)(fixedRatio * 100);
                    tmpDto.WayfairQtyZinusTracy = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualZinusTracy, fixedRatio);
                    tmpDto.QtyAvailActualZinusTracy = tmpDto.QtyAvailActualZinusTracy - tmpDto.WayfairQtyZinusTracy;
                  }

                  // Zinus-Chs
                  if (tmpDto.QtyAvailActualZinusChs > 0)
                  {
                    tmpDto.WayfairZinusChsPercentage = (int)(fixedRatio * 100);
                    tmpDto.WayfairQtyZinusChs = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualZinusChs, fixedRatio);
                    tmpDto.QtyAvailActualZinusChs = tmpDto.QtyAvailActualZinusChs - tmpDto.WayfairQtyZinusChs;
                  }
                }// Enf of Wayfair
                else if (tmpIcr.MarketId == eBayMkId)
                {
                  // Banc
                  /*
                  if (tmpDto.QtyAvailActualBanc > 0)
                  {
                    tmpDto.eBayBancPercentage = (int)(fixedRatio * 100);
                    tmpDto.eBayQtyBanc = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualBanc, fixedRatio);
                    tmpDto.QtyAvailActualBanc = tmpDto.QtyAvailActualBanc - tmpDto.eBayQtyBanc;
                  }*/

                  // Basc
                  /*
                  if (tmpDto.QtyAvailActualBasc > 0)
                  {
                    tmpDto.eBayBascPercentage = (int)(fixedRatio * 100);
                    tmpDto.eBayQtyBasc = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualBasc, fixedRatio);
                    tmpDto.QtyAvailActualBasc = tmpDto.QtyAvailActualBasc - tmpDto.eBayQtyBasc;
                  }*/

                  // MainSL
                  if (tmpDto.QtyAvailActualMainsl > 0)
                  {
                    tmpDto.eBayMainslPercentage = (int)(fixedRatio * 100);
                    tmpDto.eBayQtyMainsl = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualMainsl, fixedRatio);
                    tmpDto.QtyAvailActualMainsl = tmpDto.QtyAvailActualMainsl - tmpDto.eBayQtyMainsl;
                  }
                  /*
                  // Swcaft
                  if (tmpDto.QtyAvailActualSWCAFT > 0)
                  {
                    tmpDto.eBaySWCAFTPercentage = (int)(fixedRatio * 100);
                    tmpDto.eBayQtySWCAFT = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualSWCAFT, fixedRatio);
                    tmpDto.QtyAvailActualSWCAFT = tmpDto.QtyAvailActualSWCAFT - tmpDto.eBayQtySWCAFT;
                  }
                  */
                  // Prism-Cast
                  /*
                  if (tmpDto.QtyAvailActualPrismCast > 0)
                  {
                    tmpDto.eBayPrismCastPercentage = (int)(fixedRatio * 100);
                    tmpDto.eBayQtyPrismCast = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualPrismCast, fixedRatio);
                    tmpDto.QtyAvailActualPrismCast = tmpDto.QtyAvailActualPrismCast - tmpDto.eBayQtyPrismCast;
                  }*/

                  // Prism-Calt
                  /*
                  if (tmpDto.QtyAvailActualPrismCalt > 0)
                  {
                    tmpDto.eBayPrismCaltPercentage = (int)(fixedRatio * 100);
                    tmpDto.eBayQtyPrismCalt = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualPrismCalt, fixedRatio);
                    tmpDto.QtyAvailActualPrismCalt = tmpDto.QtyAvailActualPrismCalt - tmpDto.eBayQtyPrismCalt;
                  }*/

                  // Zinus-Tracy
                  if (tmpDto.QtyAvailActualZinusTracy > 0)
                  {
                    tmpDto.eBayZinusTracyPercentage = (int)(fixedRatio * 100);
                    tmpDto.eBayQtyZinusTracy = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualZinusTracy, fixedRatio);
                    tmpDto.QtyAvailActualZinusTracy = tmpDto.QtyAvailActualZinusTracy - tmpDto.eBayQtyZinusTracy;
                  }

                  // Zinus-Chs
                  if (tmpDto.QtyAvailActualZinusChs > 0)
                  {
                    tmpDto.eBayZinusChsPercentage = (int)(fixedRatio * 100);
                    tmpDto.eBayQtyZinusChs = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualZinusChs, fixedRatio);
                    tmpDto.QtyAvailActualZinusChs = tmpDto.QtyAvailActualZinusChs - tmpDto.eBayQtyZinusChs;
                  }
                } // End of eBay
                else if (tmpIcr.MarketId == mellowMkId)
                {
                  // Banc
                  /*
                  if (tmpDto.QtyAvailActualBanc > 0)
                  {
                    tmpDto.MellowWebBancPercentage = (int)(fixedRatio * 100);
                    tmpDto.MellowWebQtyBanc = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualBanc, fixedRatio);
                    tmpDto.QtyAvailActualBanc = tmpDto.QtyAvailActualBanc - tmpDto.MellowWebQtyBanc;
                  }

                  // Basc
                  if (tmpDto.QtyAvailActualBasc > 0)
                  {
                    tmpDto.MellowWebBascPercentage = (int)(fixedRatio * 100);
                    tmpDto.MellowWebQtyBasc = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualBasc, fixedRatio);
                    tmpDto.QtyAvailActualBasc = tmpDto.QtyAvailActualBasc - tmpDto.MellowWebQtyBasc;
                  }*/

                  // MainSL
                  if (tmpDto.QtyAvailActualMainsl > 0)
                  {
                    tmpDto.MellowWebMainslPercentage = (int)(fixedRatio * 100);
                    tmpDto.MellowWebQtyMainsl = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualMainsl, fixedRatio);
                    tmpDto.QtyAvailActualMainsl = tmpDto.QtyAvailActualMainsl - tmpDto.MellowWebQtyMainsl;
                  }
                  /*
                  // Swcaft
                  if (tmpDto.QtyAvailActualSWCAFT > 0)
                  {
                    tmpDto.MellowWebSWCAFTPercentage = (int)(fixedRatio * 100);
                    tmpDto.MellowWebQtySWCAFT = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualSWCAFT, fixedRatio);
                    tmpDto.QtyAvailActualSWCAFT = tmpDto.QtyAvailActualSWCAFT - tmpDto.MellowWebQtySWCAFT;
                  }
                  */
                  // Prism-Cast
                  /*
                  if (tmpDto.QtyAvailActualPrismCast > 0)
                  {
                    tmpDto.MellowWebPrismCastPercentage = (int)(fixedRatio * 100);
                    tmpDto.MellowWebQtyPrismCast = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualPrismCast, fixedRatio);
                    tmpDto.QtyAvailActualPrismCast = tmpDto.QtyAvailActualPrismCast - tmpDto.MellowWebQtyPrismCast;
                  }

                  // Prism-Calt
                  if (tmpDto.QtyAvailActualPrismCalt > 0)
                  {
                    tmpDto.MellowWebPrismCaltPercentage = (int)(fixedRatio * 100);
                    tmpDto.MellowWebQtyPrismCalt = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualPrismCalt, fixedRatio);
                    tmpDto.QtyAvailActualPrismCalt = tmpDto.QtyAvailActualPrismCalt - tmpDto.MellowWebQtyPrismCalt;
                  }*/

                  // Zinus-Tracy
                  if (tmpDto.QtyAvailActualZinusTracy > 0)
                  {
                    tmpDto.MellowWebZinusTracyPercentage = (int)(fixedRatio * 100);
                    tmpDto.MellowWebQtyZinusTracy = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualZinusTracy, fixedRatio);
                    tmpDto.QtyAvailActualZinusTracy = tmpDto.QtyAvailActualZinusTracy - tmpDto.MellowWebQtyZinusTracy;
                  }

                  // Zinus-Chs
                  if (tmpDto.QtyAvailActualZinusChs > 0)
                  {
                    tmpDto.MellowWebZinusChsPercentage = (int)(fixedRatio * 100);
                    tmpDto.MellowWebQtyZinusChs = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualZinusChs, fixedRatio);
                    tmpDto.QtyAvailActualZinusChs = tmpDto.QtyAvailActualZinusChs - tmpDto.MellowWebQtyZinusChs;
                  }
                } // End of Mellow
                else if (tmpIcr.MarketId == overstockMkId)
                {
                  // Banc
                  /*
                  if (tmpDto.QtyAvailActualBanc > 0)
                  {
                    tmpDto.OverstockBancPercentage = (int)(fixedRatio * 100);
                    tmpDto.OverstockQtyBanc = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualBanc, fixedRatio);
                    tmpDto.QtyAvailActualBanc = tmpDto.QtyAvailActualBanc - tmpDto.OverstockQtyBanc;
                  }

                  // Basc
                  if (tmpDto.QtyAvailActualBasc > 0)
                  {
                    tmpDto.OverstockBascPercentage = (int)(fixedRatio * 100);
                    tmpDto.OverstockQtyBasc = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualBasc, fixedRatio);
                    tmpDto.QtyAvailActualBasc = tmpDto.QtyAvailActualBasc - tmpDto.OverstockQtyBasc;
                  }*/

                  // MainSL
                  if (tmpDto.QtyAvailActualMainsl > 0)
                  {
                    tmpDto.OverstockMainslPercentage = (int)(fixedRatio * 100);
                    tmpDto.OverstockQtyMainsl = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualMainsl, fixedRatio);
                    tmpDto.QtyAvailActualMainsl = tmpDto.QtyAvailActualMainsl - tmpDto.OverstockQtyMainsl;
                  }
                  /*
                  // Swcaft
                  if (tmpDto.QtyAvailActualSWCAFT > 0)
                  {
                    tmpDto.OverstockSWCAFTPercentage = (int)(fixedRatio * 100);
                    tmpDto.OverstockQtySWCAFT = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualSWCAFT, fixedRatio);
                    tmpDto.QtyAvailActualSWCAFT = tmpDto.QtyAvailActualSWCAFT - tmpDto.OverstockQtySWCAFT;
                  }
                  */
                  // Prism-Cast
                  /*
                  if (tmpDto.QtyAvailActualPrismCast > 0)
                  {
                    tmpDto.OverstockPrismCastPercentage = (int)(fixedRatio * 100);
                    tmpDto.OverstockQtyPrismCast = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualPrismCast, fixedRatio);
                    tmpDto.QtyAvailActualPrismCast = tmpDto.QtyAvailActualPrismCast - tmpDto.OverstockQtyPrismCast;
                  }

                  // Prism-Calt
                  if (tmpDto.QtyAvailActualPrismCalt > 0)
                  {
                    tmpDto.OverstockPrismCaltPercentage = (int)(fixedRatio * 100);
                    tmpDto.OverstockQtyPrismCalt = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualPrismCalt, fixedRatio);
                    tmpDto.QtyAvailActualPrismCalt = tmpDto.QtyAvailActualPrismCalt - tmpDto.OverstockQtyPrismCalt;
                  }*/

                  // Zinus-Tracy
                  if (tmpDto.QtyAvailActualZinusTracy > 0)
                  {
                    tmpDto.OverstockZinusTracyPercentage = (int)(fixedRatio * 100);
                    tmpDto.OverstockQtyZinusTracy = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualZinusTracy, fixedRatio);
                    tmpDto.QtyAvailActualZinusTracy = tmpDto.QtyAvailActualZinusTracy - tmpDto.OverstockQtyZinusTracy;
                  }

                  // Zinus-Chs
                  if (tmpDto.QtyAvailActualZinusChs > 0)
                  {
                    tmpDto.OverstockZinusChsPercentage = (int)(fixedRatio * 100);
                    tmpDto.OverstockQtyZinusChs = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualZinusChs, fixedRatio);
                    tmpDto.QtyAvailActualZinusChs = tmpDto.QtyAvailActualZinusChs - tmpDto.OverstockQtyZinusChs;
                  }
                } // End of Overstock
                else if (tmpIcr.MarketId == walmartMkId)
                {
                  // Banc
                  /*
                  if (tmpDto.QtyAvailActualBanc > 0)
                  {
                    tmpDto.WalmartBancPercentage = (int)(fixedRatio * 100);
                    tmpDto.WalmartQtyBanc = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualBanc, fixedRatio);
                    tmpDto.QtyAvailActualBanc = tmpDto.QtyAvailActualBanc - tmpDto.WalmartQtyBanc;
                  }

                  // Basc
                  if (tmpDto.QtyAvailActualBasc > 0)
                  {
                    tmpDto.WalmartBascPercentage = (int)(fixedRatio * 100);
                    tmpDto.WalmartQtyBasc = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualBasc, fixedRatio);
                    tmpDto.QtyAvailActualBasc = tmpDto.QtyAvailActualBasc - tmpDto.WalmartQtyBasc;
                  }*/

                  // MainSL
                  if (tmpDto.QtyAvailActualMainsl > 0)
                  {
                    tmpDto.WalmartMainslPercentage = (int)(fixedRatio * 100);
                    tmpDto.WalmartQtyMainsl = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualMainsl, fixedRatio);
                    tmpDto.QtyAvailActualMainsl = tmpDto.QtyAvailActualMainsl - tmpDto.WalmartQtyMainsl;
                  }
                  /*
                  // Swcaft
                  if (tmpDto.QtyAvailActualSWCAFT > 0)
                  {
                    tmpDto.WalmartSWCAFTPercentage = (int)(fixedRatio * 100);
                    tmpDto.WalmartQtySWCAFT = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualSWCAFT, fixedRatio);
                    tmpDto.QtyAvailActualSWCAFT = tmpDto.QtyAvailActualSWCAFT - tmpDto.WalmartQtySWCAFT;
                  }
                  */
                  // Prism-Cast
                  /*
                  if (tmpDto.QtyAvailActualPrismCast > 0)
                  {
                    tmpDto.WalmartPrismCastPercentage = (int)(fixedRatio * 100);
                    tmpDto.WalmartQtyPrismCast = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualPrismCast, fixedRatio);
                    tmpDto.QtyAvailActualPrismCast = tmpDto.QtyAvailActualPrismCast - tmpDto.WalmartQtyPrismCast;
                  }

                  // Prism-Calt
                  if (tmpDto.QtyAvailActualPrismCalt > 0)
                  {
                    tmpDto.WalmartPrismCaltPercentage = (int)(fixedRatio * 100);
                    tmpDto.WalmartQtyPrismCalt = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualPrismCalt, fixedRatio);
                    tmpDto.QtyAvailActualPrismCalt = tmpDto.QtyAvailActualPrismCalt - tmpDto.WalmartQtyPrismCalt;
                  }*/

                  // Zinus-Tracy
                  if (tmpDto.QtyAvailActualZinusTracy > 0)
                  {
                    tmpDto.WalmartZinusTracyPercentage = (int)(fixedRatio * 100);
                    tmpDto.WalmartQtyZinusTracy = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualZinusTracy, fixedRatio);
                    tmpDto.QtyAvailActualZinusTracy = tmpDto.QtyAvailActualZinusTracy - tmpDto.WalmartQtyZinusTracy;
                  }

                  // Zinus-Chs
                  if (tmpDto.QtyAvailActualZinusChs > 0)
                  {
                    tmpDto.WalmartZinusChsPercentage = (int)(fixedRatio * 100);
                    tmpDto.WalmartQtyZinusChs = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualZinusChs, fixedRatio);
                    tmpDto.QtyAvailActualZinusChs = tmpDto.QtyAvailActualZinusChs - tmpDto.WalmartQtyZinusChs;
                  }
                } // End of Walmart
                else if (tmpIcr.MarketId == homeDepotMkId)
                {
                  // Banc
                  /*
                  if (tmpDto.QtyAvailActualBanc > 0)
                  {
                    tmpDto.HomeDepotBancPercentage = (int)(fixedRatio * 100);
                    tmpDto.HomeDepotQtyBanc = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualBanc, fixedRatio);
                    tmpDto.QtyAvailActualBanc = tmpDto.QtyAvailActualBanc - tmpDto.HomeDepotQtyBanc;
                  }

                  // Basc
                  if (tmpDto.QtyAvailActualBasc > 0)
                  {
                    tmpDto.HomeDepotBascPercentage = (int)(fixedRatio * 100);
                    tmpDto.HomeDepotQtyBasc = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualBasc, fixedRatio);
                    tmpDto.QtyAvailActualBasc = tmpDto.QtyAvailActualBasc - tmpDto.HomeDepotQtyBasc;
                  }*/

                  // MainSL
                  if (tmpDto.QtyAvailActualMainsl > 0)
                  {
                    tmpDto.HomeDepotMainslPercentage = (int)(fixedRatio * 100);
                    tmpDto.HomeDepotQtyMainsl = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualMainsl, fixedRatio);
                    tmpDto.QtyAvailActualMainsl = tmpDto.QtyAvailActualMainsl - tmpDto.HomeDepotQtyMainsl;
                  }
                  /*
                  // Swcaft
                  if (tmpDto.QtyAvailActualSWCAFT > 0)
                  {
                    tmpDto.HomeDepotSWCAFTPercentage = (int)(fixedRatio * 100);
                    tmpDto.HomeDepotQtySWCAFT = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualSWCAFT, fixedRatio);
                    tmpDto.QtyAvailActualSWCAFT = tmpDto.QtyAvailActualSWCAFT - tmpDto.HomeDepotQtySWCAFT;
                  }*/

                  // Prism-Cast
                  /*
                  if (tmpDto.QtyAvailActualPrismCast > 0)
                  {
                    tmpDto.HomeDepotPrismCastPercentage = (int)(fixedRatio * 100);
                    tmpDto.HomeDepotQtyPrismCast = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualPrismCast, fixedRatio);
                    tmpDto.QtyAvailActualPrismCast = tmpDto.QtyAvailActualPrismCast - tmpDto.HomeDepotQtyPrismCast;
                  }

                  // Prism-Calt
                  if (tmpDto.QtyAvailActualPrismCalt > 0)
                  {
                    tmpDto.HomeDepotPrismCaltPercentage = (int)(fixedRatio * 100);
                    tmpDto.HomeDepotQtyPrismCalt = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualPrismCalt, fixedRatio);
                    tmpDto.QtyAvailActualPrismCalt = tmpDto.QtyAvailActualPrismCalt - tmpDto.HomeDepotQtyPrismCalt;
                  }*/

                  // Zinus-Tracy
                  if (tmpDto.QtyAvailActualZinusTracy > 0)
                  {
                    tmpDto.HomeDepotZinusTracyPercentage = (int)(fixedRatio * 100);
                    tmpDto.HomeDepotQtyZinusTracy = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualZinusTracy, fixedRatio);
                    tmpDto.QtyAvailActualZinusTracy = tmpDto.QtyAvailActualZinusTracy - tmpDto.HomeDepotQtyZinusTracy;
                  }

                  // Zinus-Chs
                  if (tmpDto.QtyAvailActualZinusChs > 0)
                  {
                    tmpDto.HomeDepotZinusChsPercentage = (int)(fixedRatio * 100);
                    tmpDto.HomeDepotQtyZinusChs = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualZinusChs, fixedRatio);
                    tmpDto.QtyAvailActualZinusChs = tmpDto.QtyAvailActualZinusChs - tmpDto.HomeDepotQtyZinusChs;
                  }
                } // End of HomeDepot
                else if (tmpIcr.MarketId == targetMkId)
                {
                  // Banc
                  /*
                  if (tmpDto.QtyAvailActualBanc > 0)
                  {
                    tmpDto.TargetBancPercentage = (int)(fixedRatio * 100);
                    tmpDto.TargetQtyBanc = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualBanc, fixedRatio);
                    tmpDto.QtyAvailActualBanc = tmpDto.QtyAvailActualBanc - tmpDto.TargetQtyBanc;
                  }

                  // Basc
                  if (tmpDto.QtyAvailActualBasc > 0)
                  {
                    tmpDto.TargetBascPercentage = (int)(fixedRatio * 100);
                    tmpDto.TargetQtyBasc = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualBasc, fixedRatio);
                    tmpDto.QtyAvailActualBasc = tmpDto.QtyAvailActualBasc - tmpDto.TargetQtyBasc;
                  }*/

                  // MainSL
                  if (tmpDto.QtyAvailActualMainsl > 0)
                  {
                    tmpDto.TargetMainslPercentage = (int)(fixedRatio * 100);
                    tmpDto.TargetQtyMainsl = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualMainsl, fixedRatio);
                    tmpDto.QtyAvailActualMainsl = tmpDto.QtyAvailActualMainsl - tmpDto.TargetQtyMainsl;
                  }
                  /*
                  // Swcaft
                  if (tmpDto.QtyAvailActualSWCAFT > 0)
                  {
                    tmpDto.TargetSWCAFTPercentage = (int)(fixedRatio * 100);
                    tmpDto.TargetQtySWCAFT = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualSWCAFT, fixedRatio);
                    tmpDto.QtyAvailActualSWCAFT = tmpDto.QtyAvailActualSWCAFT - tmpDto.TargetQtySWCAFT;
                  }
                  */
                  // Prism-Cast
                  /*
                  if (tmpDto.QtyAvailActualPrismCast > 0)
                  {
                    tmpDto.TargetPrismCastPercentage = (int)(fixedRatio * 100);
                    tmpDto.TargetQtyPrismCast = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualPrismCast, fixedRatio);
                    tmpDto.QtyAvailActualPrismCast = tmpDto.QtyAvailActualPrismCast - tmpDto.TargetQtyPrismCast;
                  }

                  // Prism-Calt
                  if (tmpDto.QtyAvailActualPrismCalt > 0)
                  {
                    tmpDto.TargetPrismCaltPercentage = (int)(fixedRatio * 100);
                    tmpDto.TargetQtyPrismCalt = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualPrismCalt, fixedRatio);
                    tmpDto.QtyAvailActualPrismCalt = tmpDto.QtyAvailActualPrismCalt - tmpDto.TargetQtyPrismCalt;
                  }*/

                  // Zinus-Tracy
                  if (tmpDto.QtyAvailActualZinusTracy > 0)
                  {
                    tmpDto.TargetZinusTracyPercentage = (int)(fixedRatio * 100);
                    tmpDto.TargetQtyZinusTracy = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualZinusTracy, fixedRatio);
                    tmpDto.QtyAvailActualZinusTracy = tmpDto.QtyAvailActualZinusTracy - tmpDto.TargetQtyZinusTracy;
                  }

                  // Zinus-Chs
                  if (tmpDto.QtyAvailActualZinusChs > 0)
                  {
                    tmpDto.TargetZinusChsPercentage = (int)(fixedRatio * 100);
                    tmpDto.TargetQtyZinusChs = await OverflowQtyPreventor((double)tmpDto.QtyAvailActualZinusChs, fixedRatio);
                    tmpDto.QtyAvailActualZinusChs = tmpDto.QtyAvailActualZinusChs - tmpDto.TargetQtyZinusChs;
                  }
                } // End of Target
              }
            } // End of if
          } // End of foreach
        }// End of if
      } // End of foreach


      return inventoryFeedsItemDTOs;

    } // End of GetSlaveSkuMkIcrFeeding
    public async Task<GetInventoryFeedsItemDTO> CheckWayfairCGStockRule(int minimumQty, GetInventoryFeedsItemDTO inventoryFeedsItemDTO)
    {
      int wayfairMkId = 4;

      List<MkIcr> mkIcrs = await _kc.MkIcrs
        .Where(i => i.MarketId == wayfairMkId && i.ItemNoId == inventoryFeedsItemDTO.ItemNoId)
        .ToListAsync();

      //GetInventoryFeedsItemDTO tmpDto = new GetInventoryFeedsItemDTO();
      //if (inventoryFeedsItemDTO.ItemNoId == 1349)
      //{ Console.WriteLine("Here!");}


      foreach (MkIcr tmpIcr in mkIcrs)
      {
        if (inventoryFeedsItemDTO != null)
        {
          if (tmpIcr.WayfairCgstockRule.HasValue == true && tmpIcr.WayfairCgstockRule == true)
          {
            if (inventoryFeedsItemDTO.QtyAvailCGInv > minimumQty)
            { inventoryFeedsItemDTO.WayfairFeedable = false; }
            else
            { inventoryFeedsItemDTO.WayfairFeedable = true; }
          }
        }
      } // End of foreach

      return inventoryFeedsItemDTO;
    }

    public async Task<bool> SaveCurrentWarehousesStatus(long realTimeRepId, List<GetMainslBancInvItemDTO> inventoryItems)
    {
      List<InvFeedsCurrentStatus> currentStatuses = inventoryItems
        .Select(i => new InvFeedsCurrentStatus
        {
          RealTimeInvUpdateId = realTimeRepId,
          ItemNoId = i.ItemNoId,
          ItemName = i.ItemName,
          QtyAvailMainSl = i.QtyAvailMainsl,
          QtyOnHandMainSl = i.QtyOnHandMainsl,
          StagePomainSl = i.StagePOOrigMainsl,
          QtyAvailZinusTracy = i.QtyAvailZinusTracy,
          QtyOnHandZinusTracy = i.QtyOnHandZinusTracy,
          StagePozinusTracy = i.StagePOOrigZinusTracy,
          QtyAvailZinusChs = i.QtyAvailZinusChs,
          QtyOnHandZinusChs = i.QtyOnHandZinusChs,
          StagePozinusChs = i.StagePOOrigZinusChs
        })
        .ToList();

      await _kc.InvFeedsCurrentStatuses.AddRangeAsync(currentStatuses);
      await _kc.SaveChangesAsync();

      return true;
    }

    public async Task<List<FastMovingSkuDTO>> GetFastMovingSkus(int empId, DateTime today, string fromClick)
    {
      // testing!
      //today = DateTime.Now.AddDays(-2);

      List<FastMovingSkuDTO> serviceResponse = new List<FastMovingSkuDTO>();
      FastMovingSkuDTO tmpFstMvSkuDTO = new FastMovingSkuDTO();
      InvFeedsFstMvRepDetail tmpFstMvSku = new InvFeedsFstMvRepDetail();
      List<InvFeedsFstMvRepDetail> fstMvRepDetails = new List<InvFeedsFstMvRepDetail>();
      InvFeedsFstMvSkusReport fastMovingReport;
      List<InvFeedsCurrentStatus> currentStatuses = new List<InvFeedsCurrentStatus>();
      DateTime startDate = today.AddDays(-8);
      int totalQtyWH, totalQtySales, totalQtyStagePO, totalQty, totalDiff;
      string employeeLoginId = await _kc.Employees.Where(e => e.EmployeeId == empId).Select(e => e.LoginId).FirstOrDefaultAsync();
      bool reload = (fromClick.Contains("*") ? true : false);
      // Need to fix here!
      /* List<SoD> sods = await _kc.SoDs
         .Where(s => s.SoDate > startDate.AddDays(-1).Date && s.SoDate.Date < today.AddDays(1).Date)
         .Where(s => )
         .ToListAsync();
      */
      List<int> custIDs = new List<int>() { 5, 9, 12, 18, 21, 26, 29, 40, 51 };
      List<SoT> sots = await _kc.SoTs
        .Where(s => s.SoDate > startDate.AddDays(-1).Date && s.SoDate.Date < today.AddDays(1).Date)
        .Where(s => custIDs.Contains(s.CustomerId))
        .Include(s => s.SoDs)
        .ToListAsync();

      List<SoD> sods = new List<SoD>();
      foreach (SoT tmpModel in sots)
      { sods.AddRange(tmpModel.SoDs.ToList()); }

      DateTime beforeDate = new DateTime(today.AddDays(-1.0).Year, today.AddDays(-1.0).Month, today.AddDays(-1.0).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(today.AddDays(1.0).Year, today.AddDays(1.0).Month, today.AddDays(1.0).Day, 0, 0, 0);
      InvFeedsReport invFeedsReport = await (from x in _kc.InvFeedsReports
                                            .Where((InvFeedsReport ifr) => (DateTime)ifr.CreatedDate > beforeDate && (DateTime)ifr.CreatedDate < afterDate)
                                            .Include((InvFeedsReport x) => x.InvFeedsItems)
                                            .Include(x => x.InvFeedsReportItems)
                                             orderby x.CreatedDate descending
                                             select x).FirstOrDefaultAsync();

      // No Inventory Report: Get Inventory Updates from NetSuite
      if (invFeedsReport == null)
      {
        return serviceResponse; // Need InvFeedsReport FIRST!
      }

      // Need to think about new or replacing
      fastMovingReport = await _kc.InvFeedsFstMvSkusReports
        .Where(i => i.InvFeedsReportId == invFeedsReport.InvFeedsReportId)
        .Include(i => i.InvFeedsFstMvRepDetails)
        .FirstOrDefaultAsync();

      if ((fastMovingReport == null || fastMovingReport.InvFeedsFstMvRepDetails.Count == 0) && reload) // Create fast moving report
      {
        if (fastMovingReport == null)
        {
          fastMovingReport = new InvFeedsFstMvSkusReport()
          {
            ReportDate = today,
            ReportedBy = employeeLoginId,
            ReportedById = empId,
            EndDate = today,
            StartDate = startDate,
            InvFeedsReportId = invFeedsReport.InvFeedsReportId
          }; // Creating Report

          await _kc.InvFeedsFstMvSkusReports.AddAsync(fastMovingReport);
          await _kc.SaveChangesAsync();
        }
        currentStatuses = await _kc.InvFeedsCurrentStatuses
          .Where(i => i.RealTimeInvUpdateId == invFeedsReport.RealTimeInvUpdateId)
          .ToListAsync();

        foreach (InvFeedsCurrentStatus tmpModel in currentStatuses)
        {
          totalQtyWH = tmpModel.QtyAvailMainSl + tmpModel.QtyAvailZinusTracy + tmpModel.QtyAvailZinusChs;
          totalQtyStagePO = tmpModel.StagePomainSl + tmpModel.StagePozinusTracy + tmpModel.StagePozinusChs;
          totalQty = totalQtyWH - totalQtyStagePO;
          totalQtySales = (int)sods.Where(s => s.ItemNoId == tmpModel.ItemNoId).Sum(s => s.QtyInvoiced);
          totalDiff = totalQty - totalQtySales;

          if (totalDiff <= 15 && totalQtyWH > 0 && totalQtySales != 0 && totalQty != 0 && totalQtySales >= 5)
          {
            tmpFstMvSku = new InvFeedsFstMvRepDetail()
            {
              FstMvSkusRep = fastMovingReport,
              FstMvSkusRepId = fastMovingReport.FstMvSkusRepId,
              ItemNoId = tmpModel.ItemNoId,
              ItemName = tmpModel.ItemName,
              MainslQty = tmpModel.QtyAvailMainSl,
              MainslStagePoqty = tmpModel.StagePomainSl,
              ZinusTracyQty = tmpModel.QtyAvailZinusTracy,
              ZinusTracyStagePoqty = tmpModel.StagePozinusTracy,
              ZinusChsQty = tmpModel.QtyAvailZinusChs,
              ZinusChsStagePoqty = tmpModel.StagePozinusChs,
              TotalQty = totalQty,
              TotalStagePoqty = totalQtyStagePO,
              SoldQtyOfPast7Days = totalQtySales,
              IsIncludedInNotification = false

            };

            fstMvRepDetails.Add(tmpFstMvSku);
          }
        } // End of foreach
        await _kc.InvFeedsFstMvRepDetails.AddRangeAsync(fstMvRepDetails);
        await _kc.SaveChangesAsync();
      } // End of IF
      if (fastMovingReport != null)
      {
        serviceResponse = fastMovingReport.InvFeedsFstMvRepDetails
          .Select(i => new FastMovingSkuDTO
          {
            FstMvRepDetailId = i.FstMvRepDetailId,
            IsIncludedNotification = (bool)i.IsIncludedInNotification,
            ItemNoId = (int)i.ItemNoId,
            ItemName = i.ItemName,
            QtyAvailMainsl = (int)i.MainslQty - (int)i.MainslStagePoqty,
            StagePOQtyMainsl = (int)i.MainslStagePoqty,
            QtyAvailZinusTracy = (int)i.ZinusTracyQty - (int)i.ZinusTracyStagePoqty,
            StagePOQtyZinusTracy = (int)i.ZinusTracyQty,
            QtyAvailZinusChs = (int)i.ZinusChsQty - (int)i.ZinusChsStagePoqty,
            StagePOQtyZinusChs = (int)i.ZinusChsStagePoqty,
            TotalQty = (int)i.TotalQty - (int)i.TotalStagePoqty,
            TotalQtyStagePO = (int)i.TotalStagePoqty,
            TotalQtySales = (int)i.SoldQtyOfPast7Days

          }).ToList();
      }

      return serviceResponse;
    }

    public async Task<InvFeedsImportResponse> AutoFastMovingNotification(int empId, IUtilityService _utilService)
    {
      DateTime today = DateTime.Now;
      InvFeedsImportResponse serviceResponse = new InvFeedsImportResponse() { isOkay = true, errorMessages = new List<string>() };

      List<InvFeedsFstMvRepDetail> fstMvRepDetails = new List<InvFeedsFstMvRepDetail>();
      InvFeedsFstMvSkusReport fastMovingReport;

      DateTime beforeDate = new DateTime(today.AddDays(-1.0).Year, today.AddDays(-1.0).Month, today.AddDays(-1.0).Day, 23, 59, 59);
      DateTime afterDate = new DateTime(today.AddDays(1.0).Year, today.AddDays(1.0).Month, today.AddDays(1.0).Day, 0, 0, 0);
      InvFeedsReport invFeedsReport = await (from x in _kc.InvFeedsReports
                                            .Where((InvFeedsReport ifr) => (DateTime)ifr.CreatedDate > beforeDate && (DateTime)ifr.CreatedDate < afterDate)
                                            .Include((InvFeedsReport x) => x.InvFeedsItems)
                                            .Include(x => x.InvFeedsReportItems)
                                             orderby x.CreatedDate descending
                                             select x).FirstOrDefaultAsync();
      if (invFeedsReport == null)
      {
        serviceResponse.isOkay = false;
        //serviceResponse.errorMessages = "";
        return serviceResponse;
      }

      fastMovingReport = await _kc.InvFeedsFstMvSkusReports
       .Where(i => i.InvFeedsReportId == invFeedsReport.InvFeedsReportId)
       .Include(i => i.InvFeedsFstMvRepDetails)
       .FirstOrDefaultAsync();

      fstMvRepDetails = fastMovingReport.InvFeedsFstMvRepDetails
        .OrderByDescending(i => i.SoldQtyOfPast7Days)
        .ToList();

      //      fstMvRepDetails = fstMvRepDetails.OrderByDescending(i.SoldQtyOfPast7Days);

      List<ImportedFastMovingSKUDTO> impFastMovingSkus = fstMvRepDetails.Select(i => new ImportedFastMovingSKUDTO
      {
        sku = i.ItemName,
        isFlagged = "*"
      })
        .ToList();

      await DailyFastMovingSKUs(empId, impFastMovingSkus, _utilService);

      return serviceResponse;
    }

    public bool CheckSKURulePeriod(InvFeedsRuleSkumkt invFeedsRuleSkumkt)
    {
      bool serviceResponse = false;
      //DateTime today = DateTime.Now;
      DateOnly today = DateOnly.FromDateTime(DateTime.Now);
      DateOnly startDate, endDate;

      if (invFeedsRuleSkumkt.IsActivated == true)
      {
        serviceResponse = true;
        if (invFeedsRuleSkumkt.StartDate.HasValue)
        {
          startDate = DateOnly.FromDateTime((DateTime)invFeedsRuleSkumkt.StartDate);
          endDate = DateOnly.FromDateTime(((DateTime)invFeedsRuleSkumkt.EndDate).AddDays(-1));

          if (startDate <= today && today <= endDate)
          { serviceResponse = true; }
          else 
          { serviceResponse = false; }

        } // Has StartDate
      } // Activation Checking

      return serviceResponse;
    }

    public  GetInventoryFeedsItemDTO CheckWFS(InventoryConfig inventoryConfig, List<TplInvRptD> wfsRepDetails, GetInventoryFeedsItemDTO getInventoryFeedsItemDTO)
    {
      //TplInvRptD tmpDto = wfsRepDetails
      int isAvail = wfsRepDetails
        .Where(i => i.ItemNoId == getInventoryFeedsItemDTO.ItemNoId)
        .Where(i => i.QtyAvail > inventoryConfig.WfsvsWhsBufferQty)
        .Count();

      if (isAvail > 0)
      {
        getInventoryFeedsItemDTO.WalmartFeedable = false;
        if (getInventoryFeedsItemDTO.AppliedFeedingRuleNoMainsl == 9)
        { getInventoryFeedsItemDTO.AppliedFeedingRuleNoMainsl = 1; }

        if (getInventoryFeedsItemDTO.AppliedFeedingRuleNoZinusTracy == 9)
        { getInventoryFeedsItemDTO.AppliedFeedingRuleNoZinusTracy = 1; }

        if (getInventoryFeedsItemDTO.AppliedFeedingRuleNoZinusChs == 9)
        { getInventoryFeedsItemDTO.AppliedFeedingRuleNoZinusChs = 1; }

      } // End of return

      return getInventoryFeedsItemDTO;
    }
    /*
    public async Task<bool> SendEmail(int emailType, string titleOfEmail, string contentOfEmail)
    {
      List<EmailAddr> emailList = await _kc.Employees
      .Where(i => i.IsInventoryFeeder == true)
      .Select(n => new EmailAddr
        { LoginID = n.LoginId})
      .ToListAsync();

      string recipients = "";

      foreach (EmailAddr tmpDto in emailList)
      {
        if (recipients == "")
        { recipients = tmpDto.LoginID; }
        else
        { recipients = recipients + "," + tmpDto.LoginID; }
      }

      using (SmtpClient client = new SmtpClient()
      {
        Host = "smtp.office365.com",
        Port = 587,
        UseDefaultCredentials = false, // This require to be before setting Credentials property
        DeliveryMethod = SmtpDeliveryMethod.Network,
        Credentials = new NetworkCredential("bpmadmin@bpmatt.com", "Bpm@94577!"), // you must give a full email address for authentication 
        TargetName = "STARTTLS/smtp.office365.com", // Set to avoid MustIssueStartTlsFirst exception
        EnableSsl = true // Set to avoid secure connection exception
      })

      {
        MailMessage message = new MailMessage()
        {
          From = new MailAddress("bpmadmin@bpmatt.com"), // sender must be a full email address
          Subject = titleOfEmail,
          IsBodyHtml = true,
          Body = contentOfEmail,
          BodyEncoding = System.Text.Encoding.UTF8,
          SubjectEncoding = System.Text.Encoding.UTF8,

        };
        var toAddresses = recipients.Split(',');
        foreach (var to in toAddresses)
        {
          message.To.Add(to.Trim());
        }

        try
        {
          client.Send(message);
        }
        catch (Exception ex)
        {
          Debug.WriteLine(ex.Message);
        }
      }


      return true;
    }

    */



  }// End of class
}
